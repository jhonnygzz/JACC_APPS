# 1 "CMakeCUDACompilerId.cu"
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"
# 1
#pragma GCC diagnostic push
# 1
#pragma GCC diagnostic ignored "-Wunused-variable"
# 1
#pragma GCC diagnostic ignored "-Wunused-function"
# 1
static char __nv_inited_managed_rt = 0; static void **__nv_fatbinhandle_for_managed_rt; static void __nv_save_fatbinhandle_for_managed_rt(void **in){__nv_fatbinhandle_for_managed_rt = in;} static char __nv_init_managed_rt_with_module(void **); static inline void __nv_init_managed_rt(void) { __nv_inited_managed_rt = (__nv_inited_managed_rt ? __nv_inited_managed_rt                 : __nv_init_managed_rt_with_module(__nv_fatbinhandle_for_managed_rt));}
# 1
#pragma GCC diagnostic pop
# 1
#pragma GCC diagnostic ignored "-Wunused-variable"

# 1
# 1
# 61 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime.h" 3
#pragma GCC diagnostic push
# 64
#pragma GCC diagnostic ignored "-Wunused-function"
# 31 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef unsigned char __u_char; 
# 32
typedef unsigned short __u_short; 
# 33
typedef unsigned __u_int; 
# 34
typedef unsigned long __u_long; 
# 37
typedef signed char __int8_t; 
# 38
typedef unsigned char __uint8_t; 
# 39
typedef signed short __int16_t; 
# 40
typedef unsigned short __uint16_t; 
# 41
typedef signed int __int32_t; 
# 42
typedef unsigned __uint32_t; 
# 44
typedef signed long __int64_t; 
# 45
typedef unsigned long __uint64_t; 
# 52
typedef __int8_t __int_least8_t; 
# 53
typedef __uint8_t __uint_least8_t; 
# 54
typedef __int16_t __int_least16_t; 
# 55
typedef __uint16_t __uint_least16_t; 
# 56
typedef __int32_t __int_least32_t; 
# 57
typedef __uint32_t __uint_least32_t; 
# 58
typedef __int64_t __int_least64_t; 
# 59
typedef __uint64_t __uint_least64_t; 
# 63
typedef long __quad_t; 
# 64
typedef unsigned long __u_quad_t; 
# 72
typedef long __intmax_t; 
# 73
typedef unsigned long __uintmax_t; 
# 145 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef unsigned long __dev_t; 
# 146
typedef unsigned __uid_t; 
# 147
typedef unsigned __gid_t; 
# 148
typedef unsigned long __ino_t; 
# 149
typedef unsigned long __ino64_t; 
# 150
typedef unsigned __mode_t; 
# 151
typedef unsigned long __nlink_t; 
# 152
typedef long __off_t; 
# 153
typedef long __off64_t; 
# 154
typedef int __pid_t; 
# 155
typedef struct { int __val[2]; } __fsid_t; 
# 156
typedef long __clock_t; 
# 157
typedef unsigned long __rlim_t; 
# 158
typedef unsigned long __rlim64_t; 
# 159
typedef unsigned __id_t; 
# 160
typedef long __time_t; 
# 161
typedef unsigned __useconds_t; 
# 162
typedef long __suseconds_t; 
# 163
typedef long __suseconds64_t; 
# 165
typedef int __daddr_t; 
# 166
typedef int __key_t; 
# 169
typedef int __clockid_t; 
# 172
typedef void *__timer_t; 
# 175
typedef long __blksize_t; 
# 180
typedef long __blkcnt_t; 
# 181
typedef long __blkcnt64_t; 
# 184
typedef unsigned long __fsblkcnt_t; 
# 185
typedef unsigned long __fsblkcnt64_t; 
# 188
typedef unsigned long __fsfilcnt_t; 
# 189
typedef unsigned long __fsfilcnt64_t; 
# 192
typedef long __fsword_t; 
# 194
typedef long __ssize_t; 
# 197
typedef long __syscall_slong_t; 
# 199
typedef unsigned long __syscall_ulong_t; 
# 203
typedef __off64_t __loff_t; 
# 204
typedef char *__caddr_t; 
# 207
typedef long __intptr_t; 
# 210
typedef unsigned __socklen_t; 
# 215
typedef int __sig_atomic_t; 
# 28 "/usr/include/ctype.h" 3
extern "C" {
# 47 "/usr/include/ctype.h" 3
enum { 
# 48
_ISupper = ((0 < 8) ? (1 << 0) << 8 : ((1 << 0) >> 8)), 
# 49
_ISlower = ((1 < 8) ? (1 << 1) << 8 : ((1 << 1) >> 8)), 
# 50
_ISalpha = ((2 < 8) ? (1 << 2) << 8 : ((1 << 2) >> 8)), 
# 51
_ISdigit = ((3 < 8) ? (1 << 3) << 8 : ((1 << 3) >> 8)), 
# 52
_ISxdigit = ((4 < 8) ? (1 << 4) << 8 : ((1 << 4) >> 8)), 
# 53
_ISspace = ((5 < 8) ? (1 << 5) << 8 : ((1 << 5) >> 8)), 
# 54
_ISprint = ((6 < 8) ? (1 << 6) << 8 : ((1 << 6) >> 8)), 
# 55
_ISgraph = ((7 < 8) ? (1 << 7) << 8 : ((1 << 7) >> 8)), 
# 56
_ISblank = ((8 < 8) ? (1 << 8) << 8 : ((1 << 8) >> 8)), 
# 57
_IScntrl, 
# 58
_ISpunct = ((10 < 8) ? (1 << 10) << 8 : ((1 << 10) >> 8)), 
# 59
_ISalnum = ((11 < 8) ? (1 << 11) << 8 : ((1 << 11) >> 8))
# 60
}; 
# 79 "/usr/include/ctype.h" 3
extern const unsigned short **__ctype_b_loc() noexcept(true)
# 80
 __attribute((const)); 
# 81
extern const __int32_t **__ctype_tolower_loc() noexcept(true)
# 82
 __attribute((const)); 
# 83
extern const __int32_t **__ctype_toupper_loc() noexcept(true)
# 84
 __attribute((const)); 
# 108 "/usr/include/ctype.h" 3
extern int isalnum(int) noexcept(true); 
# 109
extern int isalpha(int) noexcept(true); 
# 110
extern int iscntrl(int) noexcept(true); 
# 111
extern int isdigit(int) noexcept(true); 
# 112
extern int islower(int) noexcept(true); 
# 113
extern int isgraph(int) noexcept(true); 
# 114
extern int isprint(int) noexcept(true); 
# 115
extern int ispunct(int) noexcept(true); 
# 116
extern int isspace(int) noexcept(true); 
# 117
extern int isupper(int) noexcept(true); 
# 118
extern int isxdigit(int) noexcept(true); 
# 122
extern int tolower(int __c) noexcept(true); 
# 125
extern int toupper(int __c) noexcept(true); 
# 130
extern int isblank(int) noexcept(true); 
# 135
extern int isctype(int __c, int __mask) noexcept(true); 
# 142
extern int isascii(int __c) noexcept(true); 
# 146
extern int toascii(int __c) noexcept(true); 
# 150
extern int _toupper(int) noexcept(true); 
# 151
extern int _tolower(int) noexcept(true); 
# 27 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 3
struct __locale_struct { 
# 30
struct __locale_data *__locales[13]; 
# 33
const unsigned short *__ctype_b; 
# 34
const int *__ctype_tolower; 
# 35
const int *__ctype_toupper; 
# 38
const char *__names[13]; 
# 39
}; 
# 41
typedef __locale_struct *__locale_t; 
# 24 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 3
typedef __locale_t locale_t; 
# 251 "/usr/include/ctype.h" 3
extern int isalnum_l(int, locale_t) noexcept(true); 
# 252
extern int isalpha_l(int, locale_t) noexcept(true); 
# 253
extern int iscntrl_l(int, locale_t) noexcept(true); 
# 254
extern int isdigit_l(int, locale_t) noexcept(true); 
# 255
extern int islower_l(int, locale_t) noexcept(true); 
# 256
extern int isgraph_l(int, locale_t) noexcept(true); 
# 257
extern int isprint_l(int, locale_t) noexcept(true); 
# 258
extern int ispunct_l(int, locale_t) noexcept(true); 
# 259
extern int isspace_l(int, locale_t) noexcept(true); 
# 260
extern int isupper_l(int, locale_t) noexcept(true); 
# 261
extern int isxdigit_l(int, locale_t) noexcept(true); 
# 263
extern int isblank_l(int, locale_t) noexcept(true); 
# 267
extern int __tolower_l(int __c, locale_t __l) noexcept(true); 
# 268
extern int tolower_l(int __c, locale_t __l) noexcept(true); 
# 271
extern int __toupper_l(int __c, locale_t __l) noexcept(true); 
# 272
extern int toupper_l(int __c, locale_t __l) noexcept(true); 
# 327 "/usr/include/ctype.h" 3
}
# 68 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/device_types.h" 3
#if 0
# 68
enum cudaRoundMode { 
# 70
cudaRoundNearest, 
# 71
cudaRoundZero, 
# 72
cudaRoundPosInf, 
# 73
cudaRoundMinInf
# 74
}; 
#endif
# 104 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
# 104
struct char1 { 
# 106
signed char x; 
# 107
}; 
#endif
# 109 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
# 109
struct uchar1 { 
# 111
unsigned char x; 
# 112
}; 
#endif
# 115 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
# 115
struct __attribute((aligned(2))) char2 { 
# 117
signed char x, y; 
# 118
}; 
#endif
# 120 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
# 120
struct __attribute((aligned(2))) uchar2 { 
# 122
unsigned char x, y; 
# 123
}; 
#endif
# 125 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
# 125
struct char3 { 
# 127
signed char x, y, z; 
# 128
}; 
#endif
# 130 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
# 130
struct uchar3 { 
# 132
unsigned char x, y, z; 
# 133
}; 
#endif
# 135 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
# 135
struct __attribute((aligned(4))) char4 { 
# 137
signed char x, y, z, w; 
# 138
}; 
#endif
# 140 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
# 140
struct __attribute((aligned(4))) uchar4 { 
# 142
unsigned char x, y, z, w; 
# 143
}; 
#endif
# 145 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
# 145
struct short1 { 
# 147
short x; 
# 148
}; 
#endif
# 150 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
# 150
struct ushort1 { 
# 152
unsigned short x; 
# 153
}; 
#endif
# 155 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
# 155
struct __attribute((aligned(4))) short2 { 
# 157
short x, y; 
# 158
}; 
#endif
# 160 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
# 160
struct __attribute((aligned(4))) ushort2 { 
# 162
unsigned short x, y; 
# 163
}; 
#endif
# 165 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
# 165
struct short3 { 
# 167
short x, y, z; 
# 168
}; 
#endif
# 170 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
# 170
struct ushort3 { 
# 172
unsigned short x, y, z; 
# 173
}; 
#endif
# 175 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
# 175
struct __attribute((aligned(8))) short4 { short x; short y; short z; short w; }; 
#endif
# 176 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
# 176
struct __attribute((aligned(8))) ushort4 { unsigned short x; unsigned short y; unsigned short z; unsigned short w; }; 
#endif
# 178 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
# 178
struct int1 { 
# 180
int x; 
# 181
}; 
#endif
# 183 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
# 183
struct uint1 { 
# 185
unsigned x; 
# 186
}; 
#endif
# 188 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
# 188
struct __attribute((aligned(8))) int2 { int x; int y; }; 
#endif
# 189 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
# 189
struct __attribute((aligned(8))) uint2 { unsigned x; unsigned y; }; 
#endif
# 191 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
# 191
struct int3 { 
# 193
int x, y, z; 
# 194
}; 
#endif
# 196 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
# 196
struct uint3 { 
# 198
unsigned x, y, z; 
# 199
}; 
#endif
# 201 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
# 201
struct __attribute((aligned(16))) int4 { 
# 203
int x, y, z, w; 
# 204
}; 
#endif
# 206 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
# 206
struct __attribute((aligned(16))) uint4 { 
# 208
unsigned x, y, z, w; 
# 209
}; 
#endif
# 211 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
# 211
struct long1 { 
# 213
long x; 
# 214
}; 
#endif
# 216 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
# 216
struct ulong1 { 
# 218
unsigned long x; 
# 219
}; 
#endif
# 226 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
# 226
struct __attribute((aligned((2) * sizeof(long)))) long2 { 
# 228
long x, y; 
# 229
}; 
#endif
# 231 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
# 231
struct __attribute((aligned((2) * sizeof(unsigned long)))) ulong2 { 
# 233
unsigned long x, y; 
# 234
}; 
#endif
# 238 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
# 238
struct long3 { 
# 240
long x, y, z; 
# 241
}; 
#endif
# 243 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
# 243
struct ulong3 { 
# 245
unsigned long x, y, z; 
# 246
}; 
#endif
# 248 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
# 248
struct __attribute((aligned(16))) long4 { 
# 250
long x, y, z, w; 
# 251
}; 
#endif
# 253 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
# 253
struct __attribute((aligned(16))) ulong4 { 
# 255
unsigned long x, y, z, w; 
# 256
}; 
#endif
# 258 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
# 258
struct float1 { 
# 260
float x; 
# 261
}; 
#endif
# 280 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
# 280
struct __attribute((aligned(8))) float2 { float x; float y; }; 
#endif
# 285 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
# 285
struct float3 { 
# 287
float x, y, z; 
# 288
}; 
#endif
# 290 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
# 290
struct __attribute((aligned(16))) float4 { 
# 292
float x, y, z, w; 
# 293
}; 
#endif
# 295 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
# 295
struct longlong1 { 
# 297
long long x; 
# 298
}; 
#endif
# 300 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
# 300
struct ulonglong1 { 
# 302
unsigned long long x; 
# 303
}; 
#endif
# 305 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
# 305
struct __attribute((aligned(16))) longlong2 { 
# 307
long long x, y; 
# 308
}; 
#endif
# 310 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
# 310
struct __attribute((aligned(16))) ulonglong2 { 
# 312
unsigned long long x, y; 
# 313
}; 
#endif
# 315 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
# 315
struct longlong3 { 
# 317
long long x, y, z; 
# 318
}; 
#endif
# 320 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
# 320
struct ulonglong3 { 
# 322
unsigned long long x, y, z; 
# 323
}; 
#endif
# 325 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
# 325
struct __attribute((aligned(16))) longlong4 { 
# 327
long long x, y, z, w; 
# 328
}; 
#endif
# 330 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
# 330
struct __attribute((aligned(16))) ulonglong4 { 
# 332
unsigned long long x, y, z, w; 
# 333
}; 
#endif
# 335 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
# 335
struct double1 { 
# 337
double x; 
# 338
}; 
#endif
# 340 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
# 340
struct __attribute((aligned(16))) double2 { 
# 342
double x, y; 
# 343
}; 
#endif
# 345 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
# 345
struct double3 { 
# 347
double x, y, z; 
# 348
}; 
#endif
# 350 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
# 350
struct __attribute((aligned(16))) double4 { 
# 352
double x, y, z, w; 
# 353
}; 
#endif
# 367 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
typedef char1 
# 367
char1; 
#endif
# 368 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
typedef uchar1 
# 368
uchar1; 
#endif
# 369 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
typedef char2 
# 369
char2; 
#endif
# 370 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
typedef uchar2 
# 370
uchar2; 
#endif
# 371 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
typedef char3 
# 371
char3; 
#endif
# 372 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
typedef uchar3 
# 372
uchar3; 
#endif
# 373 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
typedef char4 
# 373
char4; 
#endif
# 374 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
typedef uchar4 
# 374
uchar4; 
#endif
# 375 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
typedef short1 
# 375
short1; 
#endif
# 376 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
typedef ushort1 
# 376
ushort1; 
#endif
# 377 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
typedef short2 
# 377
short2; 
#endif
# 378 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
typedef ushort2 
# 378
ushort2; 
#endif
# 379 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
typedef short3 
# 379
short3; 
#endif
# 380 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
typedef ushort3 
# 380
ushort3; 
#endif
# 381 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
typedef short4 
# 381
short4; 
#endif
# 382 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
typedef ushort4 
# 382
ushort4; 
#endif
# 383 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
typedef int1 
# 383
int1; 
#endif
# 384 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
typedef uint1 
# 384
uint1; 
#endif
# 385 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
typedef int2 
# 385
int2; 
#endif
# 386 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
typedef uint2 
# 386
uint2; 
#endif
# 387 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
typedef int3 
# 387
int3; 
#endif
# 388 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
typedef uint3 
# 388
uint3; 
#endif
# 389 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
typedef int4 
# 389
int4; 
#endif
# 390 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
typedef uint4 
# 390
uint4; 
#endif
# 391 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
typedef long1 
# 391
long1; 
#endif
# 392 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
typedef ulong1 
# 392
ulong1; 
#endif
# 393 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
typedef long2 
# 393
long2; 
#endif
# 394 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
typedef ulong2 
# 394
ulong2; 
#endif
# 395 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
typedef long3 
# 395
long3; 
#endif
# 396 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
typedef ulong3 
# 396
ulong3; 
#endif
# 397 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
typedef long4 
# 397
long4; 
#endif
# 398 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
typedef ulong4 
# 398
ulong4; 
#endif
# 399 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
typedef float1 
# 399
float1; 
#endif
# 400 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
typedef float2 
# 400
float2; 
#endif
# 401 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
typedef float3 
# 401
float3; 
#endif
# 402 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
typedef float4 
# 402
float4; 
#endif
# 403 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
typedef longlong1 
# 403
longlong1; 
#endif
# 404 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
typedef ulonglong1 
# 404
ulonglong1; 
#endif
# 405 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
typedef longlong2 
# 405
longlong2; 
#endif
# 406 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
typedef ulonglong2 
# 406
ulonglong2; 
#endif
# 407 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
typedef longlong3 
# 407
longlong3; 
#endif
# 408 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
typedef ulonglong3 
# 408
ulonglong3; 
#endif
# 409 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
typedef longlong4 
# 409
longlong4; 
#endif
# 410 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
typedef ulonglong4 
# 410
ulonglong4; 
#endif
# 411 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
typedef double1 
# 411
double1; 
#endif
# 412 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
typedef double2 
# 412
double2; 
#endif
# 413 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
typedef double3 
# 413
double3; 
#endif
# 414 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
typedef double4 
# 414
double4; 
#endif
# 426 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
# 426
struct dim3 { 
# 428
unsigned x, y, z; 
# 440
}; 
#endif
# 442 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_types.h" 3
#if 0
typedef dim3 
# 442
dim3; 
#endif
# 23 "/usr/include/x86_64-linux-gnu/bits/pthread_stack_min-dynamic.h" 3
extern "C" {
# 24
extern long __sysconf(int __name) noexcept(true); 
# 25
}
# 143 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 3
typedef long ptrdiff_t; 
# 209 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 3
typedef unsigned long size_t; 
#if !defined(__CUDA_INCLUDE_COMPILER_INTERNAL_HEADERS__)
#define __CUDA_INCLUDE_COMPILER_INTERNAL_HEADERS__
#endif
#include "crt/host_runtime.h"
# 426 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 3
typedef 
# 415 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 3
struct { 
# 416
long long __max_align_ll __attribute((__aligned__(__alignof__(long long)))); 
# 417
long double __max_align_ld __attribute((__aligned__(__alignof__(long double)))); 
# 426 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 3
} max_align_t; 
# 433
typedef __decltype((nullptr)) nullptr_t; 
# 205 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 205
enum cudaError { 
# 212
cudaSuccess, 
# 218
cudaErrorInvalidValue, 
# 224
cudaErrorMemoryAllocation, 
# 230
cudaErrorInitializationError, 
# 237
cudaErrorCudartUnloading, 
# 244
cudaErrorProfilerDisabled, 
# 252
cudaErrorProfilerNotInitialized, 
# 259
cudaErrorProfilerAlreadyStarted, 
# 266
cudaErrorProfilerAlreadyStopped, 
# 274
cudaErrorInvalidConfiguration, 
# 280
cudaErrorInvalidPitchValue = 12, 
# 286
cudaErrorInvalidSymbol, 
# 294
cudaErrorInvalidHostPointer = 16, 
# 302
cudaErrorInvalidDevicePointer, 
# 307
cudaErrorInvalidTexture, 
# 313
cudaErrorInvalidTextureBinding, 
# 320
cudaErrorInvalidChannelDescriptor, 
# 326
cudaErrorInvalidMemcpyDirection, 
# 336 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
cudaErrorAddressOfConstant, 
# 345 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
cudaErrorTextureFetchFailed, 
# 354 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
cudaErrorTextureNotBound, 
# 363 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
cudaErrorSynchronizationError, 
# 368
cudaErrorInvalidFilterSetting, 
# 374
cudaErrorInvalidNormSetting, 
# 382
cudaErrorMixedDeviceExecution, 
# 390
cudaErrorNotYetImplemented = 31, 
# 399 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
cudaErrorMemoryValueTooLarge, 
# 405
cudaErrorStubLibrary = 34, 
# 412
cudaErrorInsufficientDriver, 
# 419
cudaErrorCallRequiresNewerDriver, 
# 425
cudaErrorInvalidSurface, 
# 431
cudaErrorDuplicateVariableName = 43, 
# 437
cudaErrorDuplicateTextureName, 
# 443
cudaErrorDuplicateSurfaceName, 
# 453 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
cudaErrorDevicesUnavailable, 
# 466 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
cudaErrorIncompatibleDriverContext = 49, 
# 472
cudaErrorMissingConfiguration = 52, 
# 481 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
cudaErrorPriorLaunchFailure, 
# 487
cudaErrorLaunchMaxDepthExceeded = 65, 
# 495
cudaErrorLaunchFileScopedTex, 
# 503
cudaErrorLaunchFileScopedSurf, 
# 519 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
cudaErrorSyncDepthExceeded, 
# 531 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
cudaErrorLaunchPendingCountExceeded, 
# 537
cudaErrorInvalidDeviceFunction = 98, 
# 543
cudaErrorNoDevice = 100, 
# 550
cudaErrorInvalidDevice, 
# 555
cudaErrorDeviceNotLicensed, 
# 564 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
cudaErrorSoftwareValidityNotEstablished, 
# 569
cudaErrorStartupFailure = 127, 
# 574
cudaErrorInvalidKernelImage = 200, 
# 584 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
cudaErrorDeviceUninitialized, 
# 589
cudaErrorMapBufferObjectFailed = 205, 
# 594
cudaErrorUnmapBufferObjectFailed, 
# 600
cudaErrorArrayIsMapped, 
# 605
cudaErrorAlreadyMapped, 
# 613
cudaErrorNoKernelImageForDevice, 
# 618
cudaErrorAlreadyAcquired, 
# 623
cudaErrorNotMapped, 
# 629
cudaErrorNotMappedAsArray, 
# 635
cudaErrorNotMappedAsPointer, 
# 641
cudaErrorECCUncorrectable, 
# 647
cudaErrorUnsupportedLimit, 
# 653
cudaErrorDeviceAlreadyInUse, 
# 659
cudaErrorPeerAccessUnsupported, 
# 665
cudaErrorInvalidPtx, 
# 670
cudaErrorInvalidGraphicsContext, 
# 676
cudaErrorNvlinkUncorrectable, 
# 683
cudaErrorJitCompilerNotFound, 
# 690
cudaErrorUnsupportedPtxVersion, 
# 697
cudaErrorJitCompilationDisabled, 
# 702
cudaErrorUnsupportedExecAffinity, 
# 708
cudaErrorUnsupportedDevSideSync, 
# 713
cudaErrorInvalidSource = 300, 
# 718
cudaErrorFileNotFound, 
# 723
cudaErrorSharedObjectSymbolNotFound, 
# 728
cudaErrorSharedObjectInitFailed, 
# 733
cudaErrorOperatingSystem, 
# 740
cudaErrorInvalidResourceHandle = 400, 
# 746
cudaErrorIllegalState, 
# 754
cudaErrorLossyQuery, 
# 761
cudaErrorSymbolNotFound = 500, 
# 769
cudaErrorNotReady = 600, 
# 777
cudaErrorIllegalAddress = 700, 
# 786 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
cudaErrorLaunchOutOfResources, 
# 797 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
cudaErrorLaunchTimeout, 
# 803
cudaErrorLaunchIncompatibleTexturing, 
# 810
cudaErrorPeerAccessAlreadyEnabled, 
# 817
cudaErrorPeerAccessNotEnabled, 
# 830 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
cudaErrorSetOnActiveProcess = 708, 
# 837
cudaErrorContextIsDestroyed, 
# 844
cudaErrorAssert, 
# 851
cudaErrorTooManyPeers, 
# 857
cudaErrorHostMemoryAlreadyRegistered, 
# 863
cudaErrorHostMemoryNotRegistered, 
# 872 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
cudaErrorHardwareStackError, 
# 880
cudaErrorIllegalInstruction, 
# 889 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
cudaErrorMisalignedAddress, 
# 900 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
cudaErrorInvalidAddressSpace, 
# 908
cudaErrorInvalidPc, 
# 919 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
cudaErrorLaunchFailure, 
# 928 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
cudaErrorCooperativeLaunchTooLarge, 
# 933
cudaErrorNotPermitted = 800, 
# 939
cudaErrorNotSupported, 
# 948 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
cudaErrorSystemNotReady, 
# 955
cudaErrorSystemDriverMismatch, 
# 964 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
cudaErrorCompatNotSupportedOnDevice, 
# 969
cudaErrorMpsConnectionFailed, 
# 974
cudaErrorMpsRpcFailure, 
# 980
cudaErrorMpsServerNotReady, 
# 985
cudaErrorMpsMaxClientsReached, 
# 990
cudaErrorMpsMaxConnectionsReached, 
# 995
cudaErrorMpsClientTerminated, 
# 1000
cudaErrorCdpNotSupported, 
# 1005
cudaErrorCdpVersionMismatch, 
# 1010
cudaErrorStreamCaptureUnsupported = 900, 
# 1016
cudaErrorStreamCaptureInvalidated, 
# 1022
cudaErrorStreamCaptureMerge, 
# 1027
cudaErrorStreamCaptureUnmatched, 
# 1033
cudaErrorStreamCaptureUnjoined, 
# 1040
cudaErrorStreamCaptureIsolation, 
# 1046
cudaErrorStreamCaptureImplicit, 
# 1052
cudaErrorCapturedEvent, 
# 1059
cudaErrorStreamCaptureWrongThread, 
# 1064
cudaErrorTimeout, 
# 1070
cudaErrorGraphExecUpdateFailure, 
# 1080 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
cudaErrorExternalDevice, 
# 1086
cudaErrorInvalidClusterSize, 
# 1092
cudaErrorFunctionNotLoaded, 
# 1098
cudaErrorInvalidResourceType, 
# 1104
cudaErrorInvalidResourceConfiguration, 
# 1109
cudaErrorUnknown = 999, 
# 1117
cudaErrorApiFailureBase = 10000
# 1118
}; 
#endif
# 1123 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 1123
enum cudaChannelFormatKind { 
# 1125
cudaChannelFormatKindSigned, 
# 1126
cudaChannelFormatKindUnsigned, 
# 1127
cudaChannelFormatKindFloat, 
# 1128
cudaChannelFormatKindNone, 
# 1129
cudaChannelFormatKindNV12, 
# 1130
cudaChannelFormatKindUnsignedNormalized8X1, 
# 1131
cudaChannelFormatKindUnsignedNormalized8X2, 
# 1132
cudaChannelFormatKindUnsignedNormalized8X4, 
# 1133
cudaChannelFormatKindUnsignedNormalized16X1, 
# 1134
cudaChannelFormatKindUnsignedNormalized16X2, 
# 1135
cudaChannelFormatKindUnsignedNormalized16X4, 
# 1136
cudaChannelFormatKindSignedNormalized8X1, 
# 1137
cudaChannelFormatKindSignedNormalized8X2, 
# 1138
cudaChannelFormatKindSignedNormalized8X4, 
# 1139
cudaChannelFormatKindSignedNormalized16X1, 
# 1140
cudaChannelFormatKindSignedNormalized16X2, 
# 1141
cudaChannelFormatKindSignedNormalized16X4, 
# 1142
cudaChannelFormatKindUnsignedBlockCompressed1, 
# 1143
cudaChannelFormatKindUnsignedBlockCompressed1SRGB, 
# 1144
cudaChannelFormatKindUnsignedBlockCompressed2, 
# 1145
cudaChannelFormatKindUnsignedBlockCompressed2SRGB, 
# 1146
cudaChannelFormatKindUnsignedBlockCompressed3, 
# 1147
cudaChannelFormatKindUnsignedBlockCompressed3SRGB, 
# 1148
cudaChannelFormatKindUnsignedBlockCompressed4, 
# 1149
cudaChannelFormatKindSignedBlockCompressed4, 
# 1150
cudaChannelFormatKindUnsignedBlockCompressed5, 
# 1151
cudaChannelFormatKindSignedBlockCompressed5, 
# 1152
cudaChannelFormatKindUnsignedBlockCompressed6H, 
# 1153
cudaChannelFormatKindSignedBlockCompressed6H, 
# 1154
cudaChannelFormatKindUnsignedBlockCompressed7, 
# 1155
cudaChannelFormatKindUnsignedBlockCompressed7SRGB
# 1156
}; 
#endif
# 1161 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 1161
struct cudaChannelFormatDesc { 
# 1163
int x; 
# 1164
int y; 
# 1165
int z; 
# 1166
int w; 
# 1167
cudaChannelFormatKind f; 
# 1168
}; 
#endif
# 1173 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
typedef struct cudaArray *cudaArray_t; 
# 1178
typedef const cudaArray *cudaArray_const_t; 
# 1180
struct cudaArray; 
# 1185
typedef struct cudaMipmappedArray *cudaMipmappedArray_t; 
# 1190
typedef const cudaMipmappedArray *cudaMipmappedArray_const_t; 
# 1192
struct cudaMipmappedArray; 
# 1202 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 1202
struct cudaArraySparseProperties { 
# 1203
struct { 
# 1204
unsigned width; 
# 1205
unsigned height; 
# 1206
unsigned depth; 
# 1207
} tileExtent; 
# 1208
unsigned miptailFirstLevel; 
# 1209
unsigned long long miptailSize; 
# 1210
unsigned flags; 
# 1211
unsigned reserved[4]; 
# 1212
}; 
#endif
# 1217 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 1217
struct cudaArrayMemoryRequirements { 
# 1218
size_t size; 
# 1219
size_t alignment; 
# 1220
unsigned reserved[4]; 
# 1221
}; 
#endif
# 1226 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 1226
enum cudaMemoryType { 
# 1228
cudaMemoryTypeUnregistered, 
# 1229
cudaMemoryTypeHost, 
# 1230
cudaMemoryTypeDevice, 
# 1231
cudaMemoryTypeManaged
# 1232
}; 
#endif
# 1237 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 1237
enum cudaMemcpyKind { 
# 1239
cudaMemcpyHostToHost, 
# 1240
cudaMemcpyHostToDevice, 
# 1241
cudaMemcpyDeviceToHost, 
# 1242
cudaMemcpyDeviceToDevice, 
# 1243
cudaMemcpyDefault
# 1244
}; 
#endif
# 1251 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 1251
struct cudaPitchedPtr { 
# 1253
void *ptr; 
# 1254
size_t pitch; 
# 1255
size_t xsize; 
# 1256
size_t ysize; 
# 1257
}; 
#endif
# 1264 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 1264
struct cudaExtent { 
# 1266
size_t width; 
# 1267
size_t height; 
# 1268
size_t depth; 
# 1269
}; 
#endif
# 1276 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 1276
struct cudaPos { 
# 1278
size_t x; 
# 1279
size_t y; 
# 1280
size_t z; 
# 1281
}; 
#endif
# 1286 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 1286
struct cudaMemcpy3DParms { 
# 1288
cudaArray_t srcArray; 
# 1289
cudaPos srcPos; 
# 1290
cudaPitchedPtr srcPtr; 
# 1292
cudaArray_t dstArray; 
# 1293
cudaPos dstPos; 
# 1294
cudaPitchedPtr dstPtr; 
# 1296
cudaExtent extent; 
# 1297
cudaMemcpyKind kind; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 1298
}; 
#endif
# 1303 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 1303
struct cudaMemcpyNodeParams { 
# 1304
int flags; 
# 1305
int reserved[3]; 
# 1306
cudaMemcpy3DParms copyParams; 
# 1307
}; 
#endif
# 1312 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 1312
struct cudaMemcpy3DPeerParms { 
# 1314
cudaArray_t srcArray; 
# 1315
cudaPos srcPos; 
# 1316
cudaPitchedPtr srcPtr; 
# 1317
int srcDevice; 
# 1319
cudaArray_t dstArray; 
# 1320
cudaPos dstPos; 
# 1321
cudaPitchedPtr dstPtr; 
# 1322
int dstDevice; 
# 1324
cudaExtent extent; 
# 1325
}; 
#endif
# 1330 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 1330
struct cudaMemsetParams { 
# 1331
void *dst; 
# 1332
size_t pitch; 
# 1333
unsigned value; 
# 1334
unsigned elementSize; 
# 1335
size_t width; 
# 1336
size_t height; 
# 1337
}; 
#endif
# 1342 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 1342
struct cudaMemsetParamsV2 { 
# 1343
void *dst; 
# 1344
size_t pitch; 
# 1345
unsigned value; 
# 1346
unsigned elementSize; 
# 1347
size_t width; 
# 1348
size_t height; 
# 1349
}; 
#endif
# 1354 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 1354
enum cudaAccessProperty { 
# 1355
cudaAccessPropertyNormal, 
# 1356
cudaAccessPropertyStreaming, 
# 1357
cudaAccessPropertyPersisting
# 1358
}; 
#endif
# 1371 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 1371
struct cudaAccessPolicyWindow { 
# 1372
void *base_ptr; 
# 1373
size_t num_bytes; 
# 1374
float hitRatio; 
# 1375
cudaAccessProperty hitProp; 
# 1376
cudaAccessProperty missProp; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 1377
}; 
#endif
# 1389 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
typedef void (*cudaHostFn_t)(void * userData); 
# 1394
#if 0
# 1394
struct cudaHostNodeParams { 
# 1395
cudaHostFn_t fn; 
# 1396
void *userData; 
# 1397
}; 
#endif
# 1402 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 1402
struct cudaHostNodeParamsV2 { 
# 1403
cudaHostFn_t fn; 
# 1404
void *userData; 
# 1405
}; 
#endif
# 1410 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 1410
enum cudaStreamCaptureStatus { 
# 1411
cudaStreamCaptureStatusNone, 
# 1412
cudaStreamCaptureStatusActive, 
# 1413
cudaStreamCaptureStatusInvalidated
# 1415
}; 
#endif
# 1421 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 1421
enum cudaStreamCaptureMode { 
# 1422
cudaStreamCaptureModeGlobal, 
# 1423
cudaStreamCaptureModeThreadLocal, 
# 1424
cudaStreamCaptureModeRelaxed
# 1425
}; 
#endif
# 1427 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 1427
enum cudaSynchronizationPolicy { 
# 1428
cudaSyncPolicyAuto = 1, 
# 1429
cudaSyncPolicySpin, 
# 1430
cudaSyncPolicyYield, 
# 1431
cudaSyncPolicyBlockingSync
# 1432
}; 
#endif
# 1437 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 1437
enum cudaClusterSchedulingPolicy { 
# 1438
cudaClusterSchedulingPolicyDefault, 
# 1439
cudaClusterSchedulingPolicySpread, 
# 1440
cudaClusterSchedulingPolicyLoadBalancing
# 1441
}; 
#endif
# 1446 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 1446
enum cudaStreamUpdateCaptureDependenciesFlags { 
# 1447
cudaStreamAddCaptureDependencies, 
# 1448
cudaStreamSetCaptureDependencies
# 1449
}; 
#endif
# 1454 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 1454
enum cudaUserObjectFlags { 
# 1455
cudaUserObjectNoDestructorSync = 1
# 1456
}; 
#endif
# 1461 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 1461
enum cudaUserObjectRetainFlags { 
# 1462
cudaGraphUserObjectMove = 1
# 1463
}; 
#endif
# 1468 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
struct cudaGraphicsResource; 
# 1473
#if 0
# 1473
enum cudaGraphicsRegisterFlags { 
# 1475
cudaGraphicsRegisterFlagsNone, 
# 1476
cudaGraphicsRegisterFlagsReadOnly, 
# 1477
cudaGraphicsRegisterFlagsWriteDiscard, 
# 1478
cudaGraphicsRegisterFlagsSurfaceLoadStore = 4, 
# 1479
cudaGraphicsRegisterFlagsTextureGather = 8
# 1480
}; 
#endif
# 1485 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 1485
enum cudaGraphicsMapFlags { 
# 1487
cudaGraphicsMapFlagsNone, 
# 1488
cudaGraphicsMapFlagsReadOnly, 
# 1489
cudaGraphicsMapFlagsWriteDiscard
# 1490
}; 
#endif
# 1495 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 1495
enum cudaGraphicsCubeFace { 
# 1497
cudaGraphicsCubeFacePositiveX, 
# 1498
cudaGraphicsCubeFaceNegativeX, 
# 1499
cudaGraphicsCubeFacePositiveY, 
# 1500
cudaGraphicsCubeFaceNegativeY, 
# 1501
cudaGraphicsCubeFacePositiveZ, 
# 1502
cudaGraphicsCubeFaceNegativeZ
# 1503
}; 
#endif
# 1508 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 1508
enum cudaResourceType { 
# 1510
cudaResourceTypeArray, 
# 1511
cudaResourceTypeMipmappedArray, 
# 1512
cudaResourceTypeLinear, 
# 1513
cudaResourceTypePitch2D
# 1514
}; 
#endif
# 1519 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 1519
enum cudaResourceViewFormat { 
# 1521
cudaResViewFormatNone, 
# 1522
cudaResViewFormatUnsignedChar1, 
# 1523
cudaResViewFormatUnsignedChar2, 
# 1524
cudaResViewFormatUnsignedChar4, 
# 1525
cudaResViewFormatSignedChar1, 
# 1526
cudaResViewFormatSignedChar2, 
# 1527
cudaResViewFormatSignedChar4, 
# 1528
cudaResViewFormatUnsignedShort1, 
# 1529
cudaResViewFormatUnsignedShort2, 
# 1530
cudaResViewFormatUnsignedShort4, 
# 1531
cudaResViewFormatSignedShort1, 
# 1532
cudaResViewFormatSignedShort2, 
# 1533
cudaResViewFormatSignedShort4, 
# 1534
cudaResViewFormatUnsignedInt1, 
# 1535
cudaResViewFormatUnsignedInt2, 
# 1536
cudaResViewFormatUnsignedInt4, 
# 1537
cudaResViewFormatSignedInt1, 
# 1538
cudaResViewFormatSignedInt2, 
# 1539
cudaResViewFormatSignedInt4, 
# 1540
cudaResViewFormatHalf1, 
# 1541
cudaResViewFormatHalf2, 
# 1542
cudaResViewFormatHalf4, 
# 1543
cudaResViewFormatFloat1, 
# 1544
cudaResViewFormatFloat2, 
# 1545
cudaResViewFormatFloat4, 
# 1546
cudaResViewFormatUnsignedBlockCompressed1, 
# 1547
cudaResViewFormatUnsignedBlockCompressed2, 
# 1548
cudaResViewFormatUnsignedBlockCompressed3, 
# 1549
cudaResViewFormatUnsignedBlockCompressed4, 
# 1550
cudaResViewFormatSignedBlockCompressed4, 
# 1551
cudaResViewFormatUnsignedBlockCompressed5, 
# 1552
cudaResViewFormatSignedBlockCompressed5, 
# 1553
cudaResViewFormatUnsignedBlockCompressed6H, 
# 1554
cudaResViewFormatSignedBlockCompressed6H, 
# 1555
cudaResViewFormatUnsignedBlockCompressed7
# 1556
}; 
#endif
# 1561 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 1561
struct cudaResourceDesc { 
# 1562
cudaResourceType resType; 
# 1564
union { 
# 1565
struct { 
# 1566
cudaArray_t array; 
# 1567
} array; 
# 1568
struct { 
# 1569
cudaMipmappedArray_t mipmap; 
# 1570
} mipmap; 
# 1571
struct { 
# 1572
void *devPtr; 
# 1573
cudaChannelFormatDesc desc; 
# 1574
size_t sizeInBytes; 
# 1575
} linear; 
# 1576
struct { 
# 1577
void *devPtr; 
# 1578
cudaChannelFormatDesc desc; 
# 1579
size_t width; 
# 1580
size_t height; 
# 1581
size_t pitchInBytes; 
# 1582
} pitch2D; 
# 1583
} res; 
# 1584
}; 
#endif
# 1589 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 1589
struct cudaResourceViewDesc { 
# 1591
cudaResourceViewFormat format; 
# 1592
size_t width; 
# 1593
size_t height; 
# 1594
size_t depth; 
# 1595
unsigned firstMipmapLevel; 
# 1596
unsigned lastMipmapLevel; 
# 1597
unsigned firstLayer; 
# 1598
unsigned lastLayer; 
# 1599
}; 
#endif
# 1604 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 1604
struct cudaPointerAttributes { 
# 1610
cudaMemoryType type; 
# 1621 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
int device; 
# 1627
void *devicePointer; 
# 1636 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
void *hostPointer; 
# 1637
}; 
#endif
# 1642 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 1642
struct cudaFuncAttributes { 
# 1649
size_t sharedSizeBytes; 
# 1655
size_t constSizeBytes; 
# 1660
size_t localSizeBytes; 
# 1667
int maxThreadsPerBlock; 
# 1672
int numRegs; 
# 1679
int ptxVersion; 
# 1686
int binaryVersion; 
# 1692
int cacheModeCA; 
# 1699
int maxDynamicSharedSizeBytes; 
# 1708 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
int preferredShmemCarveout; 
# 1714
int clusterDimMustBeSet; 
# 1725 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
int requiredClusterWidth; 
# 1726
int requiredClusterHeight; 
# 1727
int requiredClusterDepth; 
# 1733
int clusterSchedulingPolicyPreference; 
# 1755 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
int nonPortableClusterSizeAllowed; 
# 1760
int reserved[16]; 
# 1761
}; 
#endif
# 1766 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 1766
enum cudaFuncAttribute { 
# 1768
cudaFuncAttributeMaxDynamicSharedMemorySize = 8, 
# 1769
cudaFuncAttributePreferredSharedMemoryCarveout, 
# 1770
cudaFuncAttributeClusterDimMustBeSet, 
# 1771
cudaFuncAttributeRequiredClusterWidth, 
# 1772
cudaFuncAttributeRequiredClusterHeight, 
# 1773
cudaFuncAttributeRequiredClusterDepth, 
# 1774
cudaFuncAttributeNonPortableClusterSizeAllowed, 
# 1775
cudaFuncAttributeClusterSchedulingPolicyPreference, 
# 1776
cudaFuncAttributeMax
# 1777
}; 
#endif
# 1782 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 1782
enum cudaFuncCache { 
# 1784
cudaFuncCachePreferNone, 
# 1785
cudaFuncCachePreferShared, 
# 1786
cudaFuncCachePreferL1, 
# 1787
cudaFuncCachePreferEqual
# 1788
}; 
#endif
# 1794 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 1794
enum cudaSharedMemConfig { 
# 1796
cudaSharedMemBankSizeDefault, 
# 1797
cudaSharedMemBankSizeFourByte, 
# 1798
cudaSharedMemBankSizeEightByte
# 1799
}; 
#endif
# 1804 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 1804
enum cudaSharedCarveout { 
# 1805
cudaSharedmemCarveoutDefault = (-1), 
# 1806
cudaSharedmemCarveoutMaxShared = 100, 
# 1807
cudaSharedmemCarveoutMaxL1 = 0
# 1808
}; 
#endif
# 1813 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 1813
enum cudaComputeMode { 
# 1815
cudaComputeModeDefault, 
# 1816
cudaComputeModeExclusive, 
# 1817
cudaComputeModeProhibited, 
# 1818
cudaComputeModeExclusiveProcess
# 1819
}; 
#endif
# 1824 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 1824
enum cudaLimit { 
# 1826
cudaLimitStackSize, 
# 1827
cudaLimitPrintfFifoSize, 
# 1828
cudaLimitMallocHeapSize, 
# 1829
cudaLimitDevRuntimeSyncDepth, 
# 1830
cudaLimitDevRuntimePendingLaunchCount, 
# 1831
cudaLimitMaxL2FetchGranularity, 
# 1832
cudaLimitPersistingL2CacheSize
# 1833
}; 
#endif
# 1838 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 1838
enum cudaMemoryAdvise { 
# 1840
cudaMemAdviseSetReadMostly = 1, 
# 1841
cudaMemAdviseUnsetReadMostly, 
# 1842
cudaMemAdviseSetPreferredLocation, 
# 1843
cudaMemAdviseUnsetPreferredLocation, 
# 1844
cudaMemAdviseSetAccessedBy, 
# 1845
cudaMemAdviseUnsetAccessedBy
# 1846
}; 
#endif
# 1851 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 1851
enum cudaMemRangeAttribute { 
# 1853
cudaMemRangeAttributeReadMostly = 1, 
# 1854
cudaMemRangeAttributePreferredLocation, 
# 1855
cudaMemRangeAttributeAccessedBy, 
# 1856
cudaMemRangeAttributeLastPrefetchLocation, 
# 1857
cudaMemRangeAttributePreferredLocationType, 
# 1858
cudaMemRangeAttributePreferredLocationId, 
# 1859
cudaMemRangeAttributeLastPrefetchLocationType, 
# 1860
cudaMemRangeAttributeLastPrefetchLocationId
# 1861
}; 
#endif
# 1866 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 1866
enum cudaFlushGPUDirectRDMAWritesOptions { 
# 1867
cudaFlushGPUDirectRDMAWritesOptionHost = (1 << 0), 
# 1868
cudaFlushGPUDirectRDMAWritesOptionMemOps
# 1869
}; 
#endif
# 1874 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 1874
enum cudaGPUDirectRDMAWritesOrdering { 
# 1875
cudaGPUDirectRDMAWritesOrderingNone, 
# 1876
cudaGPUDirectRDMAWritesOrderingOwner = 100, 
# 1877
cudaGPUDirectRDMAWritesOrderingAllDevices = 200
# 1878
}; 
#endif
# 1883 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 1883
enum cudaFlushGPUDirectRDMAWritesScope { 
# 1884
cudaFlushGPUDirectRDMAWritesToOwner = 100, 
# 1885
cudaFlushGPUDirectRDMAWritesToAllDevices = 200
# 1886
}; 
#endif
# 1891 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 1891
enum cudaFlushGPUDirectRDMAWritesTarget { 
# 1892
cudaFlushGPUDirectRDMAWritesTargetCurrentDevice
# 1893
}; 
#endif
# 1899 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 1899
enum cudaDeviceAttr { 
# 1901
cudaDevAttrMaxThreadsPerBlock = 1, 
# 1902
cudaDevAttrMaxBlockDimX, 
# 1903
cudaDevAttrMaxBlockDimY, 
# 1904
cudaDevAttrMaxBlockDimZ, 
# 1905
cudaDevAttrMaxGridDimX, 
# 1906
cudaDevAttrMaxGridDimY, 
# 1907
cudaDevAttrMaxGridDimZ, 
# 1908
cudaDevAttrMaxSharedMemoryPerBlock, 
# 1909
cudaDevAttrTotalConstantMemory, 
# 1910
cudaDevAttrWarpSize, 
# 1911
cudaDevAttrMaxPitch, 
# 1912
cudaDevAttrMaxRegistersPerBlock, 
# 1913
cudaDevAttrClockRate, 
# 1914
cudaDevAttrTextureAlignment, 
# 1915
cudaDevAttrGpuOverlap, 
# 1916
cudaDevAttrMultiProcessorCount, 
# 1917
cudaDevAttrKernelExecTimeout, 
# 1918
cudaDevAttrIntegrated, 
# 1919
cudaDevAttrCanMapHostMemory, 
# 1920
cudaDevAttrComputeMode, 
# 1921
cudaDevAttrMaxTexture1DWidth, 
# 1922
cudaDevAttrMaxTexture2DWidth, 
# 1923
cudaDevAttrMaxTexture2DHeight, 
# 1924
cudaDevAttrMaxTexture3DWidth, 
# 1925
cudaDevAttrMaxTexture3DHeight, 
# 1926
cudaDevAttrMaxTexture3DDepth, 
# 1927
cudaDevAttrMaxTexture2DLayeredWidth, 
# 1928
cudaDevAttrMaxTexture2DLayeredHeight, 
# 1929
cudaDevAttrMaxTexture2DLayeredLayers, 
# 1930
cudaDevAttrSurfaceAlignment, 
# 1931
cudaDevAttrConcurrentKernels, 
# 1932
cudaDevAttrEccEnabled, 
# 1933
cudaDevAttrPciBusId, 
# 1934
cudaDevAttrPciDeviceId, 
# 1935
cudaDevAttrTccDriver, 
# 1936
cudaDevAttrMemoryClockRate, 
# 1937
cudaDevAttrGlobalMemoryBusWidth, 
# 1938
cudaDevAttrL2CacheSize, 
# 1939
cudaDevAttrMaxThreadsPerMultiProcessor, 
# 1940
cudaDevAttrAsyncEngineCount, 
# 1941
cudaDevAttrUnifiedAddressing, 
# 1942
cudaDevAttrMaxTexture1DLayeredWidth, 
# 1943
cudaDevAttrMaxTexture1DLayeredLayers, 
# 1944
cudaDevAttrMaxTexture2DGatherWidth = 45, 
# 1945
cudaDevAttrMaxTexture2DGatherHeight, 
# 1946
cudaDevAttrMaxTexture3DWidthAlt, 
# 1947
cudaDevAttrMaxTexture3DHeightAlt, 
# 1948
cudaDevAttrMaxTexture3DDepthAlt, 
# 1949
cudaDevAttrPciDomainId, 
# 1950
cudaDevAttrTexturePitchAlignment, 
# 1951
cudaDevAttrMaxTextureCubemapWidth, 
# 1952
cudaDevAttrMaxTextureCubemapLayeredWidth, 
# 1953
cudaDevAttrMaxTextureCubemapLayeredLayers, 
# 1954
cudaDevAttrMaxSurface1DWidth, 
# 1955
cudaDevAttrMaxSurface2DWidth, 
# 1956
cudaDevAttrMaxSurface2DHeight, 
# 1957
cudaDevAttrMaxSurface3DWidth, 
# 1958
cudaDevAttrMaxSurface3DHeight, 
# 1959
cudaDevAttrMaxSurface3DDepth, 
# 1960
cudaDevAttrMaxSurface1DLayeredWidth, 
# 1961
cudaDevAttrMaxSurface1DLayeredLayers, 
# 1962
cudaDevAttrMaxSurface2DLayeredWidth, 
# 1963
cudaDevAttrMaxSurface2DLayeredHeight, 
# 1964
cudaDevAttrMaxSurface2DLayeredLayers, 
# 1965
cudaDevAttrMaxSurfaceCubemapWidth, 
# 1966
cudaDevAttrMaxSurfaceCubemapLayeredWidth, 
# 1967
cudaDevAttrMaxSurfaceCubemapLayeredLayers, 
# 1968
cudaDevAttrMaxTexture1DLinearWidth, 
# 1969
cudaDevAttrMaxTexture2DLinearWidth, 
# 1970
cudaDevAttrMaxTexture2DLinearHeight, 
# 1971
cudaDevAttrMaxTexture2DLinearPitch, 
# 1972
cudaDevAttrMaxTexture2DMipmappedWidth, 
# 1973
cudaDevAttrMaxTexture2DMipmappedHeight, 
# 1974
cudaDevAttrComputeCapabilityMajor, 
# 1975
cudaDevAttrComputeCapabilityMinor, 
# 1976
cudaDevAttrMaxTexture1DMipmappedWidth, 
# 1977
cudaDevAttrStreamPrioritiesSupported, 
# 1978
cudaDevAttrGlobalL1CacheSupported, 
# 1979
cudaDevAttrLocalL1CacheSupported, 
# 1980
cudaDevAttrMaxSharedMemoryPerMultiprocessor, 
# 1981
cudaDevAttrMaxRegistersPerMultiprocessor, 
# 1982
cudaDevAttrManagedMemory, 
# 1983
cudaDevAttrIsMultiGpuBoard, 
# 1984
cudaDevAttrMultiGpuBoardGroupID, 
# 1985
cudaDevAttrHostNativeAtomicSupported, 
# 1986
cudaDevAttrSingleToDoublePrecisionPerfRatio, 
# 1987
cudaDevAttrPageableMemoryAccess, 
# 1988
cudaDevAttrConcurrentManagedAccess, 
# 1989
cudaDevAttrComputePreemptionSupported, 
# 1990
cudaDevAttrCanUseHostPointerForRegisteredMem, 
# 1991
cudaDevAttrReserved92, 
# 1992
cudaDevAttrReserved93, 
# 1993
cudaDevAttrReserved94, 
# 1994
cudaDevAttrCooperativeLaunch, 
# 1995
cudaDevAttrCooperativeMultiDeviceLaunch, 
# 1996
cudaDevAttrMaxSharedMemoryPerBlockOptin, 
# 1997
cudaDevAttrCanFlushRemoteWrites, 
# 1998
cudaDevAttrHostRegisterSupported, 
# 1999
cudaDevAttrPageableMemoryAccessUsesHostPageTables, 
# 2000
cudaDevAttrDirectManagedMemAccessFromHost, 
# 2001
cudaDevAttrMaxBlocksPerMultiprocessor = 106, 
# 2002
cudaDevAttrMaxPersistingL2CacheSize = 108, 
# 2003
cudaDevAttrMaxAccessPolicyWindowSize, 
# 2004
cudaDevAttrReservedSharedMemoryPerBlock = 111, 
# 2005
cudaDevAttrSparseCudaArraySupported, 
# 2006
cudaDevAttrHostRegisterReadOnlySupported, 
# 2007
cudaDevAttrTimelineSemaphoreInteropSupported, 
# 2008
cudaDevAttrMaxTimelineSemaphoreInteropSupported = 114, 
# 2009
cudaDevAttrMemoryPoolsSupported, 
# 2010
cudaDevAttrGPUDirectRDMASupported, 
# 2011
cudaDevAttrGPUDirectRDMAFlushWritesOptions, 
# 2012
cudaDevAttrGPUDirectRDMAWritesOrdering, 
# 2013
cudaDevAttrMemoryPoolSupportedHandleTypes, 
# 2014
cudaDevAttrClusterLaunch, 
# 2015
cudaDevAttrDeferredMappingCudaArraySupported, 
# 2016
cudaDevAttrReserved122, 
# 2017
cudaDevAttrReserved123, 
# 2018
cudaDevAttrReserved124, 
# 2019
cudaDevAttrIpcEventSupport, 
# 2020
cudaDevAttrMemSyncDomainCount, 
# 2021
cudaDevAttrReserved127, 
# 2022
cudaDevAttrReserved128, 
# 2023
cudaDevAttrReserved129, 
# 2024
cudaDevAttrNumaConfig, 
# 2025
cudaDevAttrNumaId, 
# 2026
cudaDevAttrReserved132, 
# 2027
cudaDevAttrMpsEnabled, 
# 2028
cudaDevAttrHostNumaId, 
# 2029
cudaDevAttrD3D12CigSupported, 
# 2030
cudaDevAttrMax
# 2031
}; 
#endif
# 2036 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 2036
enum cudaMemPoolAttr { 
# 2046 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
cudaMemPoolReuseFollowEventDependencies = 1, 
# 2053
cudaMemPoolReuseAllowOpportunistic, 
# 2061
cudaMemPoolReuseAllowInternalDependencies, 
# 2072 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
cudaMemPoolAttrReleaseThreshold, 
# 2078
cudaMemPoolAttrReservedMemCurrent, 
# 2085
cudaMemPoolAttrReservedMemHigh, 
# 2091
cudaMemPoolAttrUsedMemCurrent, 
# 2098
cudaMemPoolAttrUsedMemHigh
# 2099
}; 
#endif
# 2104 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 2104
enum cudaMemLocationType { 
# 2105
cudaMemLocationTypeInvalid, 
# 2106
cudaMemLocationTypeDevice, 
# 2107
cudaMemLocationTypeHost, 
# 2108
cudaMemLocationTypeHostNuma, 
# 2109
cudaMemLocationTypeHostNumaCurrent
# 2110
}; 
#endif
# 2118 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 2118
struct cudaMemLocation { 
# 2119
cudaMemLocationType type; 
# 2120
int id; 
# 2121
}; 
#endif
# 2126 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 2126
enum cudaMemAccessFlags { 
# 2127
cudaMemAccessFlagsProtNone, 
# 2128
cudaMemAccessFlagsProtRead, 
# 2129
cudaMemAccessFlagsProtReadWrite = 3
# 2130
}; 
#endif
# 2135 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 2135
struct cudaMemAccessDesc { 
# 2136
cudaMemLocation location; 
# 2137
cudaMemAccessFlags flags; 
# 2138
}; 
#endif
# 2143 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 2143
enum cudaMemAllocationType { 
# 2144
cudaMemAllocationTypeInvalid, 
# 2148
cudaMemAllocationTypePinned, 
# 2149
cudaMemAllocationTypeMax = 2147483647
# 2150
}; 
#endif
# 2155 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 2155
enum cudaMemAllocationHandleType { 
# 2156
cudaMemHandleTypeNone, 
# 2157
cudaMemHandleTypePosixFileDescriptor, 
# 2158
cudaMemHandleTypeWin32, 
# 2159
cudaMemHandleTypeWin32Kmt = 4, 
# 2160
cudaMemHandleTypeFabric = 8
# 2161
}; 
#endif
# 2166 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 2166
struct cudaMemPoolProps { 
# 2167
cudaMemAllocationType allocType; 
# 2168
cudaMemAllocationHandleType handleTypes; 
# 2169
cudaMemLocation location; 
# 2176
void *win32SecurityAttributes; 
# 2177
size_t maxSize; 
# 2178
unsigned short usage; 
# 2179
unsigned char reserved[54]; 
# 2180
}; 
#endif
# 2185 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 2185
struct cudaMemPoolPtrExportData { 
# 2186
unsigned char reserved[64]; 
# 2187
}; 
#endif
# 2192 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 2192
struct cudaMemAllocNodeParams { 
# 2197
cudaMemPoolProps poolProps; 
# 2198
const cudaMemAccessDesc *accessDescs; 
# 2199
size_t accessDescCount; 
# 2200
size_t bytesize; 
# 2201
void *dptr; 
# 2202
}; 
#endif
# 2207 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 2207
struct cudaMemAllocNodeParamsV2 { 
# 2212
cudaMemPoolProps poolProps; 
# 2213
const cudaMemAccessDesc *accessDescs; 
# 2214
size_t accessDescCount; 
# 2215
size_t bytesize; 
# 2216
void *dptr; 
# 2217
}; 
#endif
# 2222 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 2222
struct cudaMemFreeNodeParams { 
# 2223
void *dptr; 
# 2224
}; 
#endif
# 2229 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 2229
enum cudaGraphMemAttributeType { 
# 2234
cudaGraphMemAttrUsedMemCurrent, 
# 2241
cudaGraphMemAttrUsedMemHigh, 
# 2248
cudaGraphMemAttrReservedMemCurrent, 
# 2255
cudaGraphMemAttrReservedMemHigh
# 2256
}; 
#endif
# 2262 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 2262
enum cudaDeviceP2PAttr { 
# 2263
cudaDevP2PAttrPerformanceRank = 1, 
# 2264
cudaDevP2PAttrAccessSupported, 
# 2265
cudaDevP2PAttrNativeAtomicSupported, 
# 2266
cudaDevP2PAttrCudaArrayAccessSupported
# 2267
}; 
#endif
# 2274 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 2274
struct CUuuid_st { 
# 2275
char bytes[16]; 
# 2276
}; 
#endif
# 2277 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
typedef CUuuid_st 
# 2277
CUuuid; 
#endif
# 2279 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
typedef CUuuid_st 
# 2279
cudaUUID_t; 
#endif
# 2284 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 2284
struct cudaDeviceProp { 
# 2286
char name[256]; 
# 2287
cudaUUID_t uuid; 
# 2288
char luid[8]; 
# 2289
unsigned luidDeviceNodeMask; 
# 2290
size_t totalGlobalMem; 
# 2291
size_t sharedMemPerBlock; 
# 2292
int regsPerBlock; 
# 2293
int warpSize; 
# 2294
size_t memPitch; 
# 2295
int maxThreadsPerBlock; 
# 2296
int maxThreadsDim[3]; 
# 2297
int maxGridSize[3]; 
# 2298
int clockRate; 
# 2299
size_t totalConstMem; 
# 2300
int major; 
# 2301
int minor; 
# 2302
size_t textureAlignment; 
# 2303
size_t texturePitchAlignment; 
# 2304
int deviceOverlap; 
# 2305
int multiProcessorCount; 
# 2306
int kernelExecTimeoutEnabled; 
# 2307
int integrated; 
# 2308
int canMapHostMemory; 
# 2309
int computeMode; 
# 2310
int maxTexture1D; 
# 2311
int maxTexture1DMipmap; 
# 2312
int maxTexture1DLinear; 
# 2313
int maxTexture2D[2]; 
# 2314
int maxTexture2DMipmap[2]; 
# 2315
int maxTexture2DLinear[3]; 
# 2316
int maxTexture2DGather[2]; 
# 2317
int maxTexture3D[3]; 
# 2318
int maxTexture3DAlt[3]; 
# 2319
int maxTextureCubemap; 
# 2320
int maxTexture1DLayered[2]; 
# 2321
int maxTexture2DLayered[3]; 
# 2322
int maxTextureCubemapLayered[2]; 
# 2323
int maxSurface1D; 
# 2324
int maxSurface2D[2]; 
# 2325
int maxSurface3D[3]; 
# 2326
int maxSurface1DLayered[2]; 
# 2327
int maxSurface2DLayered[3]; 
# 2328
int maxSurfaceCubemap; 
# 2329
int maxSurfaceCubemapLayered[2]; 
# 2330
size_t surfaceAlignment; 
# 2331
int concurrentKernels; 
# 2332
int ECCEnabled; 
# 2333
int pciBusID; 
# 2334
int pciDeviceID; 
# 2335
int pciDomainID; 
# 2336
int tccDriver; 
# 2337
int asyncEngineCount; 
# 2338
int unifiedAddressing; 
# 2339
int memoryClockRate; 
# 2340
int memoryBusWidth; 
# 2341
int l2CacheSize; 
# 2342
int persistingL2CacheMaxSize; 
# 2343
int maxThreadsPerMultiProcessor; 
# 2344
int streamPrioritiesSupported; 
# 2345
int globalL1CacheSupported; 
# 2346
int localL1CacheSupported; 
# 2347
size_t sharedMemPerMultiprocessor; 
# 2348
int regsPerMultiprocessor; 
# 2349
int managedMemory; 
# 2350
int isMultiGpuBoard; 
# 2351
int multiGpuBoardGroupID; 
# 2352
int hostNativeAtomicSupported; 
# 2353
int singleToDoublePrecisionPerfRatio; 
# 2354
int pageableMemoryAccess; 
# 2355
int concurrentManagedAccess; 
# 2356
int computePreemptionSupported; 
# 2357
int canUseHostPointerForRegisteredMem; 
# 2358
int cooperativeLaunch; 
# 2359
int cooperativeMultiDeviceLaunch; 
# 2360
size_t sharedMemPerBlockOptin; 
# 2361
int pageableMemoryAccessUsesHostPageTables; 
# 2362
int directManagedMemAccessFromHost; 
# 2363
int maxBlocksPerMultiProcessor; 
# 2364
int accessPolicyMaxWindowSize; 
# 2365
size_t reservedSharedMemPerBlock; 
# 2366
int hostRegisterSupported; 
# 2367
int sparseCudaArraySupported; 
# 2368
int hostRegisterReadOnlySupported; 
# 2369
int timelineSemaphoreInteropSupported; 
# 2370
int memoryPoolsSupported; 
# 2371
int gpuDirectRDMASupported; 
# 2372
unsigned gpuDirectRDMAFlushWritesOptions; 
# 2373
int gpuDirectRDMAWritesOrdering; 
# 2374
unsigned memoryPoolSupportedHandleTypes; 
# 2375
int deferredMappingCudaArraySupported; 
# 2376
int ipcEventSupported; 
# 2377
int clusterLaunch; 
# 2378
int unifiedFunctionPointers; 
# 2379
int reserved2[2]; 
# 2380
int reserved1[1]; 
# 2381
int reserved[60]; 
# 2382
}; 
#endif
# 2395 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
typedef 
# 2392
struct cudaIpcEventHandle_st { 
# 2394
char reserved[64]; 
# 2395
} cudaIpcEventHandle_t; 
#endif
# 2403 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
typedef 
# 2400
struct cudaIpcMemHandle_st { 
# 2402
char reserved[64]; 
# 2403
} cudaIpcMemHandle_t; 
#endif
# 2411 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
typedef 
# 2408
struct cudaMemFabricHandle_st { 
# 2410
char reserved[64]; 
# 2411
} cudaMemFabricHandle_t; 
#endif
# 2416 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 2416
enum cudaExternalMemoryHandleType { 
# 2420
cudaExternalMemoryHandleTypeOpaqueFd = 1, 
# 2424
cudaExternalMemoryHandleTypeOpaqueWin32, 
# 2428
cudaExternalMemoryHandleTypeOpaqueWin32Kmt, 
# 2432
cudaExternalMemoryHandleTypeD3D12Heap, 
# 2436
cudaExternalMemoryHandleTypeD3D12Resource, 
# 2440
cudaExternalMemoryHandleTypeD3D11Resource, 
# 2444
cudaExternalMemoryHandleTypeD3D11ResourceKmt, 
# 2448
cudaExternalMemoryHandleTypeNvSciBuf
# 2449
}; 
#endif
# 2491 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 2491
struct cudaExternalMemoryHandleDesc { 
# 2495
cudaExternalMemoryHandleType type; 
# 2496
union { 
# 2502
int fd; 
# 2518 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
struct { 
# 2522
void *handle; 
# 2527
const void *name; 
# 2528
} win32; 
# 2533
const void *nvSciBufObject; 
# 2534
} handle; 
# 2538
unsigned long long size; 
# 2542
unsigned flags; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 2543
}; 
#endif
# 2548 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 2548
struct cudaExternalMemoryBufferDesc { 
# 2552
unsigned long long offset; 
# 2556
unsigned long long size; 
# 2560
unsigned flags; 
# 2561
}; 
#endif
# 2566 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 2566
struct cudaExternalMemoryMipmappedArrayDesc { 
# 2571
unsigned long long offset; 
# 2575
cudaChannelFormatDesc formatDesc; 
# 2579
cudaExtent extent; 
# 2584
unsigned flags; 
# 2588
unsigned numLevels; 
# 2589
}; 
#endif
# 2594 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 2594
enum cudaExternalSemaphoreHandleType { 
# 2598
cudaExternalSemaphoreHandleTypeOpaqueFd = 1, 
# 2602
cudaExternalSemaphoreHandleTypeOpaqueWin32, 
# 2606
cudaExternalSemaphoreHandleTypeOpaqueWin32Kmt, 
# 2610
cudaExternalSemaphoreHandleTypeD3D12Fence, 
# 2614
cudaExternalSemaphoreHandleTypeD3D11Fence, 
# 2618
cudaExternalSemaphoreHandleTypeNvSciSync, 
# 2622
cudaExternalSemaphoreHandleTypeKeyedMutex, 
# 2626
cudaExternalSemaphoreHandleTypeKeyedMutexKmt, 
# 2630
cudaExternalSemaphoreHandleTypeTimelineSemaphoreFd, 
# 2634
cudaExternalSemaphoreHandleTypeTimelineSemaphoreWin32
# 2635
}; 
#endif
# 2640 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 2640
struct cudaExternalSemaphoreHandleDesc { 
# 2644
cudaExternalSemaphoreHandleType type; 
# 2645
union { 
# 2652
int fd; 
# 2668 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
struct { 
# 2672
void *handle; 
# 2677
const void *name; 
# 2678
} win32; 
# 2682
const void *nvSciSyncObj; 
# 2683
} handle; 
# 2687
unsigned flags; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 2688
}; 
#endif
# 2693 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 2693
struct cudaExternalSemaphoreSignalParams_v1 { 
# 2694
struct { 
# 2698
struct { 
# 2702
unsigned long long value; 
# 2703
} fence; 
# 2704
union { 
# 2709
void *fence; 
# 2710
unsigned long long reserved; 
# 2711
} nvSciSync; 
# 2715
struct { 
# 2719
unsigned long long key; 
# 2720
} keyedMutex; 
# 2721
} params; 
# 2732 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
unsigned flags; 
# 2733
}; 
#endif
# 2738 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 2738
struct cudaExternalSemaphoreWaitParams_v1 { 
# 2739
struct { 
# 2743
struct { 
# 2747
unsigned long long value; 
# 2748
} fence; 
# 2749
union { 
# 2754
void *fence; 
# 2755
unsigned long long reserved; 
# 2756
} nvSciSync; 
# 2760
struct { 
# 2764
unsigned long long key; 
# 2768
unsigned timeoutMs; 
# 2769
} keyedMutex; 
# 2770
} params; 
# 2781 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
unsigned flags; 
# 2782
}; 
#endif
# 2787 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 2787
struct cudaExternalSemaphoreSignalParams { 
# 2788
struct { 
# 2792
struct { 
# 2796
unsigned long long value; 
# 2797
} fence; 
# 2798
union { 
# 2803
void *fence; 
# 2804
unsigned long long reserved; 
# 2805
} nvSciSync; 
# 2809
struct { 
# 2813
unsigned long long key; 
# 2814
} keyedMutex; 
# 2815
unsigned reserved[12]; 
# 2816
} params; 
# 2827 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
unsigned flags; 
# 2828
unsigned reserved[16]; 
# 2829
}; 
#endif
# 2834 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 2834
struct cudaExternalSemaphoreWaitParams { 
# 2835
struct { 
# 2839
struct { 
# 2843
unsigned long long value; 
# 2844
} fence; 
# 2845
union { 
# 2850
void *fence; 
# 2851
unsigned long long reserved; 
# 2852
} nvSciSync; 
# 2856
struct { 
# 2860
unsigned long long key; 
# 2864
unsigned timeoutMs; 
# 2865
} keyedMutex; 
# 2866
unsigned reserved[10]; 
# 2867
} params; 
# 2878 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
unsigned flags; 
# 2879
unsigned reserved[16]; 
# 2880
}; 
#endif
# 2891 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
typedef cudaError 
# 2891
cudaError_t; 
#endif
# 2896 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
typedef struct CUstream_st *
# 2896
cudaStream_t; 
#endif
# 2901 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
typedef struct CUevent_st *
# 2901
cudaEvent_t; 
#endif
# 2906 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
typedef cudaGraphicsResource *
# 2906
cudaGraphicsResource_t; 
#endif
# 2911 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
typedef struct CUexternalMemory_st *
# 2911
cudaExternalMemory_t; 
#endif
# 2916 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
typedef struct CUexternalSemaphore_st *
# 2916
cudaExternalSemaphore_t; 
#endif
# 2921 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
typedef struct CUgraph_st *
# 2921
cudaGraph_t; 
#endif
# 2926 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
typedef struct CUgraphNode_st *
# 2926
cudaGraphNode_t; 
#endif
# 2931 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
typedef struct CUuserObject_st *
# 2931
cudaUserObject_t; 
#endif
# 2936 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
typedef unsigned long long 
# 2936
cudaGraphConditionalHandle; 
#endif
# 2941 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
typedef struct CUfunc_st *
# 2941
cudaFunction_t; 
#endif
# 2946 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
typedef struct CUkern_st *
# 2946
cudaKernel_t; 
#endif
# 2951 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
typedef struct CUmemPoolHandle_st *
# 2951
cudaMemPool_t; 
#endif
# 2956 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 2956
enum cudaCGScope { 
# 2957
cudaCGScopeInvalid, 
# 2958
cudaCGScopeGrid, 
# 2959
cudaCGScopeMultiGrid
# 2960
}; 
#endif
# 2965 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 2965
struct cudaLaunchParams { 
# 2967
void *func; 
# 2968
dim3 gridDim; 
# 2969
dim3 blockDim; 
# 2970
void **args; 
# 2971
size_t sharedMem; 
# 2972
cudaStream_t stream; 
# 2973
}; 
#endif
# 2978 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 2978
struct cudaKernelNodeParams { 
# 2979
void *func; 
# 2980
dim3 gridDim; 
# 2981
dim3 blockDim; 
# 2982
unsigned sharedMemBytes; 
# 2983
void **kernelParams; 
# 2984
void **extra; 
# 2985
}; 
#endif
# 2990 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 2990
struct cudaKernelNodeParamsV2 { 
# 2991
void *func; 
# 2993
dim3 gridDim; 
# 2994
dim3 blockDim; 
# 3000
unsigned sharedMemBytes; 
# 3001
void **kernelParams; 
# 3002
void **extra; 
# 3003
}; 
#endif
# 3008 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 3008
struct cudaExternalSemaphoreSignalNodeParams { 
# 3009
cudaExternalSemaphore_t *extSemArray; 
# 3010
const cudaExternalSemaphoreSignalParams *paramsArray; 
# 3011
unsigned numExtSems; 
# 3012
}; 
#endif
# 3017 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 3017
struct cudaExternalSemaphoreSignalNodeParamsV2 { 
# 3018
cudaExternalSemaphore_t *extSemArray; 
# 3019
const cudaExternalSemaphoreSignalParams *paramsArray; 
# 3020
unsigned numExtSems; 
# 3021
}; 
#endif
# 3026 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 3026
struct cudaExternalSemaphoreWaitNodeParams { 
# 3027
cudaExternalSemaphore_t *extSemArray; 
# 3028
const cudaExternalSemaphoreWaitParams *paramsArray; 
# 3029
unsigned numExtSems; 
# 3030
}; 
#endif
# 3035 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 3035
struct cudaExternalSemaphoreWaitNodeParamsV2 { 
# 3036
cudaExternalSemaphore_t *extSemArray; 
# 3037
const cudaExternalSemaphoreWaitParams *paramsArray; 
# 3038
unsigned numExtSems; 
# 3039
}; 
#endif
# 3041 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 3041
enum cudaGraphConditionalHandleFlags { 
# 3042
cudaGraphCondAssignDefault = 1
# 3043
}; 
#endif
# 3048 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 3048
enum cudaGraphConditionalNodeType { 
# 3049
cudaGraphCondTypeIf, 
# 3050
cudaGraphCondTypeWhile
# 3051
}; 
#endif
# 3056 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 3056
struct cudaConditionalNodeParams { 
# 3057
cudaGraphConditionalHandle handle; 
# 3060
cudaGraphConditionalNodeType type; 
# 3061
unsigned size; 
# 3062
cudaGraph_t *phGraph_out; 
# 3072 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
}; 
#endif
# 3077 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 3077
enum cudaGraphNodeType { 
# 3078
cudaGraphNodeTypeKernel, 
# 3079
cudaGraphNodeTypeMemcpy, 
# 3080
cudaGraphNodeTypeMemset, 
# 3081
cudaGraphNodeTypeHost, 
# 3082
cudaGraphNodeTypeGraph, 
# 3083
cudaGraphNodeTypeEmpty, 
# 3084
cudaGraphNodeTypeWaitEvent, 
# 3085
cudaGraphNodeTypeEventRecord, 
# 3086
cudaGraphNodeTypeExtSemaphoreSignal, 
# 3087
cudaGraphNodeTypeExtSemaphoreWait, 
# 3088
cudaGraphNodeTypeMemAlloc, 
# 3089
cudaGraphNodeTypeMemFree, 
# 3090
cudaGraphNodeTypeConditional = 13, 
# 3107 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
cudaGraphNodeTypeCount
# 3108
}; 
#endif
# 3113 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 3113
struct cudaChildGraphNodeParams { 
# 3114
cudaGraph_t graph; 
# 3116
}; 
#endif
# 3121 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 3121
struct cudaEventRecordNodeParams { 
# 3122
cudaEvent_t event; 
# 3123
}; 
#endif
# 3128 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 3128
struct cudaEventWaitNodeParams { 
# 3129
cudaEvent_t event; 
# 3130
}; 
#endif
# 3135 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 3135
struct cudaGraphNodeParams { 
# 3136
cudaGraphNodeType type; 
# 3137
int reserved0[3]; 
# 3139
union { 
# 3140
long long reserved1[29]; 
# 3141
cudaKernelNodeParamsV2 kernel; 
# 3142
cudaMemcpyNodeParams memcpy; 
# 3143
cudaMemsetParamsV2 memset; 
# 3144
cudaHostNodeParamsV2 host; 
# 3145
cudaChildGraphNodeParams graph; 
# 3146
cudaEventWaitNodeParams eventWait; 
# 3147
cudaEventRecordNodeParams eventRecord; 
# 3148
cudaExternalSemaphoreSignalNodeParamsV2 extSemSignal; 
# 3149
cudaExternalSemaphoreWaitNodeParamsV2 extSemWait; 
# 3150
cudaMemAllocNodeParamsV2 alloc; 
# 3151
cudaMemFreeNodeParams free; 
# 3152
cudaConditionalNodeParams conditional; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 3153
}; 
# 3155
long long reserved2; 
# 3156
}; 
#endif
# 3168 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
typedef 
# 3161
enum cudaGraphDependencyType_enum { 
# 3162
cudaGraphDependencyTypeDefault, 
# 3163
cudaGraphDependencyTypeProgrammatic
# 3168
} cudaGraphDependencyType; 
#endif
# 3198 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
typedef 
# 3175 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
struct cudaGraphEdgeData_st { 
# 3176
unsigned char from_port; 
# 3186 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
unsigned char to_port; 
# 3193
unsigned char type; 
# 3196
unsigned char reserved[5]; 
# 3198
} cudaGraphEdgeData; 
#endif
# 3219 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
typedef struct CUgraphExec_st *cudaGraphExec_t; 
# 3224
#if 0
# 3224
enum cudaGraphExecUpdateResult { 
# 3225
cudaGraphExecUpdateSuccess, 
# 3226
cudaGraphExecUpdateError, 
# 3227
cudaGraphExecUpdateErrorTopologyChanged, 
# 3228
cudaGraphExecUpdateErrorNodeTypeChanged, 
# 3229
cudaGraphExecUpdateErrorFunctionChanged, 
# 3230
cudaGraphExecUpdateErrorParametersChanged, 
# 3231
cudaGraphExecUpdateErrorNotSupported, 
# 3232
cudaGraphExecUpdateErrorUnsupportedFunctionChange, 
# 3233
cudaGraphExecUpdateErrorAttributesChanged
# 3234
}; 
#endif
# 3245 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
typedef 
# 3239
enum cudaGraphInstantiateResult { 
# 3240
cudaGraphInstantiateSuccess, 
# 3241
cudaGraphInstantiateError, 
# 3242
cudaGraphInstantiateInvalidStructure, 
# 3243
cudaGraphInstantiateNodeOperationNotSupported, 
# 3244
cudaGraphInstantiateMultipleDevicesNotSupported
# 3245
} cudaGraphInstantiateResult; 
#endif
# 3256 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
typedef 
# 3250
struct cudaGraphInstantiateParams_st { 
# 3252
unsigned long long flags; 
# 3253
cudaStream_t uploadStream; 
# 3254
cudaGraphNode_t errNode_out; 
# 3255
cudaGraphInstantiateResult result_out; 
# 3256
} cudaGraphInstantiateParams; 
#endif
# 3278 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
typedef 
# 3261
struct cudaGraphExecUpdateResultInfo_st { 
# 3265
cudaGraphExecUpdateResult result; 
# 3272
cudaGraphNode_t errorNode; 
# 3277
cudaGraphNode_t errorFromNode; 
# 3278
} cudaGraphExecUpdateResultInfo; 
#endif
# 3283 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
typedef struct CUgraphDeviceUpdatableNode_st *cudaGraphDeviceNode_t; 
# 3288
#if 0
# 3288
enum cudaGraphKernelNodeField { 
# 3290
cudaGraphKernelNodeFieldInvalid, 
# 3291
cudaGraphKernelNodeFieldGridDim, 
# 3292
cudaGraphKernelNodeFieldParam, 
# 3293
cudaGraphKernelNodeFieldEnabled
# 3294
}; 
#endif
# 3299 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 3299
struct cudaGraphKernelNodeUpdate { 
# 3300
cudaGraphDeviceNode_t node; 
# 3301
cudaGraphKernelNodeField field; 
# 3302
union { 
# 3304
dim3 gridDim; 
# 3309
struct { 
# 3310
const void *pValue; 
# 3311
size_t offset; 
# 3312
size_t size; 
# 3313
} param; 
# 3314
unsigned isEnabled; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 3315
} updateData; 
# 3316
}; 
#endif
# 3322 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 3322
enum cudaGetDriverEntryPointFlags { 
# 3323
cudaEnableDefault, 
# 3324
cudaEnableLegacyStream, 
# 3325
cudaEnablePerThreadDefaultStream
# 3326
}; 
#endif
# 3331 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 3331
enum cudaDriverEntryPointQueryResult { 
# 3332
cudaDriverEntryPointSuccess, 
# 3333
cudaDriverEntryPointSymbolNotFound, 
# 3334
cudaDriverEntryPointVersionNotSufficent
# 3335
}; 
#endif
# 3340 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 3340
enum cudaGraphDebugDotFlags { 
# 3341
cudaGraphDebugDotFlagsVerbose = (1 << 0), 
# 3342
cudaGraphDebugDotFlagsKernelNodeParams = (1 << 2), 
# 3343
cudaGraphDebugDotFlagsMemcpyNodeParams = (1 << 3), 
# 3344
cudaGraphDebugDotFlagsMemsetNodeParams = (1 << 4), 
# 3345
cudaGraphDebugDotFlagsHostNodeParams = (1 << 5), 
# 3346
cudaGraphDebugDotFlagsEventNodeParams = (1 << 6), 
# 3347
cudaGraphDebugDotFlagsExtSemasSignalNodeParams = (1 << 7), 
# 3348
cudaGraphDebugDotFlagsExtSemasWaitNodeParams = (1 << 8), 
# 3349
cudaGraphDebugDotFlagsKernelNodeAttributes = (1 << 9), 
# 3350
cudaGraphDebugDotFlagsHandles = (1 << 10), 
# 3351
cudaGraphDebugDotFlagsConditionalNodeParams = (1 << 15)
# 3352
}; 
#endif
# 3357 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 3357
enum cudaGraphInstantiateFlags { 
# 3358
cudaGraphInstantiateFlagAutoFreeOnLaunch = 1, 
# 3359
cudaGraphInstantiateFlagUpload, 
# 3362
cudaGraphInstantiateFlagDeviceLaunch = 4, 
# 3365
cudaGraphInstantiateFlagUseNodePriority = 8
# 3367
}; 
#endif
# 3388 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
typedef 
# 3385
enum cudaLaunchMemSyncDomain { 
# 3386
cudaLaunchMemSyncDomainDefault, 
# 3387
cudaLaunchMemSyncDomainRemote
# 3388
} cudaLaunchMemSyncDomain; 
#endif
# 3404 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
typedef 
# 3401
struct cudaLaunchMemSyncDomainMap_st { 
# 3402
unsigned char default_; 
# 3403
unsigned char remote; 
# 3404
} cudaLaunchMemSyncDomainMap; 
#endif
# 3520 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
typedef 
# 3409 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
enum cudaLaunchAttributeID { 
# 3410
cudaLaunchAttributeIgnore, 
# 3411
cudaLaunchAttributeAccessPolicyWindow, 
# 3413
cudaLaunchAttributeCooperative, 
# 3415
cudaLaunchAttributeSynchronizationPolicy, 
# 3416
cudaLaunchAttributeClusterDimension, 
# 3418
cudaLaunchAttributeClusterSchedulingPolicyPreference, 
# 3420
cudaLaunchAttributeProgrammaticStreamSerialization, 
# 3431 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
cudaLaunchAttributeProgrammaticEvent, 
# 3457 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
cudaLaunchAttributePriority, 
# 3459
cudaLaunchAttributeMemSyncDomainMap, 
# 3461
cudaLaunchAttributeMemSyncDomain, 
# 3463
cudaLaunchAttributeLaunchCompletionEvent = 12, 
# 3485 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
cudaLaunchAttributeDeviceUpdatableKernelNode, 
# 3513 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
cudaLaunchAttributePreferredSharedMemoryCarveout
# 3520
} cudaLaunchAttributeID; 
#endif
# 3597 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
typedef 
# 3525 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
union cudaLaunchAttributeValue { 
# 3526
char pad[64]; 
# 3527
cudaAccessPolicyWindow accessPolicyWindow; 
# 3528
int cooperative; 
# 3530
cudaSynchronizationPolicy syncPolicy; 
# 3544 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
struct { 
# 3545
unsigned x; 
# 3546
unsigned y; 
# 3547
unsigned z; 
# 3548
} clusterDim; 
# 3549
cudaClusterSchedulingPolicy clusterSchedulingPolicyPreference; 
# 3552
int programmaticStreamSerializationAllowed; 
# 3563 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
struct { 
# 3564
cudaEvent_t event; 
# 3565
int flags; 
# 3566
int triggerAtBlockStart; 
# 3567
} programmaticEvent; 
# 3568
int priority; 
# 3569
cudaLaunchMemSyncDomainMap memSyncDomainMap; 
# 3572
cudaLaunchMemSyncDomain memSyncDomain; 
# 3581 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
struct { 
# 3582
cudaEvent_t event; 
# 3583
int flags; 
# 3584
} launchCompletionEvent; 
# 3592
struct { 
# 3593
int deviceUpdatable; 
# 3594
cudaGraphDeviceNode_t devNode; 
# 3595
} deviceUpdatableKernelNode; 
# 3596
unsigned sharedMemCarveout; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 3597
} cudaLaunchAttributeValue; 
#endif
# 3606 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
typedef 
# 3602
struct cudaLaunchAttribute_st { 
# 3603
cudaLaunchAttributeID id; 
# 3604
char pad[(8) - sizeof(cudaLaunchAttributeID)]; 
# 3605
cudaLaunchAttributeValue val; 
# 3606
} cudaLaunchAttribute; 
#endif
# 3618 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
typedef 
# 3611
struct cudaLaunchConfig_st { 
# 3612
dim3 gridDim; 
# 3613
dim3 blockDim; 
# 3614
size_t dynamicSmemBytes; 
# 3615
cudaStream_t stream; 
# 3616
cudaLaunchAttribute *attrs; 
# 3617
unsigned numAttrs; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 3618
} cudaLaunchConfig_t; 
#endif
# 3645 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
# 3645
enum cudaDeviceNumaConfig { 
# 3646
cudaDeviceNumaConfigNone, 
# 3647
cudaDeviceNumaConfigNumaNode
# 3648
}; 
#endif
# 3653 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
typedef struct cudaAsyncCallbackEntry *cudaAsyncCallbackHandle_t; 
# 3655
struct cudaAsyncCallbackEntry; 
# 3662
#if 0
typedef 
# 3660
enum cudaAsyncNotificationType_enum { 
# 3661
cudaAsyncNotificationTypeOverBudget = 1
# 3662
} cudaAsyncNotificationType; 
#endif
# 3675 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
#if 0
typedef 
# 3667
struct cudaAsyncNotificationInfo { 
# 3669
cudaAsyncNotificationType type; 
# 3670
union { 
# 3671
struct { 
# 3672
unsigned long long bytesOverBudget; 
# 3673
} overBudget; 
# 3674
} info; 
# 3675
} cudaAsyncNotificationInfo_t; 
#endif
# 3677 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_types.h" 3
typedef void (*cudaAsyncCallback)(cudaAsyncNotificationInfo_t *, void *, cudaAsyncCallbackHandle_t); 
# 86 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/surface_types.h" 3
#if 0
# 86
enum cudaSurfaceBoundaryMode { 
# 88
cudaBoundaryModeZero, 
# 89
cudaBoundaryModeClamp, 
# 90
cudaBoundaryModeTrap
# 91
}; 
#endif
# 96 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/surface_types.h" 3
#if 0
# 96
enum cudaSurfaceFormatMode { 
# 98
cudaFormatModeForced, 
# 99
cudaFormatModeAuto
# 100
}; 
#endif
# 105 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/surface_types.h" 3
#if 0
typedef unsigned long long 
# 105
cudaSurfaceObject_t; 
#endif
# 86 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_types.h" 3
#if 0
# 86
enum cudaTextureAddressMode { 
# 88
cudaAddressModeWrap, 
# 89
cudaAddressModeClamp, 
# 90
cudaAddressModeMirror, 
# 91
cudaAddressModeBorder
# 92
}; 
#endif
# 97 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_types.h" 3
#if 0
# 97
enum cudaTextureFilterMode { 
# 99
cudaFilterModePoint, 
# 100
cudaFilterModeLinear
# 101
}; 
#endif
# 106 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_types.h" 3
#if 0
# 106
enum cudaTextureReadMode { 
# 108
cudaReadModeElementType, 
# 109
cudaReadModeNormalizedFloat
# 110
}; 
#endif
# 115 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_types.h" 3
#if 0
# 115
struct cudaTextureDesc { 
# 120
cudaTextureAddressMode addressMode[3]; 
# 124
cudaTextureFilterMode filterMode; 
# 128
cudaTextureReadMode readMode; 
# 132
int sRGB; 
# 136
float borderColor[4]; 
# 140
int normalizedCoords; 
# 144
unsigned maxAnisotropy; 
# 148
cudaTextureFilterMode mipmapFilterMode; 
# 152
float mipmapLevelBias; 
# 156
float minMipmapLevelClamp; 
# 160
float maxMipmapLevelClamp; 
# 164
int disableTrilinearOptimization; 
# 168
int seamlessCubemap; 
# 169
}; 
#endif
# 174 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_types.h" 3
#if 0
typedef unsigned long long 
# 174
cudaTextureObject_t; 
#endif
# 89 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/library_types.h" 3
typedef 
# 57
enum cudaDataType_t { 
# 59
CUDA_R_16F = 2, 
# 60
CUDA_C_16F = 6, 
# 61
CUDA_R_16BF = 14, 
# 62
CUDA_C_16BF, 
# 63
CUDA_R_32F = 0, 
# 64
CUDA_C_32F = 4, 
# 65
CUDA_R_64F = 1, 
# 66
CUDA_C_64F = 5, 
# 67
CUDA_R_4I = 16, 
# 68
CUDA_C_4I, 
# 69
CUDA_R_4U, 
# 70
CUDA_C_4U, 
# 71
CUDA_R_8I = 3, 
# 72
CUDA_C_8I = 7, 
# 73
CUDA_R_8U, 
# 74
CUDA_C_8U, 
# 75
CUDA_R_16I = 20, 
# 76
CUDA_C_16I, 
# 77
CUDA_R_16U, 
# 78
CUDA_C_16U, 
# 79
CUDA_R_32I = 10, 
# 80
CUDA_C_32I, 
# 81
CUDA_R_32U, 
# 82
CUDA_C_32U, 
# 83
CUDA_R_64I = 24, 
# 84
CUDA_C_64I, 
# 85
CUDA_R_64U, 
# 86
CUDA_C_64U, 
# 87
CUDA_R_8F_E4M3, 
# 88
CUDA_R_8F_E5M2
# 89
} cudaDataType; 
# 97
typedef 
# 92
enum libraryPropertyType_t { 
# 94
MAJOR_VERSION, 
# 95
MINOR_VERSION, 
# 96
PATCH_LEVEL
# 97
} libraryPropertyType; 
# 278 "/usr/include/x86_64-linux-gnu/c++/11/bits/c++config.h" 3
namespace std { 
# 280
typedef unsigned long size_t; 
# 281
typedef long ptrdiff_t; 
# 284
typedef __decltype((nullptr)) nullptr_t; 
# 286
}
# 300 "/usr/include/x86_64-linux-gnu/c++/11/bits/c++config.h" 3
namespace std { 
# 302
inline namespace __cxx11 __attribute((__abi_tag__("cxx11"))) { }
# 303
}
# 304
namespace __gnu_cxx { 
# 306
inline namespace __cxx11 __attribute((__abi_tag__("cxx11"))) { }
# 307
}
# 34 "/usr/include/stdlib.h" 3
extern "C" {
# 74 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3
typedef float __complex__ __cfloat128 __attribute((__mode__(__TC__))); 
# 86 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3
typedef __float128 _Float128; 
# 214 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3
typedef float _Float32; 
# 251 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3
typedef double _Float64; 
# 268 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3
typedef double _Float32x; 
# 285 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3
typedef long double _Float64x; 
# 63 "/usr/include/stdlib.h" 3
typedef 
# 60
struct { 
# 61
int quot; 
# 62
int rem; 
# 63
} div_t; 
# 71
typedef 
# 68
struct { 
# 69
long quot; 
# 70
long rem; 
# 71
} ldiv_t; 
# 81
__extension__ typedef 
# 78
struct { 
# 79
long long quot; 
# 80
long long rem; 
# 81
} lldiv_t; 
# 98 "/usr/include/stdlib.h" 3
extern size_t __ctype_get_mb_cur_max() noexcept(true); 
# 102
extern double atof(const char * __nptr) noexcept(true)
# 103
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 105
extern int atoi(const char * __nptr) noexcept(true)
# 106
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 108
extern long atol(const char * __nptr) noexcept(true)
# 109
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 113
__extension__ extern long long atoll(const char * __nptr) noexcept(true)
# 114
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 118
extern double strtod(const char *__restrict__ __nptr, char **__restrict__ __endptr) noexcept(true)
# 120
 __attribute((__nonnull__(1))); 
# 124
extern float strtof(const char *__restrict__ __nptr, char **__restrict__ __endptr) noexcept(true)
# 125
 __attribute((__nonnull__(1))); 
# 127
extern long double strtold(const char *__restrict__ __nptr, char **__restrict__ __endptr) noexcept(true)
# 129
 __attribute((__nonnull__(1))); 
# 141 "/usr/include/stdlib.h" 3
extern _Float32 strtof32(const char *__restrict__ __nptr, char **__restrict__ __endptr) noexcept(true)
# 143
 __attribute((__nonnull__(1))); 
# 147
extern _Float64 strtof64(const char *__restrict__ __nptr, char **__restrict__ __endptr) noexcept(true)
# 149
 __attribute((__nonnull__(1))); 
# 153
extern _Float128 strtof128(const char *__restrict__ __nptr, char **__restrict__ __endptr) noexcept(true)
# 155
 __attribute((__nonnull__(1))); 
# 159
extern _Float32x strtof32x(const char *__restrict__ __nptr, char **__restrict__ __endptr) noexcept(true)
# 161
 __attribute((__nonnull__(1))); 
# 165
extern _Float64x strtof64x(const char *__restrict__ __nptr, char **__restrict__ __endptr) noexcept(true)
# 167
 __attribute((__nonnull__(1))); 
# 177 "/usr/include/stdlib.h" 3
extern long strtol(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) noexcept(true)
# 179
 __attribute((__nonnull__(1))); 
# 181
extern unsigned long strtoul(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) noexcept(true)
# 183
 __attribute((__nonnull__(1))); 
# 188
__extension__ extern long long strtoq(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) noexcept(true)
# 190
 __attribute((__nonnull__(1))); 
# 193
__extension__ extern unsigned long long strtouq(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) noexcept(true)
# 195
 __attribute((__nonnull__(1))); 
# 201
__extension__ extern long long strtoll(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) noexcept(true)
# 203
 __attribute((__nonnull__(1))); 
# 206
__extension__ extern unsigned long long strtoull(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) noexcept(true)
# 208
 __attribute((__nonnull__(1))); 
# 213
extern int strfromd(char * __dest, size_t __size, const char * __format, double __f) noexcept(true)
# 215
 __attribute((__nonnull__(3))); 
# 217
extern int strfromf(char * __dest, size_t __size, const char * __format, float __f) noexcept(true)
# 219
 __attribute((__nonnull__(3))); 
# 221
extern int strfroml(char * __dest, size_t __size, const char * __format, long double __f) noexcept(true)
# 223
 __attribute((__nonnull__(3))); 
# 233 "/usr/include/stdlib.h" 3
extern int strfromf32(char * __dest, size_t __size, const char * __format, _Float32 __f) noexcept(true)
# 235
 __attribute((__nonnull__(3))); 
# 239
extern int strfromf64(char * __dest, size_t __size, const char * __format, _Float64 __f) noexcept(true)
# 241
 __attribute((__nonnull__(3))); 
# 245
extern int strfromf128(char * __dest, size_t __size, const char * __format, _Float128 __f) noexcept(true)
# 247
 __attribute((__nonnull__(3))); 
# 251
extern int strfromf32x(char * __dest, size_t __size, const char * __format, _Float32x __f) noexcept(true)
# 253
 __attribute((__nonnull__(3))); 
# 257
extern int strfromf64x(char * __dest, size_t __size, const char * __format, _Float64x __f) noexcept(true)
# 259
 __attribute((__nonnull__(3))); 
# 275 "/usr/include/stdlib.h" 3
extern long strtol_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base, locale_t __loc) noexcept(true)
# 277
 __attribute((__nonnull__(1, 4))); 
# 279
extern unsigned long strtoul_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base, locale_t __loc) noexcept(true)
# 282
 __attribute((__nonnull__(1, 4))); 
# 285
__extension__ extern long long strtoll_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base, locale_t __loc) noexcept(true)
# 288
 __attribute((__nonnull__(1, 4))); 
# 291
__extension__ extern unsigned long long strtoull_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base, locale_t __loc) noexcept(true)
# 294
 __attribute((__nonnull__(1, 4))); 
# 296
extern double strtod_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) noexcept(true)
# 298
 __attribute((__nonnull__(1, 3))); 
# 300
extern float strtof_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) noexcept(true)
# 302
 __attribute((__nonnull__(1, 3))); 
# 304
extern long double strtold_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) noexcept(true)
# 307
 __attribute((__nonnull__(1, 3))); 
# 317 "/usr/include/stdlib.h" 3
extern _Float32 strtof32_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) noexcept(true)
# 320
 __attribute((__nonnull__(1, 3))); 
# 324
extern _Float64 strtof64_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) noexcept(true)
# 327
 __attribute((__nonnull__(1, 3))); 
# 331
extern _Float128 strtof128_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) noexcept(true)
# 334
 __attribute((__nonnull__(1, 3))); 
# 338
extern _Float32x strtof32x_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) noexcept(true)
# 341
 __attribute((__nonnull__(1, 3))); 
# 345
extern _Float64x strtof64x_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) noexcept(true)
# 348
 __attribute((__nonnull__(1, 3))); 
# 386 "/usr/include/stdlib.h" 3
extern char *l64a(long __n) noexcept(true); 
# 389
extern long a64l(const char * __s) noexcept(true)
# 390
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
extern "C" {
# 33
typedef __u_char u_char; 
# 34
typedef __u_short u_short; 
# 35
typedef __u_int u_int; 
# 36
typedef __u_long u_long; 
# 37
typedef __quad_t quad_t; 
# 38
typedef __u_quad_t u_quad_t; 
# 39
typedef __fsid_t fsid_t; 
# 42
typedef __loff_t loff_t; 
# 47
typedef __ino_t ino_t; 
# 54
typedef __ino64_t ino64_t; 
# 59
typedef __dev_t dev_t; 
# 64
typedef __gid_t gid_t; 
# 69
typedef __mode_t mode_t; 
# 74
typedef __nlink_t nlink_t; 
# 79
typedef __uid_t uid_t; 
# 85
typedef __off_t off_t; 
# 92
typedef __off64_t off64_t; 
# 97
typedef __pid_t pid_t; 
# 103
typedef __id_t id_t; 
# 108
typedef __ssize_t ssize_t; 
# 114
typedef __daddr_t daddr_t; 
# 115
typedef __caddr_t caddr_t; 
# 121
typedef __key_t key_t; 
# 7 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h" 3
typedef __clock_t clock_t; 
# 7 "/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h" 3
typedef __clockid_t clockid_t; 
# 10 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 3
typedef __time_t time_t; 
# 7 "/usr/include/x86_64-linux-gnu/bits/types/timer_t.h" 3
typedef __timer_t timer_t; 
# 134 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __useconds_t useconds_t; 
# 138
typedef __suseconds_t suseconds_t; 
# 148 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef unsigned long ulong; 
# 149
typedef unsigned short ushort; 
# 150
typedef unsigned uint; 
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 3
typedef __int8_t int8_t; 
# 25
typedef __int16_t int16_t; 
# 26
typedef __int32_t int32_t; 
# 27
typedef __int64_t int64_t; 
# 158 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __uint8_t u_int8_t; 
# 159
typedef __uint16_t u_int16_t; 
# 160
typedef __uint32_t u_int32_t; 
# 161
typedef __uint64_t u_int64_t; 
# 164
typedef long register_t __attribute((__mode__(__word__))); 
# 34 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3
static inline __uint16_t __bswap_16(__uint16_t __bsx) 
# 35
{ 
# 37
return __builtin_bswap16(__bsx); 
# 41
} 
# 49
static inline __uint32_t __bswap_32(__uint32_t __bsx) 
# 50
{ 
# 52
return __builtin_bswap32(__bsx); 
# 56
} 
# 70 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3
__extension__ static inline __uint64_t __bswap_64(__uint64_t __bsx) 
# 71
{ 
# 73
return __builtin_bswap64(__bsx); 
# 77
} 
# 33 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 3
static inline __uint16_t __uint16_identity(__uint16_t __x) 
# 34
{ 
# 35
return __x; 
# 36
} 
# 39
static inline __uint32_t __uint32_identity(__uint32_t __x) 
# 40
{ 
# 41
return __x; 
# 42
} 
# 45
static inline __uint64_t __uint64_identity(__uint64_t __x) 
# 46
{ 
# 47
return __x; 
# 48
} 
# 8 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h" 3
typedef 
# 6
struct { 
# 7
unsigned long __val[(1024) / ((8) * sizeof(unsigned long))]; 
# 8
} __sigset_t; 
# 7 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 3
typedef __sigset_t sigset_t; 
# 8 "/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h" 3
struct timeval { 
# 14
__time_t tv_sec; 
# 15
__suseconds_t tv_usec; 
# 17
}; 
# 11 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3
struct timespec { 
# 16
__time_t tv_sec; 
# 21
__syscall_slong_t tv_nsec; 
# 31 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3
}; 
# 49 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
typedef long __fd_mask; 
# 70 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
typedef 
# 60
struct { 
# 64
__fd_mask fds_bits[1024 / (8 * ((int)sizeof(__fd_mask)))]; 
# 70
} fd_set; 
# 77
typedef __fd_mask fd_mask; 
# 91 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
extern "C" {
# 102 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
extern int select(int __nfds, fd_set *__restrict__ __readfds, fd_set *__restrict__ __writefds, fd_set *__restrict__ __exceptfds, timeval *__restrict__ __timeout); 
# 127 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
extern int pselect(int __nfds, fd_set *__restrict__ __readfds, fd_set *__restrict__ __writefds, fd_set *__restrict__ __exceptfds, const timespec *__restrict__ __timeout, const __sigset_t *__restrict__ __sigmask); 
# 153 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
}
# 185 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __blksize_t blksize_t; 
# 192
typedef __blkcnt_t blkcnt_t; 
# 196
typedef __fsblkcnt_t fsblkcnt_t; 
# 200
typedef __fsfilcnt_t fsfilcnt_t; 
# 219 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __blkcnt64_t blkcnt64_t; 
# 220
typedef __fsblkcnt64_t fsblkcnt64_t; 
# 221
typedef __fsfilcnt64_t fsfilcnt64_t; 
# 33 "/usr/include/x86_64-linux-gnu/bits/atomic_wide_counter.h" 3
typedef 
# 26
union { 
# 27
__extension__ unsigned long long __value64; 
# 29
struct { 
# 30
unsigned __low; 
# 31
unsigned __high; 
# 32
} __value32; 
# 33
} __atomic_wide_counter; 
# 55 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3
typedef 
# 51
struct __pthread_internal_list { 
# 53
__pthread_internal_list *__prev; 
# 54
__pthread_internal_list *__next; 
# 55
} __pthread_list_t; 
# 60
typedef 
# 57
struct __pthread_internal_slist { 
# 59
__pthread_internal_slist *__next; 
# 60
} __pthread_slist_t; 
# 22 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3
struct __pthread_mutex_s { 
# 24
int __lock; 
# 25
unsigned __count; 
# 26
int __owner; 
# 28
unsigned __nusers; 
# 32
int __kind; 
# 34
short __spins; 
# 35
short __elision; 
# 36
__pthread_list_t __list; 
# 53 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3
}; 
# 23 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3
struct __pthread_rwlock_arch_t { 
# 25
unsigned __readers; 
# 26
unsigned __writers; 
# 27
unsigned __wrphase_futex; 
# 28
unsigned __writers_futex; 
# 29
unsigned __pad3; 
# 30
unsigned __pad4; 
# 32
int __cur_writer; 
# 33
int __shared; 
# 34
signed char __rwelision; 
# 39
unsigned char __pad1[7]; 
# 42
unsigned long __pad2; 
# 45
unsigned __flags; 
# 55 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3
}; 
# 94 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3
struct __pthread_cond_s { 
# 96
__atomic_wide_counter __wseq; 
# 97
__atomic_wide_counter __g1_start; 
# 98
unsigned __g_refs[2]; 
# 99
unsigned __g_size[2]; 
# 100
unsigned __g1_orig_size; 
# 101
unsigned __wrefs; 
# 102
unsigned __g_signals[2]; 
# 103
}; 
# 105
typedef unsigned __tss_t; 
# 106
typedef unsigned long __thrd_t; 
# 111
typedef 
# 109
struct { 
# 110
int __data; 
# 111
} __once_flag; 
# 27 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
typedef unsigned long pthread_t; 
# 36
typedef 
# 33
union { 
# 34
char __size[4]; 
# 35
int __align; 
# 36
} pthread_mutexattr_t; 
# 45
typedef 
# 42
union { 
# 43
char __size[4]; 
# 44
int __align; 
# 45
} pthread_condattr_t; 
# 49
typedef unsigned pthread_key_t; 
# 53
typedef int pthread_once_t; 
# 56
union pthread_attr_t { 
# 58
char __size[56]; 
# 59
long __align; 
# 60
}; 
# 62
typedef pthread_attr_t pthread_attr_t; 
# 72
typedef 
# 68
union { 
# 69
__pthread_mutex_s __data; 
# 70
char __size[40]; 
# 71
long __align; 
# 72
} pthread_mutex_t; 
# 80
typedef 
# 76
union { 
# 77
__pthread_cond_s __data; 
# 78
char __size[48]; 
# 79
__extension__ long long __align; 
# 80
} pthread_cond_t; 
# 91
typedef 
# 87
union { 
# 88
__pthread_rwlock_arch_t __data; 
# 89
char __size[56]; 
# 90
long __align; 
# 91
} pthread_rwlock_t; 
# 97
typedef 
# 94
union { 
# 95
char __size[8]; 
# 96
long __align; 
# 97
} pthread_rwlockattr_t; 
# 103
typedef volatile int pthread_spinlock_t; 
# 112
typedef 
# 109
union { 
# 110
char __size[32]; 
# 111
long __align; 
# 112
} pthread_barrier_t; 
# 118
typedef 
# 115
union { 
# 116
char __size[4]; 
# 117
int __align; 
# 118
} pthread_barrierattr_t; 
# 230 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
}
# 402 "/usr/include/stdlib.h" 3
extern long random() noexcept(true); 
# 405
extern void srandom(unsigned __seed) noexcept(true); 
# 411
extern char *initstate(unsigned __seed, char * __statebuf, size_t __statelen) noexcept(true)
# 412
 __attribute((__nonnull__(2))); 
# 416
extern char *setstate(char * __statebuf) noexcept(true) __attribute((__nonnull__(1))); 
# 424
struct random_data { 
# 426
int32_t *fptr; 
# 427
int32_t *rptr; 
# 428
int32_t *state; 
# 429
int rand_type; 
# 430
int rand_deg; 
# 431
int rand_sep; 
# 432
int32_t *end_ptr; 
# 433
}; 
# 435
extern int random_r(random_data *__restrict__ __buf, int32_t *__restrict__ __result) noexcept(true)
# 436
 __attribute((__nonnull__(1, 2))); 
# 438
extern int srandom_r(unsigned __seed, random_data * __buf) noexcept(true)
# 439
 __attribute((__nonnull__(2))); 
# 441
extern int initstate_r(unsigned __seed, char *__restrict__ __statebuf, size_t __statelen, random_data *__restrict__ __buf) noexcept(true)
# 444
 __attribute((__nonnull__(2, 4))); 
# 446
extern int setstate_r(char *__restrict__ __statebuf, random_data *__restrict__ __buf) noexcept(true)
# 448
 __attribute((__nonnull__(1, 2))); 
# 454
extern int rand() noexcept(true); 
# 456
extern void srand(unsigned __seed) noexcept(true); 
# 460
extern int rand_r(unsigned * __seed) noexcept(true); 
# 468
extern double drand48() noexcept(true); 
# 469
extern double erand48(unsigned short  __xsubi[3]) noexcept(true) __attribute((__nonnull__(1))); 
# 472
extern long lrand48() noexcept(true); 
# 473
extern long nrand48(unsigned short  __xsubi[3]) noexcept(true)
# 474
 __attribute((__nonnull__(1))); 
# 477
extern long mrand48() noexcept(true); 
# 478
extern long jrand48(unsigned short  __xsubi[3]) noexcept(true)
# 479
 __attribute((__nonnull__(1))); 
# 482
extern void srand48(long __seedval) noexcept(true); 
# 483
extern unsigned short *seed48(unsigned short  __seed16v[3]) noexcept(true)
# 484
 __attribute((__nonnull__(1))); 
# 485
extern void lcong48(unsigned short  __param[7]) noexcept(true) __attribute((__nonnull__(1))); 
# 491
struct drand48_data { 
# 493
unsigned short __x[3]; 
# 494
unsigned short __old_x[3]; 
# 495
unsigned short __c; 
# 496
unsigned short __init; 
# 497
__extension__ unsigned long long __a; 
# 499
}; 
# 502
extern int drand48_r(drand48_data *__restrict__ __buffer, double *__restrict__ __result) noexcept(true)
# 503
 __attribute((__nonnull__(1, 2))); 
# 504
extern int erand48_r(unsigned short  __xsubi[3], drand48_data *__restrict__ __buffer, double *__restrict__ __result) noexcept(true)
# 506
 __attribute((__nonnull__(1, 2))); 
# 509
extern int lrand48_r(drand48_data *__restrict__ __buffer, long *__restrict__ __result) noexcept(true)
# 511
 __attribute((__nonnull__(1, 2))); 
# 512
extern int nrand48_r(unsigned short  __xsubi[3], drand48_data *__restrict__ __buffer, long *__restrict__ __result) noexcept(true)
# 515
 __attribute((__nonnull__(1, 2))); 
# 518
extern int mrand48_r(drand48_data *__restrict__ __buffer, long *__restrict__ __result) noexcept(true)
# 520
 __attribute((__nonnull__(1, 2))); 
# 521
extern int jrand48_r(unsigned short  __xsubi[3], drand48_data *__restrict__ __buffer, long *__restrict__ __result) noexcept(true)
# 524
 __attribute((__nonnull__(1, 2))); 
# 527
extern int srand48_r(long __seedval, drand48_data * __buffer) noexcept(true)
# 528
 __attribute((__nonnull__(2))); 
# 530
extern int seed48_r(unsigned short  __seed16v[3], drand48_data * __buffer) noexcept(true)
# 531
 __attribute((__nonnull__(1, 2))); 
# 533
extern int lcong48_r(unsigned short  __param[7], drand48_data * __buffer) noexcept(true)
# 535
 __attribute((__nonnull__(1, 2))); 
# 540
extern void *malloc(size_t __size) noexcept(true) __attribute((__malloc__))
# 541
 __attribute((__alloc_size__(1))); 
# 543
extern void *calloc(size_t __nmemb, size_t __size) noexcept(true)
# 544
 __attribute((__malloc__)) __attribute((__alloc_size__(1, 2))); 
# 551
extern void *realloc(void * __ptr, size_t __size) noexcept(true)
# 552
 __attribute((__warn_unused_result__)) __attribute((__alloc_size__(2))); 
# 555
extern void free(void * __ptr) noexcept(true); 
# 563
extern void *reallocarray(void * __ptr, size_t __nmemb, size_t __size) noexcept(true)
# 564
 __attribute((__warn_unused_result__))
# 565
 __attribute((__alloc_size__(2, 3)))
# 566
 __attribute((__malloc__(__builtin_free, 1))); 
# 569
extern void *reallocarray(void * __ptr, size_t __nmemb, size_t __size) noexcept(true)
# 570
 __attribute((__malloc__(reallocarray, 1))); 
# 26 "/usr/include/alloca.h" 3
extern "C" {
# 32
extern void *alloca(size_t __size) noexcept(true); 
# 38
}
# 580 "/usr/include/stdlib.h" 3
extern void *valloc(size_t __size) noexcept(true) __attribute((__malloc__))
# 581
 __attribute((__alloc_size__(1))); 
# 586
extern int posix_memalign(void ** __memptr, size_t __alignment, size_t __size) noexcept(true)
# 587
 __attribute((__nonnull__(1))); 
# 592
extern void *aligned_alloc(size_t __alignment, size_t __size) noexcept(true)
# 593
 __attribute((__malloc__)) __attribute((__alloc_align__(1 )))
# 594
 __attribute((__alloc_size__(2))); 
# 598
extern void abort() noexcept(true) __attribute((__noreturn__)); 
# 602
extern int atexit(void (* __func)(void)) noexcept(true) __attribute((__nonnull__(1))); 
# 607
extern "C++" int at_quick_exit(void (* __func)(void)) noexcept(true) __asm__("at_quick_exit")
# 608
 __attribute((__nonnull__(1))); 
# 617 "/usr/include/stdlib.h" 3
extern int on_exit(void (* __func)(int __status, void * __arg), void * __arg) noexcept(true)
# 618
 __attribute((__nonnull__(1))); 
# 624
extern void exit(int __status) noexcept(true) __attribute((__noreturn__)); 
# 630
extern void quick_exit(int __status) noexcept(true) __attribute((__noreturn__)); 
# 636
extern void _Exit(int __status) noexcept(true) __attribute((__noreturn__)); 
# 641
extern char *getenv(const char * __name) noexcept(true) __attribute((__nonnull__(1))); 
# 646
extern char *secure_getenv(const char * __name) noexcept(true)
# 647
 __attribute((__nonnull__(1))); 
# 654
extern int putenv(char * __string) noexcept(true) __attribute((__nonnull__(1))); 
# 660
extern int setenv(const char * __name, const char * __value, int __replace) noexcept(true)
# 661
 __attribute((__nonnull__(2))); 
# 664
extern int unsetenv(const char * __name) noexcept(true) __attribute((__nonnull__(1))); 
# 671
extern int clearenv() noexcept(true); 
# 682 "/usr/include/stdlib.h" 3
extern char *mktemp(char * __template) noexcept(true) __attribute((__nonnull__(1))); 
# 695 "/usr/include/stdlib.h" 3
extern int mkstemp(char * __template) __attribute((__nonnull__(1))); 
# 705 "/usr/include/stdlib.h" 3
extern int mkstemp64(char * __template) __attribute((__nonnull__(1))); 
# 717 "/usr/include/stdlib.h" 3
extern int mkstemps(char * __template, int __suffixlen) __attribute((__nonnull__(1))); 
# 727 "/usr/include/stdlib.h" 3
extern int mkstemps64(char * __template, int __suffixlen)
# 728
 __attribute((__nonnull__(1))); 
# 738 "/usr/include/stdlib.h" 3
extern char *mkdtemp(char * __template) noexcept(true) __attribute((__nonnull__(1))); 
# 749 "/usr/include/stdlib.h" 3
extern int mkostemp(char * __template, int __flags) __attribute((__nonnull__(1))); 
# 759 "/usr/include/stdlib.h" 3
extern int mkostemp64(char * __template, int __flags) __attribute((__nonnull__(1))); 
# 769 "/usr/include/stdlib.h" 3
extern int mkostemps(char * __template, int __suffixlen, int __flags)
# 770
 __attribute((__nonnull__(1))); 
# 781 "/usr/include/stdlib.h" 3
extern int mkostemps64(char * __template, int __suffixlen, int __flags)
# 782
 __attribute((__nonnull__(1))); 
# 791 "/usr/include/stdlib.h" 3
extern int system(const char * __command); 
# 797
extern char *canonicalize_file_name(const char * __name) noexcept(true)
# 798
 __attribute((__nonnull__(1))) __attribute((__malloc__))
# 799
 __attribute((__malloc__(__builtin_free, 1))); 
# 808 "/usr/include/stdlib.h" 3
extern char *realpath(const char *__restrict__ __name, char *__restrict__ __resolved) noexcept(true); 
# 816
typedef int (*__compar_fn_t)(const void *, const void *); 
# 819
typedef __compar_fn_t comparison_fn_t; 
# 823
typedef int (*__compar_d_fn_t)(const void *, const void *, void *); 
# 828
extern void *bsearch(const void * __key, const void * __base, size_t __nmemb, size_t __size, __compar_fn_t __compar)
# 830
 __attribute((__nonnull__(1, 2, 5))); 
# 838
extern void qsort(void * __base, size_t __nmemb, size_t __size, __compar_fn_t __compar)
# 839
 __attribute((__nonnull__(1, 4))); 
# 841
extern void qsort_r(void * __base, size_t __nmemb, size_t __size, __compar_d_fn_t __compar, void * __arg)
# 843
 __attribute((__nonnull__(1, 4))); 
# 848
extern int abs(int __x) noexcept(true) __attribute((const)); 
# 849
extern long labs(long __x) noexcept(true) __attribute((const)); 
# 852
__extension__ extern long long llabs(long long __x) noexcept(true)
# 853
 __attribute((const)); 
# 860
extern div_t div(int __numer, int __denom) noexcept(true)
# 861
 __attribute((const)); 
# 862
extern ldiv_t ldiv(long __numer, long __denom) noexcept(true)
# 863
 __attribute((const)); 
# 866
__extension__ extern lldiv_t lldiv(long long __numer, long long __denom) noexcept(true)
# 868
 __attribute((const)); 
# 880 "/usr/include/stdlib.h" 3
extern char *ecvt(double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign) noexcept(true)
# 881
 __attribute((__nonnull__(3, 4))); 
# 886
extern char *fcvt(double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign) noexcept(true)
# 887
 __attribute((__nonnull__(3, 4))); 
# 892
extern char *gcvt(double __value, int __ndigit, char * __buf) noexcept(true)
# 893
 __attribute((__nonnull__(3))); 
# 898
extern char *qecvt(long double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign) noexcept(true)
# 900
 __attribute((__nonnull__(3, 4))); 
# 901
extern char *qfcvt(long double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign) noexcept(true)
# 903
 __attribute((__nonnull__(3, 4))); 
# 904
extern char *qgcvt(long double __value, int __ndigit, char * __buf) noexcept(true)
# 905
 __attribute((__nonnull__(3))); 
# 910
extern int ecvt_r(double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign, char *__restrict__ __buf, size_t __len) noexcept(true)
# 912
 __attribute((__nonnull__(3, 4, 5))); 
# 913
extern int fcvt_r(double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign, char *__restrict__ __buf, size_t __len) noexcept(true)
# 915
 __attribute((__nonnull__(3, 4, 5))); 
# 917
extern int qecvt_r(long double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign, char *__restrict__ __buf, size_t __len) noexcept(true)
# 920
 __attribute((__nonnull__(3, 4, 5))); 
# 921
extern int qfcvt_r(long double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign, char *__restrict__ __buf, size_t __len) noexcept(true)
# 924
 __attribute((__nonnull__(3, 4, 5))); 
# 930
extern int mblen(const char * __s, size_t __n) noexcept(true); 
# 933
extern int mbtowc(wchar_t *__restrict__ __pwc, const char *__restrict__ __s, size_t __n) noexcept(true); 
# 937
extern int wctomb(char * __s, wchar_t __wchar) noexcept(true); 
# 941
extern size_t mbstowcs(wchar_t *__restrict__ __pwcs, const char *__restrict__ __s, size_t __n) noexcept(true)
# 943
 __attribute((__access__(__read_only__ , 2 ))); 
# 945
extern size_t wcstombs(char *__restrict__ __s, const wchar_t *__restrict__ __pwcs, size_t __n) noexcept(true)
# 948
 __attribute((__access__(__write_only__ , 1 , 3 )))
# 949
 __attribute((__access__(__read_only__ , 2 ))); 
# 956
extern int rpmatch(const char * __response) noexcept(true) __attribute((__nonnull__(1))); 
# 967 "/usr/include/stdlib.h" 3
extern int getsubopt(char **__restrict__ __optionp, char *const *__restrict__ __tokens, char **__restrict__ __valuep) noexcept(true)
# 970
 __attribute((__nonnull__(1, 2, 3))); 
# 978
extern int posix_openpt(int __oflag); 
# 986
extern int grantpt(int __fd) noexcept(true); 
# 990
extern int unlockpt(int __fd) noexcept(true); 
# 995
extern char *ptsname(int __fd) noexcept(true); 
# 1002
extern int ptsname_r(int __fd, char * __buf, size_t __buflen) noexcept(true)
# 1003
 __attribute((__nonnull__(2))) __attribute((__access__(__write_only__ , 2 , 3 ))); 
# 1006
extern int getpt(); 
# 1013
extern int getloadavg(double  __loadavg[], int __nelem) noexcept(true)
# 1014
 __attribute((__nonnull__(1))); 
# 1035 "/usr/include/stdlib.h" 3
}
# 46 "/usr/include/c++/11/bits/std_abs.h" 3
extern "C++" {
# 48
namespace std __attribute((__visibility__("default"))) { 
# 52
using ::abs;
# 56
inline long abs(long __i) { return __builtin_labs(__i); } 
# 61
inline long long abs(long long __x) { return __builtin_llabs(__x); } 
# 71 "/usr/include/c++/11/bits/std_abs.h" 3
constexpr double abs(double __x) 
# 72
{ return __builtin_fabs(__x); } 
# 75
constexpr float abs(float __x) 
# 76
{ return __builtin_fabsf(__x); } 
# 79
constexpr long double abs(long double __x) 
# 80
{ return __builtin_fabsl(__x); } 
# 108 "/usr/include/c++/11/bits/std_abs.h" 3
}
# 109
}
# 121 "/usr/include/c++/11/cstdlib" 3
extern "C++" {
# 123
namespace std __attribute((__visibility__("default"))) { 
# 127
using ::div_t;
# 128
using ::ldiv_t;
# 130
using ::abort;
# 132
using ::aligned_alloc;
# 134
using ::atexit;
# 137
using ::at_quick_exit;
# 140
using ::atof;
# 141
using ::atoi;
# 142
using ::atol;
# 143
using ::bsearch;
# 144
using ::calloc;
# 145
using ::div;
# 146
using ::exit;
# 147
using ::free;
# 148
using ::getenv;
# 149
using ::labs;
# 150
using ::ldiv;
# 151
using ::malloc;
# 153
using ::mblen;
# 154
using ::mbstowcs;
# 155
using ::mbtowc;
# 157
using ::qsort;
# 160
using ::quick_exit;
# 163
using ::rand;
# 164
using ::realloc;
# 165
using ::srand;
# 166
using ::strtod;
# 167
using ::strtol;
# 168
using ::strtoul;
# 169
using ::system;
# 171
using ::wcstombs;
# 172
using ::wctomb;
# 177
inline ldiv_t div(long __i, long __j) { return ldiv(__i, __j); } 
# 182
}
# 195 "/usr/include/c++/11/cstdlib" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 200
using ::lldiv_t;
# 206
using ::_Exit;
# 210
using ::llabs;
# 213
inline lldiv_t div(long long __n, long long __d) 
# 214
{ lldiv_t __q; (__q.quot) = (__n / __d); (__q.rem) = (__n % __d); return __q; } 
# 216
using ::lldiv;
# 227 "/usr/include/c++/11/cstdlib" 3
using ::atoll;
# 228
using ::strtoll;
# 229
using ::strtoull;
# 231
using ::strtof;
# 232
using ::strtold;
# 235
}
# 237
namespace std { 
# 240
using __gnu_cxx::lldiv_t;
# 242
using __gnu_cxx::_Exit;
# 244
using __gnu_cxx::llabs;
# 245
using __gnu_cxx::div;
# 246
using __gnu_cxx::lldiv;
# 248
using __gnu_cxx::atoll;
# 249
using __gnu_cxx::strtof;
# 250
using __gnu_cxx::strtoll;
# 251
using __gnu_cxx::strtoull;
# 252
using __gnu_cxx::strtold;
# 253
}
# 257
}
# 38 "/usr/include/c++/11/stdlib.h" 3
using std::abort;
# 39
using std::atexit;
# 40
using std::exit;
# 43
using std::at_quick_exit;
# 46
using std::quick_exit;
# 54
using std::abs;
# 55
using std::atof;
# 56
using std::atoi;
# 57
using std::atol;
# 58
using std::bsearch;
# 59
using std::calloc;
# 60
using std::div;
# 61
using std::free;
# 62
using std::getenv;
# 63
using std::labs;
# 64
using std::ldiv;
# 65
using std::malloc;
# 67
using std::mblen;
# 68
using std::mbstowcs;
# 69
using std::mbtowc;
# 71
using std::qsort;
# 72
using std::rand;
# 73
using std::realloc;
# 74
using std::srand;
# 75
using std::strtod;
# 76
using std::strtol;
# 77
using std::strtoul;
# 78
using std::system;
# 80
using std::wcstombs;
# 81
using std::wctomb;
# 184 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_device_runtime_api.h" 3
extern "C" {
# 191
__attribute__((unused)) extern cudaError_t __cudaDeviceSynchronizeDeprecationAvoidance(); 
# 244 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_device_runtime_api.h" 3
__attribute__((unused)) extern cudaError_t __cudaCDP2DeviceGetAttribute(int * value, cudaDeviceAttr attr, int device); 
# 245
__attribute__((unused)) extern cudaError_t __cudaCDP2DeviceGetLimit(size_t * pValue, cudaLimit limit); 
# 246
__attribute__((unused)) extern cudaError_t __cudaCDP2DeviceGetCacheConfig(cudaFuncCache * pCacheConfig); 
# 247
__attribute__((unused)) extern cudaError_t __cudaCDP2DeviceGetSharedMemConfig(cudaSharedMemConfig * pConfig); 
# 248
__attribute__((unused)) extern cudaError_t __cudaCDP2GetLastError(); 
# 249
__attribute__((unused)) extern cudaError_t __cudaCDP2PeekAtLastError(); 
# 250
__attribute__((unused)) extern const char *__cudaCDP2GetErrorString(cudaError_t error); 
# 251
__attribute__((unused)) extern const char *__cudaCDP2GetErrorName(cudaError_t error); 
# 252
__attribute__((unused)) extern cudaError_t __cudaCDP2GetDeviceCount(int * count); 
# 253
__attribute__((unused)) extern cudaError_t __cudaCDP2GetDevice(int * device); 
# 254
__attribute__((unused)) extern cudaError_t __cudaCDP2StreamCreateWithFlags(cudaStream_t * pStream, unsigned flags); 
# 255
__attribute__((unused)) extern cudaError_t __cudaCDP2StreamDestroy(cudaStream_t stream); 
# 256
__attribute__((unused)) extern cudaError_t __cudaCDP2StreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned flags); 
# 257
__attribute__((unused)) extern cudaError_t __cudaCDP2StreamWaitEvent_ptsz(cudaStream_t stream, cudaEvent_t event, unsigned flags); 
# 258
__attribute__((unused)) extern cudaError_t __cudaCDP2EventCreateWithFlags(cudaEvent_t * event, unsigned flags); 
# 259
__attribute__((unused)) extern cudaError_t __cudaCDP2EventRecord(cudaEvent_t event, cudaStream_t stream); 
# 260
__attribute__((unused)) extern cudaError_t __cudaCDP2EventRecord_ptsz(cudaEvent_t event, cudaStream_t stream); 
# 261
__attribute__((unused)) extern cudaError_t __cudaCDP2EventRecordWithFlags(cudaEvent_t event, cudaStream_t stream, unsigned flags); 
# 262
__attribute__((unused)) extern cudaError_t __cudaCDP2EventRecordWithFlags_ptsz(cudaEvent_t event, cudaStream_t stream, unsigned flags); 
# 263
__attribute__((unused)) extern cudaError_t __cudaCDP2EventDestroy(cudaEvent_t event); 
# 264
__attribute__((unused)) extern cudaError_t __cudaCDP2FuncGetAttributes(cudaFuncAttributes * attr, const void * func); 
# 265
__attribute__((unused)) extern cudaError_t __cudaCDP2Free(void * devPtr); 
# 266
__attribute__((unused)) extern cudaError_t __cudaCDP2Malloc(void ** devPtr, size_t size); 
# 267
__attribute__((unused)) extern cudaError_t __cudaCDP2MemcpyAsync(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream); 
# 268
__attribute__((unused)) extern cudaError_t __cudaCDP2MemcpyAsync_ptsz(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream); 
# 269
__attribute__((unused)) extern cudaError_t __cudaCDP2Memcpy2DAsync(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream); 
# 270
__attribute__((unused)) extern cudaError_t __cudaCDP2Memcpy2DAsync_ptsz(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream); 
# 271
__attribute__((unused)) extern cudaError_t __cudaCDP2Memcpy3DAsync(const cudaMemcpy3DParms * p, cudaStream_t stream); 
# 272
__attribute__((unused)) extern cudaError_t __cudaCDP2Memcpy3DAsync_ptsz(const cudaMemcpy3DParms * p, cudaStream_t stream); 
# 273
__attribute__((unused)) extern cudaError_t __cudaCDP2MemsetAsync(void * devPtr, int value, size_t count, cudaStream_t stream); 
# 274
__attribute__((unused)) extern cudaError_t __cudaCDP2MemsetAsync_ptsz(void * devPtr, int value, size_t count, cudaStream_t stream); 
# 275
__attribute__((unused)) extern cudaError_t __cudaCDP2Memset2DAsync(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream); 
# 276
__attribute__((unused)) extern cudaError_t __cudaCDP2Memset2DAsync_ptsz(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream); 
# 277
__attribute__((unused)) extern cudaError_t __cudaCDP2Memset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream); 
# 278
__attribute__((unused)) extern cudaError_t __cudaCDP2Memset3DAsync_ptsz(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream); 
# 279
__attribute__((unused)) extern cudaError_t __cudaCDP2RuntimeGetVersion(int * runtimeVersion); 
# 280
__attribute__((unused)) extern void *__cudaCDP2GetParameterBuffer(size_t alignment, size_t size); 
# 281
__attribute__((unused)) extern void *__cudaCDP2GetParameterBufferV2(void * func, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize); 
# 282
__attribute__((unused)) extern cudaError_t __cudaCDP2LaunchDevice_ptsz(void * func, void * parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream); 
# 283
__attribute__((unused)) extern cudaError_t __cudaCDP2LaunchDeviceV2_ptsz(void * parameterBuffer, cudaStream_t stream); 
# 284
__attribute__((unused)) extern cudaError_t __cudaCDP2LaunchDevice(void * func, void * parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream); 
# 285
__attribute__((unused)) extern cudaError_t __cudaCDP2LaunchDeviceV2(void * parameterBuffer, cudaStream_t stream); 
# 286
__attribute__((unused)) extern cudaError_t __cudaCDP2OccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, const void * func, int blockSize, size_t dynamicSmemSize); 
# 287
__attribute__((unused)) extern cudaError_t __cudaCDP2OccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, const void * func, int blockSize, size_t dynamicSmemSize, unsigned flags); 
# 290
extern cudaError_t cudaGraphLaunch(cudaGraphExec_t graphExec, cudaStream_t stream); 
# 311 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_device_runtime_api.h" 3
__attribute__((unused)) static inline cudaGraphExec_t cudaGetCurrentGraphExec() 
# 312
{int volatile ___ = 1;
# 316
::exit(___);}
#if 0
# 312
{ 
# 313
unsigned long long current_graph_exec; 
# 314
__asm__("mov.u64 %0, %%current_graph_exec;" : "=l" (current_graph_exec) :); 
# 315
return (cudaGraphExec_t)current_graph_exec; 
# 316
} 
#endif
# 346 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_device_runtime_api.h" 3
__attribute__((unused)) extern cudaError_t cudaGraphKernelNodeSetParam(cudaGraphDeviceNode_t node, size_t offset, const void * value, size_t size); 
# 374 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_device_runtime_api.h" 3
__attribute__((unused)) extern cudaError_t cudaGraphKernelNodeSetEnabled(cudaGraphDeviceNode_t node, bool enable); 
# 401 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_device_runtime_api.h" 3
__attribute__((unused)) extern cudaError_t cudaGraphKernelNodeSetGridDim(cudaGraphDeviceNode_t node, dim3 gridDim); 
# 430 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_device_runtime_api.h" 3
__attribute__((unused)) extern cudaError_t cudaGraphKernelNodeUpdatesApply(const cudaGraphKernelNodeUpdate * updates, size_t updateCount); 
# 448 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_device_runtime_api.h" 3
__attribute__((unused)) static inline void cudaTriggerProgrammaticLaunchCompletion() 
# 449
{int volatile ___ = 1;
# 451
::exit(___);}
#if 0
# 449
{ 
# 450
__asm__ volatile("griddepcontrol.launch_dependents;" : :); 
# 451
} 
#endif
# 464 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_device_runtime_api.h" 3
__attribute__((unused)) static inline void cudaGridDependencySynchronize() 
# 465
{int volatile ___ = 1;
# 467
::exit(___);}
#if 0
# 465
{ 
# 466
__asm__ volatile("griddepcontrol.wait;" : : : "memory"); 
# 467
} 
#endif
# 476 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_device_runtime_api.h" 3
__attribute__((unused)) extern void cudaGraphSetConditional(cudaGraphConditionalHandle handle, unsigned value); 
# 479
__attribute__((unused)) extern unsigned long long cudaCGGetIntrinsicHandle(cudaCGScope scope); 
# 480
__attribute__((unused)) extern cudaError_t cudaCGSynchronize(unsigned long long handle, unsigned flags); 
# 481
__attribute__((unused)) extern cudaError_t cudaCGSynchronizeGrid(unsigned long long handle, unsigned flags); 
# 482
__attribute__((unused)) extern cudaError_t cudaCGGetSize(unsigned * numThreads, unsigned * numGrids, unsigned long long handle); 
# 483
__attribute__((unused)) extern cudaError_t cudaCGGetRank(unsigned * threadRank, unsigned * gridRank, unsigned long long handle); 
# 711 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_device_runtime_api.h" 3
__attribute__((unused)) static inline void *cudaGetParameterBuffer(size_t alignment, size_t size) 
# 712
{int volatile ___ = 1;(void)alignment;(void)size;
# 714
::exit(___);}
#if 0
# 712
{ 
# 713
return __cudaCDP2GetParameterBuffer(alignment, size); 
# 714
} 
#endif
# 721 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_device_runtime_api.h" 3
__attribute__((unused)) static inline void *cudaGetParameterBufferV2(void *func, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize) 
# 722
{int volatile ___ = 1;(void)func;(void)gridDimension;(void)blockDimension;(void)sharedMemSize;
# 724
::exit(___);}
#if 0
# 722
{ 
# 723
return __cudaCDP2GetParameterBufferV2(func, gridDimension, blockDimension, sharedMemSize); 
# 724
} 
#endif
# 731 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_device_runtime_api.h" 3
__attribute__((unused)) static inline cudaError_t cudaLaunchDevice_ptsz(void *func, void *parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream) 
# 732
{int volatile ___ = 1;(void)func;(void)parameterBuffer;(void)gridDimension;(void)blockDimension;(void)sharedMemSize;(void)stream;
# 734
::exit(___);}
#if 0
# 732
{ 
# 733
return __cudaCDP2LaunchDevice_ptsz(func, parameterBuffer, gridDimension, blockDimension, sharedMemSize, stream); 
# 734
} 
#endif
# 736 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_device_runtime_api.h" 3
__attribute__((unused)) static inline cudaError_t cudaLaunchDeviceV2_ptsz(void *parameterBuffer, cudaStream_t stream) 
# 737
{int volatile ___ = 1;(void)parameterBuffer;(void)stream;
# 739
::exit(___);}
#if 0
# 737
{ 
# 738
return __cudaCDP2LaunchDeviceV2_ptsz(parameterBuffer, stream); 
# 739
} 
#endif
# 797 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_device_runtime_api.h" 3
__attribute__((unused)) static inline cudaError_t cudaLaunchDevice(void *func, void *parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream) 
# 798
{int volatile ___ = 1;(void)func;(void)parameterBuffer;(void)gridDimension;(void)blockDimension;(void)sharedMemSize;(void)stream;
# 800
::exit(___);}
#if 0
# 798
{ 
# 799
return __cudaCDP2LaunchDevice(func, parameterBuffer, gridDimension, blockDimension, sharedMemSize, stream); 
# 800
} 
#endif
# 802 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_device_runtime_api.h" 3
__attribute__((unused)) static inline cudaError_t cudaLaunchDeviceV2(void *parameterBuffer, cudaStream_t stream) 
# 803
{int volatile ___ = 1;(void)parameterBuffer;(void)stream;
# 805
::exit(___);}
#if 0
# 803
{ 
# 804
return __cudaCDP2LaunchDeviceV2(parameterBuffer, stream); 
# 805
} 
#endif
# 859 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_device_runtime_api.h" 3
}
# 865
template< class T> static inline cudaError_t cudaMalloc(T ** devPtr, size_t size); 
# 866
template< class T> static inline cudaError_t cudaFuncGetAttributes(cudaFuncAttributes * attr, T * entry); 
# 867
template< class T> static inline cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, T func, int blockSize, size_t dynamicSmemSize); 
# 868
template< class T> static inline cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, T func, int blockSize, size_t dynamicSmemSize, unsigned flags); 
# 898 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_device_runtime_api.h" 3
template< class T> __attribute__((unused)) static inline cudaError_t 
# 899
cudaGraphKernelNodeSetParam(cudaGraphDeviceNode_t node, size_t offset, const T &value) 
# 900
{int volatile ___ = 1;(void)node;(void)offset;(void)value;
# 902
::exit(___);}
#if 0
# 900
{ 
# 901
return cudaGraphKernelNodeSetParam(node, offset, &value, sizeof(T)); 
# 902
} 
#endif
# 284 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern "C" {
# 331 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDeviceReset(); 
# 353 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDeviceSynchronize(); 
# 439 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDeviceSetLimit(cudaLimit limit, size_t value); 
# 475 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDeviceGetLimit(size_t * pValue, cudaLimit limit); 
# 498 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDeviceGetTexture1DLinearMaxWidth(size_t * maxWidthInElements, const cudaChannelFormatDesc * fmtDesc, int device); 
# 532 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDeviceGetCacheConfig(cudaFuncCache * pCacheConfig); 
# 569 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDeviceGetStreamPriorityRange(int * leastPriority, int * greatestPriority); 
# 613 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDeviceSetCacheConfig(cudaFuncCache cacheConfig); 
# 640 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDeviceGetByPCIBusId(int * device, const char * pciBusId); 
# 670 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDeviceGetPCIBusId(char * pciBusId, int len, int device); 
# 721 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaIpcGetEventHandle(cudaIpcEventHandle_t * handle, cudaEvent_t event); 
# 765 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaIpcOpenEventHandle(cudaEvent_t * event, cudaIpcEventHandle_t handle); 
# 810 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaIpcGetMemHandle(cudaIpcMemHandle_t * handle, void * devPtr); 
# 877 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaIpcOpenMemHandle(void ** devPtr, cudaIpcMemHandle_t handle, unsigned flags); 
# 916 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaIpcCloseMemHandle(void * devPtr); 
# 948 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDeviceFlushGPUDirectRDMAWrites(cudaFlushGPUDirectRDMAWritesTarget target, cudaFlushGPUDirectRDMAWritesScope scope); 
# 986 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDeviceRegisterAsyncNotification(int device, cudaAsyncCallback callbackFunc, void * userData, cudaAsyncCallbackHandle_t * callback); 
# 1009 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDeviceUnregisterAsyncNotification(int device, cudaAsyncCallbackHandle_t callback); 
# 1056 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
__attribute((deprecated)) extern cudaError_t cudaDeviceGetSharedMemConfig(cudaSharedMemConfig * pConfig); 
# 1102 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
__attribute((deprecated)) extern cudaError_t cudaDeviceSetSharedMemConfig(cudaSharedMemConfig config); 
# 1143 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
__attribute((deprecated)) extern cudaError_t cudaThreadExit(); 
# 1169 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
__attribute((deprecated)) extern cudaError_t cudaThreadSynchronize(); 
# 1218 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
__attribute((deprecated)) extern cudaError_t cudaThreadSetLimit(cudaLimit limit, size_t value); 
# 1251 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
__attribute((deprecated)) extern cudaError_t cudaThreadGetLimit(size_t * pValue, cudaLimit limit); 
# 1287 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
__attribute((deprecated)) extern cudaError_t cudaThreadGetCacheConfig(cudaFuncCache * pCacheConfig); 
# 1334 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
__attribute((deprecated)) extern cudaError_t cudaThreadSetCacheConfig(cudaFuncCache cacheConfig); 
# 1399 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGetLastError(); 
# 1450 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaPeekAtLastError(); 
# 1466 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern const char *cudaGetErrorName(cudaError_t error); 
# 1482 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern const char *cudaGetErrorString(cudaError_t error); 
# 1511 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGetDeviceCount(int * count); 
# 1816 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGetDeviceProperties_v2(cudaDeviceProp * prop, int device); 
# 2020 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDeviceGetAttribute(int * value, cudaDeviceAttr attr, int device); 
# 2038 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDeviceGetDefaultMemPool(cudaMemPool_t * memPool, int device); 
# 2062 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDeviceSetMemPool(int device, cudaMemPool_t memPool); 
# 2082 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDeviceGetMemPool(cudaMemPool_t * memPool, int device); 
# 2144 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDeviceGetNvSciSyncAttributes(void * nvSciSyncAttrList, int device, int flags); 
# 2184 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDeviceGetP2PAttribute(int * value, cudaDeviceP2PAttr attr, int srcDevice, int dstDevice); 
# 2206 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaChooseDevice(int * device, const cudaDeviceProp * prop); 
# 2235 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaInitDevice(int device, unsigned deviceFlags, unsigned flags); 
# 2281 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaSetDevice(int device); 
# 2303 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGetDevice(int * device); 
# 2334 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaSetValidDevices(int * device_arr, int len); 
# 2404 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaSetDeviceFlags(unsigned flags); 
# 2449 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGetDeviceFlags(unsigned * flags); 
# 2492 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaStreamCreate(cudaStream_t * pStream); 
# 2527 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaStreamCreateWithFlags(cudaStream_t * pStream, unsigned flags); 
# 2579 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaStreamCreateWithPriority(cudaStream_t * pStream, unsigned flags, int priority); 
# 2606 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaStreamGetPriority(cudaStream_t hStream, int * priority); 
# 2631 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaStreamGetFlags(cudaStream_t hStream, unsigned * flags); 
# 2668 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaStreamGetId(cudaStream_t hStream, unsigned long long * streamId); 
# 2683 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaCtxResetPersistingL2Cache(); 
# 2703 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaStreamCopyAttributes(cudaStream_t dst, cudaStream_t src); 
# 2724 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaStreamGetAttribute(cudaStream_t hStream, cudaLaunchAttributeID attr, cudaLaunchAttributeValue * value_out); 
# 2748 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaStreamSetAttribute(cudaStream_t hStream, cudaLaunchAttributeID attr, const cudaLaunchAttributeValue * value); 
# 2782 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaStreamDestroy(cudaStream_t stream); 
# 2813 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned flags = 0); 
# 2821
typedef void (*cudaStreamCallback_t)(cudaStream_t stream, cudaError_t status, void * userData); 
# 2888 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaStreamAddCallback(cudaStream_t stream, cudaStreamCallback_t callback, void * userData, unsigned flags); 
# 2912 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaStreamSynchronize(cudaStream_t stream); 
# 2937 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaStreamQuery(cudaStream_t stream); 
# 3021 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaStreamAttachMemAsync(cudaStream_t stream, void * devPtr, size_t length = 0, unsigned flags = 4); 
# 3060 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaStreamBeginCapture(cudaStream_t stream, cudaStreamCaptureMode mode); 
# 3101 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaStreamBeginCaptureToGraph(cudaStream_t stream, cudaGraph_t graph, const cudaGraphNode_t * dependencies, const cudaGraphEdgeData * dependencyData, size_t numDependencies, cudaStreamCaptureMode mode); 
# 3152 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaThreadExchangeStreamCaptureMode(cudaStreamCaptureMode * mode); 
# 3181 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaStreamEndCapture(cudaStream_t stream, cudaGraph_t * pGraph); 
# 3219 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaStreamIsCapturing(cudaStream_t stream, cudaStreamCaptureStatus * pCaptureStatus); 
# 3269 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaStreamGetCaptureInfo_v2(cudaStream_t stream, cudaStreamCaptureStatus * captureStatus_out, unsigned long long * id_out = 0, cudaGraph_t * graph_out = 0, const cudaGraphNode_t ** dependencies_out = 0, size_t * numDependencies_out = 0); 
# 3328 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaStreamGetCaptureInfo_v3(cudaStream_t stream, cudaStreamCaptureStatus * captureStatus_out, unsigned long long * id_out = 0, cudaGraph_t * graph_out = 0, const cudaGraphNode_t ** dependencies_out = 0, const cudaGraphEdgeData ** edgeData_out = 0, size_t * numDependencies_out = 0); 
# 3368 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaStreamUpdateCaptureDependencies(cudaStream_t stream, cudaGraphNode_t * dependencies, size_t numDependencies, unsigned flags = 0); 
# 3403 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaStreamUpdateCaptureDependencies_v2(cudaStream_t stream, cudaGraphNode_t * dependencies, const cudaGraphEdgeData * dependencyData, size_t numDependencies, unsigned flags = 0); 
# 3440 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaEventCreate(cudaEvent_t * event); 
# 3477 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaEventCreateWithFlags(cudaEvent_t * event, unsigned flags); 
# 3518 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaEventRecord(cudaEvent_t event, cudaStream_t stream = 0); 
# 3566 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaEventRecordWithFlags(cudaEvent_t event, cudaStream_t stream = 0, unsigned flags = 0); 
# 3599 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaEventQuery(cudaEvent_t event); 
# 3630 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaEventSynchronize(cudaEvent_t event); 
# 3660 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaEventDestroy(cudaEvent_t event); 
# 3705 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaEventElapsedTime(float * ms, cudaEvent_t start, cudaEvent_t end); 
# 3886 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaImportExternalMemory(cudaExternalMemory_t * extMem_out, const cudaExternalMemoryHandleDesc * memHandleDesc); 
# 3941 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaExternalMemoryGetMappedBuffer(void ** devPtr, cudaExternalMemory_t extMem, const cudaExternalMemoryBufferDesc * bufferDesc); 
# 4001 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaExternalMemoryGetMappedMipmappedArray(cudaMipmappedArray_t * mipmap, cudaExternalMemory_t extMem, const cudaExternalMemoryMipmappedArrayDesc * mipmapDesc); 
# 4025 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDestroyExternalMemory(cudaExternalMemory_t extMem); 
# 4179 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaImportExternalSemaphore(cudaExternalSemaphore_t * extSem_out, const cudaExternalSemaphoreHandleDesc * semHandleDesc); 
# 4262 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaSignalExternalSemaphoresAsync_v2(const cudaExternalSemaphore_t * extSemArray, const cudaExternalSemaphoreSignalParams * paramsArray, unsigned numExtSems, cudaStream_t stream = 0); 
# 4338 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaWaitExternalSemaphoresAsync_v2(const cudaExternalSemaphore_t * extSemArray, const cudaExternalSemaphoreWaitParams * paramsArray, unsigned numExtSems, cudaStream_t stream = 0); 
# 4361 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDestroyExternalSemaphore(cudaExternalSemaphore_t extSem); 
# 4428 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaLaunchKernel(const void * func, dim3 gridDim, dim3 blockDim, void ** args, size_t sharedMem, cudaStream_t stream); 
# 4490 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaLaunchKernelExC(const cudaLaunchConfig_t * config, const void * func, void ** args); 
# 4547 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaLaunchCooperativeKernel(const void * func, dim3 gridDim, dim3 blockDim, void ** args, size_t sharedMem, cudaStream_t stream); 
# 4648 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
__attribute((deprecated)) extern cudaError_t cudaLaunchCooperativeKernelMultiDevice(cudaLaunchParams * launchParamsList, unsigned numDevices, unsigned flags = 0); 
# 4693 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaFuncSetCacheConfig(const void * func, cudaFuncCache cacheConfig); 
# 4727 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaFuncGetAttributes(cudaFuncAttributes * attr, const void * func); 
# 4785 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaFuncSetAttribute(const void * func, cudaFuncAttribute attr, int value); 
# 4809 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaFuncGetName(const char ** name, const void * func); 
# 4831 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaFuncGetParamInfo(const void * func, size_t paramIndex, size_t * paramOffset, size_t * paramSize); 
# 4855 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
__attribute((deprecated)) extern cudaError_t cudaSetDoubleForDevice(double * d); 
# 4879 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
__attribute((deprecated)) extern cudaError_t cudaSetDoubleForHost(double * d); 
# 4945 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaLaunchHostFunc(cudaStream_t stream, cudaHostFn_t fn, void * userData); 
# 5019 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
__attribute((deprecated)) extern cudaError_t cudaFuncSetSharedMemConfig(const void * func, cudaSharedMemConfig config); 
# 5075 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, const void * func, int blockSize, size_t dynamicSMemSize); 
# 5104 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaOccupancyAvailableDynamicSMemPerBlock(size_t * dynamicSmemSize, const void * func, int numBlocks, int blockSize); 
# 5149 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, const void * func, int blockSize, size_t dynamicSMemSize, unsigned flags); 
# 5184 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaOccupancyMaxPotentialClusterSize(int * clusterSize, const void * func, const cudaLaunchConfig_t * launchConfig); 
# 5223 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaOccupancyMaxActiveClusters(int * numClusters, const void * func, const cudaLaunchConfig_t * launchConfig); 
# 5343 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMallocManaged(void ** devPtr, size_t size, unsigned flags = 1); 
# 5376 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMalloc(void ** devPtr, size_t size); 
# 5413 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMallocHost(void ** ptr, size_t size); 
# 5456 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMallocPitch(void ** devPtr, size_t * pitch, size_t width, size_t height); 
# 5508 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMallocArray(cudaArray_t * array, const cudaChannelFormatDesc * desc, size_t width, size_t height = 0, unsigned flags = 0); 
# 5547 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaFree(void * devPtr); 
# 5570 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaFreeHost(void * ptr); 
# 5593 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaFreeArray(cudaArray_t array); 
# 5616 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray); 
# 5682 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaHostAlloc(void ** pHost, size_t size, unsigned flags); 
# 5779 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaHostRegister(void * ptr, size_t size, unsigned flags); 
# 5802 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaHostUnregister(void * ptr); 
# 5847 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaHostGetDevicePointer(void ** pDevice, void * pHost, unsigned flags); 
# 5869 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaHostGetFlags(unsigned * pFlags, void * pHost); 
# 5908 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMalloc3D(cudaPitchedPtr * pitchedDevPtr, cudaExtent extent); 
# 6053 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMalloc3DArray(cudaArray_t * array, const cudaChannelFormatDesc * desc, cudaExtent extent, unsigned flags = 0); 
# 6198 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMallocMipmappedArray(cudaMipmappedArray_t * mipmappedArray, const cudaChannelFormatDesc * desc, cudaExtent extent, unsigned numLevels, unsigned flags = 0); 
# 6231 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGetMipmappedArrayLevel(cudaArray_t * levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned level); 
# 6336 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemcpy3D(const cudaMemcpy3DParms * p); 
# 6368 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemcpy3DPeer(const cudaMemcpy3DPeerParms * p); 
# 6486 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemcpy3DAsync(const cudaMemcpy3DParms * p, cudaStream_t stream = 0); 
# 6513 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemcpy3DPeerAsync(const cudaMemcpy3DPeerParms * p, cudaStream_t stream = 0); 
# 6547 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemGetInfo(size_t * free, size_t * total); 
# 6573 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaArrayGetInfo(cudaChannelFormatDesc * desc, cudaExtent * extent, unsigned * flags, cudaArray_t array); 
# 6602 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaArrayGetPlane(cudaArray_t * pPlaneArray, cudaArray_t hArray, unsigned planeIdx); 
# 6625 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaArrayGetMemoryRequirements(cudaArrayMemoryRequirements * memoryRequirements, cudaArray_t array, int device); 
# 6649 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMipmappedArrayGetMemoryRequirements(cudaArrayMemoryRequirements * memoryRequirements, cudaMipmappedArray_t mipmap, int device); 
# 6677 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaArrayGetSparseProperties(cudaArraySparseProperties * sparseProperties, cudaArray_t array); 
# 6707 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMipmappedArrayGetSparseProperties(cudaArraySparseProperties * sparseProperties, cudaMipmappedArray_t mipmap); 
# 6752 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemcpy(void * dst, const void * src, size_t count, cudaMemcpyKind kind); 
# 6787 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemcpyPeer(void * dst, int dstDevice, const void * src, int srcDevice, size_t count); 
# 6836 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemcpy2D(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind); 
# 6886 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemcpy2DToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind); 
# 6936 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemcpy2DFromArray(void * dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind); 
# 6983 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemcpy2DArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, cudaMemcpyKind kind = cudaMemcpyDeviceToDevice); 
# 7026 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemcpyToSymbol(const void * symbol, const void * src, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyHostToDevice); 
# 7070 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemcpyFromSymbol(void * dst, const void * symbol, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyDeviceToHost); 
# 7127 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemcpyAsync(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 7162 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemcpyPeerAsync(void * dst, int dstDevice, const void * src, int srcDevice, size_t count, cudaStream_t stream = 0); 
# 7225 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemcpy2DAsync(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 7283 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemcpy2DToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 7340 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemcpy2DFromArrayAsync(void * dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 7391 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemcpyToSymbolAsync(const void * symbol, const void * src, size_t count, size_t offset, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 7442 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemcpyFromSymbolAsync(void * dst, const void * symbol, size_t count, size_t offset, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 7471 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemset(void * devPtr, int value, size_t count); 
# 7505 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemset2D(void * devPtr, size_t pitch, int value, size_t width, size_t height); 
# 7551 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemset3D(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent); 
# 7587 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemsetAsync(void * devPtr, int value, size_t count, cudaStream_t stream = 0); 
# 7628 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemset2DAsync(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream = 0); 
# 7681 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream = 0); 
# 7709 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGetSymbolAddress(void ** devPtr, const void * symbol); 
# 7736 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGetSymbolSize(size_t * size, const void * symbol); 
# 7808 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemPrefetchAsync(const void * devPtr, size_t count, int dstDevice, cudaStream_t stream = 0); 
# 7889 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemPrefetchAsync_v2(const void * devPtr, size_t count, cudaMemLocation location, unsigned flags, cudaStream_t stream = 0); 
# 8003 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemAdvise(const void * devPtr, size_t count, cudaMemoryAdvise advice, int device); 
# 8126 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemAdvise_v2(const void * devPtr, size_t count, cudaMemoryAdvise advice, cudaMemLocation location); 
# 8208 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemRangeGetAttribute(void * data, size_t dataSize, cudaMemRangeAttribute attribute, const void * devPtr, size_t count); 
# 8251 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemRangeGetAttributes(void ** data, size_t * dataSizes, cudaMemRangeAttribute * attributes, size_t numAttributes, const void * devPtr, size_t count); 
# 8311 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
__attribute((deprecated)) extern cudaError_t cudaMemcpyToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t count, cudaMemcpyKind kind); 
# 8353 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
__attribute((deprecated)) extern cudaError_t cudaMemcpyFromArray(void * dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind); 
# 8396 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
__attribute((deprecated)) extern cudaError_t cudaMemcpyArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, cudaMemcpyKind kind = cudaMemcpyDeviceToDevice); 
# 8447 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
__attribute((deprecated)) extern cudaError_t cudaMemcpyToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 8497 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
__attribute((deprecated)) extern cudaError_t cudaMemcpyFromArrayAsync(void * dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 8566 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMallocAsync(void ** devPtr, size_t size, cudaStream_t hStream); 
# 8592 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaFreeAsync(void * devPtr, cudaStream_t hStream); 
# 8617 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemPoolTrimTo(cudaMemPool_t memPool, size_t minBytesToKeep); 
# 8661 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemPoolSetAttribute(cudaMemPool_t memPool, cudaMemPoolAttr attr, void * value); 
# 8709 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemPoolGetAttribute(cudaMemPool_t memPool, cudaMemPoolAttr attr, void * value); 
# 8724 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemPoolSetAccess(cudaMemPool_t memPool, const cudaMemAccessDesc * descList, size_t count); 
# 8737 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemPoolGetAccess(cudaMemAccessFlags * flags, cudaMemPool_t memPool, cudaMemLocation * location); 
# 8777 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemPoolCreate(cudaMemPool_t * memPool, const cudaMemPoolProps * poolProps); 
# 8799 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemPoolDestroy(cudaMemPool_t memPool); 
# 8835 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMallocFromPoolAsync(void ** ptr, size_t size, cudaMemPool_t memPool, cudaStream_t stream); 
# 8860 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemPoolExportToShareableHandle(void * shareableHandle, cudaMemPool_t memPool, cudaMemAllocationHandleType handleType, unsigned flags); 
# 8887 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemPoolImportFromShareableHandle(cudaMemPool_t * memPool, void * shareableHandle, cudaMemAllocationHandleType handleType, unsigned flags); 
# 8910 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemPoolExportPointer(cudaMemPoolPtrExportData * exportData, void * ptr); 
# 8939 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemPoolImportPointer(void ** ptr, cudaMemPool_t memPool, cudaMemPoolPtrExportData * exportData); 
# 9092 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaPointerGetAttributes(cudaPointerAttributes * attributes, const void * ptr); 
# 9133 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDeviceCanAccessPeer(int * canAccessPeer, int device, int peerDevice); 
# 9175 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDeviceEnablePeerAccess(int peerDevice, unsigned flags); 
# 9197 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDeviceDisablePeerAccess(int peerDevice); 
# 9261 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource); 
# 9296 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned flags); 
# 9335 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphicsMapResources(int count, cudaGraphicsResource_t * resources, cudaStream_t stream = 0); 
# 9370 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t * resources, cudaStream_t stream = 0); 
# 9402 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphicsResourceGetMappedPointer(void ** devPtr, size_t * size, cudaGraphicsResource_t resource); 
# 9440 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphicsSubResourceGetMappedArray(cudaArray_t * array, cudaGraphicsResource_t resource, unsigned arrayIndex, unsigned mipLevel); 
# 9469 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t * mipmappedArray, cudaGraphicsResource_t resource); 
# 9504 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGetChannelDesc(cudaChannelFormatDesc * desc, cudaArray_const_t array); 
# 9534 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaChannelFormatDesc cudaCreateChannelDesc(int x, int y, int z, int w, cudaChannelFormatKind f); 
# 9759 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaCreateTextureObject(cudaTextureObject_t * pTexObject, const cudaResourceDesc * pResDesc, const cudaTextureDesc * pTexDesc, const cudaResourceViewDesc * pResViewDesc); 
# 9779 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDestroyTextureObject(cudaTextureObject_t texObject); 
# 9799 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGetTextureObjectResourceDesc(cudaResourceDesc * pResDesc, cudaTextureObject_t texObject); 
# 9819 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGetTextureObjectTextureDesc(cudaTextureDesc * pTexDesc, cudaTextureObject_t texObject); 
# 9840 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGetTextureObjectResourceViewDesc(cudaResourceViewDesc * pResViewDesc, cudaTextureObject_t texObject); 
# 9885 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaCreateSurfaceObject(cudaSurfaceObject_t * pSurfObject, const cudaResourceDesc * pResDesc); 
# 9905 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject); 
# 9924 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGetSurfaceObjectResourceDesc(cudaResourceDesc * pResDesc, cudaSurfaceObject_t surfObject); 
# 9958 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDriverGetVersion(int * driverVersion); 
# 9987 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaRuntimeGetVersion(int * runtimeVersion); 
# 10034 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphCreate(cudaGraph_t * pGraph, unsigned flags); 
# 10132 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphAddKernelNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaKernelNodeParams * pNodeParams); 
# 10165 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphKernelNodeGetParams(cudaGraphNode_t node, cudaKernelNodeParams * pNodeParams); 
# 10191 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphKernelNodeSetParams(cudaGraphNode_t node, const cudaKernelNodeParams * pNodeParams); 
# 10211 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphKernelNodeCopyAttributes(cudaGraphNode_t hSrc, cudaGraphNode_t hDst); 
# 10234 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphKernelNodeGetAttribute(cudaGraphNode_t hNode, cudaLaunchAttributeID attr, cudaLaunchAttributeValue * value_out); 
# 10258 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphKernelNodeSetAttribute(cudaGraphNode_t hNode, cudaLaunchAttributeID attr, const cudaLaunchAttributeValue * value); 
# 10309 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphAddMemcpyNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaMemcpy3DParms * pCopyParams); 
# 10368 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphAddMemcpyNodeToSymbol(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const void * symbol, const void * src, size_t count, size_t offset, cudaMemcpyKind kind); 
# 10437 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphAddMemcpyNodeFromSymbol(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, void * dst, const void * symbol, size_t count, size_t offset, cudaMemcpyKind kind); 
# 10505 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphAddMemcpyNode1D(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, void * dst, const void * src, size_t count, cudaMemcpyKind kind); 
# 10537 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphMemcpyNodeGetParams(cudaGraphNode_t node, cudaMemcpy3DParms * pNodeParams); 
# 10564 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphMemcpyNodeSetParams(cudaGraphNode_t node, const cudaMemcpy3DParms * pNodeParams); 
# 10603 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphMemcpyNodeSetParamsToSymbol(cudaGraphNode_t node, const void * symbol, const void * src, size_t count, size_t offset, cudaMemcpyKind kind); 
# 10649 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphMemcpyNodeSetParamsFromSymbol(cudaGraphNode_t node, void * dst, const void * symbol, size_t count, size_t offset, cudaMemcpyKind kind); 
# 10695 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphMemcpyNodeSetParams1D(cudaGraphNode_t node, void * dst, const void * src, size_t count, cudaMemcpyKind kind); 
# 10743 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphAddMemsetNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaMemsetParams * pMemsetParams); 
# 10766 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphMemsetNodeGetParams(cudaGraphNode_t node, cudaMemsetParams * pNodeParams); 
# 10790 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphMemsetNodeSetParams(cudaGraphNode_t node, const cudaMemsetParams * pNodeParams); 
# 10832 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphAddHostNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaHostNodeParams * pNodeParams); 
# 10855 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphHostNodeGetParams(cudaGraphNode_t node, cudaHostNodeParams * pNodeParams); 
# 10879 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphHostNodeSetParams(cudaGraphNode_t node, const cudaHostNodeParams * pNodeParams); 
# 10920 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphAddChildGraphNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, cudaGraph_t childGraph); 
# 10947 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphChildGraphNodeGetGraph(cudaGraphNode_t node, cudaGraph_t * pGraph); 
# 10985 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphAddEmptyNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies); 
# 11029 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphAddEventRecordNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, cudaEvent_t event); 
# 11056 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphEventRecordNodeGetEvent(cudaGraphNode_t node, cudaEvent_t * event_out); 
# 11084 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphEventRecordNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event); 
# 11131 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphAddEventWaitNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, cudaEvent_t event); 
# 11158 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphEventWaitNodeGetEvent(cudaGraphNode_t node, cudaEvent_t * event_out); 
# 11186 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphEventWaitNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event); 
# 11236 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphAddExternalSemaphoresSignalNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaExternalSemaphoreSignalNodeParams * nodeParams); 
# 11269 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphExternalSemaphoresSignalNodeGetParams(cudaGraphNode_t hNode, cudaExternalSemaphoreSignalNodeParams * params_out); 
# 11297 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphExternalSemaphoresSignalNodeSetParams(cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams * nodeParams); 
# 11347 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphAddExternalSemaphoresWaitNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaExternalSemaphoreWaitNodeParams * nodeParams); 
# 11380 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphExternalSemaphoresWaitNodeGetParams(cudaGraphNode_t hNode, cudaExternalSemaphoreWaitNodeParams * params_out); 
# 11408 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphExternalSemaphoresWaitNodeSetParams(cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams * nodeParams); 
# 11486 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphAddMemAllocNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, cudaMemAllocNodeParams * nodeParams); 
# 11513 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphMemAllocNodeGetParams(cudaGraphNode_t node, cudaMemAllocNodeParams * params_out); 
# 11574 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphAddMemFreeNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, void * dptr); 
# 11598 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphMemFreeNodeGetParams(cudaGraphNode_t node, void * dptr_out); 
# 11626 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDeviceGraphMemTrim(int device); 
# 11663 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDeviceGetGraphMemAttribute(int device, cudaGraphMemAttributeType attr, void * value); 
# 11697 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaDeviceSetGraphMemAttribute(int device, cudaGraphMemAttributeType attr, void * value); 
# 11725 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphClone(cudaGraph_t * pGraphClone, cudaGraph_t originalGraph); 
# 11753 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphNodeFindInClone(cudaGraphNode_t * pNode, cudaGraphNode_t originalNode, cudaGraph_t clonedGraph); 
# 11784 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphNodeGetType(cudaGraphNode_t node, cudaGraphNodeType * pType); 
# 11815 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphGetNodes(cudaGraph_t graph, cudaGraphNode_t * nodes, size_t * numNodes); 
# 11846 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphGetRootNodes(cudaGraph_t graph, cudaGraphNode_t * pRootNodes, size_t * pNumRootNodes); 
# 11880 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphGetEdges(cudaGraph_t graph, cudaGraphNode_t * from, cudaGraphNode_t * to, size_t * numEdges); 
# 11920 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphGetEdges_v2(cudaGraph_t graph, cudaGraphNode_t * from, cudaGraphNode_t * to, cudaGraphEdgeData * edgeData, size_t * numEdges); 
# 11951 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphNodeGetDependencies(cudaGraphNode_t node, cudaGraphNode_t * pDependencies, size_t * pNumDependencies); 
# 11988 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphNodeGetDependencies_v2(cudaGraphNode_t node, cudaGraphNode_t * pDependencies, cudaGraphEdgeData * edgeData, size_t * pNumDependencies); 
# 12020 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphNodeGetDependentNodes(cudaGraphNode_t node, cudaGraphNode_t * pDependentNodes, size_t * pNumDependentNodes); 
# 12058 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphNodeGetDependentNodes_v2(cudaGraphNode_t node, cudaGraphNode_t * pDependentNodes, cudaGraphEdgeData * edgeData, size_t * pNumDependentNodes); 
# 12089 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphAddDependencies(cudaGraph_t graph, const cudaGraphNode_t * from, const cudaGraphNode_t * to, size_t numDependencies); 
# 12121 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphAddDependencies_v2(cudaGraph_t graph, const cudaGraphNode_t * from, const cudaGraphNode_t * to, const cudaGraphEdgeData * edgeData, size_t numDependencies); 
# 12152 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphRemoveDependencies(cudaGraph_t graph, const cudaGraphNode_t * from, const cudaGraphNode_t * to, size_t numDependencies); 
# 12187 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphRemoveDependencies_v2(cudaGraph_t graph, const cudaGraphNode_t * from, const cudaGraphNode_t * to, const cudaGraphEdgeData * edgeData, size_t numDependencies); 
# 12217 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphDestroyNode(cudaGraphNode_t node); 
# 12288 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphInstantiate(cudaGraphExec_t * pGraphExec, cudaGraph_t graph, unsigned long long flags = 0); 
# 12361 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphInstantiateWithFlags(cudaGraphExec_t * pGraphExec, cudaGraph_t graph, unsigned long long flags = 0); 
# 12468 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphInstantiateWithParams(cudaGraphExec_t * pGraphExec, cudaGraph_t graph, cudaGraphInstantiateParams * instantiateParams); 
# 12493 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphExecGetFlags(cudaGraphExec_t graphExec, unsigned long long * flags); 
# 12552 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphExecKernelNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaKernelNodeParams * pNodeParams); 
# 12603 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphExecMemcpyNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemcpy3DParms * pNodeParams); 
# 12658 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphExecMemcpyNodeSetParamsToSymbol(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const void * symbol, const void * src, size_t count, size_t offset, cudaMemcpyKind kind); 
# 12721 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphExecMemcpyNodeSetParamsFromSymbol(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void * dst, const void * symbol, size_t count, size_t offset, cudaMemcpyKind kind); 
# 12782 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphExecMemcpyNodeSetParams1D(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void * dst, const void * src, size_t count, cudaMemcpyKind kind); 
# 12841 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphExecMemsetNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemsetParams * pNodeParams); 
# 12881 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphExecHostNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaHostNodeParams * pNodeParams); 
# 12928 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphExecChildGraphNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, cudaGraph_t childGraph); 
# 12973 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphExecEventRecordNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event); 
# 13018 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphExecEventWaitNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event); 
# 13066 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphExecExternalSemaphoresSignalNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams * nodeParams); 
# 13114 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphExecExternalSemaphoresWaitNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams * nodeParams); 
# 13154 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphNodeSetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned isEnabled); 
# 13188 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphNodeGetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned * isEnabled); 
# 13282 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphExecUpdate(cudaGraphExec_t hGraphExec, cudaGraph_t hGraph, cudaGraphExecUpdateResultInfo * resultInfo); 
# 13307 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphUpload(cudaGraphExec_t graphExec, cudaStream_t stream); 
# 13338 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphLaunch(cudaGraphExec_t graphExec, cudaStream_t stream); 
# 13361 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphExecDestroy(cudaGraphExec_t graphExec); 
# 13382 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphDestroy(cudaGraph_t graph); 
# 13401 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphDebugDotPrint(cudaGraph_t graph, const char * path, unsigned flags); 
# 13437 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaUserObjectCreate(cudaUserObject_t * object_out, void * ptr, cudaHostFn_t destroy, unsigned initialRefcount, unsigned flags); 
# 13461 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaUserObjectRetain(cudaUserObject_t object, unsigned count = 1); 
# 13489 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaUserObjectRelease(cudaUserObject_t object, unsigned count = 1); 
# 13517 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphRetainUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned count = 1, unsigned flags = 0); 
# 13542 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphReleaseUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned count = 1); 
# 13584 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphAddNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, cudaGraphNodeParams * nodeParams); 
# 13628 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphAddNode_v2(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, const cudaGraphEdgeData * dependencyData, size_t numDependencies, cudaGraphNodeParams * nodeParams); 
# 13657 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphNodeSetParams(cudaGraphNode_t node, cudaGraphNodeParams * nodeParams); 
# 13706 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphExecNodeSetParams(cudaGraphExec_t graphExec, cudaGraphNode_t node, cudaGraphNodeParams * nodeParams); 
# 13732 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGraphConditionalHandleCreate(cudaGraphConditionalHandle * pHandle_out, cudaGraph_t graph, unsigned defaultLaunchValue = 0, unsigned flags = 0); 
# 13813 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGetDriverEntryPoint(const char * symbol, void ** funcPtr, unsigned long long flags, cudaDriverEntryPointQueryResult * driverStatus = 0); 
# 13889 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGetDriverEntryPointByVersion(const char * symbol, void ** funcPtr, unsigned cudaVersion, unsigned long long flags, cudaDriverEntryPointQueryResult * driverStatus = 0); 
# 13897
extern cudaError_t cudaGetExportTable(const void ** ppExportTable, const cudaUUID_t * pExportTableId); 
# 14076 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGetFuncBySymbol(cudaFunction_t * functionPtr, const void * symbolPtr); 
# 14092 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
extern cudaError_t cudaGetKernel(cudaKernel_t * kernelPtr, const void * entryFuncAddr); 
# 14264 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime_api.h" 3
}
# 117 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/channel_descriptor.h" 3
template< class T> inline cudaChannelFormatDesc cudaCreateChannelDesc() 
# 118
{ 
# 119
return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone); 
# 120
} 
# 122
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf() 
# 123
{ 
# 124
int e = (((int)sizeof(unsigned short)) * 8); 
# 126
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 127
} 
# 129
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf1() 
# 130
{ 
# 131
int e = (((int)sizeof(unsigned short)) * 8); 
# 133
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 134
} 
# 136
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf2() 
# 137
{ 
# 138
int e = (((int)sizeof(unsigned short)) * 8); 
# 140
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat); 
# 141
} 
# 143
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf4() 
# 144
{ 
# 145
int e = (((int)sizeof(unsigned short)) * 8); 
# 147
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat); 
# 148
} 
# 150
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char> () 
# 151
{ 
# 152
int e = (((int)sizeof(char)) * 8); 
# 157
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 159
} 
# 161
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< signed char> () 
# 162
{ 
# 163
int e = (((int)sizeof(signed char)) * 8); 
# 165
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 166
} 
# 168
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned char> () 
# 169
{ 
# 170
int e = (((int)sizeof(unsigned char)) * 8); 
# 172
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 173
} 
# 175
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char1> () 
# 176
{ 
# 177
int e = (((int)sizeof(signed char)) * 8); 
# 179
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 180
} 
# 182
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar1> () 
# 183
{ 
# 184
int e = (((int)sizeof(unsigned char)) * 8); 
# 186
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 187
} 
# 189
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char2> () 
# 190
{ 
# 191
int e = (((int)sizeof(signed char)) * 8); 
# 193
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
# 194
} 
# 196
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar2> () 
# 197
{ 
# 198
int e = (((int)sizeof(unsigned char)) * 8); 
# 200
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
# 201
} 
# 203
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char4> () 
# 204
{ 
# 205
int e = (((int)sizeof(signed char)) * 8); 
# 207
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
# 208
} 
# 210
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar4> () 
# 211
{ 
# 212
int e = (((int)sizeof(unsigned char)) * 8); 
# 214
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
# 215
} 
# 217
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short> () 
# 218
{ 
# 219
int e = (((int)sizeof(short)) * 8); 
# 221
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 222
} 
# 224
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned short> () 
# 225
{ 
# 226
int e = (((int)sizeof(unsigned short)) * 8); 
# 228
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 229
} 
# 231
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short1> () 
# 232
{ 
# 233
int e = (((int)sizeof(short)) * 8); 
# 235
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 236
} 
# 238
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort1> () 
# 239
{ 
# 240
int e = (((int)sizeof(unsigned short)) * 8); 
# 242
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 243
} 
# 245
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short2> () 
# 246
{ 
# 247
int e = (((int)sizeof(short)) * 8); 
# 249
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
# 250
} 
# 252
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort2> () 
# 253
{ 
# 254
int e = (((int)sizeof(unsigned short)) * 8); 
# 256
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
# 257
} 
# 259
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short4> () 
# 260
{ 
# 261
int e = (((int)sizeof(short)) * 8); 
# 263
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
# 264
} 
# 266
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort4> () 
# 267
{ 
# 268
int e = (((int)sizeof(unsigned short)) * 8); 
# 270
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
# 271
} 
# 273
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int> () 
# 274
{ 
# 275
int e = (((int)sizeof(int)) * 8); 
# 277
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 278
} 
# 280
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned> () 
# 281
{ 
# 282
int e = (((int)sizeof(unsigned)) * 8); 
# 284
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 285
} 
# 287
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int1> () 
# 288
{ 
# 289
int e = (((int)sizeof(int)) * 8); 
# 291
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 292
} 
# 294
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint1> () 
# 295
{ 
# 296
int e = (((int)sizeof(unsigned)) * 8); 
# 298
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 299
} 
# 301
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int2> () 
# 302
{ 
# 303
int e = (((int)sizeof(int)) * 8); 
# 305
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
# 306
} 
# 308
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint2> () 
# 309
{ 
# 310
int e = (((int)sizeof(unsigned)) * 8); 
# 312
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
# 313
} 
# 315
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int4> () 
# 316
{ 
# 317
int e = (((int)sizeof(int)) * 8); 
# 319
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
# 320
} 
# 322
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint4> () 
# 323
{ 
# 324
int e = (((int)sizeof(unsigned)) * 8); 
# 326
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
# 327
} 
# 389 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/channel_descriptor.h" 3
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float> () 
# 390
{ 
# 391
int e = (((int)sizeof(float)) * 8); 
# 393
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 394
} 
# 396
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float1> () 
# 397
{ 
# 398
int e = (((int)sizeof(float)) * 8); 
# 400
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 401
} 
# 403
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float2> () 
# 404
{ 
# 405
int e = (((int)sizeof(float)) * 8); 
# 407
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat); 
# 408
} 
# 410
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float4> () 
# 411
{ 
# 412
int e = (((int)sizeof(float)) * 8); 
# 414
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat); 
# 415
} 
# 417
static inline cudaChannelFormatDesc cudaCreateChannelDescNV12() 
# 418
{ 
# 419
int e = (((int)sizeof(char)) * 8); 
# 421
return cudaCreateChannelDesc(e, e, e, 0, cudaChannelFormatKindNV12); 
# 422
} 
# 424
template< cudaChannelFormatKind > inline cudaChannelFormatDesc cudaCreateChannelDesc() 
# 425
{ 
# 426
return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone); 
# 427
} 
# 430
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized8X1> () 
# 431
{ 
# 432
return cudaCreateChannelDesc(8, 0, 0, 0, cudaChannelFormatKindSignedNormalized8X1); 
# 433
} 
# 435
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized8X2> () 
# 436
{ 
# 437
return cudaCreateChannelDesc(8, 8, 0, 0, cudaChannelFormatKindSignedNormalized8X2); 
# 438
} 
# 440
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized8X4> () 
# 441
{ 
# 442
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindSignedNormalized8X4); 
# 443
} 
# 446
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized8X1> () 
# 447
{ 
# 448
return cudaCreateChannelDesc(8, 0, 0, 0, cudaChannelFormatKindUnsignedNormalized8X1); 
# 449
} 
# 451
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized8X2> () 
# 452
{ 
# 453
return cudaCreateChannelDesc(8, 8, 0, 0, cudaChannelFormatKindUnsignedNormalized8X2); 
# 454
} 
# 456
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized8X4> () 
# 457
{ 
# 458
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedNormalized8X4); 
# 459
} 
# 462
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized16X1> () 
# 463
{ 
# 464
return cudaCreateChannelDesc(16, 0, 0, 0, cudaChannelFormatKindSignedNormalized16X1); 
# 465
} 
# 467
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized16X2> () 
# 468
{ 
# 469
return cudaCreateChannelDesc(16, 16, 0, 0, cudaChannelFormatKindSignedNormalized16X2); 
# 470
} 
# 472
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized16X4> () 
# 473
{ 
# 474
return cudaCreateChannelDesc(16, 16, 16, 16, cudaChannelFormatKindSignedNormalized16X4); 
# 475
} 
# 478
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized16X1> () 
# 479
{ 
# 480
return cudaCreateChannelDesc(16, 0, 0, 0, cudaChannelFormatKindUnsignedNormalized16X1); 
# 481
} 
# 483
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized16X2> () 
# 484
{ 
# 485
return cudaCreateChannelDesc(16, 16, 0, 0, cudaChannelFormatKindUnsignedNormalized16X2); 
# 486
} 
# 488
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized16X4> () 
# 489
{ 
# 490
return cudaCreateChannelDesc(16, 16, 16, 16, cudaChannelFormatKindUnsignedNormalized16X4); 
# 491
} 
# 494
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindNV12> () 
# 495
{ 
# 496
return cudaCreateChannelDesc(8, 8, 8, 0, cudaChannelFormatKindNV12); 
# 497
} 
# 500
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed1> () 
# 501
{ 
# 502
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed1); 
# 503
} 
# 506
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed1SRGB> () 
# 507
{ 
# 508
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed1SRGB); 
# 509
} 
# 512
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed2> () 
# 513
{ 
# 514
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed2); 
# 515
} 
# 518
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed2SRGB> () 
# 519
{ 
# 520
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed2SRGB); 
# 521
} 
# 524
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed3> () 
# 525
{ 
# 526
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed3); 
# 527
} 
# 530
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed3SRGB> () 
# 531
{ 
# 532
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed3SRGB); 
# 533
} 
# 536
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed4> () 
# 537
{ 
# 538
return cudaCreateChannelDesc(8, 0, 0, 0, cudaChannelFormatKindUnsignedBlockCompressed4); 
# 539
} 
# 542
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedBlockCompressed4> () 
# 543
{ 
# 544
return cudaCreateChannelDesc(8, 0, 0, 0, cudaChannelFormatKindSignedBlockCompressed4); 
# 545
} 
# 548
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed5> () 
# 549
{ 
# 550
return cudaCreateChannelDesc(8, 8, 0, 0, cudaChannelFormatKindUnsignedBlockCompressed5); 
# 551
} 
# 554
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedBlockCompressed5> () 
# 555
{ 
# 556
return cudaCreateChannelDesc(8, 8, 0, 0, cudaChannelFormatKindSignedBlockCompressed5); 
# 557
} 
# 560
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed6H> () 
# 561
{ 
# 562
return cudaCreateChannelDesc(16, 16, 16, 0, cudaChannelFormatKindUnsignedBlockCompressed6H); 
# 563
} 
# 566
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedBlockCompressed6H> () 
# 567
{ 
# 568
return cudaCreateChannelDesc(16, 16, 16, 0, cudaChannelFormatKindSignedBlockCompressed6H); 
# 569
} 
# 572
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed7> () 
# 573
{ 
# 574
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed7); 
# 575
} 
# 578
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed7SRGB> () 
# 579
{ 
# 580
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed7SRGB); 
# 581
} 
# 79 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_functions.h" 3
static inline cudaPitchedPtr make_cudaPitchedPtr(void *d, size_t p, size_t xsz, size_t ysz) 
# 80
{ 
# 81
cudaPitchedPtr s; 
# 83
(s.ptr) = d; 
# 84
(s.pitch) = p; 
# 85
(s.xsize) = xsz; 
# 86
(s.ysize) = ysz; 
# 88
return s; 
# 89
} 
# 106 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_functions.h" 3
static inline cudaPos make_cudaPos(size_t x, size_t y, size_t z) 
# 107
{ 
# 108
cudaPos p; 
# 110
(p.x) = x; 
# 111
(p.y) = y; 
# 112
(p.z) = z; 
# 114
return p; 
# 115
} 
# 132 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/driver_functions.h" 3
static inline cudaExtent make_cudaExtent(size_t w, size_t h, size_t d) 
# 133
{ 
# 134
cudaExtent e; 
# 136
(e.width) = w; 
# 137
(e.height) = h; 
# 138
(e.depth) = d; 
# 140
return e; 
# 141
} 
# 77 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_functions.h" 3
static inline char1 make_char1(signed char x); 
# 79
static inline uchar1 make_uchar1(unsigned char x); 
# 81
static inline char2 make_char2(signed char x, signed char y); 
# 83
static inline uchar2 make_uchar2(unsigned char x, unsigned char y); 
# 85
static inline char3 make_char3(signed char x, signed char y, signed char z); 
# 87
static inline uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z); 
# 89
static inline char4 make_char4(signed char x, signed char y, signed char z, signed char w); 
# 91
static inline uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w); 
# 93
static inline short1 make_short1(short x); 
# 95
static inline ushort1 make_ushort1(unsigned short x); 
# 97
static inline short2 make_short2(short x, short y); 
# 99
static inline ushort2 make_ushort2(unsigned short x, unsigned short y); 
# 101
static inline short3 make_short3(short x, short y, short z); 
# 103
static inline ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z); 
# 105
static inline short4 make_short4(short x, short y, short z, short w); 
# 107
static inline ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w); 
# 109
static inline int1 make_int1(int x); 
# 111
static inline uint1 make_uint1(unsigned x); 
# 113
static inline int2 make_int2(int x, int y); 
# 115
static inline uint2 make_uint2(unsigned x, unsigned y); 
# 117
static inline int3 make_int3(int x, int y, int z); 
# 119
static inline uint3 make_uint3(unsigned x, unsigned y, unsigned z); 
# 121
static inline int4 make_int4(int x, int y, int z, int w); 
# 123
static inline uint4 make_uint4(unsigned x, unsigned y, unsigned z, unsigned w); 
# 125
static inline long1 make_long1(long x); 
# 127
static inline ulong1 make_ulong1(unsigned long x); 
# 129
static inline long2 make_long2(long x, long y); 
# 131
static inline ulong2 make_ulong2(unsigned long x, unsigned long y); 
# 133
static inline long3 make_long3(long x, long y, long z); 
# 135
static inline ulong3 make_ulong3(unsigned long x, unsigned long y, unsigned long z); 
# 137
static inline long4 make_long4(long x, long y, long z, long w); 
# 139
static inline ulong4 make_ulong4(unsigned long x, unsigned long y, unsigned long z, unsigned long w); 
# 141
static inline float1 make_float1(float x); 
# 143
static inline float2 make_float2(float x, float y); 
# 145
static inline float3 make_float3(float x, float y, float z); 
# 147
static inline float4 make_float4(float x, float y, float z, float w); 
# 149
static inline longlong1 make_longlong1(long long x); 
# 151
static inline ulonglong1 make_ulonglong1(unsigned long long x); 
# 153
static inline longlong2 make_longlong2(long long x, long long y); 
# 155
static inline ulonglong2 make_ulonglong2(unsigned long long x, unsigned long long y); 
# 157
static inline longlong3 make_longlong3(long long x, long long y, long long z); 
# 159
static inline ulonglong3 make_ulonglong3(unsigned long long x, unsigned long long y, unsigned long long z); 
# 161
static inline longlong4 make_longlong4(long long x, long long y, long long z, long long w); 
# 163
static inline ulonglong4 make_ulonglong4(unsigned long long x, unsigned long long y, unsigned long long z, unsigned long long w); 
# 165
static inline double1 make_double1(double x); 
# 167
static inline double2 make_double2(double x, double y); 
# 169
static inline double3 make_double3(double x, double y, double z); 
# 171
static inline double4 make_double4(double x, double y, double z, double w); 
# 73 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/vector_functions.hpp" 3
static inline char1 make_char1(signed char x) 
# 74
{ 
# 75
char1 t; (t.x) = x; return t; 
# 76
} 
# 78
static inline uchar1 make_uchar1(unsigned char x) 
# 79
{ 
# 80
uchar1 t; (t.x) = x; return t; 
# 81
} 
# 83
static inline char2 make_char2(signed char x, signed char y) 
# 84
{ 
# 85
char2 t; (t.x) = x; (t.y) = y; return t; 
# 86
} 
# 88
static inline uchar2 make_uchar2(unsigned char x, unsigned char y) 
# 89
{ 
# 90
uchar2 t; (t.x) = x; (t.y) = y; return t; 
# 91
} 
# 93
static inline char3 make_char3(signed char x, signed char y, signed char z) 
# 94
{ 
# 95
char3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 96
} 
# 98
static inline uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z) 
# 99
{ 
# 100
uchar3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 101
} 
# 103
static inline char4 make_char4(signed char x, signed char y, signed char z, signed char w) 
# 104
{ 
# 105
char4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 106
} 
# 108
static inline uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w) 
# 109
{ 
# 110
uchar4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 111
} 
# 113
static inline short1 make_short1(short x) 
# 114
{ 
# 115
short1 t; (t.x) = x; return t; 
# 116
} 
# 118
static inline ushort1 make_ushort1(unsigned short x) 
# 119
{ 
# 120
ushort1 t; (t.x) = x; return t; 
# 121
} 
# 123
static inline short2 make_short2(short x, short y) 
# 124
{ 
# 125
short2 t; (t.x) = x; (t.y) = y; return t; 
# 126
} 
# 128
static inline ushort2 make_ushort2(unsigned short x, unsigned short y) 
# 129
{ 
# 130
ushort2 t; (t.x) = x; (t.y) = y; return t; 
# 131
} 
# 133
static inline short3 make_short3(short x, short y, short z) 
# 134
{ 
# 135
short3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 136
} 
# 138
static inline ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z) 
# 139
{ 
# 140
ushort3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 141
} 
# 143
static inline short4 make_short4(short x, short y, short z, short w) 
# 144
{ 
# 145
short4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 146
} 
# 148
static inline ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w) 
# 149
{ 
# 150
ushort4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 151
} 
# 153
static inline int1 make_int1(int x) 
# 154
{ 
# 155
int1 t; (t.x) = x; return t; 
# 156
} 
# 158
static inline uint1 make_uint1(unsigned x) 
# 159
{ 
# 160
uint1 t; (t.x) = x; return t; 
# 161
} 
# 163
static inline int2 make_int2(int x, int y) 
# 164
{ 
# 165
int2 t; (t.x) = x; (t.y) = y; return t; 
# 166
} 
# 168
static inline uint2 make_uint2(unsigned x, unsigned y) 
# 169
{ 
# 170
uint2 t; (t.x) = x; (t.y) = y; return t; 
# 171
} 
# 173
static inline int3 make_int3(int x, int y, int z) 
# 174
{ 
# 175
int3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 176
} 
# 178
static inline uint3 make_uint3(unsigned x, unsigned y, unsigned z) 
# 179
{ 
# 180
uint3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 181
} 
# 183
static inline int4 make_int4(int x, int y, int z, int w) 
# 184
{ 
# 185
int4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 186
} 
# 188
static inline uint4 make_uint4(unsigned x, unsigned y, unsigned z, unsigned w) 
# 189
{ 
# 190
uint4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 191
} 
# 193
static inline long1 make_long1(long x) 
# 194
{ 
# 195
long1 t; (t.x) = x; return t; 
# 196
} 
# 198
static inline ulong1 make_ulong1(unsigned long x) 
# 199
{ 
# 200
ulong1 t; (t.x) = x; return t; 
# 201
} 
# 203
static inline long2 make_long2(long x, long y) 
# 204
{ 
# 205
long2 t; (t.x) = x; (t.y) = y; return t; 
# 206
} 
# 208
static inline ulong2 make_ulong2(unsigned long x, unsigned long y) 
# 209
{ 
# 210
ulong2 t; (t.x) = x; (t.y) = y; return t; 
# 211
} 
# 213
static inline long3 make_long3(long x, long y, long z) 
# 214
{ 
# 215
long3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 216
} 
# 218
static inline ulong3 make_ulong3(unsigned long x, unsigned long y, unsigned long z) 
# 219
{ 
# 220
ulong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 221
} 
# 223
static inline long4 make_long4(long x, long y, long z, long w) 
# 224
{ 
# 225
long4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 226
} 
# 228
static inline ulong4 make_ulong4(unsigned long x, unsigned long y, unsigned long z, unsigned long w) 
# 229
{ 
# 230
ulong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 231
} 
# 233
static inline float1 make_float1(float x) 
# 234
{ 
# 235
float1 t; (t.x) = x; return t; 
# 236
} 
# 238
static inline float2 make_float2(float x, float y) 
# 239
{ 
# 240
float2 t; (t.x) = x; (t.y) = y; return t; 
# 241
} 
# 243
static inline float3 make_float3(float x, float y, float z) 
# 244
{ 
# 245
float3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 246
} 
# 248
static inline float4 make_float4(float x, float y, float z, float w) 
# 249
{ 
# 250
float4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 251
} 
# 253
static inline longlong1 make_longlong1(long long x) 
# 254
{ 
# 255
longlong1 t; (t.x) = x; return t; 
# 256
} 
# 258
static inline ulonglong1 make_ulonglong1(unsigned long long x) 
# 259
{ 
# 260
ulonglong1 t; (t.x) = x; return t; 
# 261
} 
# 263
static inline longlong2 make_longlong2(long long x, long long y) 
# 264
{ 
# 265
longlong2 t; (t.x) = x; (t.y) = y; return t; 
# 266
} 
# 268
static inline ulonglong2 make_ulonglong2(unsigned long long x, unsigned long long y) 
# 269
{ 
# 270
ulonglong2 t; (t.x) = x; (t.y) = y; return t; 
# 271
} 
# 273
static inline longlong3 make_longlong3(long long x, long long y, long long z) 
# 274
{ 
# 275
longlong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 276
} 
# 278
static inline ulonglong3 make_ulonglong3(unsigned long long x, unsigned long long y, unsigned long long z) 
# 279
{ 
# 280
ulonglong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 281
} 
# 283
static inline longlong4 make_longlong4(long long x, long long y, long long z, long long w) 
# 284
{ 
# 285
longlong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 286
} 
# 288
static inline ulonglong4 make_ulonglong4(unsigned long long x, unsigned long long y, unsigned long long z, unsigned long long w) 
# 289
{ 
# 290
ulonglong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 291
} 
# 293
static inline double1 make_double1(double x) 
# 294
{ 
# 295
double1 t; (t.x) = x; return t; 
# 296
} 
# 298
static inline double2 make_double2(double x, double y) 
# 299
{ 
# 300
double2 t; (t.x) = x; (t.y) = y; return t; 
# 301
} 
# 303
static inline double3 make_double3(double x, double y, double z) 
# 304
{ 
# 305
double3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 306
} 
# 308
static inline double4 make_double4(double x, double y, double z, double w) 
# 309
{ 
# 310
double4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 311
} 
# 28 "/usr/include/string.h" 3
extern "C" {
# 43 "/usr/include/string.h" 3
extern void *memcpy(void *__restrict__ __dest, const void *__restrict__ __src, size_t __n) noexcept(true)
# 44
 __attribute((__nonnull__(1, 2))); 
# 47
extern void *memmove(void * __dest, const void * __src, size_t __n) noexcept(true)
# 48
 __attribute((__nonnull__(1, 2))); 
# 54
extern void *memccpy(void *__restrict__ __dest, const void *__restrict__ __src, int __c, size_t __n) noexcept(true)
# 56
 __attribute((__nonnull__(1, 2))) __attribute((__access__(__write_only__ , 1 , 4 ))); 
# 61
extern void *memset(void * __s, int __c, size_t __n) noexcept(true) __attribute((__nonnull__(1))); 
# 64
extern int memcmp(const void * __s1, const void * __s2, size_t __n) noexcept(true)
# 65
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 80 "/usr/include/string.h" 3
extern int __memcmpeq(const void * __s1, const void * __s2, size_t __n) noexcept(true)
# 81
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 85
extern "C++" {
# 87
extern void *memchr(void * __s, int __c, size_t __n) noexcept(true) __asm__("memchr")
# 88
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 89
extern const void *memchr(const void * __s, int __c, size_t __n) noexcept(true) __asm__("memchr")
# 90
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 105 "/usr/include/string.h" 3
}
# 115 "/usr/include/string.h" 3
extern "C++" void *rawmemchr(void * __s, int __c) noexcept(true) __asm__("rawmemchr")
# 116
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 117
extern "C++" const void *rawmemchr(const void * __s, int __c) noexcept(true) __asm__("rawmemchr")
# 118
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 126
extern "C++" void *memrchr(void * __s, int __c, size_t __n) noexcept(true) __asm__("memrchr")
# 127
 __attribute((__pure__)) __attribute((__nonnull__(1)))
# 128
 __attribute((__access__(__read_only__ , 1 , 3 ))); 
# 129
extern "C++" const void *memrchr(const void * __s, int __c, size_t __n) noexcept(true) __asm__("memrchr")
# 130
 __attribute((__pure__)) __attribute((__nonnull__(1)))
# 131
 __attribute((__access__(__read_only__ , 1 , 3 ))); 
# 141 "/usr/include/string.h" 3
extern char *strcpy(char *__restrict__ __dest, const char *__restrict__ __src) noexcept(true)
# 142
 __attribute((__nonnull__(1, 2))); 
# 144
extern char *strncpy(char *__restrict__ __dest, const char *__restrict__ __src, size_t __n) noexcept(true)
# 146
 __attribute((__nonnull__(1, 2))); 
# 149
extern char *strcat(char *__restrict__ __dest, const char *__restrict__ __src) noexcept(true)
# 150
 __attribute((__nonnull__(1, 2))); 
# 152
extern char *strncat(char *__restrict__ __dest, const char *__restrict__ __src, size_t __n) noexcept(true)
# 153
 __attribute((__nonnull__(1, 2))); 
# 156
extern int strcmp(const char * __s1, const char * __s2) noexcept(true)
# 157
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 159
extern int strncmp(const char * __s1, const char * __s2, size_t __n) noexcept(true)
# 160
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 163
extern int strcoll(const char * __s1, const char * __s2) noexcept(true)
# 164
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 166
extern size_t strxfrm(char *__restrict__ __dest, const char *__restrict__ __src, size_t __n) noexcept(true)
# 168
 __attribute((__nonnull__(2))) __attribute((__access__(__write_only__ , 1 , 3 ))); 
# 175
extern int strcoll_l(const char * __s1, const char * __s2, locale_t __l) noexcept(true)
# 176
 __attribute((__pure__)) __attribute((__nonnull__(1, 2, 3))); 
# 179
extern size_t strxfrm_l(char * __dest, const char * __src, size_t __n, locale_t __l) noexcept(true)
# 180
 __attribute((__nonnull__(2, 4)))
# 181
 __attribute((__access__(__write_only__ , 1 , 3 ))); 
# 187
extern char *strdup(const char * __s) noexcept(true)
# 188
 __attribute((__malloc__)) __attribute((__nonnull__(1))); 
# 195
extern char *strndup(const char * __string, size_t __n) noexcept(true)
# 196
 __attribute((__malloc__)) __attribute((__nonnull__(1))); 
# 224 "/usr/include/string.h" 3
extern "C++" {
# 226
extern char *strchr(char * __s, int __c) noexcept(true) __asm__("strchr")
# 227
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 228
extern const char *strchr(const char * __s, int __c) noexcept(true) __asm__("strchr")
# 229
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 244 "/usr/include/string.h" 3
}
# 251
extern "C++" {
# 253
extern char *strrchr(char * __s, int __c) noexcept(true) __asm__("strrchr")
# 254
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 255
extern const char *strrchr(const char * __s, int __c) noexcept(true) __asm__("strrchr")
# 256
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 271 "/usr/include/string.h" 3
}
# 281 "/usr/include/string.h" 3
extern "C++" char *strchrnul(char * __s, int __c) noexcept(true) __asm__("strchrnul")
# 282
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 283
extern "C++" const char *strchrnul(const char * __s, int __c) noexcept(true) __asm__("strchrnul")
# 284
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 293 "/usr/include/string.h" 3
extern size_t strcspn(const char * __s, const char * __reject) noexcept(true)
# 294
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 297
extern size_t strspn(const char * __s, const char * __accept) noexcept(true)
# 298
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 301
extern "C++" {
# 303
extern char *strpbrk(char * __s, const char * __accept) noexcept(true) __asm__("strpbrk")
# 304
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 305
extern const char *strpbrk(const char * __s, const char * __accept) noexcept(true) __asm__("strpbrk")
# 306
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 321 "/usr/include/string.h" 3
}
# 328
extern "C++" {
# 330
extern char *strstr(char * __haystack, const char * __needle) noexcept(true) __asm__("strstr")
# 331
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 332
extern const char *strstr(const char * __haystack, const char * __needle) noexcept(true) __asm__("strstr")
# 333
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 348 "/usr/include/string.h" 3
}
# 356
extern char *strtok(char *__restrict__ __s, const char *__restrict__ __delim) noexcept(true)
# 357
 __attribute((__nonnull__(2))); 
# 361
extern char *__strtok_r(char *__restrict__ __s, const char *__restrict__ __delim, char **__restrict__ __save_ptr) noexcept(true)
# 364
 __attribute((__nonnull__(2, 3))); 
# 366
extern char *strtok_r(char *__restrict__ __s, const char *__restrict__ __delim, char **__restrict__ __save_ptr) noexcept(true)
# 368
 __attribute((__nonnull__(2, 3))); 
# 374
extern "C++" char *strcasestr(char * __haystack, const char * __needle) noexcept(true) __asm__("strcasestr")
# 375
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 376
extern "C++" const char *strcasestr(const char * __haystack, const char * __needle) noexcept(true) __asm__("strcasestr")
# 378
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 389 "/usr/include/string.h" 3
extern void *memmem(const void * __haystack, size_t __haystacklen, const void * __needle, size_t __needlelen) noexcept(true)
# 391
 __attribute((__pure__)) __attribute((__nonnull__(1, 3)))
# 392
 __attribute((__access__(__read_only__ , 1 , 2 )))
# 393
 __attribute((__access__(__read_only__ , 3 , 4 ))); 
# 397
extern void *__mempcpy(void *__restrict__ __dest, const void *__restrict__ __src, size_t __n) noexcept(true)
# 399
 __attribute((__nonnull__(1, 2))); 
# 400
extern void *mempcpy(void *__restrict__ __dest, const void *__restrict__ __src, size_t __n) noexcept(true)
# 402
 __attribute((__nonnull__(1, 2))); 
# 407
extern size_t strlen(const char * __s) noexcept(true)
# 408
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 413
extern size_t strnlen(const char * __string, size_t __maxlen) noexcept(true)
# 414
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 419
extern char *strerror(int __errnum) noexcept(true); 
# 444 "/usr/include/string.h" 3
extern char *strerror_r(int __errnum, char * __buf, size_t __buflen) noexcept(true)
# 445
 __attribute((__nonnull__(2))) __attribute((__access__(__write_only__ , 2 , 3 ))); 
# 450
extern const char *strerrordesc_np(int __err) noexcept(true); 
# 452
extern const char *strerrorname_np(int __err) noexcept(true); 
# 458
extern char *strerror_l(int __errnum, locale_t __l) noexcept(true); 
# 30 "/usr/include/strings.h" 3
extern "C" {
# 34
extern int bcmp(const void * __s1, const void * __s2, size_t __n) noexcept(true)
# 35
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 38
extern void bcopy(const void * __src, void * __dest, size_t __n) noexcept(true)
# 39
 __attribute((__nonnull__(1, 2))); 
# 42
extern void bzero(void * __s, size_t __n) noexcept(true) __attribute((__nonnull__(1))); 
# 46
extern "C++" {
# 48
extern char *index(char * __s, int __c) noexcept(true) __asm__("index")
# 49
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 50
extern const char *index(const char * __s, int __c) noexcept(true) __asm__("index")
# 51
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 66 "/usr/include/strings.h" 3
}
# 74
extern "C++" {
# 76
extern char *rindex(char * __s, int __c) noexcept(true) __asm__("rindex")
# 77
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 78
extern const char *rindex(const char * __s, int __c) noexcept(true) __asm__("rindex")
# 79
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 94 "/usr/include/strings.h" 3
}
# 104 "/usr/include/strings.h" 3
extern int ffs(int __i) noexcept(true) __attribute((const)); 
# 110
extern int ffsl(long __l) noexcept(true) __attribute((const)); 
# 111
__extension__ extern int ffsll(long long __ll) noexcept(true)
# 112
 __attribute((const)); 
# 116
extern int strcasecmp(const char * __s1, const char * __s2) noexcept(true)
# 117
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 120
extern int strncasecmp(const char * __s1, const char * __s2, size_t __n) noexcept(true)
# 121
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 128
extern int strcasecmp_l(const char * __s1, const char * __s2, locale_t __loc) noexcept(true)
# 129
 __attribute((__pure__)) __attribute((__nonnull__(1, 2, 3))); 
# 133
extern int strncasecmp_l(const char * __s1, const char * __s2, size_t __n, locale_t __loc) noexcept(true)
# 135
 __attribute((__pure__)) __attribute((__nonnull__(1, 2, 4))); 
# 138
}
# 466 "/usr/include/string.h" 3
extern void explicit_bzero(void * __s, size_t __n) noexcept(true) __attribute((__nonnull__(1)))
# 467
 __attribute((__access__(__write_only__ , 1 , 2 ))); 
# 471
extern char *strsep(char **__restrict__ __stringp, const char *__restrict__ __delim) noexcept(true)
# 473
 __attribute((__nonnull__(1, 2))); 
# 478
extern char *strsignal(int __sig) noexcept(true); 
# 482
extern const char *sigabbrev_np(int __sig) noexcept(true); 
# 485
extern const char *sigdescr_np(int __sig) noexcept(true); 
# 489
extern char *__stpcpy(char *__restrict__ __dest, const char *__restrict__ __src) noexcept(true)
# 490
 __attribute((__nonnull__(1, 2))); 
# 491
extern char *stpcpy(char *__restrict__ __dest, const char *__restrict__ __src) noexcept(true)
# 492
 __attribute((__nonnull__(1, 2))); 
# 496
extern char *__stpncpy(char *__restrict__ __dest, const char *__restrict__ __src, size_t __n) noexcept(true)
# 498
 __attribute((__nonnull__(1, 2))); 
# 499
extern char *stpncpy(char *__restrict__ __dest, const char *__restrict__ __src, size_t __n) noexcept(true)
# 501
 __attribute((__nonnull__(1, 2))); 
# 506
extern int strverscmp(const char * __s1, const char * __s2) noexcept(true)
# 507
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 510
extern char *strfry(char * __string) noexcept(true) __attribute((__nonnull__(1))); 
# 513
extern void *memfrob(void * __s, size_t __n) noexcept(true) __attribute((__nonnull__(1)))
# 514
 __attribute((__access__(__read_write__ , 1 , 2 ))); 
# 522
extern "C++" char *basename(char * __filename) noexcept(true) __asm__("basename")
# 523
 __attribute((__nonnull__(1))); 
# 524
extern "C++" const char *basename(const char * __filename) noexcept(true) __asm__("basename")
# 525
 __attribute((__nonnull__(1))); 
# 539 "/usr/include/string.h" 3
}
# 26 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3
struct timex { 
# 58 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3
unsigned modes; 
# 59
__syscall_slong_t offset; 
# 60
__syscall_slong_t freq; 
# 61
__syscall_slong_t maxerror; 
# 62
__syscall_slong_t esterror; 
# 63
int status; 
# 64
__syscall_slong_t constant; 
# 65
__syscall_slong_t precision; 
# 66
__syscall_slong_t tolerance; 
# 67
timeval time; 
# 68
__syscall_slong_t tick; 
# 69
__syscall_slong_t ppsfreq; 
# 70
__syscall_slong_t jitter; 
# 71
int shift; 
# 72
__syscall_slong_t stabil; 
# 73
__syscall_slong_t jitcnt; 
# 74
__syscall_slong_t calcnt; 
# 75
__syscall_slong_t errcnt; 
# 76
__syscall_slong_t stbcnt; 
# 78
int tai; 
# 81
int: 32; int: 32; int: 32; int: 32; 
# 82
int: 32; int: 32; int: 32; int: 32; 
# 83
int: 32; int: 32; int: 32; 
# 85
}; 
# 75 "/usr/include/x86_64-linux-gnu/bits/time.h" 3
extern "C" {
# 78
extern int clock_adjtime(__clockid_t __clock_id, timex * __utx) noexcept(true); 
# 90 "/usr/include/x86_64-linux-gnu/bits/time.h" 3
}
# 7 "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h" 3
struct tm { 
# 9
int tm_sec; 
# 10
int tm_min; 
# 11
int tm_hour; 
# 12
int tm_mday; 
# 13
int tm_mon; 
# 14
int tm_year; 
# 15
int tm_wday; 
# 16
int tm_yday; 
# 17
int tm_isdst; 
# 20
long tm_gmtoff; 
# 21
const char *tm_zone; 
# 26
}; 
# 8 "/usr/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h" 3
struct itimerspec { 
# 10
timespec it_interval; 
# 11
timespec it_value; 
# 12
}; 
# 49 "/usr/include/time.h" 3
struct sigevent; 
# 68 "/usr/include/time.h" 3
extern "C" {
# 72
extern clock_t clock() noexcept(true); 
# 76
extern time_t time(time_t * __timer) noexcept(true); 
# 79
extern double difftime(time_t __time1, time_t __time0) noexcept(true)
# 80
 __attribute((const)); 
# 83
extern time_t mktime(tm * __tp) noexcept(true); 
# 100 "/usr/include/time.h" 3
extern size_t strftime(char *__restrict__ __s, size_t __maxsize, const char *__restrict__ __format, const tm *__restrict__ __tp) noexcept(true); 
# 107
extern char *strptime(const char *__restrict__ __s, const char *__restrict__ __fmt, tm * __tp) noexcept(true); 
# 116
extern size_t strftime_l(char *__restrict__ __s, size_t __maxsize, const char *__restrict__ __format, const tm *__restrict__ __tp, locale_t __loc) noexcept(true); 
# 123
extern char *strptime_l(const char *__restrict__ __s, const char *__restrict__ __fmt, tm * __tp, locale_t __loc) noexcept(true); 
# 132
extern tm *gmtime(const time_t * __timer) noexcept(true); 
# 136
extern tm *localtime(const time_t * __timer) noexcept(true); 
# 154 "/usr/include/time.h" 3
extern tm *gmtime_r(const time_t *__restrict__ __timer, tm *__restrict__ __tp) noexcept(true); 
# 159
extern tm *localtime_r(const time_t *__restrict__ __timer, tm *__restrict__ __tp) noexcept(true); 
# 179 "/usr/include/time.h" 3
extern char *asctime(const tm * __tp) noexcept(true); 
# 183
extern char *ctime(const time_t * __timer) noexcept(true); 
# 197 "/usr/include/time.h" 3
extern char *asctime_r(const tm *__restrict__ __tp, char *__restrict__ __buf) noexcept(true); 
# 202
extern char *ctime_r(const time_t *__restrict__ __timer, char *__restrict__ __buf) noexcept(true); 
# 217 "/usr/include/time.h" 3
extern char *__tzname[2]; 
# 218
extern int __daylight; 
# 219
extern long __timezone; 
# 224
extern char *tzname[2]; 
# 228
extern void tzset() noexcept(true); 
# 232
extern int daylight; 
# 233
extern long timezone; 
# 249 "/usr/include/time.h" 3
extern time_t timegm(tm * __tp) noexcept(true); 
# 251
extern time_t timelocal(tm * __tp) noexcept(true); 
# 262 "/usr/include/time.h" 3
extern int dysize(int __year) noexcept(true) __attribute((const)); 
# 272 "/usr/include/time.h" 3
extern int nanosleep(const timespec * __requested_time, timespec * __remaining); 
# 276
extern int clock_getres(clockid_t __clock_id, timespec * __res) noexcept(true); 
# 279
extern int clock_gettime(clockid_t __clock_id, timespec * __tp) noexcept(true); 
# 282
extern int clock_settime(clockid_t __clock_id, const timespec * __tp) noexcept(true); 
# 311 "/usr/include/time.h" 3
extern int clock_nanosleep(clockid_t __clock_id, int __flags, const timespec * __req, timespec * __rem); 
# 326 "/usr/include/time.h" 3
extern int clock_getcpuclockid(pid_t __pid, clockid_t * __clock_id) noexcept(true); 
# 331
extern int timer_create(clockid_t __clock_id, sigevent *__restrict__ __evp, timer_t *__restrict__ __timerid) noexcept(true); 
# 336
extern int timer_delete(timer_t __timerid) noexcept(true); 
# 340
extern int timer_settime(timer_t __timerid, int __flags, const itimerspec *__restrict__ __value, itimerspec *__restrict__ __ovalue) noexcept(true); 
# 345
extern int timer_gettime(timer_t __timerid, itimerspec * __value) noexcept(true); 
# 364 "/usr/include/time.h" 3
extern int timer_getoverrun(timer_t __timerid) noexcept(true); 
# 371
extern int timespec_get(timespec * __ts, int __base) noexcept(true)
# 372
 __attribute((__nonnull__(1))); 
# 387 "/usr/include/time.h" 3
extern int timespec_getres(timespec * __ts, int __base) noexcept(true); 
# 413 "/usr/include/time.h" 3
extern int getdate_err; 
# 422 "/usr/include/time.h" 3
extern tm *getdate(const char * __string); 
# 436 "/usr/include/time.h" 3
extern int getdate_r(const char *__restrict__ __string, tm *__restrict__ __resbufp); 
# 440
}
# 88 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/common_functions.h" 3
extern "C" {
# 91
extern clock_t clock() noexcept(true); 
# 96
extern void *memset(void *, int, size_t) noexcept(true); 
# 97
extern void *memcpy(void *, const void *, size_t) noexcept(true); 
# 99
}
# 126 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern "C" {
# 231 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern int abs(int a) noexcept(true); 
# 242 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern long labs(long a) noexcept(true); 
# 253 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern long long llabs(long long a) noexcept(true); 
# 281 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double fabs(double x) noexcept(true); 
# 301 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float fabsf(float x) noexcept(true); 
# 311 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern inline int min(const int a, const int b); 
# 318
extern inline unsigned umin(const unsigned a, const unsigned b); 
# 325
extern inline long long llmin(const long long a, const long long b); 
# 332
extern inline unsigned long long ullmin(const unsigned long long a, const unsigned long long b); 
# 353 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float fminf(float x, float y) noexcept(true); 
# 373 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double fmin(double x, double y) noexcept(true); 
# 386 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern inline int max(const int a, const int b); 
# 394
extern inline unsigned umax(const unsigned a, const unsigned b); 
# 401
extern inline long long llmax(const long long a, const long long b); 
# 408
extern inline unsigned long long ullmax(const unsigned long long a, const unsigned long long b); 
# 429 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float fmaxf(float x, float y) noexcept(true); 
# 449 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double fmax(double, double) noexcept(true); 
# 471 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double sin(double x) noexcept(true); 
# 489 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double cos(double x) noexcept(true); 
# 505 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern void sincos(double x, double * sptr, double * cptr) noexcept(true); 
# 518 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern void sincosf(float x, float * sptr, float * cptr) noexcept(true); 
# 541 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double tan(double x) noexcept(true); 
# 565 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double sqrt(double x) noexcept(true); 
# 591 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double rsqrt(double x); 
# 615 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float rsqrtf(float x); 
# 642 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double log2(double x) noexcept(true); 
# 671 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double exp2(double x) noexcept(true); 
# 700 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float exp2f(float x) noexcept(true); 
# 731 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double exp10(double x) noexcept(true); 
# 758 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float exp10f(float x) noexcept(true); 
# 792 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double expm1(double x) noexcept(true); 
# 825 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float expm1f(float x) noexcept(true); 
# 852 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float log2f(float x) noexcept(true); 
# 877 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double log10(double x) noexcept(true); 
# 903 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double log(double x) noexcept(true); 
# 930 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double log1p(double x) noexcept(true); 
# 960 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float log1pf(float x) noexcept(true); 
# 986 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double floor(double x) noexcept(true); 
# 1015 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double exp(double x) noexcept(true); 
# 1034 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double cosh(double x) noexcept(true); 
# 1054 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double sinh(double x) noexcept(true); 
# 1074 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double tanh(double x) noexcept(true); 
# 1098 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double acosh(double x) noexcept(true); 
# 1125 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float acoshf(float x) noexcept(true); 
# 1149 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double asinh(double x) noexcept(true); 
# 1173 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float asinhf(float x) noexcept(true); 
# 1198 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double atanh(double x) noexcept(true); 
# 1223 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float atanhf(float x) noexcept(true); 
# 1241 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double ldexp(double x, int exp) noexcept(true); 
# 1256 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float ldexpf(float x, int exp) noexcept(true); 
# 1277 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double logb(double x) noexcept(true); 
# 1301 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float logbf(float x) noexcept(true); 
# 1325 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern int ilogb(double x) noexcept(true); 
# 1349 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern int ilogbf(float x) noexcept(true); 
# 1377 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double scalbn(double x, int n) noexcept(true); 
# 1405 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float scalbnf(float x, int n) noexcept(true); 
# 1433 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double scalbln(double x, long n) noexcept(true); 
# 1461 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float scalblnf(float x, long n) noexcept(true); 
# 1493 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double frexp(double x, int * nptr) noexcept(true); 
# 1522 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float frexpf(float x, int * nptr) noexcept(true); 
# 1545 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double round(double x) noexcept(true); 
# 1571 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float roundf(float x) noexcept(true); 
# 1589 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern long lround(double x) noexcept(true); 
# 1607 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern long lroundf(float x) noexcept(true); 
# 1625 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern long long llround(double x) noexcept(true); 
# 1643 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern long long llroundf(float x) noexcept(true); 
# 1713 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float rintf(float x) noexcept(true); 
# 1730 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern long lrint(double x) noexcept(true); 
# 1747 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern long lrintf(float x) noexcept(true); 
# 1764 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern long long llrint(double x) noexcept(true); 
# 1781 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern long long llrintf(float x) noexcept(true); 
# 1805 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double nearbyint(double x) noexcept(true); 
# 1829 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float nearbyintf(float x) noexcept(true); 
# 1853 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double ceil(double x) noexcept(true); 
# 1876 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double trunc(double x) noexcept(true); 
# 1902 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float truncf(float x) noexcept(true); 
# 1924 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double fdim(double x, double y) noexcept(true); 
# 1945 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float fdimf(float x, float y) noexcept(true); 
# 2028 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double atan2(double y, double x) noexcept(true); 
# 2054 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double atan(double x) noexcept(true); 
# 2071 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double acos(double x) noexcept(true); 
# 2093 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double asin(double x) noexcept(true); 
# 2124 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double hypot(double x, double y) noexcept(true); 
# 2181 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float hypotf(float x, float y) noexcept(true); 
# 2453 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double cbrt(double x) noexcept(true); 
# 2480 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float cbrtf(float x) noexcept(true); 
# 2506 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double rcbrt(double x); 
# 2527 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float rcbrtf(float x); 
# 2550 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double sinpi(double x); 
# 2573 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float sinpif(float x); 
# 2595 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double cospi(double x); 
# 2617 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float cospif(float x); 
# 2630 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern void sincospi(double x, double * sptr, double * cptr); 
# 2643 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern void sincospif(float x, float * sptr, float * cptr); 
# 2729 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double pow(double x, double y) noexcept(true); 
# 2753 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double modf(double x, double * iptr) noexcept(true); 
# 2780 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double fmod(double x, double y) noexcept(true); 
# 2810 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double remainder(double x, double y) noexcept(true); 
# 2843 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float remainderf(float x, float y) noexcept(true); 
# 2881 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double remquo(double x, double y, int * quo) noexcept(true); 
# 2919 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float remquof(float x, float y, int * quo) noexcept(true); 
# 2940 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double j0(double x) noexcept(true); 
# 2962 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float j0f(float x) noexcept(true); 
# 2989 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double j1(double x) noexcept(true); 
# 3016 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float j1f(float x) noexcept(true); 
# 3039 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double jn(int n, double x) noexcept(true); 
# 3062 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float jnf(int n, float x) noexcept(true); 
# 3089 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double y0(double x) noexcept(true); 
# 3116 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float y0f(float x) noexcept(true); 
# 3143 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double y1(double x) noexcept(true); 
# 3170 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float y1f(float x) noexcept(true); 
# 3198 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double yn(int n, double x) noexcept(true); 
# 3226 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float ynf(int n, float x) noexcept(true); 
# 3322 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double erf(double x) noexcept(true); 
# 3347 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float erff(float x) noexcept(true); 
# 3377 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double erfinv(double x); 
# 3400 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float erfinvf(float x); 
# 3424 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double erfc(double x) noexcept(true); 
# 3447 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float erfcf(float x) noexcept(true); 
# 3479 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double lgamma(double x) noexcept(true); 
# 3507 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double erfcinv(double x); 
# 3528 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float erfcinvf(float x); 
# 3550 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double normcdfinv(double x); 
# 3572 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float normcdfinvf(float x); 
# 3591 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double normcdf(double x); 
# 3610 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float normcdff(float x); 
# 3630 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double erfcx(double x); 
# 3650 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float erfcxf(float x); 
# 3683 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float lgammaf(float x) noexcept(true); 
# 3712 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double tgamma(double x) noexcept(true); 
# 3741 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float tgammaf(float x) noexcept(true); 
# 3755 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double copysign(double x, double y) noexcept(true); 
# 3769 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float copysignf(float x, float y) noexcept(true); 
# 3788 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double nextafter(double x, double y) noexcept(true); 
# 3807 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float nextafterf(float x, float y) noexcept(true); 
# 3823 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double nan(const char * tagp) noexcept(true); 
# 3839 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float nanf(const char * tagp) noexcept(true); 
# 3846
extern int __isinff(float) noexcept(true); 
# 3847
extern int __isnanf(float) noexcept(true); 
# 3857 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern int __finite(double) noexcept(true); 
# 3858
extern int __finitef(float) noexcept(true); 
# 3859
extern int __signbit(double) noexcept(true); 
# 3860
extern int __isnan(double) noexcept(true); 
# 3861
extern int __isinf(double) noexcept(true); 
# 3864
extern int __signbitf(float) noexcept(true); 
# 3915 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern double fma(double x, double y, double z) noexcept(true); 
# 3965 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float fmaf(float x, float y, float z) noexcept(true); 
# 3976 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern int __signbitl(long double) noexcept(true); 
# 3982
extern int __finitel(long double) noexcept(true); 
# 3983
extern int __isinfl(long double) noexcept(true); 
# 3984
extern int __isnanl(long double) noexcept(true); 
# 4028 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float acosf(float x) noexcept(true); 
# 4050 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float asinf(float x) noexcept(true); 
# 4077 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float atanf(float x) noexcept(true); 
# 4157 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float atan2f(float y, float x) noexcept(true); 
# 4176 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float cosf(float x) noexcept(true); 
# 4196 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float sinf(float x) noexcept(true); 
# 4216 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float tanf(float x) noexcept(true); 
# 4235 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float coshf(float x) noexcept(true); 
# 4255 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float sinhf(float x) noexcept(true); 
# 4275 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float tanhf(float x) noexcept(true); 
# 4298 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float logf(float x) noexcept(true); 
# 4328 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float expf(float x) noexcept(true); 
# 4351 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float log10f(float x) noexcept(true); 
# 4374 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float modff(float x, float * iptr) noexcept(true); 
# 4457 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float powf(float x, float y) noexcept(true); 
# 4481 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float sqrtf(float x) noexcept(true); 
# 4504 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float ceilf(float x) noexcept(true); 
# 4527 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float floorf(float x) noexcept(true); 
# 4553 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern float fmodf(float x, float y) noexcept(true); 
# 4568 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
}
# 67 "/usr/include/c++/11/bits/cpp_type_traits.h" 3
extern "C++" {
# 69
namespace std __attribute((__visibility__("default"))) { 
# 73
struct __true_type { }; 
# 74
struct __false_type { }; 
# 76
template< bool > 
# 77
struct __truth_type { 
# 78
typedef __false_type __type; }; 
# 81
template<> struct __truth_type< true>  { 
# 82
typedef __true_type __type; }; 
# 86
template< class _Sp, class _Tp> 
# 87
struct __traitor { 
# 89
enum { __value = ((bool)_Sp::__value) || ((bool)_Tp::__value)}; 
# 90
typedef typename __truth_type< __value> ::__type __type; 
# 91
}; 
# 94
template< class , class > 
# 95
struct __are_same { 
# 97
enum { __value}; 
# 98
typedef __false_type __type; 
# 99
}; 
# 101
template< class _Tp> 
# 102
struct __are_same< _Tp, _Tp>  { 
# 104
enum { __value = 1}; 
# 105
typedef __true_type __type; 
# 106
}; 
# 109
template< class _Tp> 
# 110
struct __is_void { 
# 112
enum { __value}; 
# 113
typedef __false_type __type; 
# 114
}; 
# 117
template<> struct __is_void< void>  { 
# 119
enum { __value = 1}; 
# 120
typedef __true_type __type; 
# 121
}; 
# 126
template< class _Tp> 
# 127
struct __is_integer { 
# 129
enum { __value}; 
# 130
typedef __false_type __type; 
# 131
}; 
# 138
template<> struct __is_integer< bool>  { 
# 140
enum { __value = 1}; 
# 141
typedef __true_type __type; 
# 142
}; 
# 145
template<> struct __is_integer< char>  { 
# 147
enum { __value = 1}; 
# 148
typedef __true_type __type; 
# 149
}; 
# 152
template<> struct __is_integer< signed char>  { 
# 154
enum { __value = 1}; 
# 155
typedef __true_type __type; 
# 156
}; 
# 159
template<> struct __is_integer< unsigned char>  { 
# 161
enum { __value = 1}; 
# 162
typedef __true_type __type; 
# 163
}; 
# 167
template<> struct __is_integer< wchar_t>  { 
# 169
enum { __value = 1}; 
# 170
typedef __true_type __type; 
# 171
}; 
# 185 "/usr/include/c++/11/bits/cpp_type_traits.h" 3
template<> struct __is_integer< char16_t>  { 
# 187
enum { __value = 1}; 
# 188
typedef __true_type __type; 
# 189
}; 
# 192
template<> struct __is_integer< char32_t>  { 
# 194
enum { __value = 1}; 
# 195
typedef __true_type __type; 
# 196
}; 
# 200
template<> struct __is_integer< short>  { 
# 202
enum { __value = 1}; 
# 203
typedef __true_type __type; 
# 204
}; 
# 207
template<> struct __is_integer< unsigned short>  { 
# 209
enum { __value = 1}; 
# 210
typedef __true_type __type; 
# 211
}; 
# 214
template<> struct __is_integer< int>  { 
# 216
enum { __value = 1}; 
# 217
typedef __true_type __type; 
# 218
}; 
# 221
template<> struct __is_integer< unsigned>  { 
# 223
enum { __value = 1}; 
# 224
typedef __true_type __type; 
# 225
}; 
# 228
template<> struct __is_integer< long>  { 
# 230
enum { __value = 1}; 
# 231
typedef __true_type __type; 
# 232
}; 
# 235
template<> struct __is_integer< unsigned long>  { 
# 237
enum { __value = 1}; 
# 238
typedef __true_type __type; 
# 239
}; 
# 242
template<> struct __is_integer< long long>  { 
# 244
enum { __value = 1}; 
# 245
typedef __true_type __type; 
# 246
}; 
# 249
template<> struct __is_integer< unsigned long long>  { 
# 251
enum { __value = 1}; 
# 252
typedef __true_type __type; 
# 253
}; 
# 287 "/usr/include/c++/11/bits/cpp_type_traits.h" 3
template< class _Tp> 
# 288
struct __is_floating { 
# 290
enum { __value}; 
# 291
typedef __false_type __type; 
# 292
}; 
# 296
template<> struct __is_floating< float>  { 
# 298
enum { __value = 1}; 
# 299
typedef __true_type __type; 
# 300
}; 
# 303
template<> struct __is_floating< double>  { 
# 305
enum { __value = 1}; 
# 306
typedef __true_type __type; 
# 307
}; 
# 310
template<> struct __is_floating< long double>  { 
# 312
enum { __value = 1}; 
# 313
typedef __true_type __type; 
# 314
}; 
# 319
template< class _Tp> 
# 320
struct __is_pointer { 
# 322
enum { __value}; 
# 323
typedef __false_type __type; 
# 324
}; 
# 326
template< class _Tp> 
# 327
struct __is_pointer< _Tp *>  { 
# 329
enum { __value = 1}; 
# 330
typedef __true_type __type; 
# 331
}; 
# 336
template< class _Tp> 
# 337
struct __is_arithmetic : public __traitor< __is_integer< _Tp> , __is_floating< _Tp> >  { 
# 339
}; 
# 344
template< class _Tp> 
# 345
struct __is_scalar : public __traitor< __is_arithmetic< _Tp> , __is_pointer< _Tp> >  { 
# 347
}; 
# 352
template< class _Tp> 
# 353
struct __is_char { 
# 355
enum { __value}; 
# 356
typedef __false_type __type; 
# 357
}; 
# 360
template<> struct __is_char< char>  { 
# 362
enum { __value = 1}; 
# 363
typedef __true_type __type; 
# 364
}; 
# 368
template<> struct __is_char< wchar_t>  { 
# 370
enum { __value = 1}; 
# 371
typedef __true_type __type; 
# 372
}; 
# 375
template< class _Tp> 
# 376
struct __is_byte { 
# 378
enum { __value}; 
# 379
typedef __false_type __type; 
# 380
}; 
# 383
template<> struct __is_byte< char>  { 
# 385
enum { __value = 1}; 
# 386
typedef __true_type __type; 
# 387
}; 
# 390
template<> struct __is_byte< signed char>  { 
# 392
enum { __value = 1}; 
# 393
typedef __true_type __type; 
# 394
}; 
# 397
template<> struct __is_byte< unsigned char>  { 
# 399
enum { __value = 1}; 
# 400
typedef __true_type __type; 
# 401
}; 
# 404
enum class byte: unsigned char; 
# 407
template<> struct __is_byte< byte>  { 
# 409
enum { __value = 1}; 
# 410
typedef __true_type __type; 
# 411
}; 
# 423 "/usr/include/c++/11/bits/cpp_type_traits.h" 3
template< class > struct iterator_traits; 
# 426
template< class _Tp> 
# 427
struct __is_nonvolatile_trivially_copyable { 
# 429
enum { __value = __is_trivially_copyable(_Tp)}; 
# 430
}; 
# 435
template< class _Tp> 
# 436
struct __is_nonvolatile_trivially_copyable< volatile _Tp>  { 
# 438
enum { __value}; 
# 439
}; 
# 442
template< class _OutputIter, class _InputIter> 
# 443
struct __memcpyable { 
# 445
enum { __value}; 
# 446
}; 
# 448
template< class _Tp> 
# 449
struct __memcpyable< _Tp *, _Tp *>  : public __is_nonvolatile_trivially_copyable< _Tp>  { 
# 451
}; 
# 453
template< class _Tp> 
# 454
struct __memcpyable< _Tp *, const _Tp *>  : public __is_nonvolatile_trivially_copyable< _Tp>  { 
# 456
}; 
# 463
template< class _Iter1, class _Iter2> 
# 464
struct __memcmpable { 
# 466
enum { __value}; 
# 467
}; 
# 470
template< class _Tp> 
# 471
struct __memcmpable< _Tp *, _Tp *>  : public __is_nonvolatile_trivially_copyable< _Tp>  { 
# 473
}; 
# 475
template< class _Tp> 
# 476
struct __memcmpable< const _Tp *, _Tp *>  : public __is_nonvolatile_trivially_copyable< _Tp>  { 
# 478
}; 
# 480
template< class _Tp> 
# 481
struct __memcmpable< _Tp *, const _Tp *>  : public __is_nonvolatile_trivially_copyable< _Tp>  { 
# 483
}; 
# 491
template< class _Tp, bool _TreatAsBytes = __is_byte< _Tp> ::__value> 
# 498
struct __is_memcmp_ordered { 
# 500
static const bool __value = (((_Tp)(-1)) > ((_Tp)1)); 
# 501
}; 
# 503
template< class _Tp> 
# 504
struct __is_memcmp_ordered< _Tp, false>  { 
# 506
static const bool __value = false; 
# 507
}; 
# 510
template< class _Tp, class _Up, bool  = sizeof(_Tp) == sizeof(_Up)> 
# 511
struct __is_memcmp_ordered_with { 
# 513
static const bool __value = (__is_memcmp_ordered< _Tp> ::__value && __is_memcmp_ordered< _Up> ::__value); 
# 515
}; 
# 517
template< class _Tp, class _Up> 
# 518
struct __is_memcmp_ordered_with< _Tp, _Up, false>  { 
# 520
static const bool __value = false; 
# 521
}; 
# 533 "/usr/include/c++/11/bits/cpp_type_traits.h" 3
template<> struct __is_memcmp_ordered_with< byte, byte, true>  { 
# 534
static constexpr inline bool __value = true; }; 
# 536
template< class _Tp, bool _SameSize> 
# 537
struct __is_memcmp_ordered_with< _Tp, byte, _SameSize>  { 
# 538
static constexpr inline bool __value = false; }; 
# 540
template< class _Up, bool _SameSize> 
# 541
struct __is_memcmp_ordered_with< byte, _Up, _SameSize>  { 
# 542
static constexpr inline bool __value = false; }; 
# 548
template< class _Tp> 
# 549
struct __is_move_iterator { 
# 551
enum { __value}; 
# 552
typedef __false_type __type; 
# 553
}; 
# 557
template< class _Iterator> inline _Iterator 
# 560
__miter_base(_Iterator __it) 
# 561
{ return __it; } 
# 564
}
# 565
}
# 37 "/usr/include/c++/11/ext/type_traits.h" 3
extern "C++" {
# 39
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 44
template< bool , class > 
# 45
struct __enable_if { 
# 46
}; 
# 48
template< class _Tp> 
# 49
struct __enable_if< true, _Tp>  { 
# 50
typedef _Tp __type; }; 
# 54
template< bool _Cond, class _Iftrue, class _Iffalse> 
# 55
struct __conditional_type { 
# 56
typedef _Iftrue __type; }; 
# 58
template< class _Iftrue, class _Iffalse> 
# 59
struct __conditional_type< false, _Iftrue, _Iffalse>  { 
# 60
typedef _Iffalse __type; }; 
# 64
template< class _Tp> 
# 65
struct __add_unsigned { 
# 68
private: typedef __enable_if< std::__is_integer< _Tp> ::__value, _Tp>  __if_type; 
# 71
public: typedef typename __enable_if< std::__is_integer< _Tp> ::__value, _Tp> ::__type __type; 
# 72
}; 
# 75
template<> struct __add_unsigned< char>  { 
# 76
typedef unsigned char __type; }; 
# 79
template<> struct __add_unsigned< signed char>  { 
# 80
typedef unsigned char __type; }; 
# 83
template<> struct __add_unsigned< short>  { 
# 84
typedef unsigned short __type; }; 
# 87
template<> struct __add_unsigned< int>  { 
# 88
typedef unsigned __type; }; 
# 91
template<> struct __add_unsigned< long>  { 
# 92
typedef unsigned long __type; }; 
# 95
template<> struct __add_unsigned< long long>  { 
# 96
typedef unsigned long long __type; }; 
# 100
template<> struct __add_unsigned< bool> ; 
# 103
template<> struct __add_unsigned< wchar_t> ; 
# 107
template< class _Tp> 
# 108
struct __remove_unsigned { 
# 111
private: typedef __enable_if< std::__is_integer< _Tp> ::__value, _Tp>  __if_type; 
# 114
public: typedef typename __enable_if< std::__is_integer< _Tp> ::__value, _Tp> ::__type __type; 
# 115
}; 
# 118
template<> struct __remove_unsigned< char>  { 
# 119
typedef signed char __type; }; 
# 122
template<> struct __remove_unsigned< unsigned char>  { 
# 123
typedef signed char __type; }; 
# 126
template<> struct __remove_unsigned< unsigned short>  { 
# 127
typedef short __type; }; 
# 130
template<> struct __remove_unsigned< unsigned>  { 
# 131
typedef int __type; }; 
# 134
template<> struct __remove_unsigned< unsigned long>  { 
# 135
typedef long __type; }; 
# 138
template<> struct __remove_unsigned< unsigned long long>  { 
# 139
typedef long long __type; }; 
# 143
template<> struct __remove_unsigned< bool> ; 
# 146
template<> struct __remove_unsigned< wchar_t> ; 
# 150
template< class _Type> inline bool 
# 152
__is_null_pointer(_Type *__ptr) 
# 153
{ return __ptr == 0; } 
# 155
template< class _Type> inline bool 
# 157
__is_null_pointer(_Type) 
# 158
{ return false; } 
# 162
inline bool __is_null_pointer(std::nullptr_t) 
# 163
{ return true; } 
# 168
template< class _Tp, bool  = std::template __is_integer< _Tp> ::__value> 
# 169
struct __promote { 
# 170
typedef double __type; }; 
# 175
template< class _Tp> 
# 176
struct __promote< _Tp, false>  { 
# 177
}; 
# 180
template<> struct __promote< long double>  { 
# 181
typedef long double __type; }; 
# 184
template<> struct __promote< double>  { 
# 185
typedef double __type; }; 
# 188
template<> struct __promote< float>  { 
# 189
typedef float __type; }; 
# 192
template< class ..._Tp> using __promoted_t = __decltype(((((typename __promote< _Tp> ::__type)0) + ... ))); 
# 196
template< class _Tp, class _Up, class 
# 197
_Tp2 = typename __promote< _Tp> ::__type, class 
# 198
_Up2 = typename __promote< _Up> ::__type> 
# 199
struct __promote_2 { 
# 201
typedef __typeof__(_Tp2() + _Up2()) __type; 
# 202
}; 
# 204
template< class _Tp, class _Up, class _Vp, class 
# 205
_Tp2 = typename __promote< _Tp> ::__type, class 
# 206
_Up2 = typename __promote< _Up> ::__type, class 
# 207
_Vp2 = typename __promote< _Vp> ::__type> 
# 208
struct __promote_3 { 
# 210
typedef __typeof__((_Tp2() + _Up2()) + _Vp2()) __type; 
# 211
}; 
# 213
template< class _Tp, class _Up, class _Vp, class _Wp, class 
# 214
_Tp2 = typename __promote< _Tp> ::__type, class 
# 215
_Up2 = typename __promote< _Up> ::__type, class 
# 216
_Vp2 = typename __promote< _Vp> ::__type, class 
# 217
_Wp2 = typename __promote< _Wp> ::__type> 
# 218
struct __promote_4 { 
# 220
typedef __typeof__(((_Tp2() + _Up2()) + _Vp2()) + _Wp2()) __type; 
# 221
}; 
# 224
}
# 225
}
# 34 "/usr/include/math.h" 3
extern "C" {
# 163 "/usr/include/math.h" 3
typedef float float_t; 
# 164
typedef double double_t; 
# 252 "/usr/include/math.h" 3
enum { 
# 253
FP_INT_UPWARD, 
# 256
FP_INT_DOWNWARD, 
# 259
FP_INT_TOWARDZERO, 
# 262
FP_INT_TONEARESTFROMZERO, 
# 265
FP_INT_TONEAREST
# 268
}; 
# 20 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3
extern int __fpclassify(double __value) noexcept(true)
# 21
 __attribute((const)); 
# 24
extern int __signbit(double __value) noexcept(true)
# 25
 __attribute((const)); 
# 29
extern int __isinf(double __value) noexcept(true)
# 30
 __attribute((const)); 
# 33
extern int __finite(double __value) noexcept(true)
# 34
 __attribute((const)); 
# 37
extern int __isnan(double __value) noexcept(true)
# 38
 __attribute((const)); 
# 41
extern int __iseqsig(double __x, double __y) noexcept(true); 
# 44
extern int __issignaling(double __value) noexcept(true)
# 45
 __attribute((const)); 
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double acos(double __x) noexcept(true); extern double __acos(double __x) noexcept(true); 
# 55
extern double asin(double __x) noexcept(true); extern double __asin(double __x) noexcept(true); 
# 57
extern double atan(double __x) noexcept(true); extern double __atan(double __x) noexcept(true); 
# 59
extern double atan2(double __y, double __x) noexcept(true); extern double __atan2(double __y, double __x) noexcept(true); 
# 62
extern double cos(double __x) noexcept(true); extern double __cos(double __x) noexcept(true); 
# 64
extern double sin(double __x) noexcept(true); extern double __sin(double __x) noexcept(true); 
# 66
extern double tan(double __x) noexcept(true); extern double __tan(double __x) noexcept(true); 
# 71
extern double cosh(double __x) noexcept(true); extern double __cosh(double __x) noexcept(true); 
# 73
extern double sinh(double __x) noexcept(true); extern double __sinh(double __x) noexcept(true); 
# 75
extern double tanh(double __x) noexcept(true); extern double __tanh(double __x) noexcept(true); 
# 79
extern void sincos(double __x, double * __sinx, double * __cosx) noexcept(true); extern void __sincos(double __x, double * __sinx, double * __cosx) noexcept(true); 
# 85
extern double acosh(double __x) noexcept(true); extern double __acosh(double __x) noexcept(true); 
# 87
extern double asinh(double __x) noexcept(true); extern double __asinh(double __x) noexcept(true); 
# 89
extern double atanh(double __x) noexcept(true); extern double __atanh(double __x) noexcept(true); 
# 95
extern double exp(double __x) noexcept(true); extern double __exp(double __x) noexcept(true); 
# 98
extern double frexp(double __x, int * __exponent) noexcept(true); extern double __frexp(double __x, int * __exponent) noexcept(true); 
# 101
extern double ldexp(double __x, int __exponent) noexcept(true); extern double __ldexp(double __x, int __exponent) noexcept(true); 
# 104
extern double log(double __x) noexcept(true); extern double __log(double __x) noexcept(true); 
# 107
extern double log10(double __x) noexcept(true); extern double __log10(double __x) noexcept(true); 
# 110
extern double modf(double __x, double * __iptr) noexcept(true); extern double __modf(double __x, double * __iptr) noexcept(true) __attribute((__nonnull__(2))); 
# 114
extern double exp10(double __x) noexcept(true); extern double __exp10(double __x) noexcept(true); 
# 119
extern double expm1(double __x) noexcept(true); extern double __expm1(double __x) noexcept(true); 
# 122
extern double log1p(double __x) noexcept(true); extern double __log1p(double __x) noexcept(true); 
# 125
extern double logb(double __x) noexcept(true); extern double __logb(double __x) noexcept(true); 
# 130
extern double exp2(double __x) noexcept(true); extern double __exp2(double __x) noexcept(true); 
# 133
extern double log2(double __x) noexcept(true); extern double __log2(double __x) noexcept(true); 
# 140
extern double pow(double __x, double __y) noexcept(true); extern double __pow(double __x, double __y) noexcept(true); 
# 143
extern double sqrt(double __x) noexcept(true); extern double __sqrt(double __x) noexcept(true); 
# 147
extern double hypot(double __x, double __y) noexcept(true); extern double __hypot(double __x, double __y) noexcept(true); 
# 152
extern double cbrt(double __x) noexcept(true); extern double __cbrt(double __x) noexcept(true); 
# 159
extern double ceil(double __x) noexcept(true) __attribute((const)); extern double __ceil(double __x) noexcept(true) __attribute((const)); 
# 162
extern double fabs(double __x) noexcept(true) __attribute((const)); extern double __fabs(double __x) noexcept(true) __attribute((const)); 
# 165
extern double floor(double __x) noexcept(true) __attribute((const)); extern double __floor(double __x) noexcept(true) __attribute((const)); 
# 168
extern double fmod(double __x, double __y) noexcept(true); extern double __fmod(double __x, double __y) noexcept(true); 
# 183 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int finite(double __value) noexcept(true)
# 184
 __attribute((const)); 
# 187
extern double drem(double __x, double __y) noexcept(true); extern double __drem(double __x, double __y) noexcept(true); 
# 191
extern double significand(double __x) noexcept(true); extern double __significand(double __x) noexcept(true); 
# 198
extern double copysign(double __x, double __y) noexcept(true) __attribute((const)); extern double __copysign(double __x, double __y) noexcept(true) __attribute((const)); 
# 203
extern double nan(const char * __tagb) noexcept(true); extern double __nan(const char * __tagb) noexcept(true); 
# 220 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double j0(double) noexcept(true); extern double __j0(double) noexcept(true); 
# 221
extern double j1(double) noexcept(true); extern double __j1(double) noexcept(true); 
# 222
extern double jn(int, double) noexcept(true); extern double __jn(int, double) noexcept(true); 
# 223
extern double y0(double) noexcept(true); extern double __y0(double) noexcept(true); 
# 224
extern double y1(double) noexcept(true); extern double __y1(double) noexcept(true); 
# 225
extern double yn(int, double) noexcept(true); extern double __yn(int, double) noexcept(true); 
# 231
extern double erf(double) noexcept(true); extern double __erf(double) noexcept(true); 
# 232
extern double erfc(double) noexcept(true); extern double __erfc(double) noexcept(true); 
# 233
extern double lgamma(double) noexcept(true); extern double __lgamma(double) noexcept(true); 
# 238
extern double tgamma(double) noexcept(true); extern double __tgamma(double) noexcept(true); 
# 244
extern double gamma(double) noexcept(true); extern double __gamma(double) noexcept(true); 
# 252
extern double lgamma_r(double, int * __signgamp) noexcept(true); extern double __lgamma_r(double, int * __signgamp) noexcept(true); 
# 259
extern double rint(double __x) noexcept(true); extern double __rint(double __x) noexcept(true); 
# 262
extern double nextafter(double __x, double __y) noexcept(true); extern double __nextafter(double __x, double __y) noexcept(true); 
# 264
extern double nexttoward(double __x, long double __y) noexcept(true); extern double __nexttoward(double __x, long double __y) noexcept(true); 
# 269
extern double nextdown(double __x) noexcept(true); extern double __nextdown(double __x) noexcept(true); 
# 271
extern double nextup(double __x) noexcept(true); extern double __nextup(double __x) noexcept(true); 
# 275
extern double remainder(double __x, double __y) noexcept(true); extern double __remainder(double __x, double __y) noexcept(true); 
# 279
extern double scalbn(double __x, int __n) noexcept(true); extern double __scalbn(double __x, int __n) noexcept(true); 
# 283
extern int ilogb(double __x) noexcept(true); extern int __ilogb(double __x) noexcept(true); 
# 288
extern long llogb(double __x) noexcept(true); extern long __llogb(double __x) noexcept(true); 
# 293
extern double scalbln(double __x, long __n) noexcept(true); extern double __scalbln(double __x, long __n) noexcept(true); 
# 297
extern double nearbyint(double __x) noexcept(true); extern double __nearbyint(double __x) noexcept(true); 
# 301
extern double round(double __x) noexcept(true) __attribute((const)); extern double __round(double __x) noexcept(true) __attribute((const)); 
# 305
extern double trunc(double __x) noexcept(true) __attribute((const)); extern double __trunc(double __x) noexcept(true) __attribute((const)); 
# 310
extern double remquo(double __x, double __y, int * __quo) noexcept(true); extern double __remquo(double __x, double __y, int * __quo) noexcept(true); 
# 317
extern long lrint(double __x) noexcept(true); extern long __lrint(double __x) noexcept(true); 
# 319
__extension__ extern long long llrint(double __x) noexcept(true); extern long long __llrint(double __x) noexcept(true); 
# 323
extern long lround(double __x) noexcept(true); extern long __lround(double __x) noexcept(true); 
# 325
__extension__ extern long long llround(double __x) noexcept(true); extern long long __llround(double __x) noexcept(true); 
# 329
extern double fdim(double __x, double __y) noexcept(true); extern double __fdim(double __x, double __y) noexcept(true); 
# 333
extern double fmax(double __x, double __y) noexcept(true) __attribute((const)); extern double __fmax(double __x, double __y) noexcept(true) __attribute((const)); 
# 336
extern double fmin(double __x, double __y) noexcept(true) __attribute((const)); extern double __fmin(double __x, double __y) noexcept(true) __attribute((const)); 
# 340
extern double fma(double __x, double __y, double __z) noexcept(true); extern double __fma(double __x, double __y, double __z) noexcept(true); 
# 345
extern double roundeven(double __x) noexcept(true) __attribute((const)); extern double __roundeven(double __x) noexcept(true) __attribute((const)); 
# 349
extern __intmax_t fromfp(double __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfp(double __x, int __round, unsigned __width) noexcept(true); 
# 354
extern __uintmax_t ufromfp(double __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfp(double __x, int __round, unsigned __width) noexcept(true); 
# 360
extern __intmax_t fromfpx(double __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpx(double __x, int __round, unsigned __width) noexcept(true); 
# 366
extern __uintmax_t ufromfpx(double __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpx(double __x, int __round, unsigned __width) noexcept(true); 
# 370
extern int canonicalize(double * __cx, const double * __x) noexcept(true); 
# 377
extern double fmaxmag(double __x, double __y) noexcept(true) __attribute((const)); extern double __fmaxmag(double __x, double __y) noexcept(true) __attribute((const)); 
# 380
extern double fminmag(double __x, double __y) noexcept(true) __attribute((const)); extern double __fminmag(double __x, double __y) noexcept(true) __attribute((const)); 
# 385
extern double fmaximum(double __x, double __y) noexcept(true) __attribute((const)); extern double __fmaximum(double __x, double __y) noexcept(true) __attribute((const)); 
# 388
extern double fminimum(double __x, double __y) noexcept(true) __attribute((const)); extern double __fminimum(double __x, double __y) noexcept(true) __attribute((const)); 
# 391
extern double fmaximum_num(double __x, double __y) noexcept(true) __attribute((const)); extern double __fmaximum_num(double __x, double __y) noexcept(true) __attribute((const)); 
# 394
extern double fminimum_num(double __x, double __y) noexcept(true) __attribute((const)); extern double __fminimum_num(double __x, double __y) noexcept(true) __attribute((const)); 
# 397
extern double fmaximum_mag(double __x, double __y) noexcept(true) __attribute((const)); extern double __fmaximum_mag(double __x, double __y) noexcept(true) __attribute((const)); 
# 400
extern double fminimum_mag(double __x, double __y) noexcept(true) __attribute((const)); extern double __fminimum_mag(double __x, double __y) noexcept(true) __attribute((const)); 
# 403
extern double fmaximum_mag_num(double __x, double __y) noexcept(true) __attribute((const)); extern double __fmaximum_mag_num(double __x, double __y) noexcept(true) __attribute((const)); 
# 406
extern double fminimum_mag_num(double __x, double __y) noexcept(true) __attribute((const)); extern double __fminimum_mag_num(double __x, double __y) noexcept(true) __attribute((const)); 
# 411
extern int totalorder(const double * __x, const double * __y) noexcept(true)
# 413
 __attribute((__pure__)); 
# 416
extern int totalordermag(const double * __x, const double * __y) noexcept(true)
# 418
 __attribute((__pure__)); 
# 421
extern double getpayload(const double * __x) noexcept(true); extern double __getpayload(const double * __x) noexcept(true); 
# 424
extern int setpayload(double * __x, double __payload) noexcept(true); 
# 427
extern int setpayloadsig(double * __x, double __payload) noexcept(true); 
# 435
extern double scalb(double __x, double __n) noexcept(true); extern double __scalb(double __x, double __n) noexcept(true); 
# 20 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3
extern int __fpclassifyf(float __value) noexcept(true)
# 21
 __attribute((const)); 
# 24
extern int __signbitf(float __value) noexcept(true)
# 25
 __attribute((const)); 
# 29
extern int __isinff(float __value) noexcept(true)
# 30
 __attribute((const)); 
# 33
extern int __finitef(float __value) noexcept(true)
# 34
 __attribute((const)); 
# 37
extern int __isnanf(float __value) noexcept(true)
# 38
 __attribute((const)); 
# 41
extern int __iseqsigf(float __x, float __y) noexcept(true); 
# 44
extern int __issignalingf(float __value) noexcept(true)
# 45
 __attribute((const)); 
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float acosf(float __x) noexcept(true); extern float __acosf(float __x) noexcept(true); 
# 55
extern float asinf(float __x) noexcept(true); extern float __asinf(float __x) noexcept(true); 
# 57
extern float atanf(float __x) noexcept(true); extern float __atanf(float __x) noexcept(true); 
# 59
extern float atan2f(float __y, float __x) noexcept(true); extern float __atan2f(float __y, float __x) noexcept(true); 
# 62
extern float cosf(float __x) noexcept(true); 
# 64
extern float sinf(float __x) noexcept(true); 
# 66
extern float tanf(float __x) noexcept(true); 
# 71
extern float coshf(float __x) noexcept(true); extern float __coshf(float __x) noexcept(true); 
# 73
extern float sinhf(float __x) noexcept(true); extern float __sinhf(float __x) noexcept(true); 
# 75
extern float tanhf(float __x) noexcept(true); extern float __tanhf(float __x) noexcept(true); 
# 79
extern void sincosf(float __x, float * __sinx, float * __cosx) noexcept(true); 
# 85
extern float acoshf(float __x) noexcept(true); extern float __acoshf(float __x) noexcept(true); 
# 87
extern float asinhf(float __x) noexcept(true); extern float __asinhf(float __x) noexcept(true); 
# 89
extern float atanhf(float __x) noexcept(true); extern float __atanhf(float __x) noexcept(true); 
# 95
extern float expf(float __x) noexcept(true); 
# 98
extern float frexpf(float __x, int * __exponent) noexcept(true); extern float __frexpf(float __x, int * __exponent) noexcept(true); 
# 101
extern float ldexpf(float __x, int __exponent) noexcept(true); extern float __ldexpf(float __x, int __exponent) noexcept(true); 
# 104
extern float logf(float __x) noexcept(true); 
# 107
extern float log10f(float __x) noexcept(true); 
# 110
extern float modff(float __x, float * __iptr) noexcept(true); extern float __modff(float __x, float * __iptr) noexcept(true) __attribute((__nonnull__(2))); 
# 114
extern float exp10f(float __x) noexcept(true); 
# 119
extern float expm1f(float __x) noexcept(true); extern float __expm1f(float __x) noexcept(true); 
# 122
extern float log1pf(float __x) noexcept(true); extern float __log1pf(float __x) noexcept(true); 
# 125
extern float logbf(float __x) noexcept(true); extern float __logbf(float __x) noexcept(true); 
# 130
extern float exp2f(float __x) noexcept(true); extern float __exp2f(float __x) noexcept(true); 
# 133
extern float log2f(float __x) noexcept(true); 
# 140
extern float powf(float __x, float __y) noexcept(true); 
# 143
extern float sqrtf(float __x) noexcept(true); extern float __sqrtf(float __x) noexcept(true); 
# 147
extern float hypotf(float __x, float __y) noexcept(true); extern float __hypotf(float __x, float __y) noexcept(true); 
# 152
extern float cbrtf(float __x) noexcept(true); extern float __cbrtf(float __x) noexcept(true); 
# 159
extern float ceilf(float __x) noexcept(true) __attribute((const)); extern float __ceilf(float __x) noexcept(true) __attribute((const)); 
# 162
extern float fabsf(float __x) noexcept(true) __attribute((const)); extern float __fabsf(float __x) noexcept(true) __attribute((const)); 
# 165
extern float floorf(float __x) noexcept(true) __attribute((const)); extern float __floorf(float __x) noexcept(true) __attribute((const)); 
# 168
extern float fmodf(float __x, float __y) noexcept(true); extern float __fmodf(float __x, float __y) noexcept(true); 
# 177 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int isinff(float __value) noexcept(true)
# 178
 __attribute((const)); 
# 183
extern int finitef(float __value) noexcept(true)
# 184
 __attribute((const)); 
# 187
extern float dremf(float __x, float __y) noexcept(true); extern float __dremf(float __x, float __y) noexcept(true); 
# 191
extern float significandf(float __x) noexcept(true); extern float __significandf(float __x) noexcept(true); 
# 198
extern float copysignf(float __x, float __y) noexcept(true) __attribute((const)); extern float __copysignf(float __x, float __y) noexcept(true) __attribute((const)); 
# 203
extern float nanf(const char * __tagb) noexcept(true); extern float __nanf(const char * __tagb) noexcept(true); 
# 213 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int isnanf(float __value) noexcept(true)
# 214
 __attribute((const)); 
# 220
extern float j0f(float) noexcept(true); extern float __j0f(float) noexcept(true); 
# 221
extern float j1f(float) noexcept(true); extern float __j1f(float) noexcept(true); 
# 222
extern float jnf(int, float) noexcept(true); extern float __jnf(int, float) noexcept(true); 
# 223
extern float y0f(float) noexcept(true); extern float __y0f(float) noexcept(true); 
# 224
extern float y1f(float) noexcept(true); extern float __y1f(float) noexcept(true); 
# 225
extern float ynf(int, float) noexcept(true); extern float __ynf(int, float) noexcept(true); 
# 231
extern float erff(float) noexcept(true); extern float __erff(float) noexcept(true); 
# 232
extern float erfcf(float) noexcept(true); extern float __erfcf(float) noexcept(true); 
# 233
extern float lgammaf(float) noexcept(true); extern float __lgammaf(float) noexcept(true); 
# 238
extern float tgammaf(float) noexcept(true); extern float __tgammaf(float) noexcept(true); 
# 244
extern float gammaf(float) noexcept(true); extern float __gammaf(float) noexcept(true); 
# 252
extern float lgammaf_r(float, int * __signgamp) noexcept(true); extern float __lgammaf_r(float, int * __signgamp) noexcept(true); 
# 259
extern float rintf(float __x) noexcept(true); extern float __rintf(float __x) noexcept(true); 
# 262
extern float nextafterf(float __x, float __y) noexcept(true); extern float __nextafterf(float __x, float __y) noexcept(true); 
# 264
extern float nexttowardf(float __x, long double __y) noexcept(true); extern float __nexttowardf(float __x, long double __y) noexcept(true); 
# 269
extern float nextdownf(float __x) noexcept(true); extern float __nextdownf(float __x) noexcept(true); 
# 271
extern float nextupf(float __x) noexcept(true); extern float __nextupf(float __x) noexcept(true); 
# 275
extern float remainderf(float __x, float __y) noexcept(true); extern float __remainderf(float __x, float __y) noexcept(true); 
# 279
extern float scalbnf(float __x, int __n) noexcept(true); extern float __scalbnf(float __x, int __n) noexcept(true); 
# 283
extern int ilogbf(float __x) noexcept(true); extern int __ilogbf(float __x) noexcept(true); 
# 288
extern long llogbf(float __x) noexcept(true); extern long __llogbf(float __x) noexcept(true); 
# 293
extern float scalblnf(float __x, long __n) noexcept(true); extern float __scalblnf(float __x, long __n) noexcept(true); 
# 297
extern float nearbyintf(float __x) noexcept(true); extern float __nearbyintf(float __x) noexcept(true); 
# 301
extern float roundf(float __x) noexcept(true) __attribute((const)); extern float __roundf(float __x) noexcept(true) __attribute((const)); 
# 305
extern float truncf(float __x) noexcept(true) __attribute((const)); extern float __truncf(float __x) noexcept(true) __attribute((const)); 
# 310
extern float remquof(float __x, float __y, int * __quo) noexcept(true); extern float __remquof(float __x, float __y, int * __quo) noexcept(true); 
# 317
extern long lrintf(float __x) noexcept(true); extern long __lrintf(float __x) noexcept(true); 
# 319
__extension__ extern long long llrintf(float __x) noexcept(true); extern long long __llrintf(float __x) noexcept(true); 
# 323
extern long lroundf(float __x) noexcept(true); extern long __lroundf(float __x) noexcept(true); 
# 325
__extension__ extern long long llroundf(float __x) noexcept(true); extern long long __llroundf(float __x) noexcept(true); 
# 329
extern float fdimf(float __x, float __y) noexcept(true); extern float __fdimf(float __x, float __y) noexcept(true); 
# 333
extern float fmaxf(float __x, float __y) noexcept(true) __attribute((const)); extern float __fmaxf(float __x, float __y) noexcept(true) __attribute((const)); 
# 336
extern float fminf(float __x, float __y) noexcept(true) __attribute((const)); extern float __fminf(float __x, float __y) noexcept(true) __attribute((const)); 
# 340
extern float fmaf(float __x, float __y, float __z) noexcept(true); extern float __fmaf(float __x, float __y, float __z) noexcept(true); 
# 345
extern float roundevenf(float __x) noexcept(true) __attribute((const)); extern float __roundevenf(float __x) noexcept(true) __attribute((const)); 
# 349
extern __intmax_t fromfpf(float __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpf(float __x, int __round, unsigned __width) noexcept(true); 
# 354
extern __uintmax_t ufromfpf(float __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpf(float __x, int __round, unsigned __width) noexcept(true); 
# 360
extern __intmax_t fromfpxf(float __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpxf(float __x, int __round, unsigned __width) noexcept(true); 
# 366
extern __uintmax_t ufromfpxf(float __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpxf(float __x, int __round, unsigned __width) noexcept(true); 
# 370
extern int canonicalizef(float * __cx, const float * __x) noexcept(true); 
# 377
extern float fmaxmagf(float __x, float __y) noexcept(true) __attribute((const)); extern float __fmaxmagf(float __x, float __y) noexcept(true) __attribute((const)); 
# 380
extern float fminmagf(float __x, float __y) noexcept(true) __attribute((const)); extern float __fminmagf(float __x, float __y) noexcept(true) __attribute((const)); 
# 385
extern float fmaximumf(float __x, float __y) noexcept(true) __attribute((const)); extern float __fmaximumf(float __x, float __y) noexcept(true) __attribute((const)); 
# 388
extern float fminimumf(float __x, float __y) noexcept(true) __attribute((const)); extern float __fminimumf(float __x, float __y) noexcept(true) __attribute((const)); 
# 391
extern float fmaximum_numf(float __x, float __y) noexcept(true) __attribute((const)); extern float __fmaximum_numf(float __x, float __y) noexcept(true) __attribute((const)); 
# 394
extern float fminimum_numf(float __x, float __y) noexcept(true) __attribute((const)); extern float __fminimum_numf(float __x, float __y) noexcept(true) __attribute((const)); 
# 397
extern float fmaximum_magf(float __x, float __y) noexcept(true) __attribute((const)); extern float __fmaximum_magf(float __x, float __y) noexcept(true) __attribute((const)); 
# 400
extern float fminimum_magf(float __x, float __y) noexcept(true) __attribute((const)); extern float __fminimum_magf(float __x, float __y) noexcept(true) __attribute((const)); 
# 403
extern float fmaximum_mag_numf(float __x, float __y) noexcept(true) __attribute((const)); extern float __fmaximum_mag_numf(float __x, float __y) noexcept(true) __attribute((const)); 
# 406
extern float fminimum_mag_numf(float __x, float __y) noexcept(true) __attribute((const)); extern float __fminimum_mag_numf(float __x, float __y) noexcept(true) __attribute((const)); 
# 411
extern int totalorderf(const float * __x, const float * __y) noexcept(true)
# 413
 __attribute((__pure__)); 
# 416
extern int totalordermagf(const float * __x, const float * __y) noexcept(true)
# 418
 __attribute((__pure__)); 
# 421
extern float getpayloadf(const float * __x) noexcept(true); extern float __getpayloadf(const float * __x) noexcept(true); 
# 424
extern int setpayloadf(float * __x, float __payload) noexcept(true); 
# 427
extern int setpayloadsigf(float * __x, float __payload) noexcept(true); 
# 435
extern float scalbf(float __x, float __n) noexcept(true); extern float __scalbf(float __x, float __n) noexcept(true); 
# 20 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3
extern int __fpclassifyl(long double __value) noexcept(true)
# 21
 __attribute((const)); 
# 24
extern int __signbitl(long double __value) noexcept(true)
# 25
 __attribute((const)); 
# 29
extern int __isinfl(long double __value) noexcept(true)
# 30
 __attribute((const)); 
# 33
extern int __finitel(long double __value) noexcept(true)
# 34
 __attribute((const)); 
# 37
extern int __isnanl(long double __value) noexcept(true)
# 38
 __attribute((const)); 
# 41
extern int __iseqsigl(long double __x, long double __y) noexcept(true); 
# 44
extern int __issignalingl(long double __value) noexcept(true)
# 45
 __attribute((const)); 
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double acosl(long double __x) noexcept(true); extern long double __acosl(long double __x) noexcept(true); 
# 55
extern long double asinl(long double __x) noexcept(true); extern long double __asinl(long double __x) noexcept(true); 
# 57
extern long double atanl(long double __x) noexcept(true); extern long double __atanl(long double __x) noexcept(true); 
# 59
extern long double atan2l(long double __y, long double __x) noexcept(true); extern long double __atan2l(long double __y, long double __x) noexcept(true); 
# 62
extern long double cosl(long double __x) noexcept(true); extern long double __cosl(long double __x) noexcept(true); 
# 64
extern long double sinl(long double __x) noexcept(true); extern long double __sinl(long double __x) noexcept(true); 
# 66
extern long double tanl(long double __x) noexcept(true); extern long double __tanl(long double __x) noexcept(true); 
# 71
extern long double coshl(long double __x) noexcept(true); extern long double __coshl(long double __x) noexcept(true); 
# 73
extern long double sinhl(long double __x) noexcept(true); extern long double __sinhl(long double __x) noexcept(true); 
# 75
extern long double tanhl(long double __x) noexcept(true); extern long double __tanhl(long double __x) noexcept(true); 
# 79
extern void sincosl(long double __x, long double * __sinx, long double * __cosx) noexcept(true); extern void __sincosl(long double __x, long double * __sinx, long double * __cosx) noexcept(true); 
# 85
extern long double acoshl(long double __x) noexcept(true); extern long double __acoshl(long double __x) noexcept(true); 
# 87
extern long double asinhl(long double __x) noexcept(true); extern long double __asinhl(long double __x) noexcept(true); 
# 89
extern long double atanhl(long double __x) noexcept(true); extern long double __atanhl(long double __x) noexcept(true); 
# 95
extern long double expl(long double __x) noexcept(true); extern long double __expl(long double __x) noexcept(true); 
# 98
extern long double frexpl(long double __x, int * __exponent) noexcept(true); extern long double __frexpl(long double __x, int * __exponent) noexcept(true); 
# 101
extern long double ldexpl(long double __x, int __exponent) noexcept(true); extern long double __ldexpl(long double __x, int __exponent) noexcept(true); 
# 104
extern long double logl(long double __x) noexcept(true); extern long double __logl(long double __x) noexcept(true); 
# 107
extern long double log10l(long double __x) noexcept(true); extern long double __log10l(long double __x) noexcept(true); 
# 110
extern long double modfl(long double __x, long double * __iptr) noexcept(true); extern long double __modfl(long double __x, long double * __iptr) noexcept(true) __attribute((__nonnull__(2))); 
# 114
extern long double exp10l(long double __x) noexcept(true); extern long double __exp10l(long double __x) noexcept(true); 
# 119
extern long double expm1l(long double __x) noexcept(true); extern long double __expm1l(long double __x) noexcept(true); 
# 122
extern long double log1pl(long double __x) noexcept(true); extern long double __log1pl(long double __x) noexcept(true); 
# 125
extern long double logbl(long double __x) noexcept(true); extern long double __logbl(long double __x) noexcept(true); 
# 130
extern long double exp2l(long double __x) noexcept(true); extern long double __exp2l(long double __x) noexcept(true); 
# 133
extern long double log2l(long double __x) noexcept(true); extern long double __log2l(long double __x) noexcept(true); 
# 140
extern long double powl(long double __x, long double __y) noexcept(true); extern long double __powl(long double __x, long double __y) noexcept(true); 
# 143
extern long double sqrtl(long double __x) noexcept(true); extern long double __sqrtl(long double __x) noexcept(true); 
# 147
extern long double hypotl(long double __x, long double __y) noexcept(true); extern long double __hypotl(long double __x, long double __y) noexcept(true); 
# 152
extern long double cbrtl(long double __x) noexcept(true); extern long double __cbrtl(long double __x) noexcept(true); 
# 159
extern long double ceill(long double __x) noexcept(true) __attribute((const)); extern long double __ceill(long double __x) noexcept(true) __attribute((const)); 
# 162
extern long double fabsl(long double __x) noexcept(true) __attribute((const)); extern long double __fabsl(long double __x) noexcept(true) __attribute((const)); 
# 165
extern long double floorl(long double __x) noexcept(true) __attribute((const)); extern long double __floorl(long double __x) noexcept(true) __attribute((const)); 
# 168
extern long double fmodl(long double __x, long double __y) noexcept(true); extern long double __fmodl(long double __x, long double __y) noexcept(true); 
# 177 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int isinfl(long double __value) noexcept(true)
# 178
 __attribute((const)); 
# 183
extern int finitel(long double __value) noexcept(true)
# 184
 __attribute((const)); 
# 187
extern long double dreml(long double __x, long double __y) noexcept(true); extern long double __dreml(long double __x, long double __y) noexcept(true); 
# 191
extern long double significandl(long double __x) noexcept(true); extern long double __significandl(long double __x) noexcept(true); 
# 198
extern long double copysignl(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __copysignl(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 203
extern long double nanl(const char * __tagb) noexcept(true); extern long double __nanl(const char * __tagb) noexcept(true); 
# 213 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int isnanl(long double __value) noexcept(true)
# 214
 __attribute((const)); 
# 220
extern long double j0l(long double) noexcept(true); extern long double __j0l(long double) noexcept(true); 
# 221
extern long double j1l(long double) noexcept(true); extern long double __j1l(long double) noexcept(true); 
# 222
extern long double jnl(int, long double) noexcept(true); extern long double __jnl(int, long double) noexcept(true); 
# 223
extern long double y0l(long double) noexcept(true); extern long double __y0l(long double) noexcept(true); 
# 224
extern long double y1l(long double) noexcept(true); extern long double __y1l(long double) noexcept(true); 
# 225
extern long double ynl(int, long double) noexcept(true); extern long double __ynl(int, long double) noexcept(true); 
# 231
extern long double erfl(long double) noexcept(true); extern long double __erfl(long double) noexcept(true); 
# 232
extern long double erfcl(long double) noexcept(true); extern long double __erfcl(long double) noexcept(true); 
# 233
extern long double lgammal(long double) noexcept(true); extern long double __lgammal(long double) noexcept(true); 
# 238
extern long double tgammal(long double) noexcept(true); extern long double __tgammal(long double) noexcept(true); 
# 244
extern long double gammal(long double) noexcept(true); extern long double __gammal(long double) noexcept(true); 
# 252
extern long double lgammal_r(long double, int * __signgamp) noexcept(true); extern long double __lgammal_r(long double, int * __signgamp) noexcept(true); 
# 259
extern long double rintl(long double __x) noexcept(true); extern long double __rintl(long double __x) noexcept(true); 
# 262
extern long double nextafterl(long double __x, long double __y) noexcept(true); extern long double __nextafterl(long double __x, long double __y) noexcept(true); 
# 264
extern long double nexttowardl(long double __x, long double __y) noexcept(true); extern long double __nexttowardl(long double __x, long double __y) noexcept(true); 
# 269
extern long double nextdownl(long double __x) noexcept(true); extern long double __nextdownl(long double __x) noexcept(true); 
# 271
extern long double nextupl(long double __x) noexcept(true); extern long double __nextupl(long double __x) noexcept(true); 
# 275
extern long double remainderl(long double __x, long double __y) noexcept(true); extern long double __remainderl(long double __x, long double __y) noexcept(true); 
# 279
extern long double scalbnl(long double __x, int __n) noexcept(true); extern long double __scalbnl(long double __x, int __n) noexcept(true); 
# 283
extern int ilogbl(long double __x) noexcept(true); extern int __ilogbl(long double __x) noexcept(true); 
# 288
extern long llogbl(long double __x) noexcept(true); extern long __llogbl(long double __x) noexcept(true); 
# 293
extern long double scalblnl(long double __x, long __n) noexcept(true); extern long double __scalblnl(long double __x, long __n) noexcept(true); 
# 297
extern long double nearbyintl(long double __x) noexcept(true); extern long double __nearbyintl(long double __x) noexcept(true); 
# 301
extern long double roundl(long double __x) noexcept(true) __attribute((const)); extern long double __roundl(long double __x) noexcept(true) __attribute((const)); 
# 305
extern long double truncl(long double __x) noexcept(true) __attribute((const)); extern long double __truncl(long double __x) noexcept(true) __attribute((const)); 
# 310
extern long double remquol(long double __x, long double __y, int * __quo) noexcept(true); extern long double __remquol(long double __x, long double __y, int * __quo) noexcept(true); 
# 317
extern long lrintl(long double __x) noexcept(true); extern long __lrintl(long double __x) noexcept(true); 
# 319
__extension__ extern long long llrintl(long double __x) noexcept(true); extern long long __llrintl(long double __x) noexcept(true); 
# 323
extern long lroundl(long double __x) noexcept(true); extern long __lroundl(long double __x) noexcept(true); 
# 325
__extension__ extern long long llroundl(long double __x) noexcept(true); extern long long __llroundl(long double __x) noexcept(true); 
# 329
extern long double fdiml(long double __x, long double __y) noexcept(true); extern long double __fdiml(long double __x, long double __y) noexcept(true); 
# 333
extern long double fmaxl(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __fmaxl(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 336
extern long double fminl(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __fminl(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 340
extern long double fmal(long double __x, long double __y, long double __z) noexcept(true); extern long double __fmal(long double __x, long double __y, long double __z) noexcept(true); 
# 345
extern long double roundevenl(long double __x) noexcept(true) __attribute((const)); extern long double __roundevenl(long double __x) noexcept(true) __attribute((const)); 
# 349
extern __intmax_t fromfpl(long double __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpl(long double __x, int __round, unsigned __width) noexcept(true); 
# 354
extern __uintmax_t ufromfpl(long double __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpl(long double __x, int __round, unsigned __width) noexcept(true); 
# 360
extern __intmax_t fromfpxl(long double __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpxl(long double __x, int __round, unsigned __width) noexcept(true); 
# 366
extern __uintmax_t ufromfpxl(long double __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpxl(long double __x, int __round, unsigned __width) noexcept(true); 
# 370
extern int canonicalizel(long double * __cx, const long double * __x) noexcept(true); 
# 377
extern long double fmaxmagl(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __fmaxmagl(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 380
extern long double fminmagl(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __fminmagl(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 385
extern long double fmaximuml(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __fmaximuml(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 388
extern long double fminimuml(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __fminimuml(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 391
extern long double fmaximum_numl(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __fmaximum_numl(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 394
extern long double fminimum_numl(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __fminimum_numl(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 397
extern long double fmaximum_magl(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __fmaximum_magl(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 400
extern long double fminimum_magl(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __fminimum_magl(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 403
extern long double fmaximum_mag_numl(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __fmaximum_mag_numl(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 406
extern long double fminimum_mag_numl(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __fminimum_mag_numl(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 411
extern int totalorderl(const long double * __x, const long double * __y) noexcept(true)
# 413
 __attribute((__pure__)); 
# 416
extern int totalordermagl(const long double * __x, const long double * __y) noexcept(true)
# 418
 __attribute((__pure__)); 
# 421
extern long double getpayloadl(const long double * __x) noexcept(true); extern long double __getpayloadl(const long double * __x) noexcept(true); 
# 424
extern int setpayloadl(long double * __x, long double __payload) noexcept(true); 
# 427
extern int setpayloadsigl(long double * __x, long double __payload) noexcept(true); 
# 435
extern long double scalbl(long double __x, long double __n) noexcept(true); extern long double __scalbl(long double __x, long double __n) noexcept(true); 
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float32 acosf32(_Float32 __x) noexcept(true); extern _Float32 __acosf32(_Float32 __x) noexcept(true); 
# 55
extern _Float32 asinf32(_Float32 __x) noexcept(true); extern _Float32 __asinf32(_Float32 __x) noexcept(true); 
# 57
extern _Float32 atanf32(_Float32 __x) noexcept(true); extern _Float32 __atanf32(_Float32 __x) noexcept(true); 
# 59
extern _Float32 atan2f32(_Float32 __y, _Float32 __x) noexcept(true); extern _Float32 __atan2f32(_Float32 __y, _Float32 __x) noexcept(true); 
# 62
extern _Float32 cosf32(_Float32 __x) noexcept(true); extern _Float32 __cosf32(_Float32 __x) noexcept(true); 
# 64
extern _Float32 sinf32(_Float32 __x) noexcept(true); extern _Float32 __sinf32(_Float32 __x) noexcept(true); 
# 66
extern _Float32 tanf32(_Float32 __x) noexcept(true); extern _Float32 __tanf32(_Float32 __x) noexcept(true); 
# 71
extern _Float32 coshf32(_Float32 __x) noexcept(true); extern _Float32 __coshf32(_Float32 __x) noexcept(true); 
# 73
extern _Float32 sinhf32(_Float32 __x) noexcept(true); extern _Float32 __sinhf32(_Float32 __x) noexcept(true); 
# 75
extern _Float32 tanhf32(_Float32 __x) noexcept(true); extern _Float32 __tanhf32(_Float32 __x) noexcept(true); 
# 79
extern void sincosf32(_Float32 __x, _Float32 * __sinx, _Float32 * __cosx) noexcept(true); extern void __sincosf32(_Float32 __x, _Float32 * __sinx, _Float32 * __cosx) noexcept(true); 
# 85
extern _Float32 acoshf32(_Float32 __x) noexcept(true); extern _Float32 __acoshf32(_Float32 __x) noexcept(true); 
# 87
extern _Float32 asinhf32(_Float32 __x) noexcept(true); extern _Float32 __asinhf32(_Float32 __x) noexcept(true); 
# 89
extern _Float32 atanhf32(_Float32 __x) noexcept(true); extern _Float32 __atanhf32(_Float32 __x) noexcept(true); 
# 95
extern _Float32 expf32(_Float32 __x) noexcept(true); extern _Float32 __expf32(_Float32 __x) noexcept(true); 
# 98
extern _Float32 frexpf32(_Float32 __x, int * __exponent) noexcept(true); extern _Float32 __frexpf32(_Float32 __x, int * __exponent) noexcept(true); 
# 101
extern _Float32 ldexpf32(_Float32 __x, int __exponent) noexcept(true); extern _Float32 __ldexpf32(_Float32 __x, int __exponent) noexcept(true); 
# 104
extern _Float32 logf32(_Float32 __x) noexcept(true); extern _Float32 __logf32(_Float32 __x) noexcept(true); 
# 107
extern _Float32 log10f32(_Float32 __x) noexcept(true); extern _Float32 __log10f32(_Float32 __x) noexcept(true); 
# 110
extern _Float32 modff32(_Float32 __x, _Float32 * __iptr) noexcept(true); extern _Float32 __modff32(_Float32 __x, _Float32 * __iptr) noexcept(true) __attribute((__nonnull__(2))); 
# 114
extern _Float32 exp10f32(_Float32 __x) noexcept(true); extern _Float32 __exp10f32(_Float32 __x) noexcept(true); 
# 119
extern _Float32 expm1f32(_Float32 __x) noexcept(true); extern _Float32 __expm1f32(_Float32 __x) noexcept(true); 
# 122
extern _Float32 log1pf32(_Float32 __x) noexcept(true); extern _Float32 __log1pf32(_Float32 __x) noexcept(true); 
# 125
extern _Float32 logbf32(_Float32 __x) noexcept(true); extern _Float32 __logbf32(_Float32 __x) noexcept(true); 
# 130
extern _Float32 exp2f32(_Float32 __x) noexcept(true); extern _Float32 __exp2f32(_Float32 __x) noexcept(true); 
# 133
extern _Float32 log2f32(_Float32 __x) noexcept(true); extern _Float32 __log2f32(_Float32 __x) noexcept(true); 
# 140
extern _Float32 powf32(_Float32 __x, _Float32 __y) noexcept(true); extern _Float32 __powf32(_Float32 __x, _Float32 __y) noexcept(true); 
# 143
extern _Float32 sqrtf32(_Float32 __x) noexcept(true); extern _Float32 __sqrtf32(_Float32 __x) noexcept(true); 
# 147
extern _Float32 hypotf32(_Float32 __x, _Float32 __y) noexcept(true); extern _Float32 __hypotf32(_Float32 __x, _Float32 __y) noexcept(true); 
# 152
extern _Float32 cbrtf32(_Float32 __x) noexcept(true); extern _Float32 __cbrtf32(_Float32 __x) noexcept(true); 
# 159
extern _Float32 ceilf32(_Float32 __x) noexcept(true) __attribute((const)); extern _Float32 __ceilf32(_Float32 __x) noexcept(true) __attribute((const)); 
# 162
extern _Float32 fabsf32(_Float32 __x) noexcept(true) __attribute((const)); extern _Float32 __fabsf32(_Float32 __x) noexcept(true) __attribute((const)); 
# 165
extern _Float32 floorf32(_Float32 __x) noexcept(true) __attribute((const)); extern _Float32 __floorf32(_Float32 __x) noexcept(true) __attribute((const)); 
# 168
extern _Float32 fmodf32(_Float32 __x, _Float32 __y) noexcept(true); extern _Float32 __fmodf32(_Float32 __x, _Float32 __y) noexcept(true); 
# 198 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float32 copysignf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __copysignf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 203
extern _Float32 nanf32(const char * __tagb) noexcept(true); extern _Float32 __nanf32(const char * __tagb) noexcept(true); 
# 220 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float32 j0f32(_Float32) noexcept(true); extern _Float32 __j0f32(_Float32) noexcept(true); 
# 221
extern _Float32 j1f32(_Float32) noexcept(true); extern _Float32 __j1f32(_Float32) noexcept(true); 
# 222
extern _Float32 jnf32(int, _Float32) noexcept(true); extern _Float32 __jnf32(int, _Float32) noexcept(true); 
# 223
extern _Float32 y0f32(_Float32) noexcept(true); extern _Float32 __y0f32(_Float32) noexcept(true); 
# 224
extern _Float32 y1f32(_Float32) noexcept(true); extern _Float32 __y1f32(_Float32) noexcept(true); 
# 225
extern _Float32 ynf32(int, _Float32) noexcept(true); extern _Float32 __ynf32(int, _Float32) noexcept(true); 
# 231
extern _Float32 erff32(_Float32) noexcept(true); extern _Float32 __erff32(_Float32) noexcept(true); 
# 232
extern _Float32 erfcf32(_Float32) noexcept(true); extern _Float32 __erfcf32(_Float32) noexcept(true); 
# 233
extern _Float32 lgammaf32(_Float32) noexcept(true); extern _Float32 __lgammaf32(_Float32) noexcept(true); 
# 238
extern _Float32 tgammaf32(_Float32) noexcept(true); extern _Float32 __tgammaf32(_Float32) noexcept(true); 
# 252 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float32 lgammaf32_r(_Float32, int * __signgamp) noexcept(true); extern _Float32 __lgammaf32_r(_Float32, int * __signgamp) noexcept(true); 
# 259
extern _Float32 rintf32(_Float32 __x) noexcept(true); extern _Float32 __rintf32(_Float32 __x) noexcept(true); 
# 262
extern _Float32 nextafterf32(_Float32 __x, _Float32 __y) noexcept(true); extern _Float32 __nextafterf32(_Float32 __x, _Float32 __y) noexcept(true); 
# 269
extern _Float32 nextdownf32(_Float32 __x) noexcept(true); extern _Float32 __nextdownf32(_Float32 __x) noexcept(true); 
# 271
extern _Float32 nextupf32(_Float32 __x) noexcept(true); extern _Float32 __nextupf32(_Float32 __x) noexcept(true); 
# 275
extern _Float32 remainderf32(_Float32 __x, _Float32 __y) noexcept(true); extern _Float32 __remainderf32(_Float32 __x, _Float32 __y) noexcept(true); 
# 279
extern _Float32 scalbnf32(_Float32 __x, int __n) noexcept(true); extern _Float32 __scalbnf32(_Float32 __x, int __n) noexcept(true); 
# 283
extern int ilogbf32(_Float32 __x) noexcept(true); extern int __ilogbf32(_Float32 __x) noexcept(true); 
# 288
extern long llogbf32(_Float32 __x) noexcept(true); extern long __llogbf32(_Float32 __x) noexcept(true); 
# 293
extern _Float32 scalblnf32(_Float32 __x, long __n) noexcept(true); extern _Float32 __scalblnf32(_Float32 __x, long __n) noexcept(true); 
# 297
extern _Float32 nearbyintf32(_Float32 __x) noexcept(true); extern _Float32 __nearbyintf32(_Float32 __x) noexcept(true); 
# 301
extern _Float32 roundf32(_Float32 __x) noexcept(true) __attribute((const)); extern _Float32 __roundf32(_Float32 __x) noexcept(true) __attribute((const)); 
# 305
extern _Float32 truncf32(_Float32 __x) noexcept(true) __attribute((const)); extern _Float32 __truncf32(_Float32 __x) noexcept(true) __attribute((const)); 
# 310
extern _Float32 remquof32(_Float32 __x, _Float32 __y, int * __quo) noexcept(true); extern _Float32 __remquof32(_Float32 __x, _Float32 __y, int * __quo) noexcept(true); 
# 317
extern long lrintf32(_Float32 __x) noexcept(true); extern long __lrintf32(_Float32 __x) noexcept(true); 
# 319
__extension__ extern long long llrintf32(_Float32 __x) noexcept(true); extern long long __llrintf32(_Float32 __x) noexcept(true); 
# 323
extern long lroundf32(_Float32 __x) noexcept(true); extern long __lroundf32(_Float32 __x) noexcept(true); 
# 325
__extension__ extern long long llroundf32(_Float32 __x) noexcept(true); extern long long __llroundf32(_Float32 __x) noexcept(true); 
# 329
extern _Float32 fdimf32(_Float32 __x, _Float32 __y) noexcept(true); extern _Float32 __fdimf32(_Float32 __x, _Float32 __y) noexcept(true); 
# 333
extern _Float32 fmaxf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __fmaxf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 336
extern _Float32 fminf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __fminf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 340
extern _Float32 fmaf32(_Float32 __x, _Float32 __y, _Float32 __z) noexcept(true); extern _Float32 __fmaf32(_Float32 __x, _Float32 __y, _Float32 __z) noexcept(true); 
# 345
extern _Float32 roundevenf32(_Float32 __x) noexcept(true) __attribute((const)); extern _Float32 __roundevenf32(_Float32 __x) noexcept(true) __attribute((const)); 
# 349
extern __intmax_t fromfpf32(_Float32 __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpf32(_Float32 __x, int __round, unsigned __width) noexcept(true); 
# 354
extern __uintmax_t ufromfpf32(_Float32 __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpf32(_Float32 __x, int __round, unsigned __width) noexcept(true); 
# 360
extern __intmax_t fromfpxf32(_Float32 __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpxf32(_Float32 __x, int __round, unsigned __width) noexcept(true); 
# 366
extern __uintmax_t ufromfpxf32(_Float32 __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpxf32(_Float32 __x, int __round, unsigned __width) noexcept(true); 
# 370
extern int canonicalizef32(_Float32 * __cx, const _Float32 * __x) noexcept(true); 
# 377
extern _Float32 fmaxmagf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __fmaxmagf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 380
extern _Float32 fminmagf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __fminmagf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 385
extern _Float32 fmaximumf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __fmaximumf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 388
extern _Float32 fminimumf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __fminimumf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 391
extern _Float32 fmaximum_numf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __fmaximum_numf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 394
extern _Float32 fminimum_numf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __fminimum_numf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 397
extern _Float32 fmaximum_magf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __fmaximum_magf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 400
extern _Float32 fminimum_magf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __fminimum_magf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 403
extern _Float32 fmaximum_mag_numf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __fmaximum_mag_numf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 406
extern _Float32 fminimum_mag_numf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __fminimum_mag_numf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 411
extern int totalorderf32(const _Float32 * __x, const _Float32 * __y) noexcept(true)
# 413
 __attribute((__pure__)); 
# 416
extern int totalordermagf32(const _Float32 * __x, const _Float32 * __y) noexcept(true)
# 418
 __attribute((__pure__)); 
# 421
extern _Float32 getpayloadf32(const _Float32 * __x) noexcept(true); extern _Float32 __getpayloadf32(const _Float32 * __x) noexcept(true); 
# 424
extern int setpayloadf32(_Float32 * __x, _Float32 __payload) noexcept(true); 
# 427
extern int setpayloadsigf32(_Float32 * __x, _Float32 __payload) noexcept(true); 
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float64 acosf64(_Float64 __x) noexcept(true); extern _Float64 __acosf64(_Float64 __x) noexcept(true); 
# 55
extern _Float64 asinf64(_Float64 __x) noexcept(true); extern _Float64 __asinf64(_Float64 __x) noexcept(true); 
# 57
extern _Float64 atanf64(_Float64 __x) noexcept(true); extern _Float64 __atanf64(_Float64 __x) noexcept(true); 
# 59
extern _Float64 atan2f64(_Float64 __y, _Float64 __x) noexcept(true); extern _Float64 __atan2f64(_Float64 __y, _Float64 __x) noexcept(true); 
# 62
extern _Float64 cosf64(_Float64 __x) noexcept(true); extern _Float64 __cosf64(_Float64 __x) noexcept(true); 
# 64
extern _Float64 sinf64(_Float64 __x) noexcept(true); extern _Float64 __sinf64(_Float64 __x) noexcept(true); 
# 66
extern _Float64 tanf64(_Float64 __x) noexcept(true); extern _Float64 __tanf64(_Float64 __x) noexcept(true); 
# 71
extern _Float64 coshf64(_Float64 __x) noexcept(true); extern _Float64 __coshf64(_Float64 __x) noexcept(true); 
# 73
extern _Float64 sinhf64(_Float64 __x) noexcept(true); extern _Float64 __sinhf64(_Float64 __x) noexcept(true); 
# 75
extern _Float64 tanhf64(_Float64 __x) noexcept(true); extern _Float64 __tanhf64(_Float64 __x) noexcept(true); 
# 79
extern void sincosf64(_Float64 __x, _Float64 * __sinx, _Float64 * __cosx) noexcept(true); extern void __sincosf64(_Float64 __x, _Float64 * __sinx, _Float64 * __cosx) noexcept(true); 
# 85
extern _Float64 acoshf64(_Float64 __x) noexcept(true); extern _Float64 __acoshf64(_Float64 __x) noexcept(true); 
# 87
extern _Float64 asinhf64(_Float64 __x) noexcept(true); extern _Float64 __asinhf64(_Float64 __x) noexcept(true); 
# 89
extern _Float64 atanhf64(_Float64 __x) noexcept(true); extern _Float64 __atanhf64(_Float64 __x) noexcept(true); 
# 95
extern _Float64 expf64(_Float64 __x) noexcept(true); extern _Float64 __expf64(_Float64 __x) noexcept(true); 
# 98
extern _Float64 frexpf64(_Float64 __x, int * __exponent) noexcept(true); extern _Float64 __frexpf64(_Float64 __x, int * __exponent) noexcept(true); 
# 101
extern _Float64 ldexpf64(_Float64 __x, int __exponent) noexcept(true); extern _Float64 __ldexpf64(_Float64 __x, int __exponent) noexcept(true); 
# 104
extern _Float64 logf64(_Float64 __x) noexcept(true); extern _Float64 __logf64(_Float64 __x) noexcept(true); 
# 107
extern _Float64 log10f64(_Float64 __x) noexcept(true); extern _Float64 __log10f64(_Float64 __x) noexcept(true); 
# 110
extern _Float64 modff64(_Float64 __x, _Float64 * __iptr) noexcept(true); extern _Float64 __modff64(_Float64 __x, _Float64 * __iptr) noexcept(true) __attribute((__nonnull__(2))); 
# 114
extern _Float64 exp10f64(_Float64 __x) noexcept(true); extern _Float64 __exp10f64(_Float64 __x) noexcept(true); 
# 119
extern _Float64 expm1f64(_Float64 __x) noexcept(true); extern _Float64 __expm1f64(_Float64 __x) noexcept(true); 
# 122
extern _Float64 log1pf64(_Float64 __x) noexcept(true); extern _Float64 __log1pf64(_Float64 __x) noexcept(true); 
# 125
extern _Float64 logbf64(_Float64 __x) noexcept(true); extern _Float64 __logbf64(_Float64 __x) noexcept(true); 
# 130
extern _Float64 exp2f64(_Float64 __x) noexcept(true); extern _Float64 __exp2f64(_Float64 __x) noexcept(true); 
# 133
extern _Float64 log2f64(_Float64 __x) noexcept(true); extern _Float64 __log2f64(_Float64 __x) noexcept(true); 
# 140
extern _Float64 powf64(_Float64 __x, _Float64 __y) noexcept(true); extern _Float64 __powf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 143
extern _Float64 sqrtf64(_Float64 __x) noexcept(true); extern _Float64 __sqrtf64(_Float64 __x) noexcept(true); 
# 147
extern _Float64 hypotf64(_Float64 __x, _Float64 __y) noexcept(true); extern _Float64 __hypotf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 152
extern _Float64 cbrtf64(_Float64 __x) noexcept(true); extern _Float64 __cbrtf64(_Float64 __x) noexcept(true); 
# 159
extern _Float64 ceilf64(_Float64 __x) noexcept(true) __attribute((const)); extern _Float64 __ceilf64(_Float64 __x) noexcept(true) __attribute((const)); 
# 162
extern _Float64 fabsf64(_Float64 __x) noexcept(true) __attribute((const)); extern _Float64 __fabsf64(_Float64 __x) noexcept(true) __attribute((const)); 
# 165
extern _Float64 floorf64(_Float64 __x) noexcept(true) __attribute((const)); extern _Float64 __floorf64(_Float64 __x) noexcept(true) __attribute((const)); 
# 168
extern _Float64 fmodf64(_Float64 __x, _Float64 __y) noexcept(true); extern _Float64 __fmodf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 198 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float64 copysignf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __copysignf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 203
extern _Float64 nanf64(const char * __tagb) noexcept(true); extern _Float64 __nanf64(const char * __tagb) noexcept(true); 
# 220 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float64 j0f64(_Float64) noexcept(true); extern _Float64 __j0f64(_Float64) noexcept(true); 
# 221
extern _Float64 j1f64(_Float64) noexcept(true); extern _Float64 __j1f64(_Float64) noexcept(true); 
# 222
extern _Float64 jnf64(int, _Float64) noexcept(true); extern _Float64 __jnf64(int, _Float64) noexcept(true); 
# 223
extern _Float64 y0f64(_Float64) noexcept(true); extern _Float64 __y0f64(_Float64) noexcept(true); 
# 224
extern _Float64 y1f64(_Float64) noexcept(true); extern _Float64 __y1f64(_Float64) noexcept(true); 
# 225
extern _Float64 ynf64(int, _Float64) noexcept(true); extern _Float64 __ynf64(int, _Float64) noexcept(true); 
# 231
extern _Float64 erff64(_Float64) noexcept(true); extern _Float64 __erff64(_Float64) noexcept(true); 
# 232
extern _Float64 erfcf64(_Float64) noexcept(true); extern _Float64 __erfcf64(_Float64) noexcept(true); 
# 233
extern _Float64 lgammaf64(_Float64) noexcept(true); extern _Float64 __lgammaf64(_Float64) noexcept(true); 
# 238
extern _Float64 tgammaf64(_Float64) noexcept(true); extern _Float64 __tgammaf64(_Float64) noexcept(true); 
# 252 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float64 lgammaf64_r(_Float64, int * __signgamp) noexcept(true); extern _Float64 __lgammaf64_r(_Float64, int * __signgamp) noexcept(true); 
# 259
extern _Float64 rintf64(_Float64 __x) noexcept(true); extern _Float64 __rintf64(_Float64 __x) noexcept(true); 
# 262
extern _Float64 nextafterf64(_Float64 __x, _Float64 __y) noexcept(true); extern _Float64 __nextafterf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 269
extern _Float64 nextdownf64(_Float64 __x) noexcept(true); extern _Float64 __nextdownf64(_Float64 __x) noexcept(true); 
# 271
extern _Float64 nextupf64(_Float64 __x) noexcept(true); extern _Float64 __nextupf64(_Float64 __x) noexcept(true); 
# 275
extern _Float64 remainderf64(_Float64 __x, _Float64 __y) noexcept(true); extern _Float64 __remainderf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 279
extern _Float64 scalbnf64(_Float64 __x, int __n) noexcept(true); extern _Float64 __scalbnf64(_Float64 __x, int __n) noexcept(true); 
# 283
extern int ilogbf64(_Float64 __x) noexcept(true); extern int __ilogbf64(_Float64 __x) noexcept(true); 
# 288
extern long llogbf64(_Float64 __x) noexcept(true); extern long __llogbf64(_Float64 __x) noexcept(true); 
# 293
extern _Float64 scalblnf64(_Float64 __x, long __n) noexcept(true); extern _Float64 __scalblnf64(_Float64 __x, long __n) noexcept(true); 
# 297
extern _Float64 nearbyintf64(_Float64 __x) noexcept(true); extern _Float64 __nearbyintf64(_Float64 __x) noexcept(true); 
# 301
extern _Float64 roundf64(_Float64 __x) noexcept(true) __attribute((const)); extern _Float64 __roundf64(_Float64 __x) noexcept(true) __attribute((const)); 
# 305
extern _Float64 truncf64(_Float64 __x) noexcept(true) __attribute((const)); extern _Float64 __truncf64(_Float64 __x) noexcept(true) __attribute((const)); 
# 310
extern _Float64 remquof64(_Float64 __x, _Float64 __y, int * __quo) noexcept(true); extern _Float64 __remquof64(_Float64 __x, _Float64 __y, int * __quo) noexcept(true); 
# 317
extern long lrintf64(_Float64 __x) noexcept(true); extern long __lrintf64(_Float64 __x) noexcept(true); 
# 319
__extension__ extern long long llrintf64(_Float64 __x) noexcept(true); extern long long __llrintf64(_Float64 __x) noexcept(true); 
# 323
extern long lroundf64(_Float64 __x) noexcept(true); extern long __lroundf64(_Float64 __x) noexcept(true); 
# 325
__extension__ extern long long llroundf64(_Float64 __x) noexcept(true); extern long long __llroundf64(_Float64 __x) noexcept(true); 
# 329
extern _Float64 fdimf64(_Float64 __x, _Float64 __y) noexcept(true); extern _Float64 __fdimf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 333
extern _Float64 fmaxf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __fmaxf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 336
extern _Float64 fminf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __fminf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 340
extern _Float64 fmaf64(_Float64 __x, _Float64 __y, _Float64 __z) noexcept(true); extern _Float64 __fmaf64(_Float64 __x, _Float64 __y, _Float64 __z) noexcept(true); 
# 345
extern _Float64 roundevenf64(_Float64 __x) noexcept(true) __attribute((const)); extern _Float64 __roundevenf64(_Float64 __x) noexcept(true) __attribute((const)); 
# 349
extern __intmax_t fromfpf64(_Float64 __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpf64(_Float64 __x, int __round, unsigned __width) noexcept(true); 
# 354
extern __uintmax_t ufromfpf64(_Float64 __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpf64(_Float64 __x, int __round, unsigned __width) noexcept(true); 
# 360
extern __intmax_t fromfpxf64(_Float64 __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpxf64(_Float64 __x, int __round, unsigned __width) noexcept(true); 
# 366
extern __uintmax_t ufromfpxf64(_Float64 __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpxf64(_Float64 __x, int __round, unsigned __width) noexcept(true); 
# 370
extern int canonicalizef64(_Float64 * __cx, const _Float64 * __x) noexcept(true); 
# 377
extern _Float64 fmaxmagf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __fmaxmagf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 380
extern _Float64 fminmagf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __fminmagf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 385
extern _Float64 fmaximumf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __fmaximumf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 388
extern _Float64 fminimumf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __fminimumf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 391
extern _Float64 fmaximum_numf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __fmaximum_numf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 394
extern _Float64 fminimum_numf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __fminimum_numf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 397
extern _Float64 fmaximum_magf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __fmaximum_magf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 400
extern _Float64 fminimum_magf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __fminimum_magf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 403
extern _Float64 fmaximum_mag_numf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __fmaximum_mag_numf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 406
extern _Float64 fminimum_mag_numf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __fminimum_mag_numf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 411
extern int totalorderf64(const _Float64 * __x, const _Float64 * __y) noexcept(true)
# 413
 __attribute((__pure__)); 
# 416
extern int totalordermagf64(const _Float64 * __x, const _Float64 * __y) noexcept(true)
# 418
 __attribute((__pure__)); 
# 421
extern _Float64 getpayloadf64(const _Float64 * __x) noexcept(true); extern _Float64 __getpayloadf64(const _Float64 * __x) noexcept(true); 
# 424
extern int setpayloadf64(_Float64 * __x, _Float64 __payload) noexcept(true); 
# 427
extern int setpayloadsigf64(_Float64 * __x, _Float64 __payload) noexcept(true); 
# 20 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3
extern int __fpclassifyf128(_Float128 __value) noexcept(true)
# 21
 __attribute((const)); 
# 24
extern int __signbitf128(_Float128 __value) noexcept(true)
# 25
 __attribute((const)); 
# 29
extern int __isinff128(_Float128 __value) noexcept(true)
# 30
 __attribute((const)); 
# 33
extern int __finitef128(_Float128 __value) noexcept(true)
# 34
 __attribute((const)); 
# 37
extern int __isnanf128(_Float128 __value) noexcept(true)
# 38
 __attribute((const)); 
# 41
extern int __iseqsigf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 44
extern int __issignalingf128(_Float128 __value) noexcept(true)
# 45
 __attribute((const)); 
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float128 acosf128(_Float128 __x) noexcept(true); extern _Float128 __acosf128(_Float128 __x) noexcept(true); 
# 55
extern _Float128 asinf128(_Float128 __x) noexcept(true); extern _Float128 __asinf128(_Float128 __x) noexcept(true); 
# 57
extern _Float128 atanf128(_Float128 __x) noexcept(true); extern _Float128 __atanf128(_Float128 __x) noexcept(true); 
# 59
extern _Float128 atan2f128(_Float128 __y, _Float128 __x) noexcept(true); extern _Float128 __atan2f128(_Float128 __y, _Float128 __x) noexcept(true); 
# 62
extern _Float128 cosf128(_Float128 __x) noexcept(true); extern _Float128 __cosf128(_Float128 __x) noexcept(true); 
# 64
extern _Float128 sinf128(_Float128 __x) noexcept(true); extern _Float128 __sinf128(_Float128 __x) noexcept(true); 
# 66
extern _Float128 tanf128(_Float128 __x) noexcept(true); extern _Float128 __tanf128(_Float128 __x) noexcept(true); 
# 71
extern _Float128 coshf128(_Float128 __x) noexcept(true); extern _Float128 __coshf128(_Float128 __x) noexcept(true); 
# 73
extern _Float128 sinhf128(_Float128 __x) noexcept(true); extern _Float128 __sinhf128(_Float128 __x) noexcept(true); 
# 75
extern _Float128 tanhf128(_Float128 __x) noexcept(true); extern _Float128 __tanhf128(_Float128 __x) noexcept(true); 
# 79
extern void sincosf128(_Float128 __x, _Float128 * __sinx, _Float128 * __cosx) noexcept(true); extern void __sincosf128(_Float128 __x, _Float128 * __sinx, _Float128 * __cosx) noexcept(true); 
# 85
extern _Float128 acoshf128(_Float128 __x) noexcept(true); extern _Float128 __acoshf128(_Float128 __x) noexcept(true); 
# 87
extern _Float128 asinhf128(_Float128 __x) noexcept(true); extern _Float128 __asinhf128(_Float128 __x) noexcept(true); 
# 89
extern _Float128 atanhf128(_Float128 __x) noexcept(true); extern _Float128 __atanhf128(_Float128 __x) noexcept(true); 
# 95
extern _Float128 expf128(_Float128 __x) noexcept(true); extern _Float128 __expf128(_Float128 __x) noexcept(true); 
# 98
extern _Float128 frexpf128(_Float128 __x, int * __exponent) noexcept(true); extern _Float128 __frexpf128(_Float128 __x, int * __exponent) noexcept(true); 
# 101
extern _Float128 ldexpf128(_Float128 __x, int __exponent) noexcept(true); extern _Float128 __ldexpf128(_Float128 __x, int __exponent) noexcept(true); 
# 104
extern _Float128 logf128(_Float128 __x) noexcept(true); extern _Float128 __logf128(_Float128 __x) noexcept(true); 
# 107
extern _Float128 log10f128(_Float128 __x) noexcept(true); extern _Float128 __log10f128(_Float128 __x) noexcept(true); 
# 110
extern _Float128 modff128(_Float128 __x, _Float128 * __iptr) noexcept(true); extern _Float128 __modff128(_Float128 __x, _Float128 * __iptr) noexcept(true) __attribute((__nonnull__(2))); 
# 114
extern _Float128 exp10f128(_Float128 __x) noexcept(true); extern _Float128 __exp10f128(_Float128 __x) noexcept(true); 
# 119
extern _Float128 expm1f128(_Float128 __x) noexcept(true); extern _Float128 __expm1f128(_Float128 __x) noexcept(true); 
# 122
extern _Float128 log1pf128(_Float128 __x) noexcept(true); extern _Float128 __log1pf128(_Float128 __x) noexcept(true); 
# 125
extern _Float128 logbf128(_Float128 __x) noexcept(true); extern _Float128 __logbf128(_Float128 __x) noexcept(true); 
# 130
extern _Float128 exp2f128(_Float128 __x) noexcept(true); extern _Float128 __exp2f128(_Float128 __x) noexcept(true); 
# 133
extern _Float128 log2f128(_Float128 __x) noexcept(true); extern _Float128 __log2f128(_Float128 __x) noexcept(true); 
# 140
extern _Float128 powf128(_Float128 __x, _Float128 __y) noexcept(true); extern _Float128 __powf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 143
extern _Float128 sqrtf128(_Float128 __x) noexcept(true); extern _Float128 __sqrtf128(_Float128 __x) noexcept(true); 
# 147
extern _Float128 hypotf128(_Float128 __x, _Float128 __y) noexcept(true); extern _Float128 __hypotf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 152
extern _Float128 cbrtf128(_Float128 __x) noexcept(true); extern _Float128 __cbrtf128(_Float128 __x) noexcept(true); 
# 159
extern _Float128 ceilf128(_Float128 __x) noexcept(true) __attribute((const)); extern _Float128 __ceilf128(_Float128 __x) noexcept(true) __attribute((const)); 
# 162
extern _Float128 fabsf128(_Float128 __x) noexcept(true) __attribute((const)); extern _Float128 __fabsf128(_Float128 __x) noexcept(true) __attribute((const)); 
# 165
extern _Float128 floorf128(_Float128 __x) noexcept(true) __attribute((const)); extern _Float128 __floorf128(_Float128 __x) noexcept(true) __attribute((const)); 
# 168
extern _Float128 fmodf128(_Float128 __x, _Float128 __y) noexcept(true); extern _Float128 __fmodf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 198 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float128 copysignf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); extern _Float128 __copysignf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); 
# 203
extern _Float128 nanf128(const char * __tagb) noexcept(true); extern _Float128 __nanf128(const char * __tagb) noexcept(true); 
# 220 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float128 j0f128(_Float128) noexcept(true); extern _Float128 __j0f128(_Float128) noexcept(true); 
# 221
extern _Float128 j1f128(_Float128) noexcept(true); extern _Float128 __j1f128(_Float128) noexcept(true); 
# 222
extern _Float128 jnf128(int, _Float128) noexcept(true); extern _Float128 __jnf128(int, _Float128) noexcept(true); 
# 223
extern _Float128 y0f128(_Float128) noexcept(true); extern _Float128 __y0f128(_Float128) noexcept(true); 
# 224
extern _Float128 y1f128(_Float128) noexcept(true); extern _Float128 __y1f128(_Float128) noexcept(true); 
# 225
extern _Float128 ynf128(int, _Float128) noexcept(true); extern _Float128 __ynf128(int, _Float128) noexcept(true); 
# 231
extern _Float128 erff128(_Float128) noexcept(true); extern _Float128 __erff128(_Float128) noexcept(true); 
# 232
extern _Float128 erfcf128(_Float128) noexcept(true); extern _Float128 __erfcf128(_Float128) noexcept(true); 
# 233
extern _Float128 lgammaf128(_Float128) noexcept(true); extern _Float128 __lgammaf128(_Float128) noexcept(true); 
# 238
extern _Float128 tgammaf128(_Float128) noexcept(true); extern _Float128 __tgammaf128(_Float128) noexcept(true); 
# 252 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float128 lgammaf128_r(_Float128, int * __signgamp) noexcept(true); extern _Float128 __lgammaf128_r(_Float128, int * __signgamp) noexcept(true); 
# 259
extern _Float128 rintf128(_Float128 __x) noexcept(true); extern _Float128 __rintf128(_Float128 __x) noexcept(true); 
# 262
extern _Float128 nextafterf128(_Float128 __x, _Float128 __y) noexcept(true); extern _Float128 __nextafterf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 269
extern _Float128 nextdownf128(_Float128 __x) noexcept(true); extern _Float128 __nextdownf128(_Float128 __x) noexcept(true); 
# 271
extern _Float128 nextupf128(_Float128 __x) noexcept(true); extern _Float128 __nextupf128(_Float128 __x) noexcept(true); 
# 275
extern _Float128 remainderf128(_Float128 __x, _Float128 __y) noexcept(true); extern _Float128 __remainderf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 279
extern _Float128 scalbnf128(_Float128 __x, int __n) noexcept(true); extern _Float128 __scalbnf128(_Float128 __x, int __n) noexcept(true); 
# 283
extern int ilogbf128(_Float128 __x) noexcept(true); extern int __ilogbf128(_Float128 __x) noexcept(true); 
# 288
extern long llogbf128(_Float128 __x) noexcept(true); extern long __llogbf128(_Float128 __x) noexcept(true); 
# 293
extern _Float128 scalblnf128(_Float128 __x, long __n) noexcept(true); extern _Float128 __scalblnf128(_Float128 __x, long __n) noexcept(true); 
# 297
extern _Float128 nearbyintf128(_Float128 __x) noexcept(true); extern _Float128 __nearbyintf128(_Float128 __x) noexcept(true); 
# 301
extern _Float128 roundf128(_Float128 __x) noexcept(true) __attribute((const)); extern _Float128 __roundf128(_Float128 __x) noexcept(true) __attribute((const)); 
# 305
extern _Float128 truncf128(_Float128 __x) noexcept(true) __attribute((const)); extern _Float128 __truncf128(_Float128 __x) noexcept(true) __attribute((const)); 
# 310
extern _Float128 remquof128(_Float128 __x, _Float128 __y, int * __quo) noexcept(true); extern _Float128 __remquof128(_Float128 __x, _Float128 __y, int * __quo) noexcept(true); 
# 317
extern long lrintf128(_Float128 __x) noexcept(true); extern long __lrintf128(_Float128 __x) noexcept(true); 
# 319
__extension__ extern long long llrintf128(_Float128 __x) noexcept(true); extern long long __llrintf128(_Float128 __x) noexcept(true); 
# 323
extern long lroundf128(_Float128 __x) noexcept(true); extern long __lroundf128(_Float128 __x) noexcept(true); 
# 325
__extension__ extern long long llroundf128(_Float128 __x) noexcept(true); extern long long __llroundf128(_Float128 __x) noexcept(true); 
# 329
extern _Float128 fdimf128(_Float128 __x, _Float128 __y) noexcept(true); extern _Float128 __fdimf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 333
extern _Float128 fmaxf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); extern _Float128 __fmaxf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); 
# 336
extern _Float128 fminf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); extern _Float128 __fminf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); 
# 340
extern _Float128 fmaf128(_Float128 __x, _Float128 __y, _Float128 __z) noexcept(true); extern _Float128 __fmaf128(_Float128 __x, _Float128 __y, _Float128 __z) noexcept(true); 
# 345
extern _Float128 roundevenf128(_Float128 __x) noexcept(true) __attribute((const)); extern _Float128 __roundevenf128(_Float128 __x) noexcept(true) __attribute((const)); 
# 349
extern __intmax_t fromfpf128(_Float128 __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpf128(_Float128 __x, int __round, unsigned __width) noexcept(true); 
# 354
extern __uintmax_t ufromfpf128(_Float128 __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpf128(_Float128 __x, int __round, unsigned __width) noexcept(true); 
# 360
extern __intmax_t fromfpxf128(_Float128 __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpxf128(_Float128 __x, int __round, unsigned __width) noexcept(true); 
# 366
extern __uintmax_t ufromfpxf128(_Float128 __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpxf128(_Float128 __x, int __round, unsigned __width) noexcept(true); 
# 370
extern int canonicalizef128(_Float128 * __cx, const _Float128 * __x) noexcept(true); 
# 377
extern _Float128 fmaxmagf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); extern _Float128 __fmaxmagf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); 
# 380
extern _Float128 fminmagf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); extern _Float128 __fminmagf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); 
# 385
extern _Float128 fmaximumf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); extern _Float128 __fmaximumf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); 
# 388
extern _Float128 fminimumf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); extern _Float128 __fminimumf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); 
# 391
extern _Float128 fmaximum_numf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); extern _Float128 __fmaximum_numf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); 
# 394
extern _Float128 fminimum_numf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); extern _Float128 __fminimum_numf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); 
# 397
extern _Float128 fmaximum_magf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); extern _Float128 __fmaximum_magf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); 
# 400
extern _Float128 fminimum_magf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); extern _Float128 __fminimum_magf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); 
# 403
extern _Float128 fmaximum_mag_numf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); extern _Float128 __fmaximum_mag_numf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); 
# 406
extern _Float128 fminimum_mag_numf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); extern _Float128 __fminimum_mag_numf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); 
# 411
extern int totalorderf128(const _Float128 * __x, const _Float128 * __y) noexcept(true)
# 413
 __attribute((__pure__)); 
# 416
extern int totalordermagf128(const _Float128 * __x, const _Float128 * __y) noexcept(true)
# 418
 __attribute((__pure__)); 
# 421
extern _Float128 getpayloadf128(const _Float128 * __x) noexcept(true); extern _Float128 __getpayloadf128(const _Float128 * __x) noexcept(true); 
# 424
extern int setpayloadf128(_Float128 * __x, _Float128 __payload) noexcept(true); 
# 427
extern int setpayloadsigf128(_Float128 * __x, _Float128 __payload) noexcept(true); 
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float32x acosf32x(_Float32x __x) noexcept(true); extern _Float32x __acosf32x(_Float32x __x) noexcept(true); 
# 55
extern _Float32x asinf32x(_Float32x __x) noexcept(true); extern _Float32x __asinf32x(_Float32x __x) noexcept(true); 
# 57
extern _Float32x atanf32x(_Float32x __x) noexcept(true); extern _Float32x __atanf32x(_Float32x __x) noexcept(true); 
# 59
extern _Float32x atan2f32x(_Float32x __y, _Float32x __x) noexcept(true); extern _Float32x __atan2f32x(_Float32x __y, _Float32x __x) noexcept(true); 
# 62
extern _Float32x cosf32x(_Float32x __x) noexcept(true); extern _Float32x __cosf32x(_Float32x __x) noexcept(true); 
# 64
extern _Float32x sinf32x(_Float32x __x) noexcept(true); extern _Float32x __sinf32x(_Float32x __x) noexcept(true); 
# 66
extern _Float32x tanf32x(_Float32x __x) noexcept(true); extern _Float32x __tanf32x(_Float32x __x) noexcept(true); 
# 71
extern _Float32x coshf32x(_Float32x __x) noexcept(true); extern _Float32x __coshf32x(_Float32x __x) noexcept(true); 
# 73
extern _Float32x sinhf32x(_Float32x __x) noexcept(true); extern _Float32x __sinhf32x(_Float32x __x) noexcept(true); 
# 75
extern _Float32x tanhf32x(_Float32x __x) noexcept(true); extern _Float32x __tanhf32x(_Float32x __x) noexcept(true); 
# 79
extern void sincosf32x(_Float32x __x, _Float32x * __sinx, _Float32x * __cosx) noexcept(true); extern void __sincosf32x(_Float32x __x, _Float32x * __sinx, _Float32x * __cosx) noexcept(true); 
# 85
extern _Float32x acoshf32x(_Float32x __x) noexcept(true); extern _Float32x __acoshf32x(_Float32x __x) noexcept(true); 
# 87
extern _Float32x asinhf32x(_Float32x __x) noexcept(true); extern _Float32x __asinhf32x(_Float32x __x) noexcept(true); 
# 89
extern _Float32x atanhf32x(_Float32x __x) noexcept(true); extern _Float32x __atanhf32x(_Float32x __x) noexcept(true); 
# 95
extern _Float32x expf32x(_Float32x __x) noexcept(true); extern _Float32x __expf32x(_Float32x __x) noexcept(true); 
# 98
extern _Float32x frexpf32x(_Float32x __x, int * __exponent) noexcept(true); extern _Float32x __frexpf32x(_Float32x __x, int * __exponent) noexcept(true); 
# 101
extern _Float32x ldexpf32x(_Float32x __x, int __exponent) noexcept(true); extern _Float32x __ldexpf32x(_Float32x __x, int __exponent) noexcept(true); 
# 104
extern _Float32x logf32x(_Float32x __x) noexcept(true); extern _Float32x __logf32x(_Float32x __x) noexcept(true); 
# 107
extern _Float32x log10f32x(_Float32x __x) noexcept(true); extern _Float32x __log10f32x(_Float32x __x) noexcept(true); 
# 110
extern _Float32x modff32x(_Float32x __x, _Float32x * __iptr) noexcept(true); extern _Float32x __modff32x(_Float32x __x, _Float32x * __iptr) noexcept(true) __attribute((__nonnull__(2))); 
# 114
extern _Float32x exp10f32x(_Float32x __x) noexcept(true); extern _Float32x __exp10f32x(_Float32x __x) noexcept(true); 
# 119
extern _Float32x expm1f32x(_Float32x __x) noexcept(true); extern _Float32x __expm1f32x(_Float32x __x) noexcept(true); 
# 122
extern _Float32x log1pf32x(_Float32x __x) noexcept(true); extern _Float32x __log1pf32x(_Float32x __x) noexcept(true); 
# 125
extern _Float32x logbf32x(_Float32x __x) noexcept(true); extern _Float32x __logbf32x(_Float32x __x) noexcept(true); 
# 130
extern _Float32x exp2f32x(_Float32x __x) noexcept(true); extern _Float32x __exp2f32x(_Float32x __x) noexcept(true); 
# 133
extern _Float32x log2f32x(_Float32x __x) noexcept(true); extern _Float32x __log2f32x(_Float32x __x) noexcept(true); 
# 140
extern _Float32x powf32x(_Float32x __x, _Float32x __y) noexcept(true); extern _Float32x __powf32x(_Float32x __x, _Float32x __y) noexcept(true); 
# 143
extern _Float32x sqrtf32x(_Float32x __x) noexcept(true); extern _Float32x __sqrtf32x(_Float32x __x) noexcept(true); 
# 147
extern _Float32x hypotf32x(_Float32x __x, _Float32x __y) noexcept(true); extern _Float32x __hypotf32x(_Float32x __x, _Float32x __y) noexcept(true); 
# 152
extern _Float32x cbrtf32x(_Float32x __x) noexcept(true); extern _Float32x __cbrtf32x(_Float32x __x) noexcept(true); 
# 159
extern _Float32x ceilf32x(_Float32x __x) noexcept(true) __attribute((const)); extern _Float32x __ceilf32x(_Float32x __x) noexcept(true) __attribute((const)); 
# 162
extern _Float32x fabsf32x(_Float32x __x) noexcept(true) __attribute((const)); extern _Float32x __fabsf32x(_Float32x __x) noexcept(true) __attribute((const)); 
# 165
extern _Float32x floorf32x(_Float32x __x) noexcept(true) __attribute((const)); extern _Float32x __floorf32x(_Float32x __x) noexcept(true) __attribute((const)); 
# 168
extern _Float32x fmodf32x(_Float32x __x, _Float32x __y) noexcept(true); extern _Float32x __fmodf32x(_Float32x __x, _Float32x __y) noexcept(true); 
# 198 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float32x copysignf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __copysignf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 203
extern _Float32x nanf32x(const char * __tagb) noexcept(true); extern _Float32x __nanf32x(const char * __tagb) noexcept(true); 
# 220 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float32x j0f32x(_Float32x) noexcept(true); extern _Float32x __j0f32x(_Float32x) noexcept(true); 
# 221
extern _Float32x j1f32x(_Float32x) noexcept(true); extern _Float32x __j1f32x(_Float32x) noexcept(true); 
# 222
extern _Float32x jnf32x(int, _Float32x) noexcept(true); extern _Float32x __jnf32x(int, _Float32x) noexcept(true); 
# 223
extern _Float32x y0f32x(_Float32x) noexcept(true); extern _Float32x __y0f32x(_Float32x) noexcept(true); 
# 224
extern _Float32x y1f32x(_Float32x) noexcept(true); extern _Float32x __y1f32x(_Float32x) noexcept(true); 
# 225
extern _Float32x ynf32x(int, _Float32x) noexcept(true); extern _Float32x __ynf32x(int, _Float32x) noexcept(true); 
# 231
extern _Float32x erff32x(_Float32x) noexcept(true); extern _Float32x __erff32x(_Float32x) noexcept(true); 
# 232
extern _Float32x erfcf32x(_Float32x) noexcept(true); extern _Float32x __erfcf32x(_Float32x) noexcept(true); 
# 233
extern _Float32x lgammaf32x(_Float32x) noexcept(true); extern _Float32x __lgammaf32x(_Float32x) noexcept(true); 
# 238
extern _Float32x tgammaf32x(_Float32x) noexcept(true); extern _Float32x __tgammaf32x(_Float32x) noexcept(true); 
# 252 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float32x lgammaf32x_r(_Float32x, int * __signgamp) noexcept(true); extern _Float32x __lgammaf32x_r(_Float32x, int * __signgamp) noexcept(true); 
# 259
extern _Float32x rintf32x(_Float32x __x) noexcept(true); extern _Float32x __rintf32x(_Float32x __x) noexcept(true); 
# 262
extern _Float32x nextafterf32x(_Float32x __x, _Float32x __y) noexcept(true); extern _Float32x __nextafterf32x(_Float32x __x, _Float32x __y) noexcept(true); 
# 269
extern _Float32x nextdownf32x(_Float32x __x) noexcept(true); extern _Float32x __nextdownf32x(_Float32x __x) noexcept(true); 
# 271
extern _Float32x nextupf32x(_Float32x __x) noexcept(true); extern _Float32x __nextupf32x(_Float32x __x) noexcept(true); 
# 275
extern _Float32x remainderf32x(_Float32x __x, _Float32x __y) noexcept(true); extern _Float32x __remainderf32x(_Float32x __x, _Float32x __y) noexcept(true); 
# 279
extern _Float32x scalbnf32x(_Float32x __x, int __n) noexcept(true); extern _Float32x __scalbnf32x(_Float32x __x, int __n) noexcept(true); 
# 283
extern int ilogbf32x(_Float32x __x) noexcept(true); extern int __ilogbf32x(_Float32x __x) noexcept(true); 
# 288
extern long llogbf32x(_Float32x __x) noexcept(true); extern long __llogbf32x(_Float32x __x) noexcept(true); 
# 293
extern _Float32x scalblnf32x(_Float32x __x, long __n) noexcept(true); extern _Float32x __scalblnf32x(_Float32x __x, long __n) noexcept(true); 
# 297
extern _Float32x nearbyintf32x(_Float32x __x) noexcept(true); extern _Float32x __nearbyintf32x(_Float32x __x) noexcept(true); 
# 301
extern _Float32x roundf32x(_Float32x __x) noexcept(true) __attribute((const)); extern _Float32x __roundf32x(_Float32x __x) noexcept(true) __attribute((const)); 
# 305
extern _Float32x truncf32x(_Float32x __x) noexcept(true) __attribute((const)); extern _Float32x __truncf32x(_Float32x __x) noexcept(true) __attribute((const)); 
# 310
extern _Float32x remquof32x(_Float32x __x, _Float32x __y, int * __quo) noexcept(true); extern _Float32x __remquof32x(_Float32x __x, _Float32x __y, int * __quo) noexcept(true); 
# 317
extern long lrintf32x(_Float32x __x) noexcept(true); extern long __lrintf32x(_Float32x __x) noexcept(true); 
# 319
__extension__ extern long long llrintf32x(_Float32x __x) noexcept(true); extern long long __llrintf32x(_Float32x __x) noexcept(true); 
# 323
extern long lroundf32x(_Float32x __x) noexcept(true); extern long __lroundf32x(_Float32x __x) noexcept(true); 
# 325
__extension__ extern long long llroundf32x(_Float32x __x) noexcept(true); extern long long __llroundf32x(_Float32x __x) noexcept(true); 
# 329
extern _Float32x fdimf32x(_Float32x __x, _Float32x __y) noexcept(true); extern _Float32x __fdimf32x(_Float32x __x, _Float32x __y) noexcept(true); 
# 333
extern _Float32x fmaxf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __fmaxf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 336
extern _Float32x fminf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __fminf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 340
extern _Float32x fmaf32x(_Float32x __x, _Float32x __y, _Float32x __z) noexcept(true); extern _Float32x __fmaf32x(_Float32x __x, _Float32x __y, _Float32x __z) noexcept(true); 
# 345
extern _Float32x roundevenf32x(_Float32x __x) noexcept(true) __attribute((const)); extern _Float32x __roundevenf32x(_Float32x __x) noexcept(true) __attribute((const)); 
# 349
extern __intmax_t fromfpf32x(_Float32x __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpf32x(_Float32x __x, int __round, unsigned __width) noexcept(true); 
# 354
extern __uintmax_t ufromfpf32x(_Float32x __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpf32x(_Float32x __x, int __round, unsigned __width) noexcept(true); 
# 360
extern __intmax_t fromfpxf32x(_Float32x __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpxf32x(_Float32x __x, int __round, unsigned __width) noexcept(true); 
# 366
extern __uintmax_t ufromfpxf32x(_Float32x __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpxf32x(_Float32x __x, int __round, unsigned __width) noexcept(true); 
# 370
extern int canonicalizef32x(_Float32x * __cx, const _Float32x * __x) noexcept(true); 
# 377
extern _Float32x fmaxmagf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __fmaxmagf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 380
extern _Float32x fminmagf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __fminmagf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 385
extern _Float32x fmaximumf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __fmaximumf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 388
extern _Float32x fminimumf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __fminimumf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 391
extern _Float32x fmaximum_numf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __fmaximum_numf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 394
extern _Float32x fminimum_numf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __fminimum_numf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 397
extern _Float32x fmaximum_magf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __fmaximum_magf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 400
extern _Float32x fminimum_magf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __fminimum_magf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 403
extern _Float32x fmaximum_mag_numf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __fmaximum_mag_numf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 406
extern _Float32x fminimum_mag_numf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __fminimum_mag_numf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 411
extern int totalorderf32x(const _Float32x * __x, const _Float32x * __y) noexcept(true)
# 413
 __attribute((__pure__)); 
# 416
extern int totalordermagf32x(const _Float32x * __x, const _Float32x * __y) noexcept(true)
# 418
 __attribute((__pure__)); 
# 421
extern _Float32x getpayloadf32x(const _Float32x * __x) noexcept(true); extern _Float32x __getpayloadf32x(const _Float32x * __x) noexcept(true); 
# 424
extern int setpayloadf32x(_Float32x * __x, _Float32x __payload) noexcept(true); 
# 427
extern int setpayloadsigf32x(_Float32x * __x, _Float32x __payload) noexcept(true); 
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float64x acosf64x(_Float64x __x) noexcept(true); extern _Float64x __acosf64x(_Float64x __x) noexcept(true); 
# 55
extern _Float64x asinf64x(_Float64x __x) noexcept(true); extern _Float64x __asinf64x(_Float64x __x) noexcept(true); 
# 57
extern _Float64x atanf64x(_Float64x __x) noexcept(true); extern _Float64x __atanf64x(_Float64x __x) noexcept(true); 
# 59
extern _Float64x atan2f64x(_Float64x __y, _Float64x __x) noexcept(true); extern _Float64x __atan2f64x(_Float64x __y, _Float64x __x) noexcept(true); 
# 62
extern _Float64x cosf64x(_Float64x __x) noexcept(true); extern _Float64x __cosf64x(_Float64x __x) noexcept(true); 
# 64
extern _Float64x sinf64x(_Float64x __x) noexcept(true); extern _Float64x __sinf64x(_Float64x __x) noexcept(true); 
# 66
extern _Float64x tanf64x(_Float64x __x) noexcept(true); extern _Float64x __tanf64x(_Float64x __x) noexcept(true); 
# 71
extern _Float64x coshf64x(_Float64x __x) noexcept(true); extern _Float64x __coshf64x(_Float64x __x) noexcept(true); 
# 73
extern _Float64x sinhf64x(_Float64x __x) noexcept(true); extern _Float64x __sinhf64x(_Float64x __x) noexcept(true); 
# 75
extern _Float64x tanhf64x(_Float64x __x) noexcept(true); extern _Float64x __tanhf64x(_Float64x __x) noexcept(true); 
# 79
extern void sincosf64x(_Float64x __x, _Float64x * __sinx, _Float64x * __cosx) noexcept(true); extern void __sincosf64x(_Float64x __x, _Float64x * __sinx, _Float64x * __cosx) noexcept(true); 
# 85
extern _Float64x acoshf64x(_Float64x __x) noexcept(true); extern _Float64x __acoshf64x(_Float64x __x) noexcept(true); 
# 87
extern _Float64x asinhf64x(_Float64x __x) noexcept(true); extern _Float64x __asinhf64x(_Float64x __x) noexcept(true); 
# 89
extern _Float64x atanhf64x(_Float64x __x) noexcept(true); extern _Float64x __atanhf64x(_Float64x __x) noexcept(true); 
# 95
extern _Float64x expf64x(_Float64x __x) noexcept(true); extern _Float64x __expf64x(_Float64x __x) noexcept(true); 
# 98
extern _Float64x frexpf64x(_Float64x __x, int * __exponent) noexcept(true); extern _Float64x __frexpf64x(_Float64x __x, int * __exponent) noexcept(true); 
# 101
extern _Float64x ldexpf64x(_Float64x __x, int __exponent) noexcept(true); extern _Float64x __ldexpf64x(_Float64x __x, int __exponent) noexcept(true); 
# 104
extern _Float64x logf64x(_Float64x __x) noexcept(true); extern _Float64x __logf64x(_Float64x __x) noexcept(true); 
# 107
extern _Float64x log10f64x(_Float64x __x) noexcept(true); extern _Float64x __log10f64x(_Float64x __x) noexcept(true); 
# 110
extern _Float64x modff64x(_Float64x __x, _Float64x * __iptr) noexcept(true); extern _Float64x __modff64x(_Float64x __x, _Float64x * __iptr) noexcept(true) __attribute((__nonnull__(2))); 
# 114
extern _Float64x exp10f64x(_Float64x __x) noexcept(true); extern _Float64x __exp10f64x(_Float64x __x) noexcept(true); 
# 119
extern _Float64x expm1f64x(_Float64x __x) noexcept(true); extern _Float64x __expm1f64x(_Float64x __x) noexcept(true); 
# 122
extern _Float64x log1pf64x(_Float64x __x) noexcept(true); extern _Float64x __log1pf64x(_Float64x __x) noexcept(true); 
# 125
extern _Float64x logbf64x(_Float64x __x) noexcept(true); extern _Float64x __logbf64x(_Float64x __x) noexcept(true); 
# 130
extern _Float64x exp2f64x(_Float64x __x) noexcept(true); extern _Float64x __exp2f64x(_Float64x __x) noexcept(true); 
# 133
extern _Float64x log2f64x(_Float64x __x) noexcept(true); extern _Float64x __log2f64x(_Float64x __x) noexcept(true); 
# 140
extern _Float64x powf64x(_Float64x __x, _Float64x __y) noexcept(true); extern _Float64x __powf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 143
extern _Float64x sqrtf64x(_Float64x __x) noexcept(true); extern _Float64x __sqrtf64x(_Float64x __x) noexcept(true); 
# 147
extern _Float64x hypotf64x(_Float64x __x, _Float64x __y) noexcept(true); extern _Float64x __hypotf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 152
extern _Float64x cbrtf64x(_Float64x __x) noexcept(true); extern _Float64x __cbrtf64x(_Float64x __x) noexcept(true); 
# 159
extern _Float64x ceilf64x(_Float64x __x) noexcept(true) __attribute((const)); extern _Float64x __ceilf64x(_Float64x __x) noexcept(true) __attribute((const)); 
# 162
extern _Float64x fabsf64x(_Float64x __x) noexcept(true) __attribute((const)); extern _Float64x __fabsf64x(_Float64x __x) noexcept(true) __attribute((const)); 
# 165
extern _Float64x floorf64x(_Float64x __x) noexcept(true) __attribute((const)); extern _Float64x __floorf64x(_Float64x __x) noexcept(true) __attribute((const)); 
# 168
extern _Float64x fmodf64x(_Float64x __x, _Float64x __y) noexcept(true); extern _Float64x __fmodf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 198 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float64x copysignf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __copysignf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 203
extern _Float64x nanf64x(const char * __tagb) noexcept(true); extern _Float64x __nanf64x(const char * __tagb) noexcept(true); 
# 220 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float64x j0f64x(_Float64x) noexcept(true); extern _Float64x __j0f64x(_Float64x) noexcept(true); 
# 221
extern _Float64x j1f64x(_Float64x) noexcept(true); extern _Float64x __j1f64x(_Float64x) noexcept(true); 
# 222
extern _Float64x jnf64x(int, _Float64x) noexcept(true); extern _Float64x __jnf64x(int, _Float64x) noexcept(true); 
# 223
extern _Float64x y0f64x(_Float64x) noexcept(true); extern _Float64x __y0f64x(_Float64x) noexcept(true); 
# 224
extern _Float64x y1f64x(_Float64x) noexcept(true); extern _Float64x __y1f64x(_Float64x) noexcept(true); 
# 225
extern _Float64x ynf64x(int, _Float64x) noexcept(true); extern _Float64x __ynf64x(int, _Float64x) noexcept(true); 
# 231
extern _Float64x erff64x(_Float64x) noexcept(true); extern _Float64x __erff64x(_Float64x) noexcept(true); 
# 232
extern _Float64x erfcf64x(_Float64x) noexcept(true); extern _Float64x __erfcf64x(_Float64x) noexcept(true); 
# 233
extern _Float64x lgammaf64x(_Float64x) noexcept(true); extern _Float64x __lgammaf64x(_Float64x) noexcept(true); 
# 238
extern _Float64x tgammaf64x(_Float64x) noexcept(true); extern _Float64x __tgammaf64x(_Float64x) noexcept(true); 
# 252 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float64x lgammaf64x_r(_Float64x, int * __signgamp) noexcept(true); extern _Float64x __lgammaf64x_r(_Float64x, int * __signgamp) noexcept(true); 
# 259
extern _Float64x rintf64x(_Float64x __x) noexcept(true); extern _Float64x __rintf64x(_Float64x __x) noexcept(true); 
# 262
extern _Float64x nextafterf64x(_Float64x __x, _Float64x __y) noexcept(true); extern _Float64x __nextafterf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 269
extern _Float64x nextdownf64x(_Float64x __x) noexcept(true); extern _Float64x __nextdownf64x(_Float64x __x) noexcept(true); 
# 271
extern _Float64x nextupf64x(_Float64x __x) noexcept(true); extern _Float64x __nextupf64x(_Float64x __x) noexcept(true); 
# 275
extern _Float64x remainderf64x(_Float64x __x, _Float64x __y) noexcept(true); extern _Float64x __remainderf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 279
extern _Float64x scalbnf64x(_Float64x __x, int __n) noexcept(true); extern _Float64x __scalbnf64x(_Float64x __x, int __n) noexcept(true); 
# 283
extern int ilogbf64x(_Float64x __x) noexcept(true); extern int __ilogbf64x(_Float64x __x) noexcept(true); 
# 288
extern long llogbf64x(_Float64x __x) noexcept(true); extern long __llogbf64x(_Float64x __x) noexcept(true); 
# 293
extern _Float64x scalblnf64x(_Float64x __x, long __n) noexcept(true); extern _Float64x __scalblnf64x(_Float64x __x, long __n) noexcept(true); 
# 297
extern _Float64x nearbyintf64x(_Float64x __x) noexcept(true); extern _Float64x __nearbyintf64x(_Float64x __x) noexcept(true); 
# 301
extern _Float64x roundf64x(_Float64x __x) noexcept(true) __attribute((const)); extern _Float64x __roundf64x(_Float64x __x) noexcept(true) __attribute((const)); 
# 305
extern _Float64x truncf64x(_Float64x __x) noexcept(true) __attribute((const)); extern _Float64x __truncf64x(_Float64x __x) noexcept(true) __attribute((const)); 
# 310
extern _Float64x remquof64x(_Float64x __x, _Float64x __y, int * __quo) noexcept(true); extern _Float64x __remquof64x(_Float64x __x, _Float64x __y, int * __quo) noexcept(true); 
# 317
extern long lrintf64x(_Float64x __x) noexcept(true); extern long __lrintf64x(_Float64x __x) noexcept(true); 
# 319
__extension__ extern long long llrintf64x(_Float64x __x) noexcept(true); extern long long __llrintf64x(_Float64x __x) noexcept(true); 
# 323
extern long lroundf64x(_Float64x __x) noexcept(true); extern long __lroundf64x(_Float64x __x) noexcept(true); 
# 325
__extension__ extern long long llroundf64x(_Float64x __x) noexcept(true); extern long long __llroundf64x(_Float64x __x) noexcept(true); 
# 329
extern _Float64x fdimf64x(_Float64x __x, _Float64x __y) noexcept(true); extern _Float64x __fdimf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 333
extern _Float64x fmaxf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __fmaxf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 336
extern _Float64x fminf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __fminf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 340
extern _Float64x fmaf64x(_Float64x __x, _Float64x __y, _Float64x __z) noexcept(true); extern _Float64x __fmaf64x(_Float64x __x, _Float64x __y, _Float64x __z) noexcept(true); 
# 345
extern _Float64x roundevenf64x(_Float64x __x) noexcept(true) __attribute((const)); extern _Float64x __roundevenf64x(_Float64x __x) noexcept(true) __attribute((const)); 
# 349
extern __intmax_t fromfpf64x(_Float64x __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpf64x(_Float64x __x, int __round, unsigned __width) noexcept(true); 
# 354
extern __uintmax_t ufromfpf64x(_Float64x __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpf64x(_Float64x __x, int __round, unsigned __width) noexcept(true); 
# 360
extern __intmax_t fromfpxf64x(_Float64x __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpxf64x(_Float64x __x, int __round, unsigned __width) noexcept(true); 
# 366
extern __uintmax_t ufromfpxf64x(_Float64x __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpxf64x(_Float64x __x, int __round, unsigned __width) noexcept(true); 
# 370
extern int canonicalizef64x(_Float64x * __cx, const _Float64x * __x) noexcept(true); 
# 377
extern _Float64x fmaxmagf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __fmaxmagf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 380
extern _Float64x fminmagf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __fminmagf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 385
extern _Float64x fmaximumf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __fmaximumf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 388
extern _Float64x fminimumf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __fminimumf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 391
extern _Float64x fmaximum_numf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __fmaximum_numf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 394
extern _Float64x fminimum_numf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __fminimum_numf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 397
extern _Float64x fmaximum_magf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __fmaximum_magf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 400
extern _Float64x fminimum_magf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __fminimum_magf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 403
extern _Float64x fmaximum_mag_numf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __fmaximum_mag_numf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 406
extern _Float64x fminimum_mag_numf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __fminimum_mag_numf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 411
extern int totalorderf64x(const _Float64x * __x, const _Float64x * __y) noexcept(true)
# 413
 __attribute((__pure__)); 
# 416
extern int totalordermagf64x(const _Float64x * __x, const _Float64x * __y) noexcept(true)
# 418
 __attribute((__pure__)); 
# 421
extern _Float64x getpayloadf64x(const _Float64x * __x) noexcept(true); extern _Float64x __getpayloadf64x(const _Float64x * __x) noexcept(true); 
# 424
extern int setpayloadf64x(_Float64x * __x, _Float64x __payload) noexcept(true); 
# 427
extern int setpayloadsigf64x(_Float64x * __x, _Float64x __payload) noexcept(true); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern float fadd(double __x, double __y) noexcept(true); 
# 27
extern float fdiv(double __x, double __y) noexcept(true); 
# 30
extern float ffma(double __x, double __y, double __z) noexcept(true); 
# 33
extern float fmul(double __x, double __y) noexcept(true); 
# 36
extern float fsqrt(double __x) noexcept(true); 
# 39
extern float fsub(double __x, double __y) noexcept(true); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern float faddl(long double __x, long double __y) noexcept(true); 
# 27
extern float fdivl(long double __x, long double __y) noexcept(true); 
# 30
extern float ffmal(long double __x, long double __y, long double __z) noexcept(true); 
# 33
extern float fmull(long double __x, long double __y) noexcept(true); 
# 36
extern float fsqrtl(long double __x) noexcept(true); 
# 39
extern float fsubl(long double __x, long double __y) noexcept(true); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern double daddl(long double __x, long double __y) noexcept(true); 
# 27
extern double ddivl(long double __x, long double __y) noexcept(true); 
# 30
extern double dfmal(long double __x, long double __y, long double __z) noexcept(true); 
# 33
extern double dmull(long double __x, long double __y) noexcept(true); 
# 36
extern double dsqrtl(long double __x) noexcept(true); 
# 39
extern double dsubl(long double __x, long double __y) noexcept(true); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern _Float32 f32addf32x(_Float32x __x, _Float32x __y) noexcept(true); 
# 27
extern _Float32 f32divf32x(_Float32x __x, _Float32x __y) noexcept(true); 
# 30
extern _Float32 f32fmaf32x(_Float32x __x, _Float32x __y, _Float32x __z) noexcept(true); 
# 33
extern _Float32 f32mulf32x(_Float32x __x, _Float32x __y) noexcept(true); 
# 36
extern _Float32 f32sqrtf32x(_Float32x __x) noexcept(true); 
# 39
extern _Float32 f32subf32x(_Float32x __x, _Float32x __y) noexcept(true); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern _Float32 f32addf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 27
extern _Float32 f32divf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 30
extern _Float32 f32fmaf64(_Float64 __x, _Float64 __y, _Float64 __z) noexcept(true); 
# 33
extern _Float32 f32mulf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 36
extern _Float32 f32sqrtf64(_Float64 __x) noexcept(true); 
# 39
extern _Float32 f32subf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern _Float32 f32addf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 27
extern _Float32 f32divf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 30
extern _Float32 f32fmaf64x(_Float64x __x, _Float64x __y, _Float64x __z) noexcept(true); 
# 33
extern _Float32 f32mulf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 36
extern _Float32 f32sqrtf64x(_Float64x __x) noexcept(true); 
# 39
extern _Float32 f32subf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern _Float32 f32addf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 27
extern _Float32 f32divf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 30
extern _Float32 f32fmaf128(_Float128 __x, _Float128 __y, _Float128 __z) noexcept(true); 
# 33
extern _Float32 f32mulf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 36
extern _Float32 f32sqrtf128(_Float128 __x) noexcept(true); 
# 39
extern _Float32 f32subf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern _Float32x f32xaddf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 27
extern _Float32x f32xdivf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 30
extern _Float32x f32xfmaf64(_Float64 __x, _Float64 __y, _Float64 __z) noexcept(true); 
# 33
extern _Float32x f32xmulf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 36
extern _Float32x f32xsqrtf64(_Float64 __x) noexcept(true); 
# 39
extern _Float32x f32xsubf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern _Float32x f32xaddf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 27
extern _Float32x f32xdivf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 30
extern _Float32x f32xfmaf64x(_Float64x __x, _Float64x __y, _Float64x __z) noexcept(true); 
# 33
extern _Float32x f32xmulf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 36
extern _Float32x f32xsqrtf64x(_Float64x __x) noexcept(true); 
# 39
extern _Float32x f32xsubf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern _Float32x f32xaddf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 27
extern _Float32x f32xdivf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 30
extern _Float32x f32xfmaf128(_Float128 __x, _Float128 __y, _Float128 __z) noexcept(true); 
# 33
extern _Float32x f32xmulf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 36
extern _Float32x f32xsqrtf128(_Float128 __x) noexcept(true); 
# 39
extern _Float32x f32xsubf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern _Float64 f64addf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 27
extern _Float64 f64divf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 30
extern _Float64 f64fmaf64x(_Float64x __x, _Float64x __y, _Float64x __z) noexcept(true); 
# 33
extern _Float64 f64mulf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 36
extern _Float64 f64sqrtf64x(_Float64x __x) noexcept(true); 
# 39
extern _Float64 f64subf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern _Float64 f64addf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 27
extern _Float64 f64divf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 30
extern _Float64 f64fmaf128(_Float128 __x, _Float128 __y, _Float128 __z) noexcept(true); 
# 33
extern _Float64 f64mulf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 36
extern _Float64 f64sqrtf128(_Float128 __x) noexcept(true); 
# 39
extern _Float64 f64subf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern _Float64x f64xaddf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 27
extern _Float64x f64xdivf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 30
extern _Float64x f64xfmaf128(_Float128 __x, _Float128 __y, _Float128 __z) noexcept(true); 
# 33
extern _Float64x f64xmulf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 36
extern _Float64x f64xsqrtf128(_Float128 __x) noexcept(true); 
# 39
extern _Float64x f64xsubf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 854 "/usr/include/math.h" 3
extern int signgam; 
# 935 "/usr/include/math.h" 3
enum { 
# 936
FP_NAN, 
# 939
FP_INFINITE, 
# 942
FP_ZERO, 
# 945
FP_SUBNORMAL, 
# 948
FP_NORMAL
# 951
}; 
# 23 "/usr/include/x86_64-linux-gnu/bits/iscanonical.h" 3
extern int __iscanonicall(long double __x) noexcept(true)
# 24
 __attribute((const)); 
# 46 "/usr/include/x86_64-linux-gnu/bits/iscanonical.h" 3
extern "C++" {
# 47
inline int iscanonical(float __val) { return (((void)((__typeof__(__val))__val)), 1); } 
# 48
inline int iscanonical(double __val) { return (((void)((__typeof__(__val))__val)), 1); } 
# 49
inline int iscanonical(long double __val) { return __iscanonicall(__val); } 
# 51
inline int iscanonical(_Float128 __val) { return (((void)((__typeof__(__val))__val)), 1); } 
# 53
}
# 1066 "/usr/include/math.h" 3
extern "C++" {
# 1067
inline int issignaling(float __val) { return __issignalingf(__val); } 
# 1068
inline int issignaling(double __val) { return __issignaling(__val); } 
# 1070
inline int issignaling(long double __val) 
# 1071
{ 
# 1075
return __issignalingl(__val); 
# 1077
} 
# 1081
inline int issignaling(_Float128 __val) { return __issignalingf128(__val); } 
# 1083
}
# 1097 "/usr/include/math.h" 3
extern "C++" {
# 1128 "/usr/include/math.h" 3
template< class __T> inline bool 
# 1129
iszero(__T __val) 
# 1130
{ 
# 1131
return __val == 0; 
# 1132
} 
# 1134
}
# 1363 "/usr/include/math.h" 3
extern "C++" {
# 1364
template< class > struct __iseqsig_type; 
# 1366
template<> struct __iseqsig_type< float>  { 
# 1368
static int __call(float __x, float __y) throw() 
# 1369
{ 
# 1370
return __iseqsigf(__x, __y); 
# 1371
} 
# 1372
}; 
# 1374
template<> struct __iseqsig_type< double>  { 
# 1376
static int __call(double __x, double __y) throw() 
# 1377
{ 
# 1378
return __iseqsig(__x, __y); 
# 1379
} 
# 1380
}; 
# 1382
template<> struct __iseqsig_type< long double>  { 
# 1384
static int __call(long double __x, long double __y) throw() 
# 1385
{ 
# 1387
return __iseqsigl(__x, __y); 
# 1391
} 
# 1392
}; 
# 1397
template<> struct __iseqsig_type< __float128>  { 
# 1399
static int __call(_Float128 __x, _Float128 __y) throw() 
# 1400
{ 
# 1401
return __iseqsigf128(__x, __y); 
# 1402
} 
# 1403
}; 
# 1406
template< class _T1, class _T2> inline int 
# 1408
iseqsig(_T1 __x, _T2 __y) throw() 
# 1409
{ 
# 1411
typedef __decltype(((__x + __y) + (0.0F))) _T3; 
# 1415
return __iseqsig_type< __decltype(((__x + __y) + (0.0F)))> ::__call(__x, __y); 
# 1416
} 
# 1418
}
# 1423
}
# 77 "/usr/include/c++/11/cmath" 3
extern "C++" {
# 79
namespace std __attribute((__visibility__("default"))) { 
# 83
using ::acos;
# 87
constexpr float acos(float __x) 
# 88
{ return __builtin_acosf(__x); } 
# 91
constexpr long double acos(long double __x) 
# 92
{ return __builtin_acosl(__x); } 
# 95
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 99
acos(_Tp __x) 
# 100
{ return __builtin_acos(__x); } 
# 102
using ::asin;
# 106
constexpr float asin(float __x) 
# 107
{ return __builtin_asinf(__x); } 
# 110
constexpr long double asin(long double __x) 
# 111
{ return __builtin_asinl(__x); } 
# 114
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 118
asin(_Tp __x) 
# 119
{ return __builtin_asin(__x); } 
# 121
using ::atan;
# 125
constexpr float atan(float __x) 
# 126
{ return __builtin_atanf(__x); } 
# 129
constexpr long double atan(long double __x) 
# 130
{ return __builtin_atanl(__x); } 
# 133
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 137
atan(_Tp __x) 
# 138
{ return __builtin_atan(__x); } 
# 140
using ::atan2;
# 144
constexpr float atan2(float __y, float __x) 
# 145
{ return __builtin_atan2f(__y, __x); } 
# 148
constexpr long double atan2(long double __y, long double __x) 
# 149
{ return __builtin_atan2l(__y, __x); } 
# 152
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 155
atan2(_Tp __y, _Up __x) 
# 156
{ 
# 157
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 158
return atan2((__type)__y, (__type)__x); 
# 159
} 
# 161
using ::ceil;
# 165
constexpr float ceil(float __x) 
# 166
{ return __builtin_ceilf(__x); } 
# 169
constexpr long double ceil(long double __x) 
# 170
{ return __builtin_ceill(__x); } 
# 173
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 177
ceil(_Tp __x) 
# 178
{ return __builtin_ceil(__x); } 
# 180
using ::cos;
# 184
constexpr float cos(float __x) 
# 185
{ return __builtin_cosf(__x); } 
# 188
constexpr long double cos(long double __x) 
# 189
{ return __builtin_cosl(__x); } 
# 192
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 196
cos(_Tp __x) 
# 197
{ return __builtin_cos(__x); } 
# 199
using ::cosh;
# 203
constexpr float cosh(float __x) 
# 204
{ return __builtin_coshf(__x); } 
# 207
constexpr long double cosh(long double __x) 
# 208
{ return __builtin_coshl(__x); } 
# 211
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 215
cosh(_Tp __x) 
# 216
{ return __builtin_cosh(__x); } 
# 218
using ::exp;
# 222
constexpr float exp(float __x) 
# 223
{ return __builtin_expf(__x); } 
# 226
constexpr long double exp(long double __x) 
# 227
{ return __builtin_expl(__x); } 
# 230
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 234
exp(_Tp __x) 
# 235
{ return __builtin_exp(__x); } 
# 237
using ::fabs;
# 241
constexpr float fabs(float __x) 
# 242
{ return __builtin_fabsf(__x); } 
# 245
constexpr long double fabs(long double __x) 
# 246
{ return __builtin_fabsl(__x); } 
# 249
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 253
fabs(_Tp __x) 
# 254
{ return __builtin_fabs(__x); } 
# 256
using ::floor;
# 260
constexpr float floor(float __x) 
# 261
{ return __builtin_floorf(__x); } 
# 264
constexpr long double floor(long double __x) 
# 265
{ return __builtin_floorl(__x); } 
# 268
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 272
floor(_Tp __x) 
# 273
{ return __builtin_floor(__x); } 
# 275
using ::fmod;
# 279
constexpr float fmod(float __x, float __y) 
# 280
{ return __builtin_fmodf(__x, __y); } 
# 283
constexpr long double fmod(long double __x, long double __y) 
# 284
{ return __builtin_fmodl(__x, __y); } 
# 287
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 290
fmod(_Tp __x, _Up __y) 
# 291
{ 
# 292
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 293
return fmod((__type)__x, (__type)__y); 
# 294
} 
# 296
using ::frexp;
# 300
inline float frexp(float __x, int *__exp) 
# 301
{ return __builtin_frexpf(__x, __exp); } 
# 304
inline long double frexp(long double __x, int *__exp) 
# 305
{ return __builtin_frexpl(__x, __exp); } 
# 308
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 312
frexp(_Tp __x, int *__exp) 
# 313
{ return __builtin_frexp(__x, __exp); } 
# 315
using ::ldexp;
# 319
constexpr float ldexp(float __x, int __exp) 
# 320
{ return __builtin_ldexpf(__x, __exp); } 
# 323
constexpr long double ldexp(long double __x, int __exp) 
# 324
{ return __builtin_ldexpl(__x, __exp); } 
# 327
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 331
ldexp(_Tp __x, int __exp) 
# 332
{ return __builtin_ldexp(__x, __exp); } 
# 334
using ::log;
# 338
constexpr float log(float __x) 
# 339
{ return __builtin_logf(__x); } 
# 342
constexpr long double log(long double __x) 
# 343
{ return __builtin_logl(__x); } 
# 346
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 350
log(_Tp __x) 
# 351
{ return __builtin_log(__x); } 
# 353
using ::log10;
# 357
constexpr float log10(float __x) 
# 358
{ return __builtin_log10f(__x); } 
# 361
constexpr long double log10(long double __x) 
# 362
{ return __builtin_log10l(__x); } 
# 365
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 369
log10(_Tp __x) 
# 370
{ return __builtin_log10(__x); } 
# 372
using ::modf;
# 376
inline float modf(float __x, float *__iptr) 
# 377
{ return __builtin_modff(__x, __iptr); } 
# 380
inline long double modf(long double __x, long double *__iptr) 
# 381
{ return __builtin_modfl(__x, __iptr); } 
# 384
using ::pow;
# 388
constexpr float pow(float __x, float __y) 
# 389
{ return __builtin_powf(__x, __y); } 
# 392
constexpr long double pow(long double __x, long double __y) 
# 393
{ return __builtin_powl(__x, __y); } 
# 412 "/usr/include/c++/11/cmath" 3
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 415
pow(_Tp __x, _Up __y) 
# 416
{ 
# 417
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 418
return pow((__type)__x, (__type)__y); 
# 419
} 
# 421
using ::sin;
# 425
constexpr float sin(float __x) 
# 426
{ return __builtin_sinf(__x); } 
# 429
constexpr long double sin(long double __x) 
# 430
{ return __builtin_sinl(__x); } 
# 433
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 437
sin(_Tp __x) 
# 438
{ return __builtin_sin(__x); } 
# 440
using ::sinh;
# 444
constexpr float sinh(float __x) 
# 445
{ return __builtin_sinhf(__x); } 
# 448
constexpr long double sinh(long double __x) 
# 449
{ return __builtin_sinhl(__x); } 
# 452
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 456
sinh(_Tp __x) 
# 457
{ return __builtin_sinh(__x); } 
# 459
using ::sqrt;
# 463
constexpr float sqrt(float __x) 
# 464
{ return __builtin_sqrtf(__x); } 
# 467
constexpr long double sqrt(long double __x) 
# 468
{ return __builtin_sqrtl(__x); } 
# 471
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 475
sqrt(_Tp __x) 
# 476
{ return __builtin_sqrt(__x); } 
# 478
using ::tan;
# 482
constexpr float tan(float __x) 
# 483
{ return __builtin_tanf(__x); } 
# 486
constexpr long double tan(long double __x) 
# 487
{ return __builtin_tanl(__x); } 
# 490
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 494
tan(_Tp __x) 
# 495
{ return __builtin_tan(__x); } 
# 497
using ::tanh;
# 501
constexpr float tanh(float __x) 
# 502
{ return __builtin_tanhf(__x); } 
# 505
constexpr long double tanh(long double __x) 
# 506
{ return __builtin_tanhl(__x); } 
# 509
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 513
tanh(_Tp __x) 
# 514
{ return __builtin_tanh(__x); } 
# 537 "/usr/include/c++/11/cmath" 3
constexpr int fpclassify(float __x) 
# 538
{ return __builtin_fpclassify(0, 1, 4, 3, 2, __x); 
# 539
} 
# 542
constexpr int fpclassify(double __x) 
# 543
{ return __builtin_fpclassify(0, 1, 4, 3, 2, __x); 
# 544
} 
# 547
constexpr int fpclassify(long double __x) 
# 548
{ return __builtin_fpclassify(0, 1, 4, 3, 2, __x); 
# 549
} 
# 553
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, int> ::__type 
# 556
fpclassify(_Tp __x) 
# 557
{ return (__x != 0) ? 4 : 2; } 
# 562
constexpr bool isfinite(float __x) 
# 563
{ return __builtin_isfinite(__x); } 
# 566
constexpr bool isfinite(double __x) 
# 567
{ return __builtin_isfinite(__x); } 
# 570
constexpr bool isfinite(long double __x) 
# 571
{ return __builtin_isfinite(__x); } 
# 575
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, bool> ::__type 
# 578
isfinite(_Tp __x) 
# 579
{ return true; } 
# 584
constexpr bool isinf(float __x) 
# 585
{ return __builtin_isinf(__x); } 
# 592
constexpr bool isinf(double __x) 
# 593
{ return __builtin_isinf(__x); } 
# 597
constexpr bool isinf(long double __x) 
# 598
{ return __builtin_isinf(__x); } 
# 602
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, bool> ::__type 
# 605
isinf(_Tp __x) 
# 606
{ return false; } 
# 611
constexpr bool isnan(float __x) 
# 612
{ return __builtin_isnan(__x); } 
# 619
constexpr bool isnan(double __x) 
# 620
{ return __builtin_isnan(__x); } 
# 624
constexpr bool isnan(long double __x) 
# 625
{ return __builtin_isnan(__x); } 
# 629
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, bool> ::__type 
# 632
isnan(_Tp __x) 
# 633
{ return false; } 
# 638
constexpr bool isnormal(float __x) 
# 639
{ return __builtin_isnormal(__x); } 
# 642
constexpr bool isnormal(double __x) 
# 643
{ return __builtin_isnormal(__x); } 
# 646
constexpr bool isnormal(long double __x) 
# 647
{ return __builtin_isnormal(__x); } 
# 651
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, bool> ::__type 
# 654
isnormal(_Tp __x) 
# 655
{ return (__x != 0) ? true : false; } 
# 661
constexpr bool signbit(float __x) 
# 662
{ return __builtin_signbit(__x); } 
# 665
constexpr bool signbit(double __x) 
# 666
{ return __builtin_signbit(__x); } 
# 669
constexpr bool signbit(long double __x) 
# 670
{ return __builtin_signbit(__x); } 
# 674
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, bool> ::__type 
# 677
signbit(_Tp __x) 
# 678
{ return (__x < 0) ? true : false; } 
# 683
constexpr bool isgreater(float __x, float __y) 
# 684
{ return __builtin_isgreater(__x, __y); } 
# 687
constexpr bool isgreater(double __x, double __y) 
# 688
{ return __builtin_isgreater(__x, __y); } 
# 691
constexpr bool isgreater(long double __x, long double __y) 
# 692
{ return __builtin_isgreater(__x, __y); } 
# 696
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 700
isgreater(_Tp __x, _Up __y) 
# 701
{ 
# 702
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 703
return __builtin_isgreater((__type)__x, (__type)__y); 
# 704
} 
# 709
constexpr bool isgreaterequal(float __x, float __y) 
# 710
{ return __builtin_isgreaterequal(__x, __y); } 
# 713
constexpr bool isgreaterequal(double __x, double __y) 
# 714
{ return __builtin_isgreaterequal(__x, __y); } 
# 717
constexpr bool isgreaterequal(long double __x, long double __y) 
# 718
{ return __builtin_isgreaterequal(__x, __y); } 
# 722
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 726
isgreaterequal(_Tp __x, _Up __y) 
# 727
{ 
# 728
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 729
return __builtin_isgreaterequal((__type)__x, (__type)__y); 
# 730
} 
# 735
constexpr bool isless(float __x, float __y) 
# 736
{ return __builtin_isless(__x, __y); } 
# 739
constexpr bool isless(double __x, double __y) 
# 740
{ return __builtin_isless(__x, __y); } 
# 743
constexpr bool isless(long double __x, long double __y) 
# 744
{ return __builtin_isless(__x, __y); } 
# 748
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 752
isless(_Tp __x, _Up __y) 
# 753
{ 
# 754
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 755
return __builtin_isless((__type)__x, (__type)__y); 
# 756
} 
# 761
constexpr bool islessequal(float __x, float __y) 
# 762
{ return __builtin_islessequal(__x, __y); } 
# 765
constexpr bool islessequal(double __x, double __y) 
# 766
{ return __builtin_islessequal(__x, __y); } 
# 769
constexpr bool islessequal(long double __x, long double __y) 
# 770
{ return __builtin_islessequal(__x, __y); } 
# 774
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 778
islessequal(_Tp __x, _Up __y) 
# 779
{ 
# 780
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 781
return __builtin_islessequal((__type)__x, (__type)__y); 
# 782
} 
# 787
constexpr bool islessgreater(float __x, float __y) 
# 788
{ return __builtin_islessgreater(__x, __y); } 
# 791
constexpr bool islessgreater(double __x, double __y) 
# 792
{ return __builtin_islessgreater(__x, __y); } 
# 795
constexpr bool islessgreater(long double __x, long double __y) 
# 796
{ return __builtin_islessgreater(__x, __y); } 
# 800
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 804
islessgreater(_Tp __x, _Up __y) 
# 805
{ 
# 806
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 807
return __builtin_islessgreater((__type)__x, (__type)__y); 
# 808
} 
# 813
constexpr bool isunordered(float __x, float __y) 
# 814
{ return __builtin_isunordered(__x, __y); } 
# 817
constexpr bool isunordered(double __x, double __y) 
# 818
{ return __builtin_isunordered(__x, __y); } 
# 821
constexpr bool isunordered(long double __x, long double __y) 
# 822
{ return __builtin_isunordered(__x, __y); } 
# 826
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 830
isunordered(_Tp __x, _Up __y) 
# 831
{ 
# 832
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 833
return __builtin_isunordered((__type)__x, (__type)__y); 
# 834
} 
# 1065 "/usr/include/c++/11/cmath" 3
using ::double_t;
# 1066
using ::float_t;
# 1069
using ::acosh;
# 1070
using ::acoshf;
# 1071
using ::acoshl;
# 1073
using ::asinh;
# 1074
using ::asinhf;
# 1075
using ::asinhl;
# 1077
using ::atanh;
# 1078
using ::atanhf;
# 1079
using ::atanhl;
# 1081
using ::cbrt;
# 1082
using ::cbrtf;
# 1083
using ::cbrtl;
# 1085
using ::copysign;
# 1086
using ::copysignf;
# 1087
using ::copysignl;
# 1089
using ::erf;
# 1090
using ::erff;
# 1091
using ::erfl;
# 1093
using ::erfc;
# 1094
using ::erfcf;
# 1095
using ::erfcl;
# 1097
using ::exp2;
# 1098
using ::exp2f;
# 1099
using ::exp2l;
# 1101
using ::expm1;
# 1102
using ::expm1f;
# 1103
using ::expm1l;
# 1105
using ::fdim;
# 1106
using ::fdimf;
# 1107
using ::fdiml;
# 1109
using ::fma;
# 1110
using ::fmaf;
# 1111
using ::fmal;
# 1113
using ::fmax;
# 1114
using ::fmaxf;
# 1115
using ::fmaxl;
# 1117
using ::fmin;
# 1118
using ::fminf;
# 1119
using ::fminl;
# 1121
using ::hypot;
# 1122
using ::hypotf;
# 1123
using ::hypotl;
# 1125
using ::ilogb;
# 1126
using ::ilogbf;
# 1127
using ::ilogbl;
# 1129
using ::lgamma;
# 1130
using ::lgammaf;
# 1131
using ::lgammal;
# 1134
using ::llrint;
# 1135
using ::llrintf;
# 1136
using ::llrintl;
# 1138
using ::llround;
# 1139
using ::llroundf;
# 1140
using ::llroundl;
# 1143
using ::log1p;
# 1144
using ::log1pf;
# 1145
using ::log1pl;
# 1147
using ::log2;
# 1148
using ::log2f;
# 1149
using ::log2l;
# 1151
using ::logb;
# 1152
using ::logbf;
# 1153
using ::logbl;
# 1155
using ::lrint;
# 1156
using ::lrintf;
# 1157
using ::lrintl;
# 1159
using ::lround;
# 1160
using ::lroundf;
# 1161
using ::lroundl;
# 1163
using ::nan;
# 1164
using ::nanf;
# 1165
using ::nanl;
# 1167
using ::nearbyint;
# 1168
using ::nearbyintf;
# 1169
using ::nearbyintl;
# 1171
using ::nextafter;
# 1172
using ::nextafterf;
# 1173
using ::nextafterl;
# 1175
using ::nexttoward;
# 1176
using ::nexttowardf;
# 1177
using ::nexttowardl;
# 1179
using ::remainder;
# 1180
using ::remainderf;
# 1181
using ::remainderl;
# 1183
using ::remquo;
# 1184
using ::remquof;
# 1185
using ::remquol;
# 1187
using ::rint;
# 1188
using ::rintf;
# 1189
using ::rintl;
# 1191
using ::round;
# 1192
using ::roundf;
# 1193
using ::roundl;
# 1195
using ::scalbln;
# 1196
using ::scalblnf;
# 1197
using ::scalblnl;
# 1199
using ::scalbn;
# 1200
using ::scalbnf;
# 1201
using ::scalbnl;
# 1203
using ::tgamma;
# 1204
using ::tgammaf;
# 1205
using ::tgammal;
# 1207
using ::trunc;
# 1208
using ::truncf;
# 1209
using ::truncl;
# 1214
constexpr float acosh(float __x) 
# 1215
{ return __builtin_acoshf(__x); } 
# 1218
constexpr long double acosh(long double __x) 
# 1219
{ return __builtin_acoshl(__x); } 
# 1223
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1226
acosh(_Tp __x) 
# 1227
{ return __builtin_acosh(__x); } 
# 1232
constexpr float asinh(float __x) 
# 1233
{ return __builtin_asinhf(__x); } 
# 1236
constexpr long double asinh(long double __x) 
# 1237
{ return __builtin_asinhl(__x); } 
# 1241
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1244
asinh(_Tp __x) 
# 1245
{ return __builtin_asinh(__x); } 
# 1250
constexpr float atanh(float __x) 
# 1251
{ return __builtin_atanhf(__x); } 
# 1254
constexpr long double atanh(long double __x) 
# 1255
{ return __builtin_atanhl(__x); } 
# 1259
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1262
atanh(_Tp __x) 
# 1263
{ return __builtin_atanh(__x); } 
# 1268
constexpr float cbrt(float __x) 
# 1269
{ return __builtin_cbrtf(__x); } 
# 1272
constexpr long double cbrt(long double __x) 
# 1273
{ return __builtin_cbrtl(__x); } 
# 1277
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1280
cbrt(_Tp __x) 
# 1281
{ return __builtin_cbrt(__x); } 
# 1286
constexpr float copysign(float __x, float __y) 
# 1287
{ return __builtin_copysignf(__x, __y); } 
# 1290
constexpr long double copysign(long double __x, long double __y) 
# 1291
{ return __builtin_copysignl(__x, __y); } 
# 1295
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1297
copysign(_Tp __x, _Up __y) 
# 1298
{ 
# 1299
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1300
return copysign((__type)__x, (__type)__y); 
# 1301
} 
# 1306
constexpr float erf(float __x) 
# 1307
{ return __builtin_erff(__x); } 
# 1310
constexpr long double erf(long double __x) 
# 1311
{ return __builtin_erfl(__x); } 
# 1315
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1318
erf(_Tp __x) 
# 1319
{ return __builtin_erf(__x); } 
# 1324
constexpr float erfc(float __x) 
# 1325
{ return __builtin_erfcf(__x); } 
# 1328
constexpr long double erfc(long double __x) 
# 1329
{ return __builtin_erfcl(__x); } 
# 1333
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1336
erfc(_Tp __x) 
# 1337
{ return __builtin_erfc(__x); } 
# 1342
constexpr float exp2(float __x) 
# 1343
{ return __builtin_exp2f(__x); } 
# 1346
constexpr long double exp2(long double __x) 
# 1347
{ return __builtin_exp2l(__x); } 
# 1351
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1354
exp2(_Tp __x) 
# 1355
{ return __builtin_exp2(__x); } 
# 1360
constexpr float expm1(float __x) 
# 1361
{ return __builtin_expm1f(__x); } 
# 1364
constexpr long double expm1(long double __x) 
# 1365
{ return __builtin_expm1l(__x); } 
# 1369
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1372
expm1(_Tp __x) 
# 1373
{ return __builtin_expm1(__x); } 
# 1378
constexpr float fdim(float __x, float __y) 
# 1379
{ return __builtin_fdimf(__x, __y); } 
# 1382
constexpr long double fdim(long double __x, long double __y) 
# 1383
{ return __builtin_fdiml(__x, __y); } 
# 1387
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1389
fdim(_Tp __x, _Up __y) 
# 1390
{ 
# 1391
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1392
return fdim((__type)__x, (__type)__y); 
# 1393
} 
# 1398
constexpr float fma(float __x, float __y, float __z) 
# 1399
{ return __builtin_fmaf(__x, __y, __z); } 
# 1402
constexpr long double fma(long double __x, long double __y, long double __z) 
# 1403
{ return __builtin_fmal(__x, __y, __z); } 
# 1407
template< class _Tp, class _Up, class _Vp> constexpr typename __gnu_cxx::__promote_3< _Tp, _Up, _Vp> ::__type 
# 1409
fma(_Tp __x, _Up __y, _Vp __z) 
# 1410
{ 
# 1411
typedef typename __gnu_cxx::__promote_3< _Tp, _Up, _Vp> ::__type __type; 
# 1412
return fma((__type)__x, (__type)__y, (__type)__z); 
# 1413
} 
# 1418
constexpr float fmax(float __x, float __y) 
# 1419
{ return __builtin_fmaxf(__x, __y); } 
# 1422
constexpr long double fmax(long double __x, long double __y) 
# 1423
{ return __builtin_fmaxl(__x, __y); } 
# 1427
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1429
fmax(_Tp __x, _Up __y) 
# 1430
{ 
# 1431
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1432
return fmax((__type)__x, (__type)__y); 
# 1433
} 
# 1438
constexpr float fmin(float __x, float __y) 
# 1439
{ return __builtin_fminf(__x, __y); } 
# 1442
constexpr long double fmin(long double __x, long double __y) 
# 1443
{ return __builtin_fminl(__x, __y); } 
# 1447
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1449
fmin(_Tp __x, _Up __y) 
# 1450
{ 
# 1451
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1452
return fmin((__type)__x, (__type)__y); 
# 1453
} 
# 1458
constexpr float hypot(float __x, float __y) 
# 1459
{ return __builtin_hypotf(__x, __y); } 
# 1462
constexpr long double hypot(long double __x, long double __y) 
# 1463
{ return __builtin_hypotl(__x, __y); } 
# 1467
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1469
hypot(_Tp __x, _Up __y) 
# 1470
{ 
# 1471
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1472
return hypot((__type)__x, (__type)__y); 
# 1473
} 
# 1478
constexpr int ilogb(float __x) 
# 1479
{ return __builtin_ilogbf(__x); } 
# 1482
constexpr int ilogb(long double __x) 
# 1483
{ return __builtin_ilogbl(__x); } 
# 1487
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, int> ::__type 
# 1491
ilogb(_Tp __x) 
# 1492
{ return __builtin_ilogb(__x); } 
# 1497
constexpr float lgamma(float __x) 
# 1498
{ return __builtin_lgammaf(__x); } 
# 1501
constexpr long double lgamma(long double __x) 
# 1502
{ return __builtin_lgammal(__x); } 
# 1506
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1509
lgamma(_Tp __x) 
# 1510
{ return __builtin_lgamma(__x); } 
# 1515
constexpr long long llrint(float __x) 
# 1516
{ return __builtin_llrintf(__x); } 
# 1519
constexpr long long llrint(long double __x) 
# 1520
{ return __builtin_llrintl(__x); } 
# 1524
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, long long> ::__type 
# 1527
llrint(_Tp __x) 
# 1528
{ return __builtin_llrint(__x); } 
# 1533
constexpr long long llround(float __x) 
# 1534
{ return __builtin_llroundf(__x); } 
# 1537
constexpr long long llround(long double __x) 
# 1538
{ return __builtin_llroundl(__x); } 
# 1542
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, long long> ::__type 
# 1545
llround(_Tp __x) 
# 1546
{ return __builtin_llround(__x); } 
# 1551
constexpr float log1p(float __x) 
# 1552
{ return __builtin_log1pf(__x); } 
# 1555
constexpr long double log1p(long double __x) 
# 1556
{ return __builtin_log1pl(__x); } 
# 1560
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1563
log1p(_Tp __x) 
# 1564
{ return __builtin_log1p(__x); } 
# 1570
constexpr float log2(float __x) 
# 1571
{ return __builtin_log2f(__x); } 
# 1574
constexpr long double log2(long double __x) 
# 1575
{ return __builtin_log2l(__x); } 
# 1579
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1582
log2(_Tp __x) 
# 1583
{ return __builtin_log2(__x); } 
# 1588
constexpr float logb(float __x) 
# 1589
{ return __builtin_logbf(__x); } 
# 1592
constexpr long double logb(long double __x) 
# 1593
{ return __builtin_logbl(__x); } 
# 1597
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1600
logb(_Tp __x) 
# 1601
{ return __builtin_logb(__x); } 
# 1606
constexpr long lrint(float __x) 
# 1607
{ return __builtin_lrintf(__x); } 
# 1610
constexpr long lrint(long double __x) 
# 1611
{ return __builtin_lrintl(__x); } 
# 1615
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, long> ::__type 
# 1618
lrint(_Tp __x) 
# 1619
{ return __builtin_lrint(__x); } 
# 1624
constexpr long lround(float __x) 
# 1625
{ return __builtin_lroundf(__x); } 
# 1628
constexpr long lround(long double __x) 
# 1629
{ return __builtin_lroundl(__x); } 
# 1633
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, long> ::__type 
# 1636
lround(_Tp __x) 
# 1637
{ return __builtin_lround(__x); } 
# 1642
constexpr float nearbyint(float __x) 
# 1643
{ return __builtin_nearbyintf(__x); } 
# 1646
constexpr long double nearbyint(long double __x) 
# 1647
{ return __builtin_nearbyintl(__x); } 
# 1651
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1654
nearbyint(_Tp __x) 
# 1655
{ return __builtin_nearbyint(__x); } 
# 1660
constexpr float nextafter(float __x, float __y) 
# 1661
{ return __builtin_nextafterf(__x, __y); } 
# 1664
constexpr long double nextafter(long double __x, long double __y) 
# 1665
{ return __builtin_nextafterl(__x, __y); } 
# 1669
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1671
nextafter(_Tp __x, _Up __y) 
# 1672
{ 
# 1673
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1674
return nextafter((__type)__x, (__type)__y); 
# 1675
} 
# 1680
constexpr float nexttoward(float __x, long double __y) 
# 1681
{ return __builtin_nexttowardf(__x, __y); } 
# 1684
constexpr long double nexttoward(long double __x, long double __y) 
# 1685
{ return __builtin_nexttowardl(__x, __y); } 
# 1689
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1692
nexttoward(_Tp __x, long double __y) 
# 1693
{ return __builtin_nexttoward(__x, __y); } 
# 1698
constexpr float remainder(float __x, float __y) 
# 1699
{ return __builtin_remainderf(__x, __y); } 
# 1702
constexpr long double remainder(long double __x, long double __y) 
# 1703
{ return __builtin_remainderl(__x, __y); } 
# 1707
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1709
remainder(_Tp __x, _Up __y) 
# 1710
{ 
# 1711
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1712
return remainder((__type)__x, (__type)__y); 
# 1713
} 
# 1718
inline float remquo(float __x, float __y, int *__pquo) 
# 1719
{ return __builtin_remquof(__x, __y, __pquo); } 
# 1722
inline long double remquo(long double __x, long double __y, int *__pquo) 
# 1723
{ return __builtin_remquol(__x, __y, __pquo); } 
# 1727
template< class _Tp, class _Up> inline typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1729
remquo(_Tp __x, _Up __y, int *__pquo) 
# 1730
{ 
# 1731
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1732
return remquo((__type)__x, (__type)__y, __pquo); 
# 1733
} 
# 1738
constexpr float rint(float __x) 
# 1739
{ return __builtin_rintf(__x); } 
# 1742
constexpr long double rint(long double __x) 
# 1743
{ return __builtin_rintl(__x); } 
# 1747
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1750
rint(_Tp __x) 
# 1751
{ return __builtin_rint(__x); } 
# 1756
constexpr float round(float __x) 
# 1757
{ return __builtin_roundf(__x); } 
# 1760
constexpr long double round(long double __x) 
# 1761
{ return __builtin_roundl(__x); } 
# 1765
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1768
round(_Tp __x) 
# 1769
{ return __builtin_round(__x); } 
# 1774
constexpr float scalbln(float __x, long __ex) 
# 1775
{ return __builtin_scalblnf(__x, __ex); } 
# 1778
constexpr long double scalbln(long double __x, long __ex) 
# 1779
{ return __builtin_scalblnl(__x, __ex); } 
# 1783
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1786
scalbln(_Tp __x, long __ex) 
# 1787
{ return __builtin_scalbln(__x, __ex); } 
# 1792
constexpr float scalbn(float __x, int __ex) 
# 1793
{ return __builtin_scalbnf(__x, __ex); } 
# 1796
constexpr long double scalbn(long double __x, int __ex) 
# 1797
{ return __builtin_scalbnl(__x, __ex); } 
# 1801
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1804
scalbn(_Tp __x, int __ex) 
# 1805
{ return __builtin_scalbn(__x, __ex); } 
# 1810
constexpr float tgamma(float __x) 
# 1811
{ return __builtin_tgammaf(__x); } 
# 1814
constexpr long double tgamma(long double __x) 
# 1815
{ return __builtin_tgammal(__x); } 
# 1819
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1822
tgamma(_Tp __x) 
# 1823
{ return __builtin_tgamma(__x); } 
# 1828
constexpr float trunc(float __x) 
# 1829
{ return __builtin_truncf(__x); } 
# 1832
constexpr long double trunc(long double __x) 
# 1833
{ return __builtin_truncl(__x); } 
# 1837
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1840
trunc(_Tp __x) 
# 1841
{ return __builtin_trunc(__x); } 
# 1852 "/usr/include/c++/11/cmath" 3
template< class _Tp> inline _Tp 
# 1854
__hypot3(_Tp __x, _Tp __y, _Tp __z) 
# 1855
{ 
# 1856
__x = std::abs(__x); 
# 1857
__y = std::abs(__y); 
# 1858
__z = std::abs(__z); 
# 1859
if (_Tp __a = (__x < __y) ? (__y < __z) ? __z : __y : ((__x < __z) ? __z : __x)) { 
# 1860
return __a * std::sqrt((((__x / __a) * (__x / __a)) + ((__y / __a) * (__y / __a))) + ((__z / __a) * (__z / __a))); } else { 
# 1864
return {}; }  
# 1865
} 
# 1868
inline float hypot(float __x, float __y, float __z) 
# 1869
{ return std::__hypot3< float> (__x, __y, __z); } 
# 1872
inline double hypot(double __x, double __y, double __z) 
# 1873
{ return std::__hypot3< double> (__x, __y, __z); } 
# 1876
inline long double hypot(long double __x, long double __y, long double __z) 
# 1877
{ return std::__hypot3< long double> (__x, __y, __z); } 
# 1879
template< class _Tp, class _Up, class _Vp> __gnu_cxx::__promoted_t< _Tp, _Up, _Vp>  
# 1881
hypot(_Tp __x, _Up __y, _Vp __z) 
# 1882
{ 
# 1883
using __type = __gnu_cxx::__promoted_t< _Tp, _Up, _Vp> ; 
# 1884
return std::__hypot3< __gnu_cxx::__promoted_t< _Tp, _Up, _Vp> > (__x, __y, __z); 
# 1885
} 
# 1932 "/usr/include/c++/11/cmath" 3
}
# 33 "/usr/include/c++/11/bits/specfun.h" 3
#pragma GCC visibility push ( default )
# 42 "/usr/include/c++/11/bits/functexcept.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 48
void __throw_bad_exception() __attribute((__noreturn__)); 
# 52
void __throw_bad_alloc() __attribute((__noreturn__)); 
# 55
void __throw_bad_array_new_length() __attribute((__noreturn__)); 
# 59
void __throw_bad_cast() __attribute((__noreturn__)); 
# 62
void __throw_bad_typeid() __attribute((__noreturn__)); 
# 66
void __throw_logic_error(const char *) __attribute((__noreturn__)); 
# 69
void __throw_domain_error(const char *) __attribute((__noreturn__)); 
# 72
void __throw_invalid_argument(const char *) __attribute((__noreturn__)); 
# 75
void __throw_length_error(const char *) __attribute((__noreturn__)); 
# 78
void __throw_out_of_range(const char *) __attribute((__noreturn__)); 
# 81
void __throw_out_of_range_fmt(const char *, ...) __attribute((__noreturn__))
# 82
 __attribute((__format__(__gnu_printf__, 1, 2))); 
# 85
void __throw_runtime_error(const char *) __attribute((__noreturn__)); 
# 88
void __throw_range_error(const char *) __attribute((__noreturn__)); 
# 91
void __throw_overflow_error(const char *) __attribute((__noreturn__)); 
# 94
void __throw_underflow_error(const char *) __attribute((__noreturn__)); 
# 98
void __throw_ios_failure(const char *) __attribute((__noreturn__)); 
# 101
void __throw_ios_failure(const char *, int) __attribute((__noreturn__)); 
# 105
void __throw_system_error(int) __attribute((__noreturn__)); 
# 109
void __throw_future_error(int) __attribute((__noreturn__)); 
# 113
void __throw_bad_function_call() __attribute((__noreturn__)); 
# 116
}
# 37 "/usr/include/c++/11/ext/numeric_traits.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 50 "/usr/include/c++/11/ext/numeric_traits.h" 3
template< class _Tp> 
# 51
struct __is_integer_nonstrict : public std::__is_integer< _Tp>  { 
# 54
using std::__is_integer< _Tp> ::__value;
# 57
enum { __width = (__value) ? sizeof(_Tp) * (8) : (0)}; 
# 58
}; 
# 60
template< class _Value> 
# 61
struct __numeric_traits_integer { 
# 64
static_assert((__is_integer_nonstrict< _Value> ::__value), "invalid specialization");
# 70
static const bool __is_signed = (((_Value)(-1)) < 0); 
# 71
static const int __digits = (__is_integer_nonstrict< _Value> ::__width - __is_signed); 
# 75
static const _Value __max = (__is_signed ? (((((_Value)1) << (__digits - 1)) - 1) << 1) + 1 : (~((_Value)0))); 
# 78
static const _Value __min = (__is_signed ? (-__max) - 1 : ((_Value)0)); 
# 79
}; 
# 81
template< class _Value> const _Value __numeric_traits_integer< _Value> ::__min; 
# 84
template< class _Value> const _Value __numeric_traits_integer< _Value> ::__max; 
# 87
template< class _Value> const bool __numeric_traits_integer< _Value> ::__is_signed; 
# 90
template< class _Value> const int __numeric_traits_integer< _Value> ::__digits; 
# 128 "/usr/include/c++/11/ext/numeric_traits.h" 3
template<> struct __is_integer_nonstrict< __int128>  { enum { __value = 1}; typedef std::__true_type __type; enum { __width = 128}; }; template<> struct __is_integer_nonstrict< unsigned __int128>  { enum { __value = 1}; typedef std::__true_type __type; enum { __width = 128}; }; 
# 135
template< class _Tp> using __int_traits = __numeric_traits_integer< _Tp> ; 
# 155 "/usr/include/c++/11/ext/numeric_traits.h" 3
template< class _Value> 
# 156
struct __numeric_traits_floating { 
# 159
static const int __max_digits10 = ((2) + ((((std::template __are_same< _Value, float> ::__value) ? 24 : ((std::template __are_same< _Value, double> ::__value) ? 53 : 64)) * 643L) / (2136))); 
# 162
static const bool __is_signed = true; 
# 163
static const int __digits10 = ((std::template __are_same< _Value, float> ::__value) ? 6 : ((std::template __are_same< _Value, double> ::__value) ? 15 : 18)); 
# 164
static const int __max_exponent10 = ((std::template __are_same< _Value, float> ::__value) ? 38 : ((std::template __are_same< _Value, double> ::__value) ? 308 : 4932)); 
# 165
}; 
# 167
template< class _Value> const int __numeric_traits_floating< _Value> ::__max_digits10; 
# 170
template< class _Value> const bool __numeric_traits_floating< _Value> ::__is_signed; 
# 173
template< class _Value> const int __numeric_traits_floating< _Value> ::__digits10; 
# 176
template< class _Value> const int __numeric_traits_floating< _Value> ::__max_exponent10; 
# 184
template< class _Value> 
# 185
struct __numeric_traits : public __numeric_traits_integer< _Value>  { 
# 187
}; 
# 190
template<> struct __numeric_traits< float>  : public __numeric_traits_floating< float>  { 
# 192
}; 
# 195
template<> struct __numeric_traits< double>  : public __numeric_traits_floating< double>  { 
# 197
}; 
# 200
template<> struct __numeric_traits< long double>  : public __numeric_traits_floating< long double>  { 
# 202
}; 
# 237 "/usr/include/c++/11/ext/numeric_traits.h" 3
}
# 38 "/usr/include/c++/11/bits/move.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 47
template< class _Tp> constexpr _Tp *
# 49
__addressof(_Tp &__r) noexcept 
# 50
{ return __builtin_addressof(__r); } 
# 55
}
# 40 "/usr/include/c++/11/type_traits" 3
namespace std __attribute((__visibility__("default"))) { 
# 44
template< class ..._Elements> class tuple; 
# 47
template< class _Tp> class reference_wrapper; 
# 64 "/usr/include/c++/11/type_traits" 3
template< class _Tp, _Tp __v> 
# 65
struct integral_constant { 
# 67
static constexpr inline _Tp value = (__v); 
# 68
typedef _Tp value_type; 
# 69
typedef integral_constant type; 
# 70
constexpr operator value_type() const noexcept { return value; } 
# 75
constexpr value_type operator()() const noexcept { return value; } 
# 77
}; 
# 79
template< class _Tp, _Tp __v> constexpr inline _Tp integral_constant< _Tp, __v> ::value; 
# 83
using true_type = integral_constant< bool, true> ; 
# 86
using false_type = integral_constant< bool, false> ; 
# 90
template< bool __v> using __bool_constant = integral_constant< bool, __v> ; 
# 98
template< bool __v> using bool_constant = integral_constant< bool, __v> ; 
# 104
template< bool , class , class > struct conditional; 
# 108
template< class _Type> 
# 109
struct __type_identity { 
# 110
using type = _Type; }; 
# 112
template< class _Tp> using __type_identity_t = typename __type_identity< _Tp> ::type; 
# 115
template< class ...> struct __or_; 
# 119
template<> struct __or_< >  : public false_type { 
# 121
}; 
# 123
template< class _B1> 
# 124
struct __or_< _B1>  : public _B1 { 
# 126
}; 
# 128
template< class _B1, class _B2> 
# 129
struct __or_< _B1, _B2>  : public conditional< _B1::value, _B1, _B2> ::type { 
# 131
}; 
# 133
template< class _B1, class _B2, class _B3, class ..._Bn> 
# 134
struct __or_< _B1, _B2, _B3, _Bn...>  : public conditional< _B1::value, _B1, std::__or_< _B2, _B3, _Bn...> > ::type { 
# 136
}; 
# 138
template< class ...> struct __and_; 
# 142
template<> struct __and_< >  : public true_type { 
# 144
}; 
# 146
template< class _B1> 
# 147
struct __and_< _B1>  : public _B1 { 
# 149
}; 
# 151
template< class _B1, class _B2> 
# 152
struct __and_< _B1, _B2>  : public conditional< _B1::value, _B2, _B1> ::type { 
# 154
}; 
# 156
template< class _B1, class _B2, class _B3, class ..._Bn> 
# 157
struct __and_< _B1, _B2, _B3, _Bn...>  : public conditional< _B1::value, std::__and_< _B2, _B3, _Bn...> , _B1> ::type { 
# 159
}; 
# 161
template< class _Pp> 
# 162
struct __not_ : public __bool_constant< !((bool)_Pp::value)>  { 
# 164
}; 
# 170
template< class ..._Bn> constexpr inline bool 
# 171
__or_v = (__or_< _Bn...> ::value); 
# 172
template< class ..._Bn> constexpr inline bool 
# 173
__and_v = (__and_< _Bn...> ::value); 
# 178
template< class ..._Bn> 
# 179
struct conjunction : public __and_< _Bn...>  { 
# 181
}; 
# 183
template< class ..._Bn> 
# 184
struct disjunction : public __or_< _Bn...>  { 
# 186
}; 
# 188
template< class _Pp> 
# 189
struct negation : public __not_< _Pp>  { 
# 191
}; 
# 196
template< class ..._Bn> constexpr inline bool 
# 197
conjunction_v = (conjunction< _Bn...> ::value); 
# 199
template< class ..._Bn> constexpr inline bool 
# 200
disjunction_v = (disjunction< _Bn...> ::value); 
# 202
template< class _Pp> constexpr inline bool 
# 203
negation_v = (negation< _Pp> ::value); 
# 209
template< class > struct is_reference; 
# 211
template< class > struct is_function; 
# 213
template< class > struct is_void; 
# 215
template< class > struct remove_cv; 
# 217
template< class > struct is_const; 
# 221
template< class > struct __is_array_unknown_bounds; 
# 227
template< class _Tp, size_t  = sizeof(_Tp)> constexpr true_type 
# 228
__is_complete_or_unbounded(__type_identity< _Tp> ) 
# 229
{ return {}; } 
# 231
template< class _TypeIdentity, class 
# 232
_NestedType = typename _TypeIdentity::type> constexpr typename __or_< is_reference< _NestedType> , is_function< _NestedType> , is_void< _NestedType> , __is_array_unknown_bounds< _NestedType> > ::type 
# 238
__is_complete_or_unbounded(_TypeIdentity) 
# 239
{ return {}; } 
# 246
template< class _Tp> 
# 247
struct __success_type { 
# 248
typedef _Tp type; }; 
# 250
struct __failure_type { 
# 251
}; 
# 254
template< class _Tp> using __remove_cv_t = typename remove_cv< _Tp> ::type; 
# 259
template< class > 
# 260
struct __is_void_helper : public false_type { 
# 261
}; 
# 264
template<> struct __is_void_helper< void>  : public true_type { 
# 265
}; 
# 269
template< class _Tp> 
# 270
struct is_void : public __is_void_helper< __remove_cv_t< _Tp> > ::type { 
# 272
}; 
# 275
template< class > 
# 276
struct __is_integral_helper : public false_type { 
# 277
}; 
# 280
template<> struct __is_integral_helper< bool>  : public true_type { 
# 281
}; 
# 284
template<> struct __is_integral_helper< char>  : public true_type { 
# 285
}; 
# 288
template<> struct __is_integral_helper< signed char>  : public true_type { 
# 289
}; 
# 292
template<> struct __is_integral_helper< unsigned char>  : public true_type { 
# 293
}; 
# 300
template<> struct __is_integral_helper< wchar_t>  : public true_type { 
# 301
}; 
# 311 "/usr/include/c++/11/type_traits" 3
template<> struct __is_integral_helper< char16_t>  : public true_type { 
# 312
}; 
# 315
template<> struct __is_integral_helper< char32_t>  : public true_type { 
# 316
}; 
# 319
template<> struct __is_integral_helper< short>  : public true_type { 
# 320
}; 
# 323
template<> struct __is_integral_helper< unsigned short>  : public true_type { 
# 324
}; 
# 327
template<> struct __is_integral_helper< int>  : public true_type { 
# 328
}; 
# 331
template<> struct __is_integral_helper< unsigned>  : public true_type { 
# 332
}; 
# 335
template<> struct __is_integral_helper< long>  : public true_type { 
# 336
}; 
# 339
template<> struct __is_integral_helper< unsigned long>  : public true_type { 
# 340
}; 
# 343
template<> struct __is_integral_helper< long long>  : public true_type { 
# 344
}; 
# 347
template<> struct __is_integral_helper< unsigned long long>  : public true_type { 
# 348
}; 
# 391 "/usr/include/c++/11/type_traits" 3
template< class _Tp> 
# 392
struct is_integral : public __is_integral_helper< __remove_cv_t< _Tp> > ::type { 
# 394
}; 
# 397
template< class > 
# 398
struct __is_floating_point_helper : public false_type { 
# 399
}; 
# 402
template<> struct __is_floating_point_helper< float>  : public true_type { 
# 403
}; 
# 406
template<> struct __is_floating_point_helper< double>  : public true_type { 
# 407
}; 
# 410
template<> struct __is_floating_point_helper< long double>  : public true_type { 
# 411
}; 
# 421 "/usr/include/c++/11/type_traits" 3
template< class _Tp> 
# 422
struct is_floating_point : public __is_floating_point_helper< __remove_cv_t< _Tp> > ::type { 
# 424
}; 
# 427
template< class > 
# 428
struct is_array : public false_type { 
# 429
}; 
# 431
template< class _Tp, size_t _Size> 
# 432
struct is_array< _Tp [_Size]>  : public true_type { 
# 433
}; 
# 435
template< class _Tp> 
# 436
struct is_array< _Tp []>  : public true_type { 
# 437
}; 
# 439
template< class > 
# 440
struct __is_pointer_helper : public false_type { 
# 441
}; 
# 443
template< class _Tp> 
# 444
struct __is_pointer_helper< _Tp *>  : public true_type { 
# 445
}; 
# 448
template< class _Tp> 
# 449
struct is_pointer : public __is_pointer_helper< __remove_cv_t< _Tp> > ::type { 
# 451
}; 
# 454
template< class > 
# 455
struct is_lvalue_reference : public false_type { 
# 456
}; 
# 458
template< class _Tp> 
# 459
struct is_lvalue_reference< _Tp &>  : public true_type { 
# 460
}; 
# 463
template< class > 
# 464
struct is_rvalue_reference : public false_type { 
# 465
}; 
# 467
template< class _Tp> 
# 468
struct is_rvalue_reference< _Tp &&>  : public true_type { 
# 469
}; 
# 471
template< class > 
# 472
struct __is_member_object_pointer_helper : public false_type { 
# 473
}; 
# 475
template< class _Tp, class _Cp> 
# 476
struct __is_member_object_pointer_helper< _Tp (_Cp::*)>  : public __not_< is_function< _Tp> > ::type { 
# 477
}; 
# 480
template< class _Tp> 
# 481
struct is_member_object_pointer : public __is_member_object_pointer_helper< __remove_cv_t< _Tp> > ::type { 
# 483
}; 
# 485
template< class > 
# 486
struct __is_member_function_pointer_helper : public false_type { 
# 487
}; 
# 489
template< class _Tp, class _Cp> 
# 490
struct __is_member_function_pointer_helper< _Tp (_Cp::*)>  : public is_function< _Tp> ::type { 
# 491
}; 
# 494
template< class _Tp> 
# 495
struct is_member_function_pointer : public __is_member_function_pointer_helper< __remove_cv_t< _Tp> > ::type { 
# 497
}; 
# 500
template< class _Tp> 
# 501
struct is_enum : public integral_constant< bool, __is_enum(_Tp)>  { 
# 503
}; 
# 506
template< class _Tp> 
# 507
struct is_union : public integral_constant< bool, __is_union(_Tp)>  { 
# 509
}; 
# 512
template< class _Tp> 
# 513
struct is_class : public integral_constant< bool, __is_class(_Tp)>  { 
# 515
}; 
# 518
template< class _Tp> 
# 519
struct is_function : public __bool_constant< !is_const< const _Tp> ::value>  { 
# 520
}; 
# 522
template< class _Tp> 
# 523
struct is_function< _Tp &>  : public false_type { 
# 524
}; 
# 526
template< class _Tp> 
# 527
struct is_function< _Tp &&>  : public false_type { 
# 528
}; 
# 532
template< class > 
# 533
struct __is_null_pointer_helper : public false_type { 
# 534
}; 
# 537
template<> struct __is_null_pointer_helper< __decltype((nullptr))>  : public true_type { 
# 538
}; 
# 541
template< class _Tp> 
# 542
struct is_null_pointer : public __is_null_pointer_helper< __remove_cv_t< _Tp> > ::type { 
# 544
}; 
# 548
template< class _Tp> 
# 549
struct __is_nullptr_t : public is_null_pointer< _Tp>  { 
# 551
} __attribute((__deprecated__("use \'std::is_null_pointer\' instead"))); 
# 556
template< class _Tp> 
# 557
struct is_reference : public __or_< is_lvalue_reference< _Tp> , is_rvalue_reference< _Tp> > ::type { 
# 560
}; 
# 563
template< class _Tp> 
# 564
struct is_arithmetic : public __or_< is_integral< _Tp> , is_floating_point< _Tp> > ::type { 
# 566
}; 
# 569
template< class _Tp> 
# 570
struct is_fundamental : public __or_< is_arithmetic< _Tp> , is_void< _Tp> , is_null_pointer< _Tp> > ::type { 
# 573
}; 
# 576
template< class _Tp> 
# 577
struct is_object : public __not_< __or_< is_function< _Tp> , is_reference< _Tp> , is_void< _Tp> > > ::type { 
# 580
}; 
# 582
template< class > struct is_member_pointer; 
# 586
template< class _Tp> 
# 587
struct is_scalar : public __or_< is_arithmetic< _Tp> , is_enum< _Tp> , is_pointer< _Tp> , is_member_pointer< _Tp> , is_null_pointer< _Tp> > ::type { 
# 590
}; 
# 593
template< class _Tp> 
# 594
struct is_compound : public __not_< is_fundamental< _Tp> > ::type { 
# 595
}; 
# 598
template< class _Tp> 
# 599
struct __is_member_pointer_helper : public false_type { 
# 600
}; 
# 602
template< class _Tp, class _Cp> 
# 603
struct __is_member_pointer_helper< _Tp (_Cp::*)>  : public true_type { 
# 604
}; 
# 608
template< class _Tp> 
# 609
struct is_member_pointer : public __is_member_pointer_helper< __remove_cv_t< _Tp> > ::type { 
# 611
}; 
# 613
template< class , class > struct is_same; 
# 617
template< class _Tp, class ..._Types> using __is_one_of = __or_< is_same< _Tp, _Types> ...> ; 
# 621
template< class _Tp> using __is_signed_integer = __is_one_of< __remove_cv_t< _Tp> , signed char, signed short, signed int, signed long, signed long long> ; 
# 640 "/usr/include/c++/11/type_traits" 3
template< class _Tp> using __is_unsigned_integer = __is_one_of< __remove_cv_t< _Tp> , unsigned char, unsigned short, unsigned, unsigned long, unsigned long long> ; 
# 659 "/usr/include/c++/11/type_traits" 3
template< class _Tp> using __is_standard_integer = __or_< __is_signed_integer< _Tp> , __is_unsigned_integer< _Tp> > ; 
# 664
template< class ...> using __void_t = void; 
# 668
template< class _Tp, class  = void> 
# 669
struct __is_referenceable : public false_type { 
# 671
}; 
# 673
template< class _Tp> 
# 674
struct __is_referenceable< _Tp, __void_t< _Tp &> >  : public true_type { 
# 676
}; 
# 682
template< class > 
# 683
struct is_const : public false_type { 
# 684
}; 
# 686
template< class _Tp> 
# 687
struct is_const< const _Tp>  : public true_type { 
# 688
}; 
# 691
template< class > 
# 692
struct is_volatile : public false_type { 
# 693
}; 
# 695
template< class _Tp> 
# 696
struct is_volatile< volatile _Tp>  : public true_type { 
# 697
}; 
# 700
template< class _Tp> 
# 701
struct is_trivial : public integral_constant< bool, __is_trivial(_Tp)>  { 
# 704
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 706
}; 
# 709
template< class _Tp> 
# 710
struct is_trivially_copyable : public integral_constant< bool, __is_trivially_copyable(_Tp)>  { 
# 713
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 715
}; 
# 718
template< class _Tp> 
# 719
struct is_standard_layout : public integral_constant< bool, __is_standard_layout(_Tp)>  { 
# 722
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 724
}; 
# 730
template< class _Tp> 
# 733
struct is_pod : public integral_constant< bool, __is_pod(_Tp)>  { 
# 736
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 738
}; 
# 743
template< class _Tp> 
# 746
struct
# 745
 [[__deprecated__]] is_literal_type : public integral_constant< bool, __is_literal_type(_Tp)>  { 
# 749
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 751
}; 
# 754
template< class _Tp> 
# 755
struct is_empty : public integral_constant< bool, __is_empty(_Tp)>  { 
# 757
}; 
# 760
template< class _Tp> 
# 761
struct is_polymorphic : public integral_constant< bool, __is_polymorphic(_Tp)>  { 
# 763
}; 
# 769
template< class _Tp> 
# 770
struct is_final : public integral_constant< bool, __is_final(_Tp)>  { 
# 772
}; 
# 776
template< class _Tp> 
# 777
struct is_abstract : public integral_constant< bool, __is_abstract(_Tp)>  { 
# 779
}; 
# 782
template< class _Tp, bool 
# 783
 = is_arithmetic< _Tp> ::value> 
# 784
struct __is_signed_helper : public false_type { 
# 785
}; 
# 787
template< class _Tp> 
# 788
struct __is_signed_helper< _Tp, true>  : public integral_constant< bool, ((_Tp)(-1)) < ((_Tp)0)>  { 
# 790
}; 
# 794
template< class _Tp> 
# 795
struct is_signed : public __is_signed_helper< _Tp> ::type { 
# 797
}; 
# 800
template< class _Tp> 
# 801
struct is_unsigned : public __and_< is_arithmetic< _Tp> , __not_< is_signed< _Tp> > >  { 
# 803
}; 
# 806
template< class _Tp, class _Up = _Tp &&> _Up __declval(int); 
# 810
template< class _Tp> _Tp __declval(long); 
# 815
template< class _Tp> auto declval() noexcept->__decltype((__declval< _Tp> (0))); 
# 818
template< class , unsigned  = 0U> struct extent; 
# 821
template< class > struct remove_all_extents; 
# 825
template< class _Tp> 
# 826
struct __is_array_known_bounds : public integral_constant< bool, (extent< _Tp> ::value > 0)>  { 
# 828
}; 
# 830
template< class _Tp> 
# 831
struct __is_array_unknown_bounds : public __and_< is_array< _Tp> , __not_< extent< _Tp> > >  { 
# 833
}; 
# 842 "/usr/include/c++/11/type_traits" 3
struct __do_is_destructible_impl { 
# 844
template< class _Tp, class  = __decltype((declval< _Tp &> ().~_Tp()))> static true_type __test(int); 
# 847
template< class > static false_type __test(...); 
# 849
}; 
# 851
template< class _Tp> 
# 852
struct __is_destructible_impl : public __do_is_destructible_impl { 
# 855
typedef __decltype((__test< _Tp> (0))) type; 
# 856
}; 
# 858
template< class _Tp, bool 
# 859
 = __or_< is_void< _Tp> , __is_array_unknown_bounds< _Tp> , is_function< _Tp> > ::value, bool 
# 862
 = __or_< is_reference< _Tp> , is_scalar< _Tp> > ::value> struct __is_destructible_safe; 
# 865
template< class _Tp> 
# 866
struct __is_destructible_safe< _Tp, false, false>  : public __is_destructible_impl< typename remove_all_extents< _Tp> ::type> ::type { 
# 869
}; 
# 871
template< class _Tp> 
# 872
struct __is_destructible_safe< _Tp, true, false>  : public false_type { 
# 873
}; 
# 875
template< class _Tp> 
# 876
struct __is_destructible_safe< _Tp, false, true>  : public true_type { 
# 877
}; 
# 881
template< class _Tp> 
# 882
struct is_destructible : public __is_destructible_safe< _Tp> ::type { 
# 885
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 887
}; 
# 895
struct __do_is_nt_destructible_impl { 
# 897
template< class _Tp> static __bool_constant< noexcept(declval< _Tp &> ().~_Tp())>  __test(int); 
# 901
template< class > static false_type __test(...); 
# 903
}; 
# 905
template< class _Tp> 
# 906
struct __is_nt_destructible_impl : public __do_is_nt_destructible_impl { 
# 909
typedef __decltype((__test< _Tp> (0))) type; 
# 910
}; 
# 912
template< class _Tp, bool 
# 913
 = __or_< is_void< _Tp> , __is_array_unknown_bounds< _Tp> , is_function< _Tp> > ::value, bool 
# 916
 = __or_< is_reference< _Tp> , is_scalar< _Tp> > ::value> struct __is_nt_destructible_safe; 
# 919
template< class _Tp> 
# 920
struct __is_nt_destructible_safe< _Tp, false, false>  : public __is_nt_destructible_impl< typename remove_all_extents< _Tp> ::type> ::type { 
# 923
}; 
# 925
template< class _Tp> 
# 926
struct __is_nt_destructible_safe< _Tp, true, false>  : public false_type { 
# 927
}; 
# 929
template< class _Tp> 
# 930
struct __is_nt_destructible_safe< _Tp, false, true>  : public true_type { 
# 931
}; 
# 935
template< class _Tp> 
# 936
struct is_nothrow_destructible : public __is_nt_destructible_safe< _Tp> ::type { 
# 939
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 941
}; 
# 944
template< class _Tp, class ..._Args> 
# 945
struct __is_constructible_impl : public __bool_constant< __is_constructible(_Tp, _Args...)>  { 
# 947
}; 
# 951
template< class _Tp, class ..._Args> 
# 952
struct is_constructible : public __is_constructible_impl< _Tp, _Args...>  { 
# 955
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 957
}; 
# 960
template< class _Tp> 
# 961
struct is_default_constructible : public __is_constructible_impl< _Tp> ::type { 
# 964
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 966
}; 
# 969
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_copy_constructible_impl; 
# 972
template< class _Tp> 
# 973
struct __is_copy_constructible_impl< _Tp, false>  : public false_type { 
# 974
}; 
# 976
template< class _Tp> 
# 977
struct __is_copy_constructible_impl< _Tp, true>  : public __is_constructible_impl< _Tp, const _Tp &>  { 
# 979
}; 
# 983
template< class _Tp> 
# 984
struct is_copy_constructible : public __is_copy_constructible_impl< _Tp>  { 
# 987
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 989
}; 
# 992
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_move_constructible_impl; 
# 995
template< class _Tp> 
# 996
struct __is_move_constructible_impl< _Tp, false>  : public false_type { 
# 997
}; 
# 999
template< class _Tp> 
# 1000
struct __is_move_constructible_impl< _Tp, true>  : public __is_constructible_impl< _Tp, _Tp &&>  { 
# 1002
}; 
# 1006
template< class _Tp> 
# 1007
struct is_move_constructible : public __is_move_constructible_impl< _Tp>  { 
# 1010
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1012
}; 
# 1015
template< class _Tp, class ..._Args> using __is_nothrow_constructible_impl = __bool_constant< __is_nothrow_constructible(_Tp, _Args...)> ; 
# 1021
template< class _Tp, class ..._Args> 
# 1022
struct is_nothrow_constructible : public __is_nothrow_constructible_impl< _Tp, _Args...> ::type { 
# 1025
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1027
}; 
# 1030
template< class _Tp> 
# 1031
struct is_nothrow_default_constructible : public __bool_constant< __is_nothrow_constructible(_Tp)>  { 
# 1034
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1036
}; 
# 1039
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_nothrow_copy_constructible_impl; 
# 1042
template< class _Tp> 
# 1043
struct __is_nothrow_copy_constructible_impl< _Tp, false>  : public false_type { 
# 1044
}; 
# 1046
template< class _Tp> 
# 1047
struct __is_nothrow_copy_constructible_impl< _Tp, true>  : public __is_nothrow_constructible_impl< _Tp, const _Tp &>  { 
# 1049
}; 
# 1053
template< class _Tp> 
# 1054
struct is_nothrow_copy_constructible : public __is_nothrow_copy_constructible_impl< _Tp> ::type { 
# 1057
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1059
}; 
# 1062
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_nothrow_move_constructible_impl; 
# 1065
template< class _Tp> 
# 1066
struct __is_nothrow_move_constructible_impl< _Tp, false>  : public false_type { 
# 1067
}; 
# 1069
template< class _Tp> 
# 1070
struct __is_nothrow_move_constructible_impl< _Tp, true>  : public __is_nothrow_constructible_impl< _Tp, _Tp &&>  { 
# 1072
}; 
# 1076
template< class _Tp> 
# 1077
struct is_nothrow_move_constructible : public __is_nothrow_move_constructible_impl< _Tp> ::type { 
# 1080
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1082
}; 
# 1085
template< class _Tp, class _Up> 
# 1086
struct is_assignable : public __bool_constant< __is_assignable(_Tp, _Up)>  { 
# 1089
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1091
}; 
# 1093
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_copy_assignable_impl; 
# 1096
template< class _Tp> 
# 1097
struct __is_copy_assignable_impl< _Tp, false>  : public false_type { 
# 1098
}; 
# 1100
template< class _Tp> 
# 1101
struct __is_copy_assignable_impl< _Tp, true>  : public __bool_constant< __is_assignable(_Tp &, const _Tp &)>  { 
# 1103
}; 
# 1106
template< class _Tp> 
# 1107
struct is_copy_assignable : public __is_copy_assignable_impl< _Tp> ::type { 
# 1110
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1112
}; 
# 1114
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_move_assignable_impl; 
# 1117
template< class _Tp> 
# 1118
struct __is_move_assignable_impl< _Tp, false>  : public false_type { 
# 1119
}; 
# 1121
template< class _Tp> 
# 1122
struct __is_move_assignable_impl< _Tp, true>  : public __bool_constant< __is_assignable(_Tp &, _Tp &&)>  { 
# 1124
}; 
# 1127
template< class _Tp> 
# 1128
struct is_move_assignable : public __is_move_assignable_impl< _Tp> ::type { 
# 1131
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1133
}; 
# 1135
template< class _Tp, class _Up> using __is_nothrow_assignable_impl = __bool_constant< __is_nothrow_assignable(_Tp, _Up)> ; 
# 1140
template< class _Tp, class _Up> 
# 1141
struct is_nothrow_assignable : public __is_nothrow_assignable_impl< _Tp, _Up>  { 
# 1144
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1146
}; 
# 1148
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_nt_copy_assignable_impl; 
# 1151
template< class _Tp> 
# 1152
struct __is_nt_copy_assignable_impl< _Tp, false>  : public false_type { 
# 1153
}; 
# 1155
template< class _Tp> 
# 1156
struct __is_nt_copy_assignable_impl< _Tp, true>  : public __is_nothrow_assignable_impl< _Tp &, const _Tp &>  { 
# 1158
}; 
# 1161
template< class _Tp> 
# 1162
struct is_nothrow_copy_assignable : public __is_nt_copy_assignable_impl< _Tp>  { 
# 1165
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1167
}; 
# 1169
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_nt_move_assignable_impl; 
# 1172
template< class _Tp> 
# 1173
struct __is_nt_move_assignable_impl< _Tp, false>  : public false_type { 
# 1174
}; 
# 1176
template< class _Tp> 
# 1177
struct __is_nt_move_assignable_impl< _Tp, true>  : public __is_nothrow_assignable_impl< _Tp &, _Tp &&>  { 
# 1179
}; 
# 1182
template< class _Tp> 
# 1183
struct is_nothrow_move_assignable : public __is_nt_move_assignable_impl< _Tp>  { 
# 1186
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1188
}; 
# 1191
template< class _Tp, class ..._Args> 
# 1192
struct is_trivially_constructible : public __bool_constant< __is_trivially_constructible(_Tp, _Args...)>  { 
# 1195
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1197
}; 
# 1200
template< class _Tp> 
# 1201
struct is_trivially_default_constructible : public __bool_constant< __is_trivially_constructible(_Tp)>  { 
# 1204
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1206
}; 
# 1208
struct __do_is_implicitly_default_constructible_impl { 
# 1210
template< class _Tp> static void __helper(const _Tp &); 
# 1213
template< class _Tp> static true_type __test(const _Tp &, __decltype((__helper< const _Tp &> ({}))) * = 0); 
# 1217
static false_type __test(...); 
# 1218
}; 
# 1220
template< class _Tp> 
# 1221
struct __is_implicitly_default_constructible_impl : public __do_is_implicitly_default_constructible_impl { 
# 1224
typedef __decltype((__test(declval< _Tp> ()))) type; 
# 1225
}; 
# 1227
template< class _Tp> 
# 1228
struct __is_implicitly_default_constructible_safe : public __is_implicitly_default_constructible_impl< _Tp> ::type { 
# 1230
}; 
# 1232
template< class _Tp> 
# 1233
struct __is_implicitly_default_constructible : public __and_< __is_constructible_impl< _Tp> , __is_implicitly_default_constructible_safe< _Tp> >  { 
# 1236
}; 
# 1238
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_trivially_copy_constructible_impl; 
# 1241
template< class _Tp> 
# 1242
struct __is_trivially_copy_constructible_impl< _Tp, false>  : public false_type { 
# 1243
}; 
# 1245
template< class _Tp> 
# 1246
struct __is_trivially_copy_constructible_impl< _Tp, true>  : public __and_< __is_copy_constructible_impl< _Tp> , integral_constant< bool, __is_trivially_constructible(_Tp, const _Tp &)> >  { 
# 1250
}; 
# 1253
template< class _Tp> 
# 1254
struct is_trivially_copy_constructible : public __is_trivially_copy_constructible_impl< _Tp>  { 
# 1257
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1259
}; 
# 1261
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_trivially_move_constructible_impl; 
# 1264
template< class _Tp> 
# 1265
struct __is_trivially_move_constructible_impl< _Tp, false>  : public false_type { 
# 1266
}; 
# 1268
template< class _Tp> 
# 1269
struct __is_trivially_move_constructible_impl< _Tp, true>  : public __and_< __is_move_constructible_impl< _Tp> , integral_constant< bool, __is_trivially_constructible(_Tp, _Tp &&)> >  { 
# 1273
}; 
# 1276
template< class _Tp> 
# 1277
struct is_trivially_move_constructible : public __is_trivially_move_constructible_impl< _Tp>  { 
# 1280
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1282
}; 
# 1285
template< class _Tp, class _Up> 
# 1286
struct is_trivially_assignable : public __bool_constant< __is_trivially_assignable(_Tp, _Up)>  { 
# 1289
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1291
}; 
# 1293
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_trivially_copy_assignable_impl; 
# 1296
template< class _Tp> 
# 1297
struct __is_trivially_copy_assignable_impl< _Tp, false>  : public false_type { 
# 1298
}; 
# 1300
template< class _Tp> 
# 1301
struct __is_trivially_copy_assignable_impl< _Tp, true>  : public __bool_constant< __is_trivially_assignable(_Tp &, const _Tp &)>  { 
# 1303
}; 
# 1306
template< class _Tp> 
# 1307
struct is_trivially_copy_assignable : public __is_trivially_copy_assignable_impl< _Tp>  { 
# 1310
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1312
}; 
# 1314
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_trivially_move_assignable_impl; 
# 1317
template< class _Tp> 
# 1318
struct __is_trivially_move_assignable_impl< _Tp, false>  : public false_type { 
# 1319
}; 
# 1321
template< class _Tp> 
# 1322
struct __is_trivially_move_assignable_impl< _Tp, true>  : public __bool_constant< __is_trivially_assignable(_Tp &, _Tp &&)>  { 
# 1324
}; 
# 1327
template< class _Tp> 
# 1328
struct is_trivially_move_assignable : public __is_trivially_move_assignable_impl< _Tp>  { 
# 1331
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1333
}; 
# 1336
template< class _Tp> 
# 1337
struct is_trivially_destructible : public __and_< __is_destructible_safe< _Tp> , __bool_constant< __has_trivial_destructor(_Tp)> >  { 
# 1341
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1343
}; 
# 1347
template< class _Tp> 
# 1348
struct has_virtual_destructor : public integral_constant< bool, __has_virtual_destructor(_Tp)>  { 
# 1351
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1353
}; 
# 1359
template< class _Tp> 
# 1360
struct alignment_of : public integral_constant< unsigned long, __alignof__(_Tp)>  { 
# 1363
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1365
}; 
# 1368
template< class > 
# 1369
struct rank : public integral_constant< unsigned long, 0UL>  { 
# 1370
}; 
# 1372
template< class _Tp, size_t _Size> 
# 1373
struct rank< _Tp [_Size]>  : public integral_constant< unsigned long, 1 + std::rank< _Tp> ::value>  { 
# 1374
}; 
# 1376
template< class _Tp> 
# 1377
struct rank< _Tp []>  : public integral_constant< unsigned long, 1 + std::rank< _Tp> ::value>  { 
# 1378
}; 
# 1381
template< class , unsigned _Uint> 
# 1382
struct extent : public integral_constant< unsigned long, 0UL>  { 
# 1383
}; 
# 1385
template< class _Tp, unsigned _Uint, size_t _Size> 
# 1386
struct extent< _Tp [_Size], _Uint>  : public integral_constant< unsigned long, (_Uint == (0)) ? _Size : std::extent< _Tp, _Uint - (1)> ::value>  { 
# 1390
}; 
# 1392
template< class _Tp, unsigned _Uint> 
# 1393
struct extent< _Tp [], _Uint>  : public integral_constant< unsigned long, (_Uint == (0)) ? 0 : std::extent< _Tp, _Uint - (1)> ::value>  { 
# 1397
}; 
# 1403
template< class _Tp, class _Up> 
# 1404
struct is_same : public integral_constant< bool, __is_same(_Tp, _Up)>  { 
# 1410
}; 
# 1420 "/usr/include/c++/11/type_traits" 3
template< class _Base, class _Derived> 
# 1421
struct is_base_of : public integral_constant< bool, __is_base_of(_Base, _Derived)>  { 
# 1423
}; 
# 1425
template< class _From, class _To, bool 
# 1426
 = __or_< is_void< _From> , is_function< _To> , is_array< _To> > ::value> 
# 1428
struct __is_convertible_helper { 
# 1430
typedef typename is_void< _To> ::type type; 
# 1431
}; 
# 1433
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wctor-dtor-privacy"
template< class _From, class _To> 
# 1436
class __is_convertible_helper< _From, _To, false>  { 
# 1438
template< class _To1> static void __test_aux(_To1) noexcept; 
# 1441
template< class _From1, class _To1, class 
# 1442
 = __decltype((__test_aux< _To1> (std::declval< _From1> ())))> static true_type 
# 1441
__test(int); 
# 1446
template< class , class > static false_type __test(...); 
# 1451
public: typedef __decltype((__test< _From, _To> (0))) type; 
# 1452
}; 
#pragma GCC diagnostic pop
# 1456
template< class _From, class _To> 
# 1457
struct is_convertible : public __is_convertible_helper< _From, _To> ::type { 
# 1459
}; 
# 1462
template< class _ToElementType, class _FromElementType> using __is_array_convertible = is_convertible< _FromElementType (*)[], _ToElementType (*)[]> ; 
# 1466
template< class _From, class _To, bool 
# 1467
 = __or_< is_void< _From> , is_function< _To> , is_array< _To> > ::value> 
# 1469
struct __is_nt_convertible_helper : public is_void< _To>  { 
# 1471
}; 
# 1473
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wctor-dtor-privacy"
template< class _From, class _To> 
# 1476
class __is_nt_convertible_helper< _From, _To, false>  { 
# 1478
template< class _To1> static void __test_aux(_To1) noexcept; 
# 1481
template< class _From1, class _To1> static __bool_constant< noexcept(__test_aux< _To1> (std::declval< _From1> ()))>  __test(int); 
# 1486
template< class , class > static false_type __test(...); 
# 1491
public: using type = __decltype((__test< _From, _To> (0))); 
# 1492
}; 
#pragma GCC diagnostic pop
# 1512 "/usr/include/c++/11/type_traits" 3
template< class _Tp> 
# 1513
struct remove_const { 
# 1514
typedef _Tp type; }; 
# 1516
template< class _Tp> 
# 1517
struct remove_const< const _Tp>  { 
# 1518
typedef _Tp type; }; 
# 1521
template< class _Tp> 
# 1522
struct remove_volatile { 
# 1523
typedef _Tp type; }; 
# 1525
template< class _Tp> 
# 1526
struct remove_volatile< volatile _Tp>  { 
# 1527
typedef _Tp type; }; 
# 1530
template< class _Tp> 
# 1531
struct remove_cv { 
# 1532
using type = _Tp; }; 
# 1534
template< class _Tp> 
# 1535
struct remove_cv< const _Tp>  { 
# 1536
using type = _Tp; }; 
# 1538
template< class _Tp> 
# 1539
struct remove_cv< volatile _Tp>  { 
# 1540
using type = _Tp; }; 
# 1542
template< class _Tp> 
# 1543
struct remove_cv< const volatile _Tp>  { 
# 1544
using type = _Tp; }; 
# 1547
template< class _Tp> 
# 1548
struct add_const { 
# 1549
typedef const _Tp type; }; 
# 1552
template< class _Tp> 
# 1553
struct add_volatile { 
# 1554
typedef volatile _Tp type; }; 
# 1557
template< class _Tp> 
# 1558
struct add_cv { 
# 1561
typedef typename add_const< typename add_volatile< _Tp> ::type> ::type type; 
# 1562
}; 
# 1569
template< class _Tp> using remove_const_t = typename remove_const< _Tp> ::type; 
# 1573
template< class _Tp> using remove_volatile_t = typename remove_volatile< _Tp> ::type; 
# 1577
template< class _Tp> using remove_cv_t = typename remove_cv< _Tp> ::type; 
# 1581
template< class _Tp> using add_const_t = typename add_const< _Tp> ::type; 
# 1585
template< class _Tp> using add_volatile_t = typename add_volatile< _Tp> ::type; 
# 1589
template< class _Tp> using add_cv_t = typename add_cv< _Tp> ::type; 
# 1596
template< class _Tp> 
# 1597
struct remove_reference { 
# 1598
typedef _Tp type; }; 
# 1600
template< class _Tp> 
# 1601
struct remove_reference< _Tp &>  { 
# 1602
typedef _Tp type; }; 
# 1604
template< class _Tp> 
# 1605
struct remove_reference< _Tp &&>  { 
# 1606
typedef _Tp type; }; 
# 1608
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> 
# 1609
struct __add_lvalue_reference_helper { 
# 1610
typedef _Tp type; }; 
# 1612
template< class _Tp> 
# 1613
struct __add_lvalue_reference_helper< _Tp, true>  { 
# 1614
typedef _Tp &type; }; 
# 1617
template< class _Tp> 
# 1618
struct add_lvalue_reference : public __add_lvalue_reference_helper< _Tp>  { 
# 1620
}; 
# 1622
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> 
# 1623
struct __add_rvalue_reference_helper { 
# 1624
typedef _Tp type; }; 
# 1626
template< class _Tp> 
# 1627
struct __add_rvalue_reference_helper< _Tp, true>  { 
# 1628
typedef _Tp &&type; }; 
# 1631
template< class _Tp> 
# 1632
struct add_rvalue_reference : public __add_rvalue_reference_helper< _Tp>  { 
# 1634
}; 
# 1638
template< class _Tp> using remove_reference_t = typename remove_reference< _Tp> ::type; 
# 1642
template< class _Tp> using add_lvalue_reference_t = typename add_lvalue_reference< _Tp> ::type; 
# 1646
template< class _Tp> using add_rvalue_reference_t = typename add_rvalue_reference< _Tp> ::type; 
# 1655
template< class _Unqualified, bool _IsConst, bool _IsVol> struct __cv_selector; 
# 1658
template< class _Unqualified> 
# 1659
struct __cv_selector< _Unqualified, false, false>  { 
# 1660
typedef _Unqualified __type; }; 
# 1662
template< class _Unqualified> 
# 1663
struct __cv_selector< _Unqualified, false, true>  { 
# 1664
typedef volatile _Unqualified __type; }; 
# 1666
template< class _Unqualified> 
# 1667
struct __cv_selector< _Unqualified, true, false>  { 
# 1668
typedef const _Unqualified __type; }; 
# 1670
template< class _Unqualified> 
# 1671
struct __cv_selector< _Unqualified, true, true>  { 
# 1672
typedef const volatile _Unqualified __type; }; 
# 1674
template< class _Qualified, class _Unqualified, bool 
# 1675
_IsConst = is_const< _Qualified> ::value, bool 
# 1676
_IsVol = is_volatile< _Qualified> ::value> 
# 1677
class __match_cv_qualifiers { 
# 1679
typedef __cv_selector< _Unqualified, _IsConst, _IsVol>  __match; 
# 1682
public: typedef typename __cv_selector< _Unqualified, _IsConst, _IsVol> ::__type __type; 
# 1683
}; 
# 1686
template< class _Tp> 
# 1687
struct __make_unsigned { 
# 1688
typedef _Tp __type; }; 
# 1691
template<> struct __make_unsigned< char>  { 
# 1692
typedef unsigned char __type; }; 
# 1695
template<> struct __make_unsigned< signed char>  { 
# 1696
typedef unsigned char __type; }; 
# 1699
template<> struct __make_unsigned< short>  { 
# 1700
typedef unsigned short __type; }; 
# 1703
template<> struct __make_unsigned< int>  { 
# 1704
typedef unsigned __type; }; 
# 1707
template<> struct __make_unsigned< long>  { 
# 1708
typedef unsigned long __type; }; 
# 1711
template<> struct __make_unsigned< long long>  { 
# 1712
typedef unsigned long long __type; }; 
# 1736 "/usr/include/c++/11/type_traits" 3
template< class _Tp, bool 
# 1737
_IsInt = is_integral< _Tp> ::value, bool 
# 1738
_IsEnum = is_enum< _Tp> ::value> class __make_unsigned_selector; 
# 1741
template< class _Tp> 
# 1742
class __make_unsigned_selector< _Tp, true, false>  { 
# 1744
using __unsigned_type = typename __make_unsigned< __remove_cv_t< _Tp> > ::__type; 
# 1748
public: using __type = typename __match_cv_qualifiers< _Tp, __unsigned_type> ::__type; 
# 1750
}; 
# 1752
class __make_unsigned_selector_base { 
# 1755
protected: template< class ...> struct _List { }; 
# 1757
template< class _Tp, class ..._Up> 
# 1758
struct _List< _Tp, _Up...>  : public __make_unsigned_selector_base::template _List< _Up...>  { 
# 1759
static constexpr inline std::size_t __size = sizeof(_Tp); }; 
# 1761
template< size_t _Sz, class _Tp, bool  = _Sz <= _Tp::__size> struct __select; 
# 1764
template< size_t _Sz, class _Uint, class ..._UInts> 
# 1765
struct __select< _Sz, _List< _Uint, _UInts...> , true>  { 
# 1766
using __type = _Uint; }; 
# 1768
template< size_t _Sz, class _Uint, class ..._UInts> 
# 1769
struct __select< _Sz, _List< _Uint, _UInts...> , false>  : public __make_unsigned_selector_base::template __select< _Sz, _List< _UInts...> >  { 
# 1771
}; 
# 1772
}; 
# 1775
template< class _Tp> 
# 1776
class __make_unsigned_selector< _Tp, false, true>  : private __make_unsigned_selector_base { 
# 1780
using _UInts = _List< unsigned char, unsigned short, unsigned, unsigned long, unsigned long long> ; 
# 1783
using __unsigned_type = typename __select< sizeof(_Tp), _List< unsigned char, unsigned short, unsigned, unsigned long, unsigned long long> > ::__type; 
# 1786
public: using __type = typename __match_cv_qualifiers< _Tp, __unsigned_type> ::__type; 
# 1788
}; 
# 1796
template<> struct __make_unsigned< wchar_t>  { 
# 1798
using __type = __make_unsigned_selector< wchar_t, false, true> ::__type; 
# 1800
}; 
# 1813 "/usr/include/c++/11/type_traits" 3
template<> struct __make_unsigned< char16_t>  { 
# 1815
using __type = __make_unsigned_selector< char16_t, false, true> ::__type; 
# 1817
}; 
# 1820
template<> struct __make_unsigned< char32_t>  { 
# 1822
using __type = __make_unsigned_selector< char32_t, false, true> ::__type; 
# 1824
}; 
# 1831
template< class _Tp> 
# 1832
struct make_unsigned { 
# 1833
typedef typename __make_unsigned_selector< _Tp> ::__type type; }; 
# 1837
template<> struct make_unsigned< bool> ; 
# 1842
template< class _Tp> 
# 1843
struct __make_signed { 
# 1844
typedef _Tp __type; }; 
# 1847
template<> struct __make_signed< char>  { 
# 1848
typedef signed char __type; }; 
# 1851
template<> struct __make_signed< unsigned char>  { 
# 1852
typedef signed char __type; }; 
# 1855
template<> struct __make_signed< unsigned short>  { 
# 1856
typedef signed short __type; }; 
# 1859
template<> struct __make_signed< unsigned>  { 
# 1860
typedef signed int __type; }; 
# 1863
template<> struct __make_signed< unsigned long>  { 
# 1864
typedef signed long __type; }; 
# 1867
template<> struct __make_signed< unsigned long long>  { 
# 1868
typedef signed long long __type; }; 
# 1892 "/usr/include/c++/11/type_traits" 3
template< class _Tp, bool 
# 1893
_IsInt = is_integral< _Tp> ::value, bool 
# 1894
_IsEnum = is_enum< _Tp> ::value> class __make_signed_selector; 
# 1897
template< class _Tp> 
# 1898
class __make_signed_selector< _Tp, true, false>  { 
# 1900
using __signed_type = typename __make_signed< __remove_cv_t< _Tp> > ::__type; 
# 1904
public: using __type = typename __match_cv_qualifiers< _Tp, __signed_type> ::__type; 
# 1906
}; 
# 1909
template< class _Tp> 
# 1910
class __make_signed_selector< _Tp, false, true>  { 
# 1912
typedef typename __make_unsigned_selector< _Tp> ::__type __unsigned_type; 
# 1915
public: typedef typename std::__make_signed_selector< __unsigned_type> ::__type __type; 
# 1916
}; 
# 1924
template<> struct __make_signed< wchar_t>  { 
# 1926
using __type = __make_signed_selector< wchar_t, false, true> ::__type; 
# 1928
}; 
# 1941 "/usr/include/c++/11/type_traits" 3
template<> struct __make_signed< char16_t>  { 
# 1943
using __type = __make_signed_selector< char16_t, false, true> ::__type; 
# 1945
}; 
# 1948
template<> struct __make_signed< char32_t>  { 
# 1950
using __type = __make_signed_selector< char32_t, false, true> ::__type; 
# 1952
}; 
# 1959
template< class _Tp> 
# 1960
struct make_signed { 
# 1961
typedef typename __make_signed_selector< _Tp> ::__type type; }; 
# 1965
template<> struct make_signed< bool> ; 
# 1969
template< class _Tp> using make_signed_t = typename make_signed< _Tp> ::type; 
# 1973
template< class _Tp> using make_unsigned_t = typename make_unsigned< _Tp> ::type; 
# 1980
template< class _Tp> 
# 1981
struct remove_extent { 
# 1982
typedef _Tp type; }; 
# 1984
template< class _Tp, size_t _Size> 
# 1985
struct remove_extent< _Tp [_Size]>  { 
# 1986
typedef _Tp type; }; 
# 1988
template< class _Tp> 
# 1989
struct remove_extent< _Tp []>  { 
# 1990
typedef _Tp type; }; 
# 1993
template< class _Tp> 
# 1994
struct remove_all_extents { 
# 1995
typedef _Tp type; }; 
# 1997
template< class _Tp, size_t _Size> 
# 1998
struct remove_all_extents< _Tp [_Size]>  { 
# 1999
typedef typename std::remove_all_extents< _Tp> ::type type; }; 
# 2001
template< class _Tp> 
# 2002
struct remove_all_extents< _Tp []>  { 
# 2003
typedef typename std::remove_all_extents< _Tp> ::type type; }; 
# 2007
template< class _Tp> using remove_extent_t = typename remove_extent< _Tp> ::type; 
# 2011
template< class _Tp> using remove_all_extents_t = typename remove_all_extents< _Tp> ::type; 
# 2017
template< class _Tp, class > 
# 2018
struct __remove_pointer_helper { 
# 2019
typedef _Tp type; }; 
# 2021
template< class _Tp, class _Up> 
# 2022
struct __remove_pointer_helper< _Tp, _Up *>  { 
# 2023
typedef _Up type; }; 
# 2026
template< class _Tp> 
# 2027
struct remove_pointer : public __remove_pointer_helper< _Tp, __remove_cv_t< _Tp> >  { 
# 2029
}; 
# 2031
template< class _Tp, bool  = __or_< __is_referenceable< _Tp> , is_void< _Tp> > ::value> 
# 2033
struct __add_pointer_helper { 
# 2034
typedef _Tp type; }; 
# 2036
template< class _Tp> 
# 2037
struct __add_pointer_helper< _Tp, true>  { 
# 2038
typedef typename remove_reference< _Tp> ::type *type; }; 
# 2041
template< class _Tp> 
# 2042
struct add_pointer : public __add_pointer_helper< _Tp>  { 
# 2044
}; 
# 2048
template< class _Tp> using remove_pointer_t = typename remove_pointer< _Tp> ::type; 
# 2052
template< class _Tp> using add_pointer_t = typename add_pointer< _Tp> ::type; 
# 2056
template< size_t _Len> 
# 2057
struct __aligned_storage_msa { 
# 2059
union __type { 
# 2061
unsigned char __data[_Len]; 
# 2062
struct __attribute((__aligned__)) { } __align; 
# 2063
}; 
# 2064
}; 
# 2076 "/usr/include/c++/11/type_traits" 3
template< size_t _Len, size_t _Align = __alignof__(typename __aligned_storage_msa< _Len> ::__type)> 
# 2078
struct aligned_storage { 
# 2080
union type { 
# 2082
unsigned char __data[_Len]; 
# 2083
struct __attribute((__aligned__(_Align))) { } __align; 
# 2084
}; 
# 2085
}; 
# 2087
template< class ..._Types> 
# 2088
struct __strictest_alignment { 
# 2090
static const size_t _S_alignment = (0); 
# 2091
static const size_t _S_size = (0); 
# 2092
}; 
# 2094
template< class _Tp, class ..._Types> 
# 2095
struct __strictest_alignment< _Tp, _Types...>  { 
# 2097
static const size_t _S_alignment = ((__alignof__(_Tp) > __strictest_alignment< _Types...> ::_S_alignment) ? __alignof__(_Tp) : __strictest_alignment< _Types...> ::_S_alignment); 
# 2100
static const size_t _S_size = ((sizeof(_Tp) > __strictest_alignment< _Types...> ::_S_size) ? sizeof(_Tp) : __strictest_alignment< _Types...> ::_S_size); 
# 2103
}; 
# 2115 "/usr/include/c++/11/type_traits" 3
template< size_t _Len, class ..._Types> 
# 2116
struct aligned_union { 
# 2119
static_assert((sizeof...(_Types) != (0)), "At least one type is required");
# 2121
private: using __strictest = __strictest_alignment< _Types...> ; 
# 2122
static const size_t _S_len = ((_Len > __strictest::_S_size) ? _Len : __strictest::_S_size); 
# 2126
public: static const size_t alignment_value = (__strictest::_S_alignment); 
# 2128
typedef typename aligned_storage< _S_len, alignment_value> ::type type; 
# 2129
}; 
# 2131
template< size_t _Len, class ..._Types> const size_t aligned_union< _Len, _Types...> ::alignment_value; 
# 2138
template< class _Up, bool 
# 2139
_IsArray = is_array< _Up> ::value, bool 
# 2140
_IsFunction = is_function< _Up> ::value> struct __decay_selector; 
# 2144
template< class _Up> 
# 2145
struct __decay_selector< _Up, false, false>  { 
# 2146
typedef __remove_cv_t< _Up>  __type; }; 
# 2148
template< class _Up> 
# 2149
struct __decay_selector< _Up, true, false>  { 
# 2150
typedef typename remove_extent< _Up> ::type *__type; }; 
# 2152
template< class _Up> 
# 2153
struct __decay_selector< _Up, false, true>  { 
# 2154
typedef typename add_pointer< _Up> ::type __type; }; 
# 2158
template< class _Tp> 
# 2159
class decay { 
# 2161
typedef typename remove_reference< _Tp> ::type __remove_type; 
# 2164
public: typedef typename __decay_selector< __remove_type> ::__type type; 
# 2165
}; 
# 2170
template< class _Tp> 
# 2171
struct __strip_reference_wrapper { 
# 2173
typedef _Tp __type; 
# 2174
}; 
# 2176
template< class _Tp> 
# 2177
struct __strip_reference_wrapper< reference_wrapper< _Tp> >  { 
# 2179
typedef _Tp &__type; 
# 2180
}; 
# 2183
template< class _Tp> using __decay_t = typename decay< _Tp> ::type; 
# 2186
template< class _Tp> using __decay_and_strip = __strip_reference_wrapper< __decay_t< _Tp> > ; 
# 2192
template< bool , class _Tp = void> 
# 2193
struct enable_if { 
# 2194
}; 
# 2197
template< class _Tp> 
# 2198
struct enable_if< true, _Tp>  { 
# 2199
typedef _Tp type; }; 
# 2204
template< bool _Cond, class _Tp = void> using __enable_if_t = typename enable_if< _Cond, _Tp> ::type; 
# 2208
template< class ..._Cond> using _Require = __enable_if_t< __and_< _Cond...> ::value> ; 
# 2212
template< class _Tp> using __remove_cvref_t = typename remove_cv< typename remove_reference< _Tp> ::type> ::type; 
# 2219
template< bool _Cond, class _Iftrue, class _Iffalse> 
# 2220
struct conditional { 
# 2221
typedef _Iftrue type; }; 
# 2224
template< class _Iftrue, class _Iffalse> 
# 2225
struct conditional< false, _Iftrue, _Iffalse>  { 
# 2226
typedef _Iffalse type; }; 
# 2229
template< class ..._Tp> struct common_type; 
# 2235
struct __do_common_type_impl { 
# 2237
template< class _Tp, class _Up> using __cond_t = __decltype((true ? std::declval< _Tp> () : std::declval< _Up> ())); 
# 2243
template< class _Tp, class _Up> static __success_type< __decay_t< __cond_t< _Tp, _Up> > >  _S_test(int); 
# 2255 "/usr/include/c++/11/type_traits" 3
template< class , class > static __failure_type _S_test_2(...); 
# 2259
template< class _Tp, class _Up> static __decltype((_S_test_2< _Tp, _Up> (0))) _S_test(...); 
# 2262
}; 
# 2266
template<> struct common_type< >  { 
# 2267
}; 
# 2270
template< class _Tp0> 
# 2271
struct common_type< _Tp0>  : public std::common_type< _Tp0, _Tp0>  { 
# 2273
}; 
# 2276
template< class _Tp1, class _Tp2, class 
# 2277
_Dp1 = __decay_t< _Tp1> , class _Dp2 = __decay_t< _Tp2> > 
# 2278
struct __common_type_impl { 
# 2282
using type = common_type< _Dp1, _Dp2> ; 
# 2283
}; 
# 2285
template< class _Tp1, class _Tp2> 
# 2286
struct __common_type_impl< _Tp1, _Tp2, _Tp1, _Tp2>  : private __do_common_type_impl { 
# 2291
using type = __decltype((_S_test< _Tp1, _Tp2> (0))); 
# 2292
}; 
# 2295
template< class _Tp1, class _Tp2> 
# 2296
struct common_type< _Tp1, _Tp2>  : public __common_type_impl< _Tp1, _Tp2> ::type { 
# 2298
}; 
# 2300
template< class ...> 
# 2301
struct __common_type_pack { 
# 2302
}; 
# 2304
template< class , class , class  = void> struct __common_type_fold; 
# 2308
template< class _Tp1, class _Tp2, class ..._Rp> 
# 2309
struct common_type< _Tp1, _Tp2, _Rp...>  : public __common_type_fold< std::common_type< _Tp1, _Tp2> , __common_type_pack< _Rp...> >  { 
# 2312
}; 
# 2317
template< class _CTp, class ..._Rp> 
# 2318
struct __common_type_fold< _CTp, __common_type_pack< _Rp...> , __void_t< typename _CTp::type> >  : public common_type< typename _CTp::type, _Rp...>  { 
# 2321
}; 
# 2324
template< class _CTp, class _Rp> 
# 2325
struct __common_type_fold< _CTp, _Rp, void>  { 
# 2326
}; 
# 2328
template< class _Tp, bool  = is_enum< _Tp> ::value> 
# 2329
struct __underlying_type_impl { 
# 2331
using type = __underlying_type(_Tp); 
# 2332
}; 
# 2334
template< class _Tp> 
# 2335
struct __underlying_type_impl< _Tp, false>  { 
# 2336
}; 
# 2340
template< class _Tp> 
# 2341
struct underlying_type : public __underlying_type_impl< _Tp>  { 
# 2343
}; 
# 2346
template< class _Tp> 
# 2347
struct __declval_protector { 
# 2349
static const bool __stop = false; 
# 2350
}; 
# 2357
template< class _Tp> auto 
# 2358
declval() noexcept->__decltype((__declval< _Tp> (0))) 
# 2359
{ 
# 2360
static_assert((__declval_protector< _Tp> ::__stop), "declval() must not be used!");
# 2362
return __declval< _Tp> (0); 
# 2363
} 
# 2366
template< class _Signature> struct result_of; 
# 2374
struct __invoke_memfun_ref { }; 
# 2375
struct __invoke_memfun_deref { }; 
# 2376
struct __invoke_memobj_ref { }; 
# 2377
struct __invoke_memobj_deref { }; 
# 2378
struct __invoke_other { }; 
# 2381
template< class _Tp, class _Tag> 
# 2382
struct __result_of_success : public __success_type< _Tp>  { 
# 2383
using __invoke_type = _Tag; }; 
# 2386
struct __result_of_memfun_ref_impl { 
# 2388
template< class _Fp, class _Tp1, class ..._Args> static __result_of_success< __decltype(((std::declval< _Tp1> ().*std::declval< _Fp> ())(std::declval< _Args> ()...))), __invoke_memfun_ref>  _S_test(int); 
# 2393
template< class ...> static __failure_type _S_test(...); 
# 2395
}; 
# 2397
template< class _MemPtr, class _Arg, class ..._Args> 
# 2398
struct __result_of_memfun_ref : private __result_of_memfun_ref_impl { 
# 2401
typedef __decltype((_S_test< _MemPtr, _Arg, _Args...> (0))) type; 
# 2402
}; 
# 2405
struct __result_of_memfun_deref_impl { 
# 2407
template< class _Fp, class _Tp1, class ..._Args> static __result_of_success< __decltype((((*std::declval< _Tp1> ()).*std::declval< _Fp> ())(std::declval< _Args> ()...))), __invoke_memfun_deref>  _S_test(int); 
# 2412
template< class ...> static __failure_type _S_test(...); 
# 2414
}; 
# 2416
template< class _MemPtr, class _Arg, class ..._Args> 
# 2417
struct __result_of_memfun_deref : private __result_of_memfun_deref_impl { 
# 2420
typedef __decltype((_S_test< _MemPtr, _Arg, _Args...> (0))) type; 
# 2421
}; 
# 2424
struct __result_of_memobj_ref_impl { 
# 2426
template< class _Fp, class _Tp1> static __result_of_success< __decltype((std::declval< _Tp1> ().*std::declval< _Fp> ())), __invoke_memobj_ref>  _S_test(int); 
# 2431
template< class , class > static __failure_type _S_test(...); 
# 2433
}; 
# 2435
template< class _MemPtr, class _Arg> 
# 2436
struct __result_of_memobj_ref : private __result_of_memobj_ref_impl { 
# 2439
typedef __decltype((_S_test< _MemPtr, _Arg> (0))) type; 
# 2440
}; 
# 2443
struct __result_of_memobj_deref_impl { 
# 2445
template< class _Fp, class _Tp1> static __result_of_success< __decltype(((*std::declval< _Tp1> ()).*std::declval< _Fp> ())), __invoke_memobj_deref>  _S_test(int); 
# 2450
template< class , class > static __failure_type _S_test(...); 
# 2452
}; 
# 2454
template< class _MemPtr, class _Arg> 
# 2455
struct __result_of_memobj_deref : private __result_of_memobj_deref_impl { 
# 2458
typedef __decltype((_S_test< _MemPtr, _Arg> (0))) type; 
# 2459
}; 
# 2461
template< class _MemPtr, class _Arg> struct __result_of_memobj; 
# 2464
template< class _Res, class _Class, class _Arg> 
# 2465
struct __result_of_memobj< _Res (_Class::*), _Arg>  { 
# 2467
typedef __remove_cvref_t< _Arg>  _Argval; 
# 2468
typedef _Res (_Class::*_MemPtr); 
# 2473
typedef typename conditional< __or_< is_same< _Argval, _Class> , is_base_of< _Class, _Argval> > ::value, __result_of_memobj_ref< _MemPtr, _Arg> , __result_of_memobj_deref< _MemPtr, _Arg> > ::type::type type; 
# 2474
}; 
# 2476
template< class _MemPtr, class _Arg, class ..._Args> struct __result_of_memfun; 
# 2479
template< class _Res, class _Class, class _Arg, class ..._Args> 
# 2480
struct __result_of_memfun< _Res (_Class::*), _Arg, _Args...>  { 
# 2482
typedef typename remove_reference< _Arg> ::type _Argval; 
# 2483
typedef _Res (_Class::*_MemPtr); 
# 2487
typedef typename conditional< is_base_of< _Class, _Argval> ::value, __result_of_memfun_ref< _MemPtr, _Arg, _Args...> , __result_of_memfun_deref< _MemPtr, _Arg, _Args...> > ::type::type type; 
# 2488
}; 
# 2495
template< class _Tp, class _Up = __remove_cvref_t< _Tp> > 
# 2496
struct __inv_unwrap { 
# 2498
using type = _Tp; 
# 2499
}; 
# 2501
template< class _Tp, class _Up> 
# 2502
struct __inv_unwrap< _Tp, reference_wrapper< _Up> >  { 
# 2504
using type = _Up &; 
# 2505
}; 
# 2507
template< bool , bool , class _Functor, class ..._ArgTypes> 
# 2508
struct __result_of_impl { 
# 2510
typedef __failure_type type; 
# 2511
}; 
# 2513
template< class _MemPtr, class _Arg> 
# 2514
struct __result_of_impl< true, false, _MemPtr, _Arg>  : public __result_of_memobj< __decay_t< _MemPtr> , typename __inv_unwrap< _Arg> ::type>  { 
# 2517
}; 
# 2519
template< class _MemPtr, class _Arg, class ..._Args> 
# 2520
struct __result_of_impl< false, true, _MemPtr, _Arg, _Args...>  : public __result_of_memfun< __decay_t< _MemPtr> , typename __inv_unwrap< _Arg> ::type, _Args...>  { 
# 2523
}; 
# 2526
struct __result_of_other_impl { 
# 2528
template< class _Fn, class ..._Args> static __result_of_success< __decltype((std::declval< _Fn> ()(std::declval< _Args> ()...))), __invoke_other>  _S_test(int); 
# 2533
template< class ...> static __failure_type _S_test(...); 
# 2535
}; 
# 2537
template< class _Functor, class ..._ArgTypes> 
# 2538
struct __result_of_impl< false, false, _Functor, _ArgTypes...>  : private __result_of_other_impl { 
# 2541
typedef __decltype((_S_test< _Functor, _ArgTypes...> (0))) type; 
# 2542
}; 
# 2545
template< class _Functor, class ..._ArgTypes> 
# 2546
struct __invoke_result : public __result_of_impl< is_member_object_pointer< typename remove_reference< _Functor> ::type> ::value, is_member_function_pointer< typename remove_reference< _Functor> ::type> ::value, _Functor, _ArgTypes...> ::type { 
# 2556
}; 
# 2559
template< class _Functor, class ..._ArgTypes> 
# 2560
struct result_of< _Functor (_ArgTypes ...)>  : public __invoke_result< _Functor, _ArgTypes...>  { 
# 2562
}; 
# 2566
template< size_t _Len, size_t _Align = __alignof__(typename __aligned_storage_msa< _Len> ::__type)> using aligned_storage_t = typename aligned_storage< _Len, _Align> ::type; 
# 2570
template< size_t _Len, class ..._Types> using aligned_union_t = typename aligned_union< _Len, _Types...> ::type; 
# 2574
template< class _Tp> using decay_t = typename decay< _Tp> ::type; 
# 2578
template< bool _Cond, class _Tp = void> using enable_if_t = typename enable_if< _Cond, _Tp> ::type; 
# 2582
template< bool _Cond, class _Iftrue, class _Iffalse> using conditional_t = typename conditional< _Cond, _Iftrue, _Iffalse> ::type; 
# 2586
template< class ..._Tp> using common_type_t = typename common_type< _Tp...> ::type; 
# 2590
template< class _Tp> using underlying_type_t = typename underlying_type< _Tp> ::type; 
# 2594
template< class _Tp> using result_of_t = typename result_of< _Tp> ::type; 
# 2601
template< class ...> using void_t = void; 
# 2607
template< class _Default, class _AlwaysVoid, 
# 2608
template< class ...>  class _Op, class ..._Args> 
# 2609
struct __detector { 
# 2611
using value_t = false_type; 
# 2612
using type = _Default; 
# 2613
}; 
# 2616
template< class _Default, template< class ...>  class _Op, class ...
# 2617
_Args> 
# 2618
struct __detector< _Default, __void_t< _Op< _Args...> > , _Op, _Args...>  { 
# 2620
using value_t = true_type; 
# 2621
using type = _Op< _Args...> ; 
# 2622
}; 
# 2625
template< class _Default, template< class ...>  class _Op, class ...
# 2626
_Args> using __detected_or = __detector< _Default, void, _Op, _Args...> ; 
# 2630
template< class _Default, template< class ...>  class _Op, class ...
# 2631
_Args> using __detected_or_t = typename __detected_or< _Default, _Op, _Args...> ::type; 
# 2649 "/usr/include/c++/11/type_traits" 3
template< class _Tp> struct __is_swappable; 
# 2652
template< class _Tp> struct __is_nothrow_swappable; 
# 2655
template< class > 
# 2656
struct __is_tuple_like_impl : public false_type { 
# 2657
}; 
# 2659
template< class ..._Tps> 
# 2660
struct __is_tuple_like_impl< tuple< _Tps...> >  : public true_type { 
# 2661
}; 
# 2664
template< class _Tp> 
# 2665
struct __is_tuple_like : public __is_tuple_like_impl< __remove_cvref_t< _Tp> > ::type { 
# 2667
}; 
# 2670
template< class _Tp> inline _Require< __not_< __is_tuple_like< _Tp> > , is_move_constructible< _Tp> , is_move_assignable< _Tp> >  swap(_Tp &, _Tp &) noexcept(__and_< is_nothrow_move_constructible< _Tp> , is_nothrow_move_assignable< _Tp> > ::value); 
# 2680
template< class _Tp, size_t _Nm> inline __enable_if_t< __is_swappable< _Tp> ::value>  swap(_Tp (& __a)[_Nm], _Tp (& __b)[_Nm]) noexcept(__is_nothrow_swappable< _Tp> ::value); 
# 2688
namespace __swappable_details { 
# 2689
using std::swap;
# 2691
struct __do_is_swappable_impl { 
# 2693
template< class _Tp, class 
# 2694
 = __decltype((swap(std::declval< _Tp &> (), std::declval< _Tp &> ())))> static true_type 
# 2693
__test(int); 
# 2697
template< class > static false_type __test(...); 
# 2699
}; 
# 2701
struct __do_is_nothrow_swappable_impl { 
# 2703
template< class _Tp> static __bool_constant< noexcept(swap(std::declval< _Tp &> (), std::declval< _Tp &> ()))>  __test(int); 
# 2708
template< class > static false_type __test(...); 
# 2710
}; 
# 2712
}
# 2714
template< class _Tp> 
# 2715
struct __is_swappable_impl : public __swappable_details::__do_is_swappable_impl { 
# 2718
typedef __decltype((__test< _Tp> (0))) type; 
# 2719
}; 
# 2721
template< class _Tp> 
# 2722
struct __is_nothrow_swappable_impl : public __swappable_details::__do_is_nothrow_swappable_impl { 
# 2725
typedef __decltype((__test< _Tp> (0))) type; 
# 2726
}; 
# 2728
template< class _Tp> 
# 2729
struct __is_swappable : public __is_swappable_impl< _Tp> ::type { 
# 2731
}; 
# 2733
template< class _Tp> 
# 2734
struct __is_nothrow_swappable : public __is_nothrow_swappable_impl< _Tp> ::type { 
# 2736
}; 
# 2744
template< class _Tp> 
# 2745
struct is_swappable : public __is_swappable_impl< _Tp> ::type { 
# 2748
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 2750
}; 
# 2753
template< class _Tp> 
# 2754
struct is_nothrow_swappable : public __is_nothrow_swappable_impl< _Tp> ::type { 
# 2757
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 2759
}; 
# 2763
template< class _Tp> constexpr inline bool 
# 2764
is_swappable_v = (is_swappable< _Tp> ::value); 
# 2768
template< class _Tp> constexpr inline bool 
# 2769
is_nothrow_swappable_v = (is_nothrow_swappable< _Tp> ::value); 
# 2774
namespace __swappable_with_details { 
# 2775
using std::swap;
# 2777
struct __do_is_swappable_with_impl { 
# 2779
template< class _Tp, class _Up, class 
# 2780
 = __decltype((swap(std::declval< _Tp> (), std::declval< _Up> ()))), class 
# 2782
 = __decltype((swap(std::declval< _Up> (), std::declval< _Tp> ())))> static true_type 
# 2779
__test(int); 
# 2785
template< class , class > static false_type __test(...); 
# 2787
}; 
# 2789
struct __do_is_nothrow_swappable_with_impl { 
# 2791
template< class _Tp, class _Up> static __bool_constant< noexcept(swap(std::declval< _Tp> (), std::declval< _Up> ())) && noexcept(swap(std::declval< _Up> (), std::declval< _Tp> ()))>  __test(int); 
# 2798
template< class , class > static false_type __test(...); 
# 2800
}; 
# 2802
}
# 2804
template< class _Tp, class _Up> 
# 2805
struct __is_swappable_with_impl : public __swappable_with_details::__do_is_swappable_with_impl { 
# 2808
typedef __decltype((__test< _Tp, _Up> (0))) type; 
# 2809
}; 
# 2812
template< class _Tp> 
# 2813
struct __is_swappable_with_impl< _Tp &, _Tp &>  : public __swappable_details::__do_is_swappable_impl { 
# 2816
typedef __decltype((__test< _Tp &> (0))) type; 
# 2817
}; 
# 2819
template< class _Tp, class _Up> 
# 2820
struct __is_nothrow_swappable_with_impl : public __swappable_with_details::__do_is_nothrow_swappable_with_impl { 
# 2823
typedef __decltype((__test< _Tp, _Up> (0))) type; 
# 2824
}; 
# 2827
template< class _Tp> 
# 2828
struct __is_nothrow_swappable_with_impl< _Tp &, _Tp &>  : public __swappable_details::__do_is_nothrow_swappable_impl { 
# 2831
typedef __decltype((__test< _Tp &> (0))) type; 
# 2832
}; 
# 2836
template< class _Tp, class _Up> 
# 2837
struct is_swappable_with : public __is_swappable_with_impl< _Tp, _Up> ::type { 
# 2840
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "first template argument must be a complete class or an unbounded array");
# 2842
static_assert((std::__is_complete_or_unbounded(__type_identity< _Up> {})), "second template argument must be a complete class or an unbounded array");
# 2844
}; 
# 2847
template< class _Tp, class _Up> 
# 2848
struct is_nothrow_swappable_with : public __is_nothrow_swappable_with_impl< _Tp, _Up> ::type { 
# 2851
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "first template argument must be a complete class or an unbounded array");
# 2853
static_assert((std::__is_complete_or_unbounded(__type_identity< _Up> {})), "second template argument must be a complete class or an unbounded array");
# 2855
}; 
# 2859
template< class _Tp, class _Up> constexpr inline bool 
# 2860
is_swappable_with_v = (is_swappable_with< _Tp, _Up> ::value); 
# 2864
template< class _Tp, class _Up> constexpr inline bool 
# 2865
is_nothrow_swappable_with_v = (is_nothrow_swappable_with< _Tp, _Up> ::value); 
# 2876 "/usr/include/c++/11/type_traits" 3
template< class _Result, class _Ret, bool 
# 2877
 = is_void< _Ret> ::value, class  = void> 
# 2878
struct __is_invocable_impl : public false_type { 
# 2881
using __nothrow_type = false_type; 
# 2882
}; 
# 2885
template< class _Result, class _Ret> 
# 2886
struct __is_invocable_impl< _Result, _Ret, true, __void_t< typename _Result::type> >  : public true_type { 
# 2891
using __nothrow_type = true_type; 
# 2892
}; 
# 2894
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wctor-dtor-privacy"
# 2897
template< class _Result, class _Ret> 
# 2898
struct __is_invocable_impl< _Result, _Ret, false, __void_t< typename _Result::type> >  { 
# 2906
private: static typename _Result::type _S_get() noexcept; 
# 2908
template< class _Tp> static void _S_conv(_Tp) noexcept; 
# 2912
template< class _Tp, bool _Check_Noex = false, class 
# 2913
 = __decltype((_S_conv< _Tp> ((_S_get)()))), bool 
# 2914
_Noex = noexcept(_S_conv< _Tp> ((_S_get)()))> static __bool_constant< _Check_Noex ? _Noex : true>  
# 2912
_S_test(int); 
# 2918
template< class _Tp, bool  = false> static false_type _S_test(...); 
# 2924
public: using type = __decltype((_S_test< _Ret> (1))); 
# 2927
using __nothrow_type = __decltype((_S_test< _Ret, true> (1))); 
# 2928
}; 
#pragma GCC diagnostic pop
# 2931
template< class _Fn, class ..._ArgTypes> 
# 2932
struct __is_invocable : public __is_invocable_impl< __invoke_result< _Fn, _ArgTypes...> , void> ::type { 
# 2934
}; 
# 2936
template< class _Fn, class _Tp, class ..._Args> constexpr bool 
# 2937
__call_is_nt(__invoke_memfun_ref) 
# 2938
{ 
# 2939
using _Up = typename __inv_unwrap< _Tp> ::type; 
# 2940
return noexcept((std::declval< typename __inv_unwrap< _Tp> ::type> ().*std::declval< _Fn> ())(std::declval< _Args> ()...)); 
# 2942
} 
# 2944
template< class _Fn, class _Tp, class ..._Args> constexpr bool 
# 2945
__call_is_nt(__invoke_memfun_deref) 
# 2946
{ 
# 2947
return noexcept(((*std::declval< _Tp> ()).*std::declval< _Fn> ())(std::declval< _Args> ()...)); 
# 2949
} 
# 2951
template< class _Fn, class _Tp> constexpr bool 
# 2952
__call_is_nt(__invoke_memobj_ref) 
# 2953
{ 
# 2954
using _Up = typename __inv_unwrap< _Tp> ::type; 
# 2955
return noexcept((std::declval< typename __inv_unwrap< _Tp> ::type> ().*std::declval< _Fn> ())); 
# 2956
} 
# 2958
template< class _Fn, class _Tp> constexpr bool 
# 2959
__call_is_nt(__invoke_memobj_deref) 
# 2960
{ 
# 2961
return noexcept(((*std::declval< _Tp> ()).*std::declval< _Fn> ())); 
# 2962
} 
# 2964
template< class _Fn, class ..._Args> constexpr bool 
# 2965
__call_is_nt(__invoke_other) 
# 2966
{ 
# 2967
return noexcept(std::declval< _Fn> ()(std::declval< _Args> ()...)); 
# 2968
} 
# 2970
template< class _Result, class _Fn, class ..._Args> 
# 2971
struct __call_is_nothrow : public __bool_constant< std::__call_is_nt< _Fn, _Args...> (typename _Result::__invoke_type{})>  { 
# 2975
}; 
# 2977
template< class _Fn, class ..._Args> using __call_is_nothrow_ = __call_is_nothrow< __invoke_result< _Fn, _Args...> , _Fn, _Args...> ; 
# 2982
template< class _Fn, class ..._Args> 
# 2983
struct __is_nothrow_invocable : public __and_< __is_invocable< _Fn, _Args...> , __call_is_nothrow_< _Fn, _Args...> > ::type { 
# 2986
}; 
# 2988
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wctor-dtor-privacy"
struct __nonesuchbase { }; 
# 2991
struct __nonesuch : private __nonesuchbase { 
# 2992
~__nonesuch() = delete;
# 2993
__nonesuch(const __nonesuch &) = delete;
# 2994
void operator=(const __nonesuch &) = delete;
# 2995
}; 
#pragma GCC diagnostic pop
# 3003
template< class _Functor, class ..._ArgTypes> 
# 3004
struct invoke_result : public __invoke_result< _Functor, _ArgTypes...>  { 
# 3007
static_assert((std::__is_complete_or_unbounded(__type_identity< _Functor> {})), "_Functor must be a complete class or an unbounded array");
# 3009
static_assert(((std::__is_complete_or_unbounded(__type_identity< _ArgTypes> {}) && ... )), "each argument type must be a complete class or an unbounded array");
# 3012
}; 
# 3015
template< class _Fn, class ..._Args> using invoke_result_t = typename invoke_result< _Fn, _Args...> ::type; 
# 3019
template< class _Fn, class ..._ArgTypes> 
# 3020
struct is_invocable : public __is_invocable_impl< __invoke_result< _Fn, _ArgTypes...> , void> ::type { 
# 3023
static_assert((std::__is_complete_or_unbounded(__type_identity< _Fn> {})), "_Fn must be a complete class or an unbounded array");
# 3025
static_assert(((std::__is_complete_or_unbounded(__type_identity< _ArgTypes> {}) && ... )), "each argument type must be a complete class or an unbounded array");
# 3028
}; 
# 3031
template< class _Ret, class _Fn, class ..._ArgTypes> 
# 3032
struct is_invocable_r : public __is_invocable_impl< __invoke_result< _Fn, _ArgTypes...> , _Ret> ::type { 
# 3035
static_assert((std::__is_complete_or_unbounded(__type_identity< _Fn> {})), "_Fn must be a complete class or an unbounded array");
# 3037
static_assert(((std::__is_complete_or_unbounded(__type_identity< _ArgTypes> {}) && ... )), "each argument type must be a complete class or an unbounded array");
# 3040
static_assert((std::__is_complete_or_unbounded(__type_identity< _Ret> {})), "_Ret must be a complete class or an unbounded array");
# 3042
}; 
# 3045
template< class _Fn, class ..._ArgTypes> 
# 3046
struct is_nothrow_invocable : public __and_< __is_invocable_impl< __invoke_result< _Fn, _ArgTypes...> , void> , __call_is_nothrow_< _Fn, _ArgTypes...> > ::type { 
# 3050
static_assert((std::__is_complete_or_unbounded(__type_identity< _Fn> {})), "_Fn must be a complete class or an unbounded array");
# 3052
static_assert(((std::__is_complete_or_unbounded(__type_identity< _ArgTypes> {}) && ... )), "each argument type must be a complete class or an unbounded array");
# 3055
}; 
# 3058
template< class _Result, class _Ret> using __is_nt_invocable_impl = typename __is_invocable_impl< _Result, _Ret> ::__nothrow_type; 
# 3064
template< class _Ret, class _Fn, class ..._ArgTypes> 
# 3065
struct is_nothrow_invocable_r : public __and_< __is_nt_invocable_impl< __invoke_result< _Fn, _ArgTypes...> , _Ret> , __call_is_nothrow_< _Fn, _ArgTypes...> > ::type { 
# 3069
static_assert((std::__is_complete_or_unbounded(__type_identity< _Fn> {})), "_Fn must be a complete class or an unbounded array");
# 3071
static_assert(((std::__is_complete_or_unbounded(__type_identity< _ArgTypes> {}) && ... )), "each argument type must be a complete class or an unbounded array");
# 3074
static_assert((std::__is_complete_or_unbounded(__type_identity< _Ret> {})), "_Ret must be a complete class or an unbounded array");
# 3076
}; 
# 3094 "/usr/include/c++/11/type_traits" 3
template< class _Tp> constexpr inline bool 
# 3095
is_void_v = (is_void< _Tp> ::value); 
# 3096
template< class _Tp> constexpr inline bool 
# 3097
is_null_pointer_v = (is_null_pointer< _Tp> ::value); 
# 3098
template< class _Tp> constexpr inline bool 
# 3099
is_integral_v = (is_integral< _Tp> ::value); 
# 3100
template< class _Tp> constexpr inline bool 
# 3101
is_floating_point_v = (is_floating_point< _Tp> ::value); 
# 3102
template< class _Tp> constexpr inline bool 
# 3103
is_array_v = (is_array< _Tp> ::value); 
# 3104
template< class _Tp> constexpr inline bool 
# 3105
is_pointer_v = (is_pointer< _Tp> ::value); 
# 3106
template< class _Tp> constexpr inline bool 
# 3107
is_lvalue_reference_v = (is_lvalue_reference< _Tp> ::value); 
# 3109
template< class _Tp> constexpr inline bool 
# 3110
is_rvalue_reference_v = (is_rvalue_reference< _Tp> ::value); 
# 3112
template< class _Tp> constexpr inline bool 
# 3113
is_member_object_pointer_v = (is_member_object_pointer< _Tp> ::value); 
# 3115
template< class _Tp> constexpr inline bool 
# 3116
is_member_function_pointer_v = (is_member_function_pointer< _Tp> ::value); 
# 3118
template< class _Tp> constexpr inline bool 
# 3119
is_enum_v = (is_enum< _Tp> ::value); 
# 3120
template< class _Tp> constexpr inline bool 
# 3121
is_union_v = (is_union< _Tp> ::value); 
# 3122
template< class _Tp> constexpr inline bool 
# 3123
is_class_v = (is_class< _Tp> ::value); 
# 3124
template< class _Tp> constexpr inline bool 
# 3125
is_function_v = (is_function< _Tp> ::value); 
# 3126
template< class _Tp> constexpr inline bool 
# 3127
is_reference_v = (is_reference< _Tp> ::value); 
# 3128
template< class _Tp> constexpr inline bool 
# 3129
is_arithmetic_v = (is_arithmetic< _Tp> ::value); 
# 3130
template< class _Tp> constexpr inline bool 
# 3131
is_fundamental_v = (is_fundamental< _Tp> ::value); 
# 3132
template< class _Tp> constexpr inline bool 
# 3133
is_object_v = (is_object< _Tp> ::value); 
# 3134
template< class _Tp> constexpr inline bool 
# 3135
is_scalar_v = (is_scalar< _Tp> ::value); 
# 3136
template< class _Tp> constexpr inline bool 
# 3137
is_compound_v = (is_compound< _Tp> ::value); 
# 3138
template< class _Tp> constexpr inline bool 
# 3139
is_member_pointer_v = (is_member_pointer< _Tp> ::value); 
# 3140
template< class _Tp> constexpr inline bool 
# 3141
is_const_v = (is_const< _Tp> ::value); 
# 3142
template< class _Tp> constexpr inline bool 
# 3143
is_volatile_v = (is_volatile< _Tp> ::value); 
# 3144
template< class _Tp> constexpr inline bool 
# 3145
is_trivial_v = (is_trivial< _Tp> ::value); 
# 3146
template< class _Tp> constexpr inline bool 
# 3147
is_trivially_copyable_v = (is_trivially_copyable< _Tp> ::value); 
# 3149
template< class _Tp> constexpr inline bool 
# 3150
is_standard_layout_v = (is_standard_layout< _Tp> ::value); 
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template< class _Tp> constexpr inline bool 
# 3155
is_pod_v = (is_pod< _Tp> ::value); 
# 3156
template< class _Tp> 
# 3157
[[__deprecated__]] constexpr inline bool 
# 3158
is_literal_type_v = (is_literal_type< _Tp> ::value); 
#pragma GCC diagnostic pop
template< class _Tp> constexpr inline bool 
# 3161
is_empty_v = (is_empty< _Tp> ::value); 
# 3162
template< class _Tp> constexpr inline bool 
# 3163
is_polymorphic_v = (is_polymorphic< _Tp> ::value); 
# 3164
template< class _Tp> constexpr inline bool 
# 3165
is_abstract_v = (is_abstract< _Tp> ::value); 
# 3166
template< class _Tp> constexpr inline bool 
# 3167
is_final_v = (is_final< _Tp> ::value); 
# 3168
template< class _Tp> constexpr inline bool 
# 3169
is_signed_v = (is_signed< _Tp> ::value); 
# 3170
template< class _Tp> constexpr inline bool 
# 3171
is_unsigned_v = (is_unsigned< _Tp> ::value); 
# 3172
template< class _Tp, class ..._Args> constexpr inline bool 
# 3173
is_constructible_v = (is_constructible< _Tp, _Args...> ::value); 
# 3175
template< class _Tp> constexpr inline bool 
# 3176
is_default_constructible_v = (is_default_constructible< _Tp> ::value); 
# 3178
template< class _Tp> constexpr inline bool 
# 3179
is_copy_constructible_v = (is_copy_constructible< _Tp> ::value); 
# 3181
template< class _Tp> constexpr inline bool 
# 3182
is_move_constructible_v = (is_move_constructible< _Tp> ::value); 
# 3184
template< class _Tp, class _Up> constexpr inline bool 
# 3185
is_assignable_v = (is_assignable< _Tp, _Up> ::value); 
# 3186
template< class _Tp> constexpr inline bool 
# 3187
is_copy_assignable_v = (is_copy_assignable< _Tp> ::value); 
# 3188
template< class _Tp> constexpr inline bool 
# 3189
is_move_assignable_v = (is_move_assignable< _Tp> ::value); 
# 3190
template< class _Tp> constexpr inline bool 
# 3191
is_destructible_v = (is_destructible< _Tp> ::value); 
# 3192
template< class _Tp, class ..._Args> constexpr inline bool 
# 3193
is_trivially_constructible_v = (is_trivially_constructible< _Tp, _Args...> ::value); 
# 3195
template< class _Tp> constexpr inline bool 
# 3196
is_trivially_default_constructible_v = (is_trivially_default_constructible< _Tp> ::value); 
# 3198
template< class _Tp> constexpr inline bool 
# 3199
is_trivially_copy_constructible_v = (is_trivially_copy_constructible< _Tp> ::value); 
# 3201
template< class _Tp> constexpr inline bool 
# 3202
is_trivially_move_constructible_v = (is_trivially_move_constructible< _Tp> ::value); 
# 3204
template< class _Tp, class _Up> constexpr inline bool 
# 3205
is_trivially_assignable_v = (is_trivially_assignable< _Tp, _Up> ::value); 
# 3207
template< class _Tp> constexpr inline bool 
# 3208
is_trivially_copy_assignable_v = (is_trivially_copy_assignable< _Tp> ::value); 
# 3210
template< class _Tp> constexpr inline bool 
# 3211
is_trivially_move_assignable_v = (is_trivially_move_assignable< _Tp> ::value); 
# 3213
template< class _Tp> constexpr inline bool 
# 3214
is_trivially_destructible_v = (is_trivially_destructible< _Tp> ::value); 
# 3216
template< class _Tp, class ..._Args> constexpr inline bool 
# 3217
is_nothrow_constructible_v = (is_nothrow_constructible< _Tp, _Args...> ::value); 
# 3219
template< class _Tp> constexpr inline bool 
# 3220
is_nothrow_default_constructible_v = (is_nothrow_default_constructible< _Tp> ::value); 
# 3222
template< class _Tp> constexpr inline bool 
# 3223
is_nothrow_copy_constructible_v = (is_nothrow_copy_constructible< _Tp> ::value); 
# 3225
template< class _Tp> constexpr inline bool 
# 3226
is_nothrow_move_constructible_v = (is_nothrow_move_constructible< _Tp> ::value); 
# 3228
template< class _Tp, class _Up> constexpr inline bool 
# 3229
is_nothrow_assignable_v = (is_nothrow_assignable< _Tp, _Up> ::value); 
# 3231
template< class _Tp> constexpr inline bool 
# 3232
is_nothrow_copy_assignable_v = (is_nothrow_copy_assignable< _Tp> ::value); 
# 3234
template< class _Tp> constexpr inline bool 
# 3235
is_nothrow_move_assignable_v = (is_nothrow_move_assignable< _Tp> ::value); 
# 3237
template< class _Tp> constexpr inline bool 
# 3238
is_nothrow_destructible_v = (is_nothrow_destructible< _Tp> ::value); 
# 3240
template< class _Tp> constexpr inline bool 
# 3241
has_virtual_destructor_v = (has_virtual_destructor< _Tp> ::value); 
# 3243
template< class _Tp> constexpr inline size_t 
# 3244
alignment_of_v = (alignment_of< _Tp> ::value); 
# 3245
template< class _Tp> constexpr inline size_t 
# 3246
rank_v = (rank< _Tp> ::value); 
# 3247
template< class _Tp, unsigned _Idx = 0U> constexpr inline size_t 
# 3248
extent_v = (extent< _Tp, _Idx> ::value); 
# 3250
template< class _Tp, class _Up> constexpr inline bool 
# 3251
is_same_v = __is_same(_Tp, _Up); 
# 3256
template< class _Base, class _Derived> constexpr inline bool 
# 3257
is_base_of_v = (is_base_of< _Base, _Derived> ::value); 
# 3258
template< class _From, class _To> constexpr inline bool 
# 3259
is_convertible_v = (is_convertible< _From, _To> ::value); 
# 3260
template< class _Fn, class ..._Args> constexpr inline bool 
# 3261
is_invocable_v = (is_invocable< _Fn, _Args...> ::value); 
# 3262
template< class _Fn, class ..._Args> constexpr inline bool 
# 3263
is_nothrow_invocable_v = (is_nothrow_invocable< _Fn, _Args...> ::value); 
# 3265
template< class _Ret, class _Fn, class ..._Args> constexpr inline bool 
# 3266
is_invocable_r_v = (is_invocable_r< _Ret, _Fn, _Args...> ::value); 
# 3268
template< class _Ret, class _Fn, class ..._Args> constexpr inline bool 
# 3269
is_nothrow_invocable_r_v = (is_nothrow_invocable_r< _Ret, _Fn, _Args...> ::value); 
# 3276
template< class _Tp> 
# 3277
struct has_unique_object_representations : public bool_constant< __has_unique_object_representations(remove_cv_t< remove_all_extents_t< _Tp> > )>  { 
# 3282
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 3284
}; 
# 3287
template< class _Tp> constexpr inline bool 
# 3288
has_unique_object_representations_v = (has_unique_object_representations< _Tp> ::value); 
# 3295
template< class _Tp> 
# 3296
struct is_aggregate : public bool_constant< __is_aggregate(remove_cv_t< _Tp> )>  { 
# 3298
}; 
# 3301
template< class _Tp> constexpr inline bool 
# 3302
is_aggregate_v = (is_aggregate< _Tp> ::value); 
# 3599 "/usr/include/c++/11/type_traits" 3
}
# 59 "/usr/include/c++/11/bits/move.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 74 "/usr/include/c++/11/bits/move.h" 3
template< class _Tp> 
# 75
[[__nodiscard__]] constexpr _Tp &&
# 77
forward(typename remove_reference< _Tp> ::type &__t) noexcept 
# 78
{ return static_cast< _Tp &&>(__t); } 
# 86
template< class _Tp> 
# 87
[[__nodiscard__]] constexpr _Tp &&
# 89
forward(typename remove_reference< _Tp> ::type &&__t) noexcept 
# 90
{ 
# 91
static_assert((!std::template is_lvalue_reference< _Tp> ::value), "std::forward must not be used to convert an rvalue to an lvalue");
# 93
return static_cast< _Tp &&>(__t); 
# 94
} 
# 101
template< class _Tp> 
# 102
[[__nodiscard__]] constexpr typename remove_reference< _Tp> ::type &&
# 104
move(_Tp &&__t) noexcept 
# 105
{ return static_cast< typename remove_reference< _Tp> ::type &&>(__t); } 
# 108
template< class _Tp> 
# 109
struct __move_if_noexcept_cond : public __and_< __not_< is_nothrow_move_constructible< _Tp> > , is_copy_constructible< _Tp> > ::type { 
# 111
}; 
# 121 "/usr/include/c++/11/bits/move.h" 3
template< class _Tp> 
# 122
[[__nodiscard__]] constexpr typename conditional< __move_if_noexcept_cond< _Tp> ::value, const _Tp &, _Tp &&> ::type 
# 125
move_if_noexcept(_Tp &__x) noexcept 
# 126
{ return std::move(__x); } 
# 142 "/usr/include/c++/11/bits/move.h" 3
template< class _Tp> 
# 143
[[__nodiscard__]] constexpr _Tp *
# 145
addressof(_Tp &__r) noexcept 
# 146
{ return std::__addressof(__r); } 
# 150
template < typename _Tp >
    const _Tp * addressof ( const _Tp && ) = delete;
# 154
template< class _Tp, class _Up = _Tp> inline _Tp 
# 157
__exchange(_Tp &__obj, _Up &&__new_val) 
# 158
{ 
# 159
_Tp __old_val = std::move(__obj); 
# 160
__obj = std::forward< _Up> (__new_val); 
# 161
return __old_val; 
# 162
} 
# 186 "/usr/include/c++/11/bits/move.h" 3
template< class _Tp> inline typename enable_if< __and_< __not_< __is_tuple_like< _Tp> > , is_move_constructible< _Tp> , is_move_assignable< _Tp> > ::value> ::type 
# 196
swap(_Tp &__a, _Tp &__b) noexcept(__and_< is_nothrow_move_constructible< _Tp> , is_nothrow_move_assignable< _Tp> > ::value) 
# 199
{ 
# 204
_Tp __tmp = std::move(__a); 
# 205
__a = std::move(__b); 
# 206
__b = std::move(__tmp); 
# 207
} 
# 212
template< class _Tp, size_t _Nm> inline typename enable_if< __is_swappable< _Tp> ::value> ::type 
# 220
swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm]) noexcept(__is_nothrow_swappable< _Tp> ::value) 
# 222
{ 
# 223
for (size_t __n = (0); __n < _Nm; ++__n) { 
# 224
swap(__a[__n], __b[__n]); }  
# 225
} 
# 229
}
# 69 "/usr/include/c++/11/bits/stl_pair.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 80 "/usr/include/c++/11/bits/stl_pair.h" 3
struct piecewise_construct_t { explicit piecewise_construct_t() = default;}; 
# 83
constexpr inline piecewise_construct_t piecewise_construct = piecewise_construct_t(); 
# 89
template< class ...> class tuple; 
# 92
template< size_t ...> struct _Index_tuple; 
# 100
template< bool , class _T1, class _T2> 
# 101
struct _PCC { 
# 103
template< class _U1, class _U2> static constexpr bool 
# 104
_ConstructiblePair() 
# 105
{ 
# 106
return __and_< is_constructible< _T1, const _U1 &> , is_constructible< _T2, const _U2 &> > ::value; 
# 108
} 
# 110
template< class _U1, class _U2> static constexpr bool 
# 111
_ImplicitlyConvertiblePair() 
# 112
{ 
# 113
return __and_< is_convertible< const _U1 &, _T1> , is_convertible< const _U2 &, _T2> > ::value; 
# 115
} 
# 117
template< class _U1, class _U2> static constexpr bool 
# 118
_MoveConstructiblePair() 
# 119
{ 
# 120
return __and_< is_constructible< _T1, _U1 &&> , is_constructible< _T2, _U2 &&> > ::value; 
# 122
} 
# 124
template< class _U1, class _U2> static constexpr bool 
# 125
_ImplicitlyMoveConvertiblePair() 
# 126
{ 
# 127
return __and_< is_convertible< _U1 &&, _T1> , is_convertible< _U2 &&, _T2> > ::value; 
# 129
} 
# 131
template< bool __implicit, class _U1, class _U2> static constexpr bool 
# 132
_CopyMovePair() 
# 133
{ 
# 134
using __do_converts = __and_< is_convertible< const _U1 &, _T1> , is_convertible< _U2 &&, _T2> > ; 
# 136
using __converts = typename conditional< __implicit, __and_< is_convertible< const _U1 &, _T1> , is_convertible< _U2 &&, _T2> > , __not_< __and_< is_convertible< const _U1 &, _T1> , is_convertible< _U2 &&, _T2> > > > ::type; 
# 139
return __and_< is_constructible< _T1, const _U1 &> , is_constructible< _T2, _U2 &&> , typename conditional< __implicit, __and_< is_convertible< const _U1 &, _T1> , is_convertible< _U2 &&, _T2> > , __not_< __and_< is_convertible< const _U1 &, _T1> , is_convertible< _U2 &&, _T2> > > > ::type> ::value; 
# 143
} 
# 145
template< bool __implicit, class _U1, class _U2> static constexpr bool 
# 146
_MoveCopyPair() 
# 147
{ 
# 148
using __do_converts = __and_< is_convertible< _U1 &&, _T1> , is_convertible< const _U2 &, _T2> > ; 
# 150
using __converts = typename conditional< __implicit, __and_< is_convertible< _U1 &&, _T1> , is_convertible< const _U2 &, _T2> > , __not_< __and_< is_convertible< _U1 &&, _T1> , is_convertible< const _U2 &, _T2> > > > ::type; 
# 153
return __and_< is_constructible< _T1, _U1 &&> , is_constructible< _T2, const _U2 &&> , typename conditional< __implicit, __and_< is_convertible< _U1 &&, _T1> , is_convertible< const _U2 &, _T2> > , __not_< __and_< is_convertible< _U1 &&, _T1> , is_convertible< const _U2 &, _T2> > > > ::type> ::value; 
# 157
} 
# 158
}; 
# 160
template< class _T1, class _T2> 
# 161
struct _PCC< false, _T1, _T2>  { 
# 163
template< class _U1, class _U2> static constexpr bool 
# 164
_ConstructiblePair() 
# 165
{ 
# 166
return false; 
# 167
} 
# 169
template< class _U1, class _U2> static constexpr bool 
# 170
_ImplicitlyConvertiblePair() 
# 171
{ 
# 172
return false; 
# 173
} 
# 175
template< class _U1, class _U2> static constexpr bool 
# 176
_MoveConstructiblePair() 
# 177
{ 
# 178
return false; 
# 179
} 
# 181
template< class _U1, class _U2> static constexpr bool 
# 182
_ImplicitlyMoveConvertiblePair() 
# 183
{ 
# 184
return false; 
# 185
} 
# 186
}; 
# 189
template< class _U1, class _U2> class __pair_base { 
# 192
template< class _T1, class _T2> friend struct pair; 
# 193
__pair_base() = default;
# 194
~__pair_base() = default;
# 195
__pair_base(const __pair_base &) = default;
# 196
__pair_base &operator=(const __pair_base &) = delete;
# 198
}; 
# 210 "/usr/include/c++/11/bits/stl_pair.h" 3
template< class _T1, class _T2> 
# 211
struct pair : private __pair_base< _T1, _T2>  { 
# 214
typedef _T1 first_type; 
# 215
typedef _T2 second_type; 
# 217
_T1 first; 
# 218
_T2 second; 
# 225
template< class _U1 = _T1, class 
# 226
_U2 = _T2, typename enable_if< __and_< __is_implicitly_default_constructible< _U1> , __is_implicitly_default_constructible< _U2> > ::value, bool> ::type 
# 230
 = true> constexpr 
# 232
pair() : first(), second() 
# 233
{ } 
# 236
template< class _U1 = _T1, class 
# 237
_U2 = _T2, typename enable_if< __and_< is_default_constructible< _U1> , is_default_constructible< _U2> , __not_< __and_< __is_implicitly_default_constructible< _U1> , __is_implicitly_default_constructible< _U2> > > > ::value, bool> ::type 
# 244
 = false> constexpr explicit 
# 245
pair() : first(), second() 
# 246
{ } 
# 256 "/usr/include/c++/11/bits/stl_pair.h" 3
using _PCCP = _PCC< true, _T1, _T2> ; 
# 260
template< class _U1 = _T1, class _U2 = _T2, typename enable_if< _PCC< true, _T1, _T2> ::template _ConstructiblePair< _U1, _U2> () && _PCC< true, _T1, _T2> ::template _ImplicitlyConvertiblePair< _U1, _U2> (), bool> ::type 
# 265
 = true> constexpr 
# 266
pair(const _T1 &__a, const _T2 &__b) : first(__a), second(__b) 
# 267
{ } 
# 270
template< class _U1 = _T1, class _U2 = _T2, typename enable_if< _PCC< true, _T1, _T2> ::template _ConstructiblePair< _U1, _U2> () && (!_PCC< true, _T1, _T2> ::template _ImplicitlyConvertiblePair< _U1, _U2> ()), bool> ::type 
# 275
 = false> constexpr explicit 
# 276
pair(const _T1 &__a, const _T2 &__b) : first(__a), second(__b) 
# 277
{ } 
# 288 "/usr/include/c++/11/bits/stl_pair.h" 3
template< class _U1, class _U2> using _PCCFP = _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ; 
# 294
template< class _U1, class _U2, typename enable_if< _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _ConstructiblePair< _U1, _U2> () && _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _ImplicitlyConvertiblePair< _U1, _U2> (), bool> ::type 
# 299
 = true> constexpr 
# 300
pair(const pair< _U1, _U2>  &__p) : first((__p.first)), second((__p.second)) 
# 301
{ } 
# 303
template< class _U1, class _U2, typename enable_if< _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _ConstructiblePair< _U1, _U2> () && (!_PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _ImplicitlyConvertiblePair< _U1, _U2> ()), bool> ::type 
# 308
 = false> constexpr explicit 
# 309
pair(const pair< _U1, _U2>  &__p) : first((__p.first)), second((__p.second)) 
# 310
{ } 
# 314
constexpr pair(const pair &) = default;
# 315
constexpr pair(pair &&) = default;
# 318
template< class _U1, typename enable_if< _PCC< true, _T1, _T2> ::template _MoveCopyPair< true, _U1, _T2> (), bool> ::type 
# 321
 = true> constexpr 
# 322
pair(_U1 &&__x, const _T2 &__y) : first(std::forward< _U1> (__x)), second(__y) 
# 323
{ } 
# 325
template< class _U1, typename enable_if< _PCC< true, _T1, _T2> ::template _MoveCopyPair< false, _U1, _T2> (), bool> ::type 
# 328
 = false> constexpr explicit 
# 329
pair(_U1 &&__x, const _T2 &__y) : first(std::forward< _U1> (__x)), second(__y) 
# 330
{ } 
# 332
template< class _U2, typename enable_if< _PCC< true, _T1, _T2> ::template _CopyMovePair< true, _T1, _U2> (), bool> ::type 
# 335
 = true> constexpr 
# 336
pair(const _T1 &__x, _U2 &&__y) : first(__x), second(std::forward< _U2> (__y)) 
# 337
{ } 
# 339
template< class _U2, typename enable_if< _PCC< true, _T1, _T2> ::template _CopyMovePair< false, _T1, _U2> (), bool> ::type 
# 342
 = false> explicit 
# 343
pair(const _T1 &__x, _U2 &&__y) : first(__x), second(std::forward< _U2> (__y)) 
# 344
{ } 
# 346
template< class _U1, class _U2, typename enable_if< _PCC< true, _T1, _T2> ::template _MoveConstructiblePair< _U1, _U2> () && _PCC< true, _T1, _T2> ::template _ImplicitlyMoveConvertiblePair< _U1, _U2> (), bool> ::type 
# 351
 = true> constexpr 
# 352
pair(_U1 &&__x, _U2 &&__y) : first(std::forward< _U1> (__x)), second(std::forward< _U2> (__y)) 
# 353
{ } 
# 355
template< class _U1, class _U2, typename enable_if< _PCC< true, _T1, _T2> ::template _MoveConstructiblePair< _U1, _U2> () && (!_PCC< true, _T1, _T2> ::template _ImplicitlyMoveConvertiblePair< _U1, _U2> ()), bool> ::type 
# 360
 = false> constexpr explicit 
# 361
pair(_U1 &&__x, _U2 &&__y) : first(std::forward< _U1> (__x)), second(std::forward< _U2> (__y)) 
# 362
{ } 
# 365
template< class _U1, class _U2, typename enable_if< _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _MoveConstructiblePair< _U1, _U2> () && _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _ImplicitlyMoveConvertiblePair< _U1, _U2> (), bool> ::type 
# 370
 = true> constexpr 
# 371
pair(pair< _U1, _U2>  &&__p) : first(std::forward< _U1> ((__p.first))), second(std::forward< _U2> ((__p.second))) 
# 373
{ } 
# 375
template< class _U1, class _U2, typename enable_if< _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _MoveConstructiblePair< _U1, _U2> () && (!_PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _ImplicitlyMoveConvertiblePair< _U1, _U2> ()), bool> ::type 
# 380
 = false> constexpr explicit 
# 381
pair(pair< _U1, _U2>  &&__p) : first(std::forward< _U1> ((__p.first))), second(std::forward< _U2> ((__p.second))) 
# 383
{ } 
# 385
template< class ..._Args1, class ..._Args2> inline pair(std::piecewise_construct_t, tuple< _Args1...> , tuple< _Args2...> ); 
# 390
pair &operator=(typename conditional< __and_< is_copy_assignable< _T1> , is_copy_assignable< _T2> > ::value, const pair &, const std::__nonesuch &> ::type 
# 393
__p) 
# 394
{ 
# 395
(first) = (__p.first); 
# 396
(second) = (__p.second); 
# 397
return *this; 
# 398
} 
# 401
pair &operator=(typename conditional< __and_< is_move_assignable< _T1> , is_move_assignable< _T2> > ::value, pair &&, std::__nonesuch &&> ::type 
# 404
__p) noexcept(__and_< is_nothrow_move_assignable< _T1> , is_nothrow_move_assignable< _T2> > ::value) 
# 407
{ 
# 408
(first) = std::forward< first_type> ((__p.first)); 
# 409
(second) = std::forward< second_type> ((__p.second)); 
# 410
return *this; 
# 411
} 
# 413
template< class _U1, class _U2> typename enable_if< __and_< is_assignable< _T1 &, const _U1 &> , is_assignable< _T2 &, const _U2 &> > ::value, pair &> ::type 
# 418
operator=(const pair< _U1, _U2>  &__p) 
# 419
{ 
# 420
(first) = (__p.first); 
# 421
(second) = (__p.second); 
# 422
return *this; 
# 423
} 
# 425
template< class _U1, class _U2> typename enable_if< __and_< is_assignable< _T1 &, _U1 &&> , is_assignable< _T2 &, _U2 &&> > ::value, pair &> ::type 
# 430
operator=(pair< _U1, _U2>  &&__p) 
# 431
{ 
# 432
(first) = std::forward< _U1> ((__p.first)); 
# 433
(second) = std::forward< _U2> ((__p.second)); 
# 434
return *this; 
# 435
} 
# 439
void swap(pair &__p) noexcept(__and_< __is_nothrow_swappable< _T1> , __is_nothrow_swappable< _T2> > ::value) 
# 442
{ 
# 443
using std::swap;
# 444
swap(first, __p.first); 
# 445
swap(second, __p.second); 
# 446
} 
# 449
private: template< class ..._Args1, std::size_t ..._Indexes1, class ...
# 450
_Args2, std::size_t ..._Indexes2> inline 
# 449
pair(tuple< _Args1...>  &, tuple< _Args2...>  &, _Index_tuple< _Indexes1...> , _Index_tuple< _Indexes2...> ); 
# 455
}; 
# 460
template< class _T1, class _T2> pair(_T1, _T2)->pair< _T1, _T2> ; 
# 464
template< class _T1, class _T2> constexpr bool 
# 466
operator==(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 467
{ return ((__x.first) == (__y.first)) && ((__x.second) == (__y.second)); } 
# 487 "/usr/include/c++/11/bits/stl_pair.h" 3
template< class _T1, class _T2> constexpr bool 
# 489
operator<(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 490
{ return ((__x.first) < (__y.first)) || ((!((__y.first) < (__x.first))) && ((__x.second) < (__y.second))); 
# 491
} 
# 494
template< class _T1, class _T2> constexpr bool 
# 496
operator!=(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 497
{ return !(__x == __y); } 
# 500
template< class _T1, class _T2> constexpr bool 
# 502
operator>(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 503
{ return __y < __x; } 
# 506
template< class _T1, class _T2> constexpr bool 
# 508
operator<=(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 509
{ return !(__y < __x); } 
# 512
template< class _T1, class _T2> constexpr bool 
# 514
operator>=(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 515
{ return !(__x < __y); } 
# 524 "/usr/include/c++/11/bits/stl_pair.h" 3
template< class _T1, class _T2> inline typename enable_if< __and_< __is_swappable< _T1> , __is_swappable< _T2> > ::value> ::type 
# 533
swap(pair< _T1, _T2>  &__x, pair< _T1, _T2>  &__y) noexcept(noexcept(__x.swap(__y))) 
# 535
{ __x.swap(__y); } 
# 538
template < typename _T1, typename _T2 >
    typename enable_if < ! __and_ < __is_swappable < _T1 >,
          __is_swappable < _T2 > > :: value > :: type
    swap ( pair < _T1, _T2 > &, pair < _T1, _T2 > & ) = delete;
# 564 "/usr/include/c++/11/bits/stl_pair.h" 3
template< class _T1, class _T2> constexpr pair< typename __decay_and_strip< _T1> ::__type, typename __decay_and_strip< _T2> ::__type>  
# 567
make_pair(_T1 &&__x, _T2 &&__y) 
# 568
{ 
# 569
typedef typename __decay_and_strip< _T1> ::__type __ds_type1; 
# 570
typedef typename __decay_and_strip< _T2> ::__type __ds_type2; 
# 571
typedef pair< typename __decay_and_strip< _T1> ::__type, typename __decay_and_strip< _T2> ::__type>  __pair_type; 
# 572
return __pair_type(std::forward< _T1> (__x), std::forward< _T2> (__y)); 
# 573
} 
# 584 "/usr/include/c++/11/bits/stl_pair.h" 3
}
# 74 "/usr/include/c++/11/bits/stl_iterator_base_types.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 93 "/usr/include/c++/11/bits/stl_iterator_base_types.h" 3
struct input_iterator_tag { }; 
# 96
struct output_iterator_tag { }; 
# 99
struct forward_iterator_tag : public input_iterator_tag { }; 
# 103
struct bidirectional_iterator_tag : public forward_iterator_tag { }; 
# 107
struct random_access_iterator_tag : public bidirectional_iterator_tag { }; 
# 125 "/usr/include/c++/11/bits/stl_iterator_base_types.h" 3
template< class _Category, class _Tp, class _Distance = ptrdiff_t, class 
# 126
_Pointer = _Tp *, class _Reference = _Tp &> 
# 127
struct iterator { 
# 130
typedef _Category iterator_category; 
# 132
typedef _Tp value_type; 
# 134
typedef _Distance difference_type; 
# 136
typedef _Pointer pointer; 
# 138
typedef _Reference reference; 
# 139
}; 
# 149 "/usr/include/c++/11/bits/stl_iterator_base_types.h" 3
template< class _Iterator> struct iterator_traits; 
# 155
template< class _Iterator, class  = __void_t< > > 
# 156
struct __iterator_traits { }; 
# 160
template< class _Iterator> 
# 161
struct __iterator_traits< _Iterator, __void_t< typename _Iterator::iterator_category, typename _Iterator::value_type, typename _Iterator::difference_type, typename _Iterator::pointer, typename _Iterator::reference> >  { 
# 168
typedef typename _Iterator::iterator_category iterator_category; 
# 169
typedef typename _Iterator::value_type value_type; 
# 170
typedef typename _Iterator::difference_type difference_type; 
# 171
typedef typename _Iterator::pointer pointer; 
# 172
typedef typename _Iterator::reference reference; 
# 173
}; 
# 176
template< class _Iterator> 
# 177
struct iterator_traits : public __iterator_traits< _Iterator>  { 
# 178
}; 
# 209 "/usr/include/c++/11/bits/stl_iterator_base_types.h" 3
template< class _Tp> 
# 210
struct iterator_traits< _Tp *>  { 
# 212
typedef random_access_iterator_tag iterator_category; 
# 213
typedef _Tp value_type; 
# 214
typedef ptrdiff_t difference_type; 
# 215
typedef _Tp *pointer; 
# 216
typedef _Tp &reference; 
# 217
}; 
# 220
template< class _Tp> 
# 221
struct iterator_traits< const _Tp *>  { 
# 223
typedef random_access_iterator_tag iterator_category; 
# 224
typedef _Tp value_type; 
# 225
typedef ptrdiff_t difference_type; 
# 226
typedef const _Tp *pointer; 
# 227
typedef const _Tp &reference; 
# 228
}; 
# 235
template< class _Iter> constexpr typename iterator_traits< _Iter> ::iterator_category 
# 238
__iterator_category(const _Iter &) 
# 239
{ return typename iterator_traits< _Iter> ::iterator_category(); } 
# 244
template< class _Iter> using __iterator_category_t = typename iterator_traits< _Iter> ::iterator_category; 
# 248
template< class _InIter> using _RequireInputIter = __enable_if_t< is_convertible< __iterator_category_t< _InIter> , input_iterator_tag> ::value> ; 
# 253
template< class _It, class 
# 254
_Cat = __iterator_category_t< _It> > 
# 255
struct __is_random_access_iter : public is_base_of< random_access_iterator_tag, _Cat>  { 
# 258
typedef is_base_of< std::random_access_iterator_tag, _Cat>  _Base; 
# 259
enum { __value = is_base_of< std::random_access_iterator_tag, _Cat> ::value}; 
# 260
}; 
# 269
}
# 67 "/usr/include/c++/11/bits/stl_iterator_base_funcs.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 73
template< class > struct _List_iterator; 
# 74
template< class > struct _List_const_iterator; 
# 77
template< class _InputIterator> constexpr typename iterator_traits< _InputIterator> ::difference_type 
# 80
__distance(_InputIterator __first, _InputIterator __last, input_iterator_tag) 
# 82
{ 
# 86
typename iterator_traits< _InputIterator> ::difference_type __n = (0); 
# 87
while (__first != __last) 
# 88
{ 
# 89
++__first; 
# 90
++__n; 
# 91
}  
# 92
return __n; 
# 93
} 
# 95
template< class _RandomAccessIterator> constexpr typename iterator_traits< _RandomAccessIterator> ::difference_type 
# 98
__distance(_RandomAccessIterator __first, _RandomAccessIterator __last, random_access_iterator_tag) 
# 100
{ 
# 104
return __last - __first; 
# 105
} 
# 109
template< class _Tp> ptrdiff_t __distance(_List_iterator< _Tp> , _List_iterator< _Tp> , input_iterator_tag); 
# 115
template< class _Tp> ptrdiff_t __distance(_List_const_iterator< _Tp> , _List_const_iterator< _Tp> , input_iterator_tag); 
# 135 "/usr/include/c++/11/bits/stl_iterator_base_funcs.h" 3
template< class _InputIterator> constexpr typename iterator_traits< _InputIterator> ::difference_type 
# 138
distance(_InputIterator __first, _InputIterator __last) 
# 139
{ 
# 141
return std::__distance(__first, __last, std::__iterator_category(__first)); 
# 143
} 
# 145
template< class _InputIterator, class _Distance> constexpr void 
# 147
__advance(_InputIterator &__i, _Distance __n, input_iterator_tag) 
# 148
{ 
# 151
do { if (__builtin_is_constant_evaluated() && (!((bool)(__n >= 0)))) { __builtin_unreachable(); }  } while (false); 
# 152
while (__n--) { 
# 153
++__i; }  
# 154
} 
# 156
template< class _BidirectionalIterator, class _Distance> constexpr void 
# 158
__advance(_BidirectionalIterator &__i, _Distance __n, bidirectional_iterator_tag) 
# 160
{ 
# 164
if (__n > 0) { 
# 165
while (__n--) { 
# 166
++__i; }  } else { 
# 168
while (__n++) { 
# 169
--__i; }  }  
# 170
} 
# 172
template< class _RandomAccessIterator, class _Distance> constexpr void 
# 174
__advance(_RandomAccessIterator &__i, _Distance __n, random_access_iterator_tag) 
# 176
{ 
# 180
if (__builtin_constant_p(__n) && (__n == 1)) { 
# 181
++__i; } else { 
# 182
if (__builtin_constant_p(__n) && (__n == (-1))) { 
# 183
--__i; } else { 
# 185
__i += __n; }  }  
# 186
} 
# 200 "/usr/include/c++/11/bits/stl_iterator_base_funcs.h" 3
template< class _InputIterator, class _Distance> constexpr void 
# 202
advance(_InputIterator &__i, _Distance __n) 
# 203
{ 
# 205
typename iterator_traits< _InputIterator> ::difference_type __d = __n; 
# 206
std::__advance(__i, __d, std::__iterator_category(__i)); 
# 207
} 
# 211
template< class _InputIterator> constexpr _InputIterator 
# 213
next(_InputIterator __x, typename iterator_traits< _InputIterator> ::difference_type 
# 214
__n = 1) 
# 215
{ 
# 218
std::advance(__x, __n); 
# 219
return __x; 
# 220
} 
# 222
template< class _BidirectionalIterator> constexpr _BidirectionalIterator 
# 224
prev(_BidirectionalIterator __x, typename iterator_traits< _BidirectionalIterator> ::difference_type 
# 225
__n = 1) 
# 226
{ 
# 230
std::advance(__x, -__n); 
# 231
return __x; 
# 232
} 
# 237
}
# 42 "/usr/include/c++/11/bits/ptr_traits.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 46
class __undefined; 
# 49
template< class _Tp, class _Up> 
# 50
struct __replace_first_arg { 
# 51
}; 
# 53
template< template< class , class ...>  class _Template, class _Up, class 
# 54
_Tp, class ..._Types> 
# 55
struct __replace_first_arg< _Template< _Tp, _Types...> , _Up>  { 
# 56
using type = _Template< _Up, _Types...> ; }; 
# 58
template< class _Tp, class _Up> using __replace_first_arg_t = typename __replace_first_arg< _Tp, _Up> ::type; 
# 61
template< class _Tp> using __make_not_void = typename conditional< is_void< _Tp> ::value, __undefined, _Tp> ::type; 
# 65
template< class _Ptr> 
# 66
struct __ptr_traits_elem_1 { 
# 67
}; 
# 69
template< template< class , class ...>  class _SomePointer, class _Tp, class ...
# 70
_Args> 
# 71
struct __ptr_traits_elem_1< _SomePointer< _Tp, _Args...> >  { 
# 73
using element_type = _Tp; 
# 74
using pointer = _SomePointer< _Tp, _Args...> ; 
# 77
static pointer pointer_to(__make_not_void< element_type>  &__e) 
# 78
{ return pointer::pointer_to(__e); } 
# 79
}; 
# 81
template< class _Ptr, class  = void> 
# 82
struct __ptr_traits_elem : public __ptr_traits_elem_1< _Ptr>  { 
# 83
}; 
# 85
template< class _Ptr> 
# 86
struct __ptr_traits_elem< _Ptr, __void_t< typename _Ptr::element_type> >  { 
# 88
using element_type = typename _Ptr::element_type; 
# 91
static _Ptr pointer_to(__make_not_void< element_type>  &__e) 
# 92
{ return _Ptr::pointer_to(__e); } 
# 93
}; 
# 99
template< class _Ptr> 
# 100
struct pointer_traits : public __ptr_traits_elem< _Ptr>  { 
# 104
private: 
# 103
template< class _Tp> using __difference_type = typename _Tp::difference_type; 
# 106
template< class _Tp, class _Up, class  = void> 
# 107
struct __rebind : public __replace_first_arg< _Tp, _Up>  { }; 
# 109
template< class _Tp, class _Up> 
# 110
struct __rebind< _Tp, _Up, std::__void_t< typename _Tp::template rebind< _Up> > >  { 
# 111
using type = typename _Tp::template rebind< _Up> ; }; 
# 115
public: using pointer = _Ptr; 
# 118
using difference_type = std::__detected_or_t< std::ptrdiff_t, __difference_type, _Ptr> ; 
# 122
template< class _Up> using rebind = typename __rebind< _Ptr, _Up> ::type; 
# 124
}; 
# 130
template< class _Tp> 
# 131
struct pointer_traits< _Tp *>  { 
# 134
typedef _Tp *pointer; 
# 136
typedef _Tp element_type; 
# 138
typedef ptrdiff_t difference_type; 
# 140
template< class _Up> using rebind = _Up *; 
# 149
static pointer pointer_to(__make_not_void< element_type>  &__r) noexcept 
# 150
{ return std::addressof(__r); } 
# 151
}; 
# 154
template< class _Ptr, class _Tp> using __ptr_rebind = typename pointer_traits< _Ptr> ::template rebind< _Tp> ; 
# 157
template< class _Tp> constexpr _Tp *
# 159
__to_address(_Tp *__ptr) noexcept 
# 160
{ 
# 161
static_assert((!std::template is_function< _Tp> ::value), "not a function pointer");
# 162
return __ptr; 
# 163
} 
# 166
template< class _Ptr> constexpr typename pointer_traits< _Ptr> ::element_type *
# 168
__to_address(const _Ptr &__ptr) 
# 169
{ return std::__to_address(__ptr.operator->()); } 
# 215 "/usr/include/c++/11/bits/ptr_traits.h" 3
}
# 88 "/usr/include/c++/11/bits/stl_iterator.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 127 "/usr/include/c++/11/bits/stl_iterator.h" 3
template< class _Iterator> 
# 128
class reverse_iterator : public iterator< typename iterator_traits< _Iterator> ::iterator_category, typename iterator_traits< _Iterator> ::value_type, typename iterator_traits< _Iterator> ::difference_type, typename iterator_traits< _Iterator> ::pointer, typename iterator_traits< _Iterator> ::reference>  { 
# 135
template< class _Iter> friend class reverse_iterator; 
# 147 "/usr/include/c++/11/bits/stl_iterator.h" 3
protected: _Iterator current; 
# 149
typedef iterator_traits< _Iterator>  __traits_type; 
# 152
public: typedef _Iterator iterator_type; 
# 153
typedef typename iterator_traits< _Iterator> ::pointer pointer; 
# 155
typedef typename iterator_traits< _Iterator> ::difference_type difference_type; 
# 156
typedef typename iterator_traits< _Iterator> ::reference reference; 
# 178 "/usr/include/c++/11/bits/stl_iterator.h" 3
constexpr reverse_iterator() : current() { } 
# 184
constexpr explicit reverse_iterator(iterator_type __x) : current(__x) { } 
# 190
constexpr reverse_iterator(const reverse_iterator &__x) : current(__x.current) 
# 191
{ } 
# 194
reverse_iterator &operator=(const reverse_iterator &) = default;
# 201
template< class _Iter> constexpr 
# 206
reverse_iterator(const reverse_iterator< _Iter>  &__x) : current((__x.current)) 
# 207
{ } 
# 210
template< class _Iter> constexpr reverse_iterator &
# 217
operator=(const reverse_iterator< _Iter>  &__x) 
# 218
{ 
# 219
(current) = (__x.current); 
# 220
return *this; 
# 221
} 
# 228
constexpr iterator_type base() const 
# 229
{ return current; } 
# 242 "/usr/include/c++/11/bits/stl_iterator.h" 3
constexpr reference operator*() const 
# 243
{ 
# 244
_Iterator __tmp = current; 
# 245
return *(--__tmp); 
# 246
} 
# 254
constexpr pointer operator->() const 
# 259
{ 
# 262
_Iterator __tmp = current; 
# 263
--__tmp; 
# 264
return _S_to_pointer(__tmp); 
# 265
} 
# 273
constexpr reverse_iterator &operator++() 
# 274
{ 
# 275
--(current); 
# 276
return *this; 
# 277
} 
# 285
constexpr reverse_iterator operator++(int) 
# 286
{ 
# 287
reverse_iterator __tmp = *this; 
# 288
--(current); 
# 289
return __tmp; 
# 290
} 
# 298
constexpr reverse_iterator &operator--() 
# 299
{ 
# 300
++(current); 
# 301
return *this; 
# 302
} 
# 310
constexpr reverse_iterator operator--(int) 
# 311
{ 
# 312
reverse_iterator __tmp = *this; 
# 313
++(current); 
# 314
return __tmp; 
# 315
} 
# 323
constexpr reverse_iterator operator+(difference_type __n) const 
# 324
{ return ((reverse_iterator)((current) - __n)); } 
# 333
constexpr reverse_iterator &operator+=(difference_type __n) 
# 334
{ 
# 335
(current) -= __n; 
# 336
return *this; 
# 337
} 
# 345
constexpr reverse_iterator operator-(difference_type __n) const 
# 346
{ return ((reverse_iterator)((current) + __n)); } 
# 355
constexpr reverse_iterator &operator-=(difference_type __n) 
# 356
{ 
# 357
(current) += __n; 
# 358
return *this; 
# 359
} 
# 367
constexpr reference operator[](difference_type __n) const 
# 368
{ return *((*this) + __n); } 
# 398 "/usr/include/c++/11/bits/stl_iterator.h" 3
private: 
# 396
template< class _Tp> static constexpr _Tp *
# 398
_S_to_pointer(_Tp *__p) 
# 399
{ return __p; } 
# 401
template< class _Tp> static constexpr pointer 
# 403
_S_to_pointer(_Tp __t) 
# 404
{ return __t.operator->(); } 
# 405
}; 
# 418 "/usr/include/c++/11/bits/stl_iterator.h" 3
template< class _Iterator> constexpr bool 
# 420
operator==(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 421
__y) 
# 422
{ return __x.base() == __y.base(); } 
# 424
template< class _Iterator> constexpr bool 
# 426
operator<(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 427
__y) 
# 428
{ return __y.base() < __x.base(); } 
# 430
template< class _Iterator> constexpr bool 
# 432
operator!=(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 433
__y) 
# 434
{ return !(__x == __y); } 
# 436
template< class _Iterator> constexpr bool 
# 438
operator>(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 439
__y) 
# 440
{ return __y < __x; } 
# 442
template< class _Iterator> constexpr bool 
# 444
operator<=(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 445
__y) 
# 446
{ return !(__y < __x); } 
# 448
template< class _Iterator> constexpr bool 
# 450
operator>=(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 451
__y) 
# 452
{ return !(__x < __y); } 
# 457
template< class _IteratorL, class _IteratorR> constexpr bool 
# 459
operator==(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 460
__y) 
# 461
{ return __x.base() == __y.base(); } 
# 463
template< class _IteratorL, class _IteratorR> constexpr bool 
# 465
operator<(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 466
__y) 
# 467
{ return __x.base() > __y.base(); } 
# 469
template< class _IteratorL, class _IteratorR> constexpr bool 
# 471
operator!=(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 472
__y) 
# 473
{ return __x.base() != __y.base(); } 
# 475
template< class _IteratorL, class _IteratorR> constexpr bool 
# 477
operator>(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 478
__y) 
# 479
{ return __x.base() < __y.base(); } 
# 481
template< class _IteratorL, class _IteratorR> constexpr bool 
# 483
operator<=(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 484
__y) 
# 485
{ return __x.base() >= __y.base(); } 
# 487
template< class _IteratorL, class _IteratorR> constexpr bool 
# 489
operator>=(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 490
__y) 
# 491
{ return __x.base() <= __y.base(); } 
# 575 "/usr/include/c++/11/bits/stl_iterator.h" 3
template< class _IteratorL, class _IteratorR> constexpr auto 
# 577
operator-(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 578
__y)->__decltype((__y.base() - __x.base())) 
# 580
{ return __y.base() - __x.base(); } 
# 583
template< class _Iterator> constexpr reverse_iterator< _Iterator>  
# 585
operator+(typename reverse_iterator< _Iterator> ::difference_type __n, const reverse_iterator< _Iterator>  &
# 586
__x) 
# 587
{ return ((reverse_iterator< _Iterator> )(__x.base() - __n)); } 
# 591
template< class _Iterator> constexpr reverse_iterator< _Iterator>  
# 593
__make_reverse_iterator(_Iterator __i) 
# 594
{ return ((reverse_iterator< _Iterator> )(__i)); } 
# 602
template< class _Iterator> constexpr reverse_iterator< _Iterator>  
# 604
make_reverse_iterator(_Iterator __i) 
# 605
{ return ((reverse_iterator< _Iterator> )(__i)); } 
# 616 "/usr/include/c++/11/bits/stl_iterator.h" 3
template< class _Iterator> auto 
# 619
__niter_base(reverse_iterator< _Iterator>  __it)->__decltype((__make_reverse_iterator(__niter_base(__it.base())))) 
# 621
{ return __make_reverse_iterator(__niter_base(__it.base())); } 
# 623
template< class _Iterator> 
# 624
struct __is_move_iterator< reverse_iterator< _Iterator> >  : public std::__is_move_iterator< _Iterator>  { 
# 626
}; 
# 628
template< class _Iterator> auto 
# 631
__miter_base(reverse_iterator< _Iterator>  __it)->__decltype((__make_reverse_iterator(__miter_base(__it.base())))) 
# 633
{ return __make_reverse_iterator(__miter_base(__it.base())); } 
# 647 "/usr/include/c++/11/bits/stl_iterator.h" 3
template< class _Container> 
# 648
class back_insert_iterator : public iterator< output_iterator_tag, void, void, void, void>  { 
# 652
protected: _Container *container; 
# 656
public: typedef _Container container_type; 
# 665
explicit back_insert_iterator(_Container &__x) : container(std::__addressof(__x)) 
# 666
{ } 
# 689 "/usr/include/c++/11/bits/stl_iterator.h" 3
back_insert_iterator &operator=(const typename _Container::value_type &__value) 
# 690
{ 
# 691
(container)->push_back(__value); 
# 692
return *this; 
# 693
} 
# 697
back_insert_iterator &operator=(typename _Container::value_type &&__value) 
# 698
{ 
# 699
(container)->push_back(std::move(__value)); 
# 700
return *this; 
# 701
} 
# 707
back_insert_iterator &operator*() 
# 708
{ return *this; } 
# 713
back_insert_iterator &operator++() 
# 714
{ return *this; } 
# 719
back_insert_iterator operator++(int) 
# 720
{ return *this; } 
# 721
}; 
# 734 "/usr/include/c++/11/bits/stl_iterator.h" 3
template< class _Container> inline back_insert_iterator< _Container>  
# 737
back_inserter(_Container &__x) 
# 738
{ return ((back_insert_iterator< _Container> )(__x)); } 
# 750 "/usr/include/c++/11/bits/stl_iterator.h" 3
template< class _Container> 
# 751
class front_insert_iterator : public iterator< output_iterator_tag, void, void, void, void>  { 
# 755
protected: _Container *container; 
# 759
public: typedef _Container container_type; 
# 768
explicit front_insert_iterator(_Container &__x) : container(std::__addressof(__x)) 
# 769
{ } 
# 792 "/usr/include/c++/11/bits/stl_iterator.h" 3
front_insert_iterator &operator=(const typename _Container::value_type &__value) 
# 793
{ 
# 794
(container)->push_front(__value); 
# 795
return *this; 
# 796
} 
# 800
front_insert_iterator &operator=(typename _Container::value_type &&__value) 
# 801
{ 
# 802
(container)->push_front(std::move(__value)); 
# 803
return *this; 
# 804
} 
# 810
front_insert_iterator &operator*() 
# 811
{ return *this; } 
# 816
front_insert_iterator &operator++() 
# 817
{ return *this; } 
# 822
front_insert_iterator operator++(int) 
# 823
{ return *this; } 
# 824
}; 
# 837 "/usr/include/c++/11/bits/stl_iterator.h" 3
template< class _Container> inline front_insert_iterator< _Container>  
# 840
front_inserter(_Container &__x) 
# 841
{ return ((front_insert_iterator< _Container> )(__x)); } 
# 857 "/usr/include/c++/11/bits/stl_iterator.h" 3
template< class _Container> 
# 858
class insert_iterator : public iterator< output_iterator_tag, void, void, void, void>  { 
# 868
typedef typename _Container::iterator _Iter; 
# 871
protected: _Container *container; 
# 872
_Iter iter; 
# 877
public: typedef _Container container_type; 
# 890 "/usr/include/c++/11/bits/stl_iterator.h" 3
insert_iterator(_Container &__x, _Iter __i) : container(std::__addressof(__x)), iter(__i) 
# 891
{ } 
# 927 "/usr/include/c++/11/bits/stl_iterator.h" 3
insert_iterator &operator=(const typename _Container::value_type &__value) 
# 928
{ 
# 929
(iter) = (container)->insert(iter, __value); 
# 930
++(iter); 
# 931
return *this; 
# 932
} 
# 936
insert_iterator &operator=(typename _Container::value_type &&__value) 
# 937
{ 
# 938
(iter) = (container)->insert(iter, std::move(__value)); 
# 939
++(iter); 
# 940
return *this; 
# 941
} 
# 947
insert_iterator &operator*() 
# 948
{ return *this; } 
# 953
insert_iterator &operator++() 
# 954
{ return *this; } 
# 959
insert_iterator &operator++(int) 
# 960
{ return *this; } 
# 961
}; 
# 981 "/usr/include/c++/11/bits/stl_iterator.h" 3
template< class _Container> inline insert_iterator< _Container>  
# 983
inserter(_Container &__x, typename _Container::iterator __i) 
# 984
{ return insert_iterator< _Container> (__x, __i); } 
# 990
}
# 992
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 1003 "/usr/include/c++/11/bits/stl_iterator.h" 3
template< class _Iterator, class _Container> 
# 1004
class __normal_iterator { 
# 1007
protected: _Iterator _M_current; 
# 1009
typedef std::iterator_traits< _Iterator>  __traits_type; 
# 1012
public: typedef _Iterator iterator_type; 
# 1013
typedef typename std::iterator_traits< _Iterator> ::iterator_category iterator_category; 
# 1014
typedef typename std::iterator_traits< _Iterator> ::value_type value_type; 
# 1015
typedef typename std::iterator_traits< _Iterator> ::difference_type difference_type; 
# 1016
typedef typename std::iterator_traits< _Iterator> ::reference reference; 
# 1017
typedef typename std::iterator_traits< _Iterator> ::pointer pointer; 
# 1023
constexpr __normal_iterator() noexcept : _M_current(_Iterator()) 
# 1024
{ } 
# 1027
explicit __normal_iterator(const _Iterator &__i) noexcept : _M_current(__i) 
# 1028
{ } 
# 1031
template< class _Iter> 
# 1033
__normal_iterator(const __normal_iterator< _Iter, typename __enable_if< std::__are_same< _Iter, typename _Container::pointer> ::__value, _Container> ::__type>  &
# 1036
__i) noexcept : _M_current(__i.base()) 
# 1037
{ } 
# 1042
reference operator*() const noexcept 
# 1043
{ return *(_M_current); } 
# 1047
pointer operator->() const noexcept 
# 1048
{ return _M_current; } 
# 1052
__normal_iterator &operator++() noexcept 
# 1053
{ 
# 1054
++(_M_current); 
# 1055
return *this; 
# 1056
} 
# 1060
__normal_iterator operator++(int) noexcept 
# 1061
{ return ((__normal_iterator)((_M_current)++)); } 
# 1066
__normal_iterator &operator--() noexcept 
# 1067
{ 
# 1068
--(_M_current); 
# 1069
return *this; 
# 1070
} 
# 1074
__normal_iterator operator--(int) noexcept 
# 1075
{ return ((__normal_iterator)((_M_current)--)); } 
# 1080
reference operator[](difference_type __n) const noexcept 
# 1081
{ return (_M_current)[__n]; } 
# 1085
__normal_iterator &operator+=(difference_type __n) noexcept 
# 1086
{ (_M_current) += __n; return *this; } 
# 1090
__normal_iterator operator+(difference_type __n) const noexcept 
# 1091
{ return ((__normal_iterator)((_M_current) + __n)); } 
# 1095
__normal_iterator &operator-=(difference_type __n) noexcept 
# 1096
{ (_M_current) -= __n; return *this; } 
# 1100
__normal_iterator operator-(difference_type __n) const noexcept 
# 1101
{ return ((__normal_iterator)((_M_current) - __n)); } 
# 1105
const _Iterator &base() const noexcept 
# 1106
{ return _M_current; } 
# 1107
}; 
# 1152 "/usr/include/c++/11/bits/stl_iterator.h" 3
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 1155
operator==(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 1156
__rhs) noexcept 
# 1158
{ return __lhs.base() == __rhs.base(); } 
# 1160
template< class _Iterator, class _Container> inline bool 
# 1163
operator==(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 1164
__rhs) noexcept 
# 1166
{ return __lhs.base() == __rhs.base(); } 
# 1168
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 1171
operator!=(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 1172
__rhs) noexcept 
# 1174
{ return __lhs.base() != __rhs.base(); } 
# 1176
template< class _Iterator, class _Container> inline bool 
# 1179
operator!=(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 1180
__rhs) noexcept 
# 1182
{ return __lhs.base() != __rhs.base(); } 
# 1185
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 1187
operator<(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 1188
__rhs) noexcept 
# 1190
{ return __lhs.base() < __rhs.base(); } 
# 1192
template< class _Iterator, class _Container> inline bool 
# 1195
operator<(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 1196
__rhs) noexcept 
# 1198
{ return __lhs.base() < __rhs.base(); } 
# 1200
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 1202
operator>(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 1203
__rhs) noexcept 
# 1205
{ return __lhs.base() > __rhs.base(); } 
# 1207
template< class _Iterator, class _Container> inline bool 
# 1210
operator>(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 1211
__rhs) noexcept 
# 1213
{ return __lhs.base() > __rhs.base(); } 
# 1215
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 1217
operator<=(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 1218
__rhs) noexcept 
# 1220
{ return __lhs.base() <= __rhs.base(); } 
# 1222
template< class _Iterator, class _Container> inline bool 
# 1225
operator<=(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 1226
__rhs) noexcept 
# 1228
{ return __lhs.base() <= __rhs.base(); } 
# 1230
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 1232
operator>=(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 1233
__rhs) noexcept 
# 1235
{ return __lhs.base() >= __rhs.base(); } 
# 1237
template< class _Iterator, class _Container> inline bool 
# 1240
operator>=(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 1241
__rhs) noexcept 
# 1243
{ return __lhs.base() >= __rhs.base(); } 
# 1250
template< class _IteratorL, class _IteratorR, class _Container> inline auto 
# 1255
operator-(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 1256
__rhs) noexcept->__decltype((__lhs.base() - __rhs.base())) 
# 1263
{ return __lhs.base() - __rhs.base(); } 
# 1265
template< class _Iterator, class _Container> inline typename __normal_iterator< _Iterator, _Container> ::difference_type 
# 1268
operator-(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 1269
__rhs) noexcept 
# 1271
{ return __lhs.base() - __rhs.base(); } 
# 1273
template< class _Iterator, class _Container> inline __normal_iterator< _Iterator, _Container>  
# 1276
operator+(typename __normal_iterator< _Iterator, _Container> ::difference_type 
# 1277
__n, const __normal_iterator< _Iterator, _Container>  &__i) noexcept 
# 1279
{ return ((__normal_iterator< _Iterator, _Container> )(__i.base() + __n)); } 
# 1282
}
# 1284
namespace std __attribute((__visibility__("default"))) { 
# 1288
template< class _Iterator, class _Container> _Iterator 
# 1291
__niter_base(__gnu_cxx::__normal_iterator< _Iterator, _Container>  __it) noexcept(std::template is_nothrow_copy_constructible< _Iterator> ::value) 
# 1293
{ return __it.base(); } 
# 1342 "/usr/include/c++/11/bits/stl_iterator.h" 3
namespace __detail { 
# 1358 "/usr/include/c++/11/bits/stl_iterator.h" 3
}
# 1369 "/usr/include/c++/11/bits/stl_iterator.h" 3
template< class _Iterator> 
# 1370
class move_iterator { 
# 1375
_Iterator _M_current; 
# 1377
using __traits_type = iterator_traits< _Iterator> ; 
# 1379
using __base_ref = typename iterator_traits< _Iterator> ::reference; 
# 1382
template< class _Iter2> friend class move_iterator; 
# 1409 "/usr/include/c++/11/bits/stl_iterator.h" 3
public: using iterator_type = _Iterator; 
# 1422 "/usr/include/c++/11/bits/stl_iterator.h" 3
typedef typename iterator_traits< _Iterator> ::iterator_category iterator_category; 
# 1423
typedef typename iterator_traits< _Iterator> ::value_type value_type; 
# 1424
typedef typename iterator_traits< _Iterator> ::difference_type difference_type; 
# 1426
typedef _Iterator pointer; 
# 1431
typedef typename conditional< is_reference< __base_ref> ::value, typename remove_reference< __base_ref> ::type &&, __base_ref> ::type reference; 
# 1435
constexpr move_iterator() : _M_current() 
# 1436
{ } 
# 1439
constexpr explicit move_iterator(iterator_type __i) : _M_current(std::move(__i)) 
# 1440
{ } 
# 1442
template< class _Iter> constexpr 
# 1447
move_iterator(const move_iterator< _Iter>  &__i) : _M_current((__i._M_current)) 
# 1448
{ } 
# 1450
template< class _Iter> constexpr move_iterator &
# 1456
operator=(const move_iterator< _Iter>  &__i) 
# 1457
{ 
# 1458
(_M_current) = (__i._M_current); 
# 1459
return *this; 
# 1460
} 
# 1464
constexpr iterator_type base() const 
# 1465
{ return _M_current; } 
# 1477 "/usr/include/c++/11/bits/stl_iterator.h" 3
constexpr reference operator*() const 
# 1481
{ return static_cast< reference>(*(_M_current)); } 
# 1485
constexpr pointer operator->() const 
# 1486
{ return _M_current; } 
# 1489
constexpr move_iterator &operator++() 
# 1490
{ 
# 1491
++(_M_current); 
# 1492
return *this; 
# 1493
} 
# 1496
constexpr move_iterator operator++(int) 
# 1497
{ 
# 1498
move_iterator __tmp = *this; 
# 1499
++(_M_current); 
# 1500
return __tmp; 
# 1501
} 
# 1510
constexpr move_iterator &operator--() 
# 1511
{ 
# 1512
--(_M_current); 
# 1513
return *this; 
# 1514
} 
# 1517
constexpr move_iterator operator--(int) 
# 1518
{ 
# 1519
move_iterator __tmp = *this; 
# 1520
--(_M_current); 
# 1521
return __tmp; 
# 1522
} 
# 1525
constexpr move_iterator operator+(difference_type __n) const 
# 1526
{ return ((move_iterator)((_M_current) + __n)); } 
# 1529
constexpr move_iterator &operator+=(difference_type __n) 
# 1530
{ 
# 1531
(_M_current) += __n; 
# 1532
return *this; 
# 1533
} 
# 1536
constexpr move_iterator operator-(difference_type __n) const 
# 1537
{ return ((move_iterator)((_M_current) - __n)); } 
# 1540
constexpr move_iterator &operator-=(difference_type __n) 
# 1541
{ 
# 1542
(_M_current) -= __n; 
# 1543
return *this; 
# 1544
} 
# 1547
constexpr reference operator[](difference_type __n) const 
# 1551
{ return std::move((_M_current)[__n]); } 
# 1581 "/usr/include/c++/11/bits/stl_iterator.h" 3
}; 
# 1583
template< class _IteratorL, class _IteratorR> constexpr bool 
# 1585
operator==(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1586
__y) 
# 1590
{ return __x.base() == __y.base(); } 
# 1600 "/usr/include/c++/11/bits/stl_iterator.h" 3
template< class _IteratorL, class _IteratorR> constexpr bool 
# 1602
operator!=(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1603
__y) 
# 1604
{ return !(__x == __y); } 
# 1607
template< class _IteratorL, class _IteratorR> constexpr bool 
# 1609
operator<(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1610
__y) 
# 1614
{ return __x.base() < __y.base(); } 
# 1616
template< class _IteratorL, class _IteratorR> constexpr bool 
# 1618
operator<=(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1619
__y) 
# 1623
{ return !(__y < __x); } 
# 1625
template< class _IteratorL, class _IteratorR> constexpr bool 
# 1627
operator>(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1628
__y) 
# 1632
{ return __y < __x; } 
# 1634
template< class _IteratorL, class _IteratorR> constexpr bool 
# 1636
operator>=(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1637
__y) 
# 1641
{ return !(__x < __y); } 
# 1646
template< class _Iterator> constexpr bool 
# 1648
operator==(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1649
__y) 
# 1650
{ return __x.base() == __y.base(); } 
# 1659 "/usr/include/c++/11/bits/stl_iterator.h" 3
template< class _Iterator> constexpr bool 
# 1661
operator!=(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1662
__y) 
# 1663
{ return !(__x == __y); } 
# 1665
template< class _Iterator> constexpr bool 
# 1667
operator<(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1668
__y) 
# 1669
{ return __x.base() < __y.base(); } 
# 1671
template< class _Iterator> constexpr bool 
# 1673
operator<=(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1674
__y) 
# 1675
{ return !(__y < __x); } 
# 1677
template< class _Iterator> constexpr bool 
# 1679
operator>(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1680
__y) 
# 1681
{ return __y < __x; } 
# 1683
template< class _Iterator> constexpr bool 
# 1685
operator>=(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1686
__y) 
# 1687
{ return !(__x < __y); } 
# 1691
template< class _IteratorL, class _IteratorR> constexpr auto 
# 1693
operator-(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1694
__y)->__decltype((__x.base() - __y.base())) 
# 1696
{ return __x.base() - __y.base(); } 
# 1698
template< class _Iterator> constexpr move_iterator< _Iterator>  
# 1700
operator+(typename move_iterator< _Iterator> ::difference_type __n, const move_iterator< _Iterator>  &
# 1701
__x) 
# 1702
{ return __x + __n; } 
# 1704
template< class _Iterator> constexpr move_iterator< _Iterator>  
# 1706
make_move_iterator(_Iterator __i) 
# 1707
{ return ((move_iterator< _Iterator> )(std::move(__i))); } 
# 1709
template< class _Iterator, class _ReturnType = typename conditional< __move_if_noexcept_cond< typename iterator_traits< _Iterator> ::value_type> ::value, _Iterator, move_iterator< _Iterator> > ::type> constexpr _ReturnType 
# 1714
__make_move_if_noexcept_iterator(_Iterator __i) 
# 1715
{ return (_ReturnType)__i; } 
# 1719
template< class _Tp, class _ReturnType = typename conditional< __move_if_noexcept_cond< _Tp> ::value, const _Tp *, move_iterator< _Tp *> > ::type> constexpr _ReturnType 
# 1723
__make_move_if_noexcept_iterator(_Tp *__i) 
# 1724
{ return (_ReturnType)__i; } 
# 2447 "/usr/include/c++/11/bits/stl_iterator.h" 3
template< class _Iterator> auto 
# 2450
__niter_base(move_iterator< _Iterator>  __it)->__decltype((make_move_iterator(__niter_base(__it.base())))) 
# 2452
{ return make_move_iterator(__niter_base(__it.base())); } 
# 2454
template< class _Iterator> 
# 2455
struct __is_move_iterator< move_iterator< _Iterator> >  { 
# 2457
enum { __value = 1}; 
# 2458
typedef __true_type __type; 
# 2459
}; 
# 2461
template< class _Iterator> auto 
# 2464
__miter_base(move_iterator< _Iterator>  __it)->__decltype((__miter_base(__it.base()))) 
# 2466
{ return __miter_base(__it.base()); } 
# 2479 "/usr/include/c++/11/bits/stl_iterator.h" 3
template< class _InputIterator> using __iter_key_t = remove_const_t< typename iterator_traits< _InputIterator> ::value_type::first_type> ; 
# 2483
template< class _InputIterator> using __iter_val_t = typename iterator_traits< _InputIterator> ::value_type::second_type; 
# 2487
template< class _T1, class _T2> struct pair; 
# 2490
template< class _InputIterator> using __iter_to_alloc_t = pair< add_const_t< __iter_key_t< _InputIterator> > , __iter_val_t< _InputIterator> > ; 
# 2497
}
# 48 "/usr/include/c++/11/debug/debug.h" 3
namespace std { 
# 50
namespace __debug { }
# 51
}
# 56
namespace __gnu_debug { 
# 58
using namespace std::__debug;
# 60
template< class _Ite, class _Seq, class _Cat> struct _Safe_iterator; 
# 62
}
# 35 "/usr/include/c++/11/bits/predefined_ops.h" 3
namespace __gnu_cxx { 
# 37
namespace __ops { 
# 39
struct _Iter_less_iter { 
# 41
template< class _Iterator1, class _Iterator2> constexpr bool 
# 44
operator()(_Iterator1 __it1, _Iterator2 __it2) const 
# 45
{ return (*__it1) < (*__it2); } 
# 46
}; 
# 50
constexpr _Iter_less_iter __iter_less_iter() 
# 51
{ return _Iter_less_iter(); } 
# 53
struct _Iter_less_val { 
# 56
constexpr _Iter_less_val() = default;
# 63
explicit _Iter_less_val(_Iter_less_iter) { } 
# 65
template< class _Iterator, class _Value> bool 
# 68
operator()(_Iterator __it, _Value &__val) const 
# 69
{ return (*__it) < __val; } 
# 70
}; 
# 74
inline _Iter_less_val __iter_less_val() 
# 75
{ return _Iter_less_val(); } 
# 79
inline _Iter_less_val __iter_comp_val(_Iter_less_iter) 
# 80
{ return _Iter_less_val(); } 
# 82
struct _Val_less_iter { 
# 85
constexpr _Val_less_iter() = default;
# 92
explicit _Val_less_iter(_Iter_less_iter) { } 
# 94
template< class _Value, class _Iterator> bool 
# 97
operator()(_Value &__val, _Iterator __it) const 
# 98
{ return __val < (*__it); } 
# 99
}; 
# 103
inline _Val_less_iter __val_less_iter() 
# 104
{ return _Val_less_iter(); } 
# 108
inline _Val_less_iter __val_comp_iter(_Iter_less_iter) 
# 109
{ return _Val_less_iter(); } 
# 111
struct _Iter_equal_to_iter { 
# 113
template< class _Iterator1, class _Iterator2> bool 
# 116
operator()(_Iterator1 __it1, _Iterator2 __it2) const 
# 117
{ return (*__it1) == (*__it2); } 
# 118
}; 
# 122
inline _Iter_equal_to_iter __iter_equal_to_iter() 
# 123
{ return _Iter_equal_to_iter(); } 
# 125
struct _Iter_equal_to_val { 
# 127
template< class _Iterator, class _Value> bool 
# 130
operator()(_Iterator __it, _Value &__val) const 
# 131
{ return (*__it) == __val; } 
# 132
}; 
# 136
inline _Iter_equal_to_val __iter_equal_to_val() 
# 137
{ return _Iter_equal_to_val(); } 
# 141
inline _Iter_equal_to_val __iter_comp_val(_Iter_equal_to_iter) 
# 142
{ return _Iter_equal_to_val(); } 
# 144
template< class _Compare> 
# 145
struct _Iter_comp_iter { 
# 147
_Compare _M_comp; 
# 150
constexpr explicit _Iter_comp_iter(_Compare __comp) : _M_comp(std::move(__comp)) 
# 152
{ } 
# 154
template< class _Iterator1, class _Iterator2> constexpr bool 
# 157
operator()(_Iterator1 __it1, _Iterator2 __it2) 
# 158
{ return (bool)(_M_comp)(*__it1, *__it2); } 
# 159
}; 
# 161
template< class _Compare> constexpr _Iter_comp_iter< _Compare>  
# 164
__iter_comp_iter(_Compare __comp) 
# 165
{ return ((_Iter_comp_iter< _Compare> )(std::move(__comp))); } 
# 167
template< class _Compare> 
# 168
struct _Iter_comp_val { 
# 170
_Compare _M_comp; 
# 174
explicit _Iter_comp_val(_Compare __comp) : _M_comp(std::move(__comp)) 
# 176
{ } 
# 180
explicit _Iter_comp_val(const _Iter_comp_iter< _Compare>  &__comp) : _M_comp((__comp._M_comp)) 
# 182
{ } 
# 187
explicit _Iter_comp_val(_Iter_comp_iter< _Compare>  &&__comp) : _M_comp(std::move((__comp._M_comp))) 
# 189
{ } 
# 192
template< class _Iterator, class _Value> bool 
# 195
operator()(_Iterator __it, _Value &__val) 
# 196
{ return (bool)(_M_comp)(*__it, __val); } 
# 197
}; 
# 199
template< class _Compare> inline _Iter_comp_val< _Compare>  
# 202
__iter_comp_val(_Compare __comp) 
# 203
{ return ((_Iter_comp_val< _Compare> )(std::move(__comp))); } 
# 205
template< class _Compare> inline _Iter_comp_val< _Compare>  
# 208
__iter_comp_val(_Iter_comp_iter< _Compare>  __comp) 
# 209
{ return ((_Iter_comp_val< _Compare> )(std::move(__comp))); } 
# 211
template< class _Compare> 
# 212
struct _Val_comp_iter { 
# 214
_Compare _M_comp; 
# 218
explicit _Val_comp_iter(_Compare __comp) : _M_comp(std::move(__comp)) 
# 220
{ } 
# 224
explicit _Val_comp_iter(const _Iter_comp_iter< _Compare>  &__comp) : _M_comp((__comp._M_comp)) 
# 226
{ } 
# 231
explicit _Val_comp_iter(_Iter_comp_iter< _Compare>  &&__comp) : _M_comp(std::move((__comp._M_comp))) 
# 233
{ } 
# 236
template< class _Value, class _Iterator> bool 
# 239
operator()(_Value &__val, _Iterator __it) 
# 240
{ return (bool)(_M_comp)(__val, *__it); } 
# 241
}; 
# 243
template< class _Compare> inline _Val_comp_iter< _Compare>  
# 246
__val_comp_iter(_Compare __comp) 
# 247
{ return ((_Val_comp_iter< _Compare> )(std::move(__comp))); } 
# 249
template< class _Compare> inline _Val_comp_iter< _Compare>  
# 252
__val_comp_iter(_Iter_comp_iter< _Compare>  __comp) 
# 253
{ return ((_Val_comp_iter< _Compare> )(std::move(__comp))); } 
# 255
template< class _Value> 
# 256
struct _Iter_equals_val { 
# 258
_Value &_M_value; 
# 262
explicit _Iter_equals_val(_Value &__value) : _M_value(__value) 
# 264
{ } 
# 266
template< class _Iterator> bool 
# 269
operator()(_Iterator __it) 
# 270
{ return (*__it) == (_M_value); } 
# 271
}; 
# 273
template< class _Value> inline _Iter_equals_val< _Value>  
# 276
__iter_equals_val(_Value &__val) 
# 277
{ return ((_Iter_equals_val< _Value> )(__val)); } 
# 279
template< class _Iterator1> 
# 280
struct _Iter_equals_iter { 
# 282
_Iterator1 _M_it1; 
# 286
explicit _Iter_equals_iter(_Iterator1 __it1) : _M_it1(__it1) 
# 288
{ } 
# 290
template< class _Iterator2> bool 
# 293
operator()(_Iterator2 __it2) 
# 294
{ return (*__it2) == (*(_M_it1)); } 
# 295
}; 
# 297
template< class _Iterator> inline _Iter_equals_iter< _Iterator>  
# 300
__iter_comp_iter(_Iter_equal_to_iter, _Iterator __it) 
# 301
{ return ((_Iter_equals_iter< _Iterator> )(__it)); } 
# 303
template< class _Predicate> 
# 304
struct _Iter_pred { 
# 306
_Predicate _M_pred; 
# 310
explicit _Iter_pred(_Predicate __pred) : _M_pred(std::move(__pred)) 
# 312
{ } 
# 314
template< class _Iterator> bool 
# 317
operator()(_Iterator __it) 
# 318
{ return (bool)(_M_pred)(*__it); } 
# 319
}; 
# 321
template< class _Predicate> inline _Iter_pred< _Predicate>  
# 324
__pred_iter(_Predicate __pred) 
# 325
{ return ((_Iter_pred< _Predicate> )(std::move(__pred))); } 
# 327
template< class _Compare, class _Value> 
# 328
struct _Iter_comp_to_val { 
# 330
_Compare _M_comp; 
# 331
_Value &_M_value; 
# 334
_Iter_comp_to_val(_Compare __comp, _Value &__value) : _M_comp(std::move(__comp)), _M_value(__value) 
# 336
{ } 
# 338
template< class _Iterator> bool 
# 341
operator()(_Iterator __it) 
# 342
{ return (bool)(_M_comp)(*__it, _M_value); } 
# 343
}; 
# 345
template< class _Compare, class _Value> _Iter_comp_to_val< _Compare, _Value>  
# 348
__iter_comp_val(_Compare __comp, _Value &__val) 
# 349
{ 
# 350
return _Iter_comp_to_val< _Compare, _Value> (std::move(__comp), __val); 
# 351
} 
# 353
template< class _Compare, class _Iterator1> 
# 354
struct _Iter_comp_to_iter { 
# 356
_Compare _M_comp; 
# 357
_Iterator1 _M_it1; 
# 360
_Iter_comp_to_iter(_Compare __comp, _Iterator1 __it1) : _M_comp(std::move(__comp)), _M_it1(__it1) 
# 362
{ } 
# 364
template< class _Iterator2> bool 
# 367
operator()(_Iterator2 __it2) 
# 368
{ return (bool)(_M_comp)(*__it2, *(_M_it1)); } 
# 369
}; 
# 371
template< class _Compare, class _Iterator> inline _Iter_comp_to_iter< _Compare, _Iterator>  
# 374
__iter_comp_iter(_Iter_comp_iter< _Compare>  __comp, _Iterator __it) 
# 375
{ 
# 376
return _Iter_comp_to_iter< _Compare, _Iterator> (std::move((__comp._M_comp)), __it); 
# 378
} 
# 380
template< class _Predicate> 
# 381
struct _Iter_negate { 
# 383
_Predicate _M_pred; 
# 387
explicit _Iter_negate(_Predicate __pred) : _M_pred(std::move(__pred)) 
# 389
{ } 
# 391
template< class _Iterator> bool 
# 394
operator()(_Iterator __it) 
# 395
{ return !((bool)(_M_pred)(*__it)); } 
# 396
}; 
# 398
template< class _Predicate> inline _Iter_negate< _Predicate>  
# 401
__negate(_Iter_pred< _Predicate>  __pred) 
# 402
{ return ((_Iter_negate< _Predicate> )(std::move((__pred._M_pred)))); } 
# 404
}
# 405
}
# 79 "/usr/include/c++/11/bits/stl_algobase.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 87
template< class _Tp, class _Up> constexpr int 
# 90
__memcmp(const _Tp *__first1, const _Up *__first2, size_t __num) 
# 91
{ 
# 93
static_assert((sizeof(_Tp) == sizeof(_Up)), "can be compared with memcmp");
# 105 "/usr/include/c++/11/bits/stl_algobase.h" 3
return __builtin_memcmp(__first1, __first2, sizeof(_Tp) * __num); 
# 106
} 
# 149 "/usr/include/c++/11/bits/stl_algobase.h" 3
template< class _ForwardIterator1, class _ForwardIterator2> inline void 
# 152
iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b) 
# 153
{ 
# 182 "/usr/include/c++/11/bits/stl_algobase.h" 3
swap(*__a, *__b); 
# 184
} 
# 198 "/usr/include/c++/11/bits/stl_algobase.h" 3
template< class _ForwardIterator1, class _ForwardIterator2> _ForwardIterator2 
# 201
swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 202
__first2) 
# 203
{ 
# 209
; 
# 211
for (; __first1 != __last1; (++__first1), ((void)(++__first2))) { 
# 212
std::iter_swap(__first1, __first2); }  
# 213
return __first2; 
# 214
} 
# 227 "/usr/include/c++/11/bits/stl_algobase.h" 3
template< class _Tp> constexpr const _Tp &
# 230
min(const _Tp &__a, const _Tp &__b) 
# 231
{ 
# 235
if (__b < __a) { 
# 236
return __b; }  
# 237
return __a; 
# 238
} 
# 251 "/usr/include/c++/11/bits/stl_algobase.h" 3
template< class _Tp> constexpr const _Tp &
# 254
max(const _Tp &__a, const _Tp &__b) 
# 255
{ 
# 259
if (__a < __b) { 
# 260
return __b; }  
# 261
return __a; 
# 262
} 
# 275 "/usr/include/c++/11/bits/stl_algobase.h" 3
template< class _Tp, class _Compare> constexpr const _Tp &
# 278
min(const _Tp &__a, const _Tp &__b, _Compare __comp) 
# 279
{ 
# 281
if (__comp(__b, __a)) { 
# 282
return __b; }  
# 283
return __a; 
# 284
} 
# 297 "/usr/include/c++/11/bits/stl_algobase.h" 3
template< class _Tp, class _Compare> constexpr const _Tp &
# 300
max(const _Tp &__a, const _Tp &__b, _Compare __comp) 
# 301
{ 
# 303
if (__comp(__a, __b)) { 
# 304
return __b; }  
# 305
return __a; 
# 306
} 
# 310
template< class _Iterator> inline _Iterator 
# 313
__niter_base(_Iterator __it) noexcept(std::template is_nothrow_copy_constructible< _Iterator> ::value) 
# 315
{ return __it; } 
# 317
template< class _Ite, class _Seq> _Ite __niter_base(const __gnu_debug::_Safe_iterator< _Ite, _Seq, random_access_iterator_tag>  &); 
# 325
template< class _From, class _To> inline _From 
# 328
__niter_wrap(_From __from, _To __res) 
# 329
{ return __from + (__res - std::__niter_base(__from)); } 
# 332
template< class _Iterator> inline _Iterator 
# 335
__niter_wrap(const _Iterator &, _Iterator __res) 
# 336
{ return __res; } 
# 344
template< bool _IsMove, bool _IsSimple, class _Category> 
# 345
struct __copy_move { 
# 347
template< class _II, class _OI> static _OI 
# 350
__copy_m(_II __first, _II __last, _OI __result) 
# 351
{ 
# 352
for (; __first != __last; (++__result), ((void)(++__first))) { 
# 353
(*__result) = (*__first); }  
# 354
return __result; 
# 355
} 
# 356
}; 
# 359
template< class _Category> 
# 360
struct __copy_move< true, false, _Category>  { 
# 362
template< class _II, class _OI> static _OI 
# 365
__copy_m(_II __first, _II __last, _OI __result) 
# 366
{ 
# 367
for (; __first != __last; (++__result), ((void)(++__first))) { 
# 368
(*__result) = std::move(*__first); }  
# 369
return __result; 
# 370
} 
# 371
}; 
# 375
template<> struct __copy_move< false, false, random_access_iterator_tag>  { 
# 377
template< class _II, class _OI> static _OI 
# 380
__copy_m(_II __first, _II __last, _OI __result) 
# 381
{ 
# 382
typedef typename iterator_traits< _II> ::difference_type _Distance; 
# 383
for (_Distance __n = __last - __first; __n > 0; --__n) 
# 384
{ 
# 385
(*__result) = (*__first); 
# 386
++__first; 
# 387
++__result; 
# 388
}  
# 389
return __result; 
# 390
} 
# 391
}; 
# 395
template<> struct __copy_move< true, false, random_access_iterator_tag>  { 
# 397
template< class _II, class _OI> static _OI 
# 400
__copy_m(_II __first, _II __last, _OI __result) 
# 401
{ 
# 402
typedef typename iterator_traits< _II> ::difference_type _Distance; 
# 403
for (_Distance __n = __last - __first; __n > 0; --__n) 
# 404
{ 
# 405
(*__result) = std::move(*__first); 
# 406
++__first; 
# 407
++__result; 
# 408
}  
# 409
return __result; 
# 410
} 
# 411
}; 
# 414
template< bool _IsMove> 
# 415
struct __copy_move< _IsMove, true, random_access_iterator_tag>  { 
# 417
template< class _Tp> static _Tp *
# 420
__copy_m(const _Tp *__first, const _Tp *__last, _Tp *__result) 
# 421
{ 
# 423
using __assignable = conditional< _IsMove, is_move_assignable< _Tp> , is_copy_assignable< _Tp> > ; 
# 427
static_assert((__assignable::type::value), "type is not assignable");
# 429
const ptrdiff_t _Num = __last - __first; 
# 430
if (_Num) { 
# 431
__builtin_memmove(__result, __first, sizeof(_Tp) * _Num); }  
# 432
return __result + _Num; 
# 433
} 
# 434
}; 
# 438
template< class _Tp, class _Ref, class _Ptr> struct _Deque_iterator; 
# 441
struct _Bit_iterator; 
# 447
template< class _CharT> struct char_traits; 
# 450
template< class _CharT, class _Traits> class istreambuf_iterator; 
# 453
template< class _CharT, class _Traits> class ostreambuf_iterator; 
# 456
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, ostreambuf_iterator< _CharT, char_traits< _CharT> > > ::__type __copy_move_a2(_CharT *, _CharT *, ostreambuf_iterator< _CharT, char_traits< _CharT> > ); 
# 462
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, ostreambuf_iterator< _CharT, char_traits< _CharT> > > ::__type __copy_move_a2(const _CharT *, const _CharT *, ostreambuf_iterator< _CharT, char_traits< _CharT> > ); 
# 468
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, _CharT *> ::__type __copy_move_a2(istreambuf_iterator< _CharT, char_traits< _CharT> > , istreambuf_iterator< _CharT, char_traits< _CharT> > , _CharT *); 
# 474
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, _Deque_iterator< _CharT, _CharT &, _CharT *> > ::__type __copy_move_a2(istreambuf_iterator< _CharT, char_traits< _CharT> > , istreambuf_iterator< _CharT, char_traits< _CharT> > , _Deque_iterator< _CharT, _CharT &, _CharT *> ); 
# 483
template< bool _IsMove, class _II, class _OI> inline _OI 
# 486
__copy_move_a2(_II __first, _II __last, _OI __result) 
# 487
{ 
# 488
typedef typename iterator_traits< _II> ::iterator_category _Category; 
# 494
return std::template __copy_move< _IsMove, __memcpyable< _OI, _II> ::__value, typename iterator_traits< _II> ::iterator_category> ::__copy_m(__first, __last, __result); 
# 496
} 
# 498
template< bool _IsMove, class 
# 499
_Tp, class _Ref, class _Ptr, class _OI> _OI 
# 498
__copy_move_a1(_Deque_iterator< _Tp, _Ref, _Ptr> , _Deque_iterator< _Tp, _Ref, _Ptr> , _OI); 
# 505
template< bool _IsMove, class 
# 506
_ITp, class _IRef, class _IPtr, class _OTp> _Deque_iterator< _OTp, _OTp &, _OTp *>  
# 505
__copy_move_a1(_Deque_iterator< _ITp, _IRef, _IPtr> , _Deque_iterator< _ITp, _IRef, _IPtr> , _Deque_iterator< _OTp, _OTp &, _OTp *> ); 
# 512
template< bool _IsMove, class _II, class _Tp> typename __gnu_cxx::__enable_if< __is_random_access_iter< _II> ::__value, _Deque_iterator< _Tp, _Tp &, _Tp *> > ::__type __copy_move_a1(_II, _II, _Deque_iterator< _Tp, _Tp &, _Tp *> ); 
# 518
template< bool _IsMove, class _II, class _OI> inline _OI 
# 521
__copy_move_a1(_II __first, _II __last, _OI __result) 
# 522
{ return std::__copy_move_a2< _IsMove> (__first, __last, __result); } 
# 524
template< bool _IsMove, class _II, class _OI> inline _OI 
# 527
__copy_move_a(_II __first, _II __last, _OI __result) 
# 528
{ 
# 529
return std::__niter_wrap(__result, std::__copy_move_a1< _IsMove> (std::__niter_base(__first), std::__niter_base(__last), std::__niter_base(__result))); 
# 533
} 
# 535
template< bool _IsMove, class 
# 536
_Ite, class _Seq, class _Cat, class _OI> _OI 
# 535
__copy_move_a(const __gnu_debug::_Safe_iterator< _Ite, _Seq, _Cat>  &, const __gnu_debug::_Safe_iterator< _Ite, _Seq, _Cat>  &, _OI); 
# 542
template< bool _IsMove, class 
# 543
_II, class _Ite, class _Seq, class _Cat> __gnu_debug::_Safe_iterator< _Ite, _Seq, _Cat>  
# 542
__copy_move_a(_II, _II, const __gnu_debug::_Safe_iterator< _Ite, _Seq, _Cat>  &); 
# 548
template< bool _IsMove, class 
# 549
_IIte, class _ISeq, class _ICat, class 
# 550
_OIte, class _OSeq, class _OCat> __gnu_debug::_Safe_iterator< _OIte, _OSeq, _OCat>  
# 548
__copy_move_a(const __gnu_debug::_Safe_iterator< _IIte, _ISeq, _ICat>  &, const __gnu_debug::_Safe_iterator< _IIte, _ISeq, _ICat>  &, const __gnu_debug::_Safe_iterator< _OIte, _OSeq, _OCat>  &); 
# 556
template< class _InputIterator, class _Size, class _OutputIterator> _OutputIterator 
# 559
__copy_n_a(_InputIterator __first, _Size __n, _OutputIterator __result, bool) 
# 561
{ 
# 562
if (__n > 0) 
# 563
{ 
# 564
while (true) 
# 565
{ 
# 566
(*__result) = (*__first); 
# 567
++__result; 
# 568
if ((--__n) > 0) { 
# 569
++__first; } else { 
# 571
break; }  
# 572
}  
# 573
}  
# 574
return __result; 
# 575
} 
# 577
template< class _CharT, class _Size> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, _CharT *> ::__type __copy_n_a(istreambuf_iterator< _CharT, char_traits< _CharT> > , _Size, _CharT *, bool); 
# 583
template< class _CharT, class _Size> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, _Deque_iterator< _CharT, _CharT &, _CharT *> > ::__type __copy_n_a(istreambuf_iterator< _CharT, char_traits< _CharT> > , _Size, _Deque_iterator< _CharT, _CharT &, _CharT *> , bool); 
# 608 "/usr/include/c++/11/bits/stl_algobase.h" 3
template< class _II, class _OI> inline _OI 
# 611
copy(_II __first, _II __last, _OI __result) 
# 612
{ 
# 617
; 
# 619
return std::__copy_move_a< __is_move_iterator< _II> ::__value> (std::__miter_base(__first), std::__miter_base(__last), __result); 
# 621
} 
# 641 "/usr/include/c++/11/bits/stl_algobase.h" 3
template< class _II, class _OI> inline _OI 
# 644
move(_II __first, _II __last, _OI __result) 
# 645
{ 
# 650
; 
# 652
return std::__copy_move_a< true> (std::__miter_base(__first), std::__miter_base(__last), __result); 
# 654
} 
# 661
template< bool _IsMove, bool _IsSimple, class _Category> 
# 662
struct __copy_move_backward { 
# 664
template< class _BI1, class _BI2> static _BI2 
# 667
__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result) 
# 668
{ 
# 669
while (__first != __last) { 
# 670
(*(--__result)) = (*(--__last)); }  
# 671
return __result; 
# 672
} 
# 673
}; 
# 676
template< class _Category> 
# 677
struct __copy_move_backward< true, false, _Category>  { 
# 679
template< class _BI1, class _BI2> static _BI2 
# 682
__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result) 
# 683
{ 
# 684
while (__first != __last) { 
# 685
(*(--__result)) = std::move(*(--__last)); }  
# 686
return __result; 
# 687
} 
# 688
}; 
# 692
template<> struct __copy_move_backward< false, false, random_access_iterator_tag>  { 
# 694
template< class _BI1, class _BI2> static _BI2 
# 697
__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result) 
# 698
{ 
# 700
typename iterator_traits< _BI1> ::difference_type __n = __last - __first; 
# 701
for (; __n > 0; --__n) { 
# 702
(*(--__result)) = (*(--__last)); }  
# 703
return __result; 
# 704
} 
# 705
}; 
# 709
template<> struct __copy_move_backward< true, false, random_access_iterator_tag>  { 
# 711
template< class _BI1, class _BI2> static _BI2 
# 714
__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result) 
# 715
{ 
# 717
typename iterator_traits< _BI1> ::difference_type __n = __last - __first; 
# 718
for (; __n > 0; --__n) { 
# 719
(*(--__result)) = std::move(*(--__last)); }  
# 720
return __result; 
# 721
} 
# 722
}; 
# 725
template< bool _IsMove> 
# 726
struct __copy_move_backward< _IsMove, true, random_access_iterator_tag>  { 
# 728
template< class _Tp> static _Tp *
# 731
__copy_move_b(const _Tp *__first, const _Tp *__last, _Tp *__result) 
# 732
{ 
# 734
using __assignable = conditional< _IsMove, is_move_assignable< _Tp> , is_copy_assignable< _Tp> > ; 
# 738
static_assert((__assignable::type::value), "type is not assignable");
# 740
const ptrdiff_t _Num = __last - __first; 
# 741
if (_Num) { 
# 742
__builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num); }  
# 743
return __result - _Num; 
# 744
} 
# 745
}; 
# 747
template< bool _IsMove, class _BI1, class _BI2> inline _BI2 
# 750
__copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result) 
# 751
{ 
# 752
typedef typename iterator_traits< _BI1> ::iterator_category _Category; 
# 758
return std::template __copy_move_backward< _IsMove, __memcpyable< _BI2, _BI1> ::__value, typename iterator_traits< _BI1> ::iterator_category> ::__copy_move_b(__first, __last, __result); 
# 763
} 
# 765
template< bool _IsMove, class _BI1, class _BI2> inline _BI2 
# 768
__copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result) 
# 769
{ return std::__copy_move_backward_a2< _IsMove> (__first, __last, __result); } 
# 771
template< bool _IsMove, class 
# 772
_Tp, class _Ref, class _Ptr, class _OI> _OI 
# 771
__copy_move_backward_a1(_Deque_iterator< _Tp, _Ref, _Ptr> , _Deque_iterator< _Tp, _Ref, _Ptr> , _OI); 
# 778
template< bool _IsMove, class 
# 779
_ITp, class _IRef, class _IPtr, class _OTp> _Deque_iterator< _OTp, _OTp &, _OTp *>  
# 778
__copy_move_backward_a1(_Deque_iterator< _ITp, _IRef, _IPtr> , _Deque_iterator< _ITp, _IRef, _IPtr> , _Deque_iterator< _OTp, _OTp &, _OTp *> ); 
# 786
template< bool _IsMove, class _II, class _Tp> typename __gnu_cxx::__enable_if< __is_random_access_iter< _II> ::__value, _Deque_iterator< _Tp, _Tp &, _Tp *> > ::__type __copy_move_backward_a1(_II, _II, _Deque_iterator< _Tp, _Tp &, _Tp *> ); 
# 793
template< bool _IsMove, class _II, class _OI> inline _OI 
# 796
__copy_move_backward_a(_II __first, _II __last, _OI __result) 
# 797
{ 
# 798
return std::__niter_wrap(__result, std::__copy_move_backward_a1< _IsMove> (std::__niter_base(__first), std::__niter_base(__last), std::__niter_base(__result))); 
# 802
} 
# 804
template< bool _IsMove, class 
# 805
_Ite, class _Seq, class _Cat, class _OI> _OI 
# 804
__copy_move_backward_a(const __gnu_debug::_Safe_iterator< _Ite, _Seq, _Cat>  &, const __gnu_debug::_Safe_iterator< _Ite, _Seq, _Cat>  &, _OI); 
# 812
template< bool _IsMove, class 
# 813
_II, class _Ite, class _Seq, class _Cat> __gnu_debug::_Safe_iterator< _Ite, _Seq, _Cat>  
# 812
__copy_move_backward_a(_II, _II, const __gnu_debug::_Safe_iterator< _Ite, _Seq, _Cat>  &); 
# 818
template< bool _IsMove, class 
# 819
_IIte, class _ISeq, class _ICat, class 
# 820
_OIte, class _OSeq, class _OCat> __gnu_debug::_Safe_iterator< _OIte, _OSeq, _OCat>  
# 818
__copy_move_backward_a(const __gnu_debug::_Safe_iterator< _IIte, _ISeq, _ICat>  &, const __gnu_debug::_Safe_iterator< _IIte, _ISeq, _ICat>  &, const __gnu_debug::_Safe_iterator< _OIte, _OSeq, _OCat>  &); 
# 845 "/usr/include/c++/11/bits/stl_algobase.h" 3
template< class _BI1, class _BI2> inline _BI2 
# 848
copy_backward(_BI1 __first, _BI1 __last, _BI2 __result) 
# 849
{ 
# 856
; 
# 858
return std::__copy_move_backward_a< __is_move_iterator< _BI1> ::__value> (std::__miter_base(__first), std::__miter_base(__last), __result); 
# 860
} 
# 881 "/usr/include/c++/11/bits/stl_algobase.h" 3
template< class _BI1, class _BI2> inline _BI2 
# 884
move_backward(_BI1 __first, _BI1 __last, _BI2 __result) 
# 885
{ 
# 892
; 
# 894
return std::__copy_move_backward_a< true> (std::__miter_base(__first), std::__miter_base(__last), __result); 
# 897
} 
# 904
template< class _ForwardIterator, class _Tp> inline typename __gnu_cxx::__enable_if< !__is_scalar< _Tp> ::__value, void> ::__type 
# 908
__fill_a1(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 909
__value) 
# 910
{ 
# 911
for (; __first != __last; ++__first) { 
# 912
(*__first) = __value; }  
# 913
} 
# 915
template< class _ForwardIterator, class _Tp> inline typename __gnu_cxx::__enable_if< __is_scalar< _Tp> ::__value, void> ::__type 
# 919
__fill_a1(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 920
__value) 
# 921
{ 
# 922
const _Tp __tmp = __value; 
# 923
for (; __first != __last; ++__first) { 
# 924
(*__first) = __tmp; }  
# 925
} 
# 928
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_byte< _Tp> ::__value, void> ::__type 
# 932
__fill_a1(_Tp *__first, _Tp *__last, const _Tp &__c) 
# 933
{ 
# 934
const _Tp __tmp = __c; 
# 943 "/usr/include/c++/11/bits/stl_algobase.h" 3
if (const size_t __len = __last - __first) { 
# 944
__builtin_memset(__first, static_cast< unsigned char>(__tmp), __len); }  
# 945
} 
# 947
template< class _Ite, class _Cont, class _Tp> inline void 
# 950
__fill_a1(__gnu_cxx::__normal_iterator< _Ite, _Cont>  __first, __gnu_cxx::__normal_iterator< _Ite, _Cont>  
# 951
__last, const _Tp &
# 952
__value) 
# 953
{ std::__fill_a1(__first.base(), __last.base(), __value); } 
# 955
template< class _Tp, class _VTp> void __fill_a1(const _Deque_iterator< _Tp, _Tp &, _Tp *>  &, const _Deque_iterator< _Tp, _Tp &, _Tp *>  &, const _VTp &); 
# 962
inline void __fill_a1(_Bit_iterator, _Bit_iterator, const bool &); 
# 965
template< class _FIte, class _Tp> inline void 
# 968
__fill_a(_FIte __first, _FIte __last, const _Tp &__value) 
# 969
{ std::__fill_a1(__first, __last, __value); } 
# 971
template< class _Ite, class _Seq, class _Cat, class _Tp> void __fill_a(const __gnu_debug::_Safe_iterator< _Ite, _Seq, _Cat>  &, const __gnu_debug::_Safe_iterator< _Ite, _Seq, _Cat>  &, const _Tp &); 
# 989 "/usr/include/c++/11/bits/stl_algobase.h" 3
template< class _ForwardIterator, class _Tp> inline void 
# 992
fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__value) 
# 993
{ 
# 997
; 
# 999
std::__fill_a(__first, __last, __value); 
# 1000
} 
# 1004
constexpr int __size_to_integer(int __n) { return __n; } 
# 1006
constexpr unsigned __size_to_integer(unsigned __n) { return __n; } 
# 1008
constexpr long __size_to_integer(long __n) { return __n; } 
# 1010
constexpr unsigned long __size_to_integer(unsigned long __n) { return __n; } 
# 1012
constexpr long long __size_to_integer(long long __n) { return __n; } 
# 1014
constexpr unsigned long long __size_to_integer(unsigned long long __n) { return __n; } 
# 1042 "/usr/include/c++/11/bits/stl_algobase.h" 3
constexpr long long __size_to_integer(float __n) { return (long long)__n; } 
# 1044
constexpr long long __size_to_integer(double __n) { return (long long)__n; } 
# 1046
constexpr long long __size_to_integer(long double __n) { return (long long)__n; } 
# 1052
template< class _OutputIterator, class _Size, class _Tp> inline typename __gnu_cxx::__enable_if< !__is_scalar< _Tp> ::__value, _OutputIterator> ::__type 
# 1056
__fill_n_a1(_OutputIterator __first, _Size __n, const _Tp &__value) 
# 1057
{ 
# 1058
for (; __n > 0; (--__n), ((void)(++__first))) { 
# 1059
(*__first) = __value; }  
# 1060
return __first; 
# 1061
} 
# 1063
template< class _OutputIterator, class _Size, class _Tp> inline typename __gnu_cxx::__enable_if< __is_scalar< _Tp> ::__value, _OutputIterator> ::__type 
# 1067
__fill_n_a1(_OutputIterator __first, _Size __n, const _Tp &__value) 
# 1068
{ 
# 1069
const _Tp __tmp = __value; 
# 1070
for (; __n > 0; (--__n), ((void)(++__first))) { 
# 1071
(*__first) = __tmp; }  
# 1072
return __first; 
# 1073
} 
# 1075
template< class _Ite, class _Seq, class _Cat, class _Size, class 
# 1076
_Tp> __gnu_debug::_Safe_iterator< _Ite, _Seq, _Cat>  
# 1075
__fill_n_a(const __gnu_debug::_Safe_iterator< _Ite, _Seq, _Cat>  & __first, _Size __n, const _Tp & __value, input_iterator_tag); 
# 1082
template< class _OutputIterator, class _Size, class _Tp> inline _OutputIterator 
# 1085
__fill_n_a(_OutputIterator __first, _Size __n, const _Tp &__value, output_iterator_tag) 
# 1087
{ 
# 1089
static_assert((is_integral< _Size> {}), "fill_n must pass integral size");
# 1091
return __fill_n_a1(__first, __n, __value); 
# 1092
} 
# 1094
template< class _OutputIterator, class _Size, class _Tp> inline _OutputIterator 
# 1097
__fill_n_a(_OutputIterator __first, _Size __n, const _Tp &__value, input_iterator_tag) 
# 1099
{ 
# 1101
static_assert((is_integral< _Size> {}), "fill_n must pass integral size");
# 1103
return __fill_n_a1(__first, __n, __value); 
# 1104
} 
# 1106
template< class _OutputIterator, class _Size, class _Tp> inline _OutputIterator 
# 1109
__fill_n_a(_OutputIterator __first, _Size __n, const _Tp &__value, random_access_iterator_tag) 
# 1111
{ 
# 1113
static_assert((is_integral< _Size> {}), "fill_n must pass integral size");
# 1115
if (__n <= 0) { 
# 1116
return __first; }  
# 1118
; 
# 1120
std::__fill_a(__first, __first + __n, __value); 
# 1121
return __first + __n; 
# 1122
} 
# 1141 "/usr/include/c++/11/bits/stl_algobase.h" 3
template< class _OI, class _Size, class _Tp> inline _OI 
# 1144
fill_n(_OI __first, _Size __n, const _Tp &__value) 
# 1145
{ 
# 1149
return std::__fill_n_a(__first, std::__size_to_integer(__n), __value, std::__iterator_category(__first)); 
# 1151
} 
# 1153
template< bool _BoolType> 
# 1154
struct __equal { 
# 1156
template< class _II1, class _II2> static bool 
# 1159
equal(_II1 __first1, _II1 __last1, _II2 __first2) 
# 1160
{ 
# 1161
for (; __first1 != __last1; (++__first1), ((void)(++__first2))) { 
# 1162
if (!((*__first1) == (*__first2))) { 
# 1163
return false; }  }  
# 1164
return true; 
# 1165
} 
# 1166
}; 
# 1169
template<> struct __equal< true>  { 
# 1171
template< class _Tp> static bool 
# 1174
equal(const _Tp *__first1, const _Tp *__last1, const _Tp *__first2) 
# 1175
{ 
# 1176
if (const size_t __len = __last1 - __first1) { 
# 1177
return !std::__memcmp(__first1, __first2, __len); }  
# 1178
return true; 
# 1179
} 
# 1180
}; 
# 1182
template< class _Tp, class _Ref, class _Ptr, class _II> typename __gnu_cxx::__enable_if< __is_random_access_iter< _II> ::__value, bool> ::__type __equal_aux1(_Deque_iterator< _Tp, _Ref, _Ptr> , _Deque_iterator< _Tp, _Ref, _Ptr> , _II); 
# 1189
template< class _Tp1, class _Ref1, class _Ptr1, class 
# 1190
_Tp2, class _Ref2, class _Ptr2> bool 
# 1189
__equal_aux1(_Deque_iterator< _Tp1, _Ref1, _Ptr1> , _Deque_iterator< _Tp1, _Ref1, _Ptr1> , _Deque_iterator< _Tp2, _Ref2, _Ptr2> ); 
# 1196
template< class _II, class _Tp, class _Ref, class _Ptr> typename __gnu_cxx::__enable_if< __is_random_access_iter< _II> ::__value, bool> ::__type __equal_aux1(_II, _II, _Deque_iterator< _Tp, _Ref, _Ptr> ); 
# 1202
template< class _II1, class _II2> inline bool 
# 1205
__equal_aux1(_II1 __first1, _II1 __last1, _II2 __first2) 
# 1206
{ 
# 1207
typedef typename iterator_traits< _II1> ::value_type _ValueType1; 
# 1208
const bool __simple = ((__is_integer< typename iterator_traits< _II1> ::value_type> ::__value || __is_pointer< typename iterator_traits< _II1> ::value_type> ::__value) && __memcmpable< _II1, _II2> ::__value); 
# 1211
return std::template __equal< __simple> ::equal(__first1, __last1, __first2); 
# 1212
} 
# 1214
template< class _II1, class _II2> inline bool 
# 1217
__equal_aux(_II1 __first1, _II1 __last1, _II2 __first2) 
# 1218
{ 
# 1219
return std::__equal_aux1(std::__niter_base(__first1), std::__niter_base(__last1), std::__niter_base(__first2)); 
# 1222
} 
# 1224
template< class _II1, class _Seq1, class _Cat1, class _II2> bool __equal_aux(const __gnu_debug::_Safe_iterator< _II1, _Seq1, _Cat1>  &, const __gnu_debug::_Safe_iterator< _II1, _Seq1, _Cat1>  &, _II2); 
# 1230
template< class _II1, class _II2, class _Seq2, class _Cat2> bool __equal_aux(_II1, _II1, const __gnu_debug::_Safe_iterator< _II2, _Seq2, _Cat2>  &); 
# 1235
template< class _II1, class _Seq1, class _Cat1, class 
# 1236
_II2, class _Seq2, class _Cat2> bool 
# 1235
__equal_aux(const __gnu_debug::_Safe_iterator< _II1, _Seq1, _Cat1>  &, const __gnu_debug::_Safe_iterator< _II1, _Seq1, _Cat1>  &, const __gnu_debug::_Safe_iterator< _II2, _Seq2, _Cat2>  &); 
# 1242
template< class , class > 
# 1243
struct __lc_rai { 
# 1245
template< class _II1, class _II2> static _II1 
# 1248
__newlast1(_II1, _II1 __last1, _II2, _II2) 
# 1249
{ return __last1; } 
# 1251
template< class _II> static bool 
# 1254
__cnd2(_II __first, _II __last) 
# 1255
{ return __first != __last; } 
# 1256
}; 
# 1259
template<> struct __lc_rai< random_access_iterator_tag, random_access_iterator_tag>  { 
# 1261
template< class _RAI1, class _RAI2> static _RAI1 
# 1264
__newlast1(_RAI1 __first1, _RAI1 __last1, _RAI2 
# 1265
__first2, _RAI2 __last2) 
# 1266
{ 
# 1268
const typename iterator_traits< _RAI1> ::difference_type __diff1 = __last1 - __first1; 
# 1270
const typename iterator_traits< _RAI2> ::difference_type __diff2 = __last2 - __first2; 
# 1271
return (__diff2 < __diff1) ? __first1 + __diff2 : __last1; 
# 1272
} 
# 1274
template< class _RAI> static bool 
# 1276
__cnd2(_RAI, _RAI) 
# 1277
{ return true; } 
# 1278
}; 
# 1280
template< class _II1, class _II2, class _Compare> bool 
# 1283
__lexicographical_compare_impl(_II1 __first1, _II1 __last1, _II2 
# 1284
__first2, _II2 __last2, _Compare 
# 1285
__comp) 
# 1286
{ 
# 1287
typedef typename iterator_traits< _II1> ::iterator_category _Category1; 
# 1288
typedef typename iterator_traits< _II2> ::iterator_category _Category2; 
# 1289
typedef __lc_rai< typename iterator_traits< _II1> ::iterator_category, typename iterator_traits< _II2> ::iterator_category>  __rai_type; 
# 1291
__last1 = __rai_type::__newlast1(__first1, __last1, __first2, __last2); 
# 1292
for (; (__first1 != __last1) && __rai_type::__cnd2(__first2, __last2); (++__first1), ((void)(++__first2))) 
# 1294
{ 
# 1295
if (__comp(__first1, __first2)) { 
# 1296
return true; }  
# 1297
if (__comp(__first2, __first1)) { 
# 1298
return false; }  
# 1299
}  
# 1300
return (__first1 == __last1) && (__first2 != __last2); 
# 1301
} 
# 1303
template< bool _BoolType> 
# 1304
struct __lexicographical_compare { 
# 1306
template< class _II1, class _II2> static bool 
# 1309
__lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2) 
# 1310
{ 
# 1311
using __gnu_cxx::__ops::__iter_less_iter;
# 1312
return std::__lexicographical_compare_impl(__first1, __last1, __first2, __last2, __iter_less_iter()); 
# 1315
} 
# 1317
template< class _II1, class _II2> static int 
# 1320
__3way(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2) 
# 1321
{ 
# 1322
while (__first1 != __last1) 
# 1323
{ 
# 1324
if (__first2 == __last2) { 
# 1325
return +1; }  
# 1326
if ((*__first1) < (*__first2)) { 
# 1327
return -1; }  
# 1328
if ((*__first2) < (*__first1)) { 
# 1329
return +1; }  
# 1330
++__first1; 
# 1331
++__first2; 
# 1332
}  
# 1333
return ((int)(__first2 == __last2)) - 1; 
# 1334
} 
# 1335
}; 
# 1338
template<> struct __lexicographical_compare< true>  { 
# 1340
template< class _Tp, class _Up> static bool 
# 1343
__lc(const _Tp *__first1, const _Tp *__last1, const _Up *
# 1344
__first2, const _Up *__last2) 
# 1345
{ return __3way(__first1, __last1, __first2, __last2) < 0; } 
# 1347
template< class _Tp, class _Up> static ptrdiff_t 
# 1350
__3way(const _Tp *__first1, const _Tp *__last1, const _Up *
# 1351
__first2, const _Up *__last2) 
# 1352
{ 
# 1353
const size_t __len1 = __last1 - __first1; 
# 1354
const size_t __len2 = __last2 - __first2; 
# 1355
if (const size_t __len = std::min(__len1, __len2)) { 
# 1356
if (int __result = std::__memcmp(__first1, __first2, __len)) { 
# 1357
return __result; }  }  
# 1358
return (ptrdiff_t)(__len1 - __len2); 
# 1359
} 
# 1360
}; 
# 1362
template< class _II1, class _II2> inline bool 
# 1365
__lexicographical_compare_aux1(_II1 __first1, _II1 __last1, _II2 
# 1366
__first2, _II2 __last2) 
# 1367
{ 
# 1368
typedef typename iterator_traits< _II1> ::value_type _ValueType1; 
# 1369
typedef typename iterator_traits< _II2> ::value_type _ValueType2; 
# 1370
const bool __simple = (__is_memcmp_ordered_with< typename iterator_traits< _II1> ::value_type, typename iterator_traits< _II2> ::value_type> ::__value && __is_pointer< _II1> ::__value && __is_pointer< _II2> ::__value); 
# 1383
return std::template __lexicographical_compare< __simple> ::__lc(__first1, __last1, __first2, __last2); 
# 1385
} 
# 1387
template< class _Tp1, class _Ref1, class _Ptr1, class 
# 1388
_Tp2> bool 
# 1387
__lexicographical_compare_aux1(_Deque_iterator< _Tp1, _Ref1, _Ptr1> , _Deque_iterator< _Tp1, _Ref1, _Ptr1> , _Tp2 *, _Tp2 *); 
# 1395
template< class _Tp1, class 
# 1396
_Tp2, class _Ref2, class _Ptr2> bool 
# 1395
__lexicographical_compare_aux1(_Tp1 *, _Tp1 *, _Deque_iterator< _Tp2, _Ref2, _Ptr2> , _Deque_iterator< _Tp2, _Ref2, _Ptr2> ); 
# 1402
template< class _Tp1, class _Ref1, class _Ptr1, class 
# 1403
_Tp2, class _Ref2, class _Ptr2> bool 
# 1402
__lexicographical_compare_aux1(_Deque_iterator< _Tp1, _Ref1, _Ptr1> , _Deque_iterator< _Tp1, _Ref1, _Ptr1> , _Deque_iterator< _Tp2, _Ref2, _Ptr2> , _Deque_iterator< _Tp2, _Ref2, _Ptr2> ); 
# 1411
template< class _II1, class _II2> inline bool 
# 1414
__lexicographical_compare_aux(_II1 __first1, _II1 __last1, _II2 
# 1415
__first2, _II2 __last2) 
# 1416
{ 
# 1417
return std::__lexicographical_compare_aux1(std::__niter_base(__first1), std::__niter_base(__last1), std::__niter_base(__first2), std::__niter_base(__last2)); 
# 1421
} 
# 1423
template< class _Iter1, class _Seq1, class _Cat1, class 
# 1424
_II2> bool 
# 1423
__lexicographical_compare_aux(const __gnu_debug::_Safe_iterator< _Iter1, _Seq1, _Cat1>  &, const __gnu_debug::_Safe_iterator< _Iter1, _Seq1, _Cat1>  &, _II2, _II2); 
# 1431
template< class _II1, class 
# 1432
_Iter2, class _Seq2, class _Cat2> bool 
# 1431
__lexicographical_compare_aux(_II1, _II1, const __gnu_debug::_Safe_iterator< _Iter2, _Seq2, _Cat2>  &, const __gnu_debug::_Safe_iterator< _Iter2, _Seq2, _Cat2>  &); 
# 1439
template< class _Iter1, class _Seq1, class _Cat1, class 
# 1440
_Iter2, class _Seq2, class _Cat2> bool 
# 1439
__lexicographical_compare_aux(const __gnu_debug::_Safe_iterator< _Iter1, _Seq1, _Cat1>  &, const __gnu_debug::_Safe_iterator< _Iter1, _Seq1, _Cat1>  &, const __gnu_debug::_Safe_iterator< _Iter2, _Seq2, _Cat2>  &, const __gnu_debug::_Safe_iterator< _Iter2, _Seq2, _Cat2>  &); 
# 1448
template< class _ForwardIterator, class _Tp, class _Compare> _ForwardIterator 
# 1451
__lower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 1452
__val, _Compare __comp) 
# 1453
{ 
# 1455
typedef typename iterator_traits< _ForwardIterator> ::difference_type _DistanceType; 
# 1457
_DistanceType __len = std::distance(__first, __last); 
# 1459
while (__len > 0) 
# 1460
{ 
# 1461
_DistanceType __half = __len >> 1; 
# 1462
_ForwardIterator __middle = __first; 
# 1463
std::advance(__middle, __half); 
# 1464
if (__comp(__middle, __val)) 
# 1465
{ 
# 1466
__first = __middle; 
# 1467
++__first; 
# 1468
__len = ((__len - __half) - 1); 
# 1469
} else { 
# 1471
__len = __half; }  
# 1472
}  
# 1473
return __first; 
# 1474
} 
# 1487 "/usr/include/c++/11/bits/stl_algobase.h" 3
template< class _ForwardIterator, class _Tp> inline _ForwardIterator 
# 1490
lower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 1491
__val) 
# 1492
{ 
# 1497
; 
# 1499
return std::__lower_bound(__first, __last, __val, __gnu_cxx::__ops::__iter_less_val()); 
# 1501
} 
# 1506
constexpr int __lg(int __n) 
# 1507
{ return ((((int)sizeof(int)) * 8) - 1) - __builtin_clz(__n); } 
# 1510
constexpr unsigned __lg(unsigned __n) 
# 1511
{ return ((((int)sizeof(int)) * 8) - 1) - __builtin_clz(__n); } 
# 1514
constexpr long __lg(long __n) 
# 1515
{ return ((((int)sizeof(long)) * 8) - 1) - __builtin_clzl(__n); } 
# 1518
constexpr unsigned long __lg(unsigned long __n) 
# 1519
{ return ((((int)sizeof(long)) * 8) - 1) - __builtin_clzl(__n); } 
# 1522
constexpr long long __lg(long long __n) 
# 1523
{ return ((((int)sizeof(long long)) * 8) - 1) - __builtin_clzll(__n); } 
# 1526
constexpr unsigned long long __lg(unsigned long long __n) 
# 1527
{ return ((((int)sizeof(long long)) * 8) - 1) - __builtin_clzll(__n); } 
# 1543 "/usr/include/c++/11/bits/stl_algobase.h" 3
template< class _II1, class _II2> inline bool 
# 1546
equal(_II1 __first1, _II1 __last1, _II2 __first2) 
# 1547
{ 
# 1554
; 
# 1556
return std::__equal_aux(__first1, __last1, __first2); 
# 1557
} 
# 1574 "/usr/include/c++/11/bits/stl_algobase.h" 3
template< class _IIter1, class _IIter2, class _BinaryPredicate> inline bool 
# 1577
equal(_IIter1 __first1, _IIter1 __last1, _IIter2 
# 1578
__first2, _BinaryPredicate __binary_pred) 
# 1579
{ 
# 1583
; 
# 1585
for (; __first1 != __last1; (++__first1), ((void)(++__first2))) { 
# 1586
if (!((bool)__binary_pred(*__first1, *__first2))) { 
# 1587
return false; }  }  
# 1588
return true; 
# 1589
} 
# 1593
template< class _II1, class _II2> inline bool 
# 1596
__equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2) 
# 1597
{ 
# 1598
using _RATag = random_access_iterator_tag; 
# 1599
using _Cat1 = typename iterator_traits< _II1> ::iterator_category; 
# 1600
using _Cat2 = typename iterator_traits< _II2> ::iterator_category; 
# 1601
using _RAIters = __and_< is_same< typename iterator_traits< _II1> ::iterator_category, random_access_iterator_tag> , is_same< typename iterator_traits< _II2> ::iterator_category, random_access_iterator_tag> > ; 
# 1602
if (_RAIters()) 
# 1603
{ 
# 1604
auto __d1 = std::distance(__first1, __last1); 
# 1605
auto __d2 = std::distance(__first2, __last2); 
# 1606
if (__d1 != __d2) { 
# 1607
return false; }  
# 1608
return std::equal(__first1, __last1, __first2); 
# 1609
}  
# 1611
for (; (__first1 != __last1) && (__first2 != __last2); (++__first1), ((void)(++__first2))) { 
# 1613
if (!((*__first1) == (*__first2))) { 
# 1614
return false; }  }  
# 1615
return (__first1 == __last1) && (__first2 == __last2); 
# 1616
} 
# 1619
template< class _II1, class _II2, class _BinaryPredicate> inline bool 
# 1622
__equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2, _BinaryPredicate 
# 1623
__binary_pred) 
# 1624
{ 
# 1625
using _RATag = random_access_iterator_tag; 
# 1626
using _Cat1 = typename iterator_traits< _II1> ::iterator_category; 
# 1627
using _Cat2 = typename iterator_traits< _II2> ::iterator_category; 
# 1628
using _RAIters = __and_< is_same< typename iterator_traits< _II1> ::iterator_category, random_access_iterator_tag> , is_same< typename iterator_traits< _II2> ::iterator_category, random_access_iterator_tag> > ; 
# 1629
if (_RAIters()) 
# 1630
{ 
# 1631
auto __d1 = std::distance(__first1, __last1); 
# 1632
auto __d2 = std::distance(__first2, __last2); 
# 1633
if (__d1 != __d2) { 
# 1634
return false; }  
# 1635
return std::equal(__first1, __last1, __first2, __binary_pred); 
# 1637
}  
# 1639
for (; (__first1 != __last1) && (__first2 != __last2); (++__first1), ((void)(++__first2))) { 
# 1641
if (!((bool)__binary_pred(*__first1, *__first2))) { 
# 1642
return false; }  }  
# 1643
return (__first1 == __last1) && (__first2 == __last2); 
# 1644
} 
# 1664 "/usr/include/c++/11/bits/stl_algobase.h" 3
template< class _II1, class _II2> inline bool 
# 1667
equal(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2) 
# 1668
{ 
# 1675
; 
# 1676
; 
# 1678
return std::__equal4(__first1, __last1, __first2, __last2); 
# 1679
} 
# 1697 "/usr/include/c++/11/bits/stl_algobase.h" 3
template< class _IIter1, class _IIter2, class _BinaryPredicate> inline bool 
# 1700
equal(_IIter1 __first1, _IIter1 __last1, _IIter2 
# 1701
__first2, _IIter2 __last2, _BinaryPredicate __binary_pred) 
# 1702
{ 
# 1706
; 
# 1707
; 
# 1709
return std::__equal4(__first1, __last1, __first2, __last2, __binary_pred); 
# 1711
} 
# 1729 "/usr/include/c++/11/bits/stl_algobase.h" 3
template< class _II1, class _II2> inline bool 
# 1732
lexicographical_compare(_II1 __first1, _II1 __last1, _II2 
# 1733
__first2, _II2 __last2) 
# 1734
{ 
# 1744
; 
# 1745
; 
# 1747
return std::__lexicographical_compare_aux(__first1, __last1, __first2, __last2); 
# 1749
} 
# 1764 "/usr/include/c++/11/bits/stl_algobase.h" 3
template< class _II1, class _II2, class _Compare> inline bool 
# 1767
lexicographical_compare(_II1 __first1, _II1 __last1, _II2 
# 1768
__first2, _II2 __last2, _Compare __comp) 
# 1769
{ 
# 1773
; 
# 1774
; 
# 1776
return std::__lexicographical_compare_impl(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 1779
} 
# 1877 "/usr/include/c++/11/bits/stl_algobase.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 1878
_BinaryPredicate> pair< _InputIterator1, _InputIterator2>  
# 1881
__mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 1882
__first2, _BinaryPredicate __binary_pred) 
# 1883
{ 
# 1884
while ((__first1 != __last1) && __binary_pred(__first1, __first2)) 
# 1885
{ 
# 1886
++__first1; 
# 1887
++__first2; 
# 1888
}  
# 1889
return pair< _InputIterator1, _InputIterator2> (__first1, __first2); 
# 1890
} 
# 1905 "/usr/include/c++/11/bits/stl_algobase.h" 3
template< class _InputIterator1, class _InputIterator2> inline pair< _InputIterator1, _InputIterator2>  
# 1908
mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 1909
__first2) 
# 1910
{ 
# 1917
; 
# 1919
return std::__mismatch(__first1, __last1, __first2, __gnu_cxx::__ops::__iter_equal_to_iter()); 
# 1921
} 
# 1939 "/usr/include/c++/11/bits/stl_algobase.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 1940
_BinaryPredicate> inline pair< _InputIterator1, _InputIterator2>  
# 1943
mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 1944
__first2, _BinaryPredicate __binary_pred) 
# 1945
{ 
# 1949
; 
# 1951
return std::__mismatch(__first1, __last1, __first2, __gnu_cxx::__ops::__iter_comp_iter(__binary_pred)); 
# 1953
} 
# 1957
template< class _InputIterator1, class _InputIterator2, class 
# 1958
_BinaryPredicate> pair< _InputIterator1, _InputIterator2>  
# 1961
__mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 1962
__first2, _InputIterator2 __last2, _BinaryPredicate 
# 1963
__binary_pred) 
# 1964
{ 
# 1965
while ((__first1 != __last1) && (__first2 != __last2) && __binary_pred(__first1, __first2)) 
# 1967
{ 
# 1968
++__first1; 
# 1969
++__first2; 
# 1970
}  
# 1971
return pair< _InputIterator1, _InputIterator2> (__first1, __first2); 
# 1972
} 
# 1988 "/usr/include/c++/11/bits/stl_algobase.h" 3
template< class _InputIterator1, class _InputIterator2> inline pair< _InputIterator1, _InputIterator2>  
# 1991
mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 1992
__first2, _InputIterator2 __last2) 
# 1993
{ 
# 2000
; 
# 2001
; 
# 2003
return std::__mismatch(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_equal_to_iter()); 
# 2005
} 
# 2024 "/usr/include/c++/11/bits/stl_algobase.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 2025
_BinaryPredicate> inline pair< _InputIterator1, _InputIterator2>  
# 2028
mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 2029
__first2, _InputIterator2 __last2, _BinaryPredicate 
# 2030
__binary_pred) 
# 2031
{ 
# 2035
; 
# 2036
; 
# 2038
return std::__mismatch(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__binary_pred)); 
# 2040
} 
# 2046
template< class _InputIterator, class _Predicate> inline _InputIterator 
# 2049
__find_if(_InputIterator __first, _InputIterator __last, _Predicate 
# 2050
__pred, input_iterator_tag) 
# 2051
{ 
# 2052
while ((__first != __last) && (!__pred(__first))) { 
# 2053
++__first; }  
# 2054
return __first; 
# 2055
} 
# 2058
template< class _RandomAccessIterator, class _Predicate> _RandomAccessIterator 
# 2061
__find_if(_RandomAccessIterator __first, _RandomAccessIterator __last, _Predicate 
# 2062
__pred, random_access_iterator_tag) 
# 2063
{ 
# 2065
typename iterator_traits< _RandomAccessIterator> ::difference_type __trip_count = (__last - __first) >> 2; 
# 2067
for (; __trip_count > 0; --__trip_count) 
# 2068
{ 
# 2069
if (__pred(__first)) { 
# 2070
return __first; }  
# 2071
++__first; 
# 2073
if (__pred(__first)) { 
# 2074
return __first; }  
# 2075
++__first; 
# 2077
if (__pred(__first)) { 
# 2078
return __first; }  
# 2079
++__first; 
# 2081
if (__pred(__first)) { 
# 2082
return __first; }  
# 2083
++__first; 
# 2084
}  
# 2086
switch (__last - __first) 
# 2087
{ 
# 2088
case 3:  
# 2089
if (__pred(__first)) { 
# 2090
return __first; }  
# 2091
++__first; 
# 2093
case 2:  
# 2094
if (__pred(__first)) { 
# 2095
return __first; }  
# 2096
++__first; 
# 2098
case 1:  
# 2099
if (__pred(__first)) { 
# 2100
return __first; }  
# 2101
++__first; 
# 2103
case 0:  
# 2104
default:  
# 2105
return __last; 
# 2106
}  
# 2107
} 
# 2109
template< class _Iterator, class _Predicate> inline _Iterator 
# 2112
__find_if(_Iterator __first, _Iterator __last, _Predicate __pred) 
# 2113
{ 
# 2114
return __find_if(__first, __last, __pred, std::__iterator_category(__first)); 
# 2116
} 
# 2118
template< class _InputIterator, class _Predicate> typename iterator_traits< _InputIterator> ::difference_type 
# 2121
__count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred) 
# 2122
{ 
# 2123
typename iterator_traits< _InputIterator> ::difference_type __n = (0); 
# 2124
for (; __first != __last; ++__first) { 
# 2125
if (__pred(__first)) { 
# 2126
++__n; }  }  
# 2127
return __n; 
# 2128
} 
# 2131
template< class _ForwardIterator1, class _ForwardIterator2, class 
# 2132
_BinaryPredicate> bool 
# 2135
__is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 2136
__first2, _BinaryPredicate __pred) 
# 2137
{ 
# 2140
for (; __first1 != __last1; (++__first1), ((void)(++__first2))) { 
# 2141
if (!__pred(__first1, __first2)) { 
# 2142
break; }  }  
# 2144
if (__first1 == __last1) { 
# 2145
return true; }  
# 2149
_ForwardIterator2 __last2 = __first2; 
# 2150
std::advance(__last2, std::distance(__first1, __last1)); 
# 2151
for (_ForwardIterator1 __scan = __first1; __scan != __last1; ++__scan) 
# 2152
{ 
# 2153
if (__scan != std::__find_if(__first1, __scan, __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan))) { 
# 2155
continue; }  
# 2157
auto __matches = std::__count_if(__first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)); 
# 2160
if ((0 == __matches) || (std::__count_if(__scan, __last1, __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)) != __matches)) { 
# 2164
return false; }  
# 2165
}   
# 2166
return true; 
# 2167
} 
# 2181 "/usr/include/c++/11/bits/stl_algobase.h" 3
template< class _ForwardIterator1, class _ForwardIterator2> inline bool 
# 2184
is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 2185
__first2) 
# 2186
{ 
# 2193
; 
# 2195
return std::__is_permutation(__first1, __last1, __first2, __gnu_cxx::__ops::__iter_equal_to_iter()); 
# 2197
} 
# 2201
}
# 158 "/usr/include/c++/11/limits" 3
namespace std __attribute((__visibility__("default"))) { 
# 167
enum float_round_style { 
# 169
round_indeterminate = (-1), 
# 170
round_toward_zero = 0, 
# 171
round_to_nearest, 
# 172
round_toward_infinity, 
# 173
round_toward_neg_infinity
# 174
}; 
# 182
enum float_denorm_style { 
# 185
denorm_indeterminate = (-1), 
# 187
denorm_absent = 0, 
# 189
denorm_present
# 190
}; 
# 202 "/usr/include/c++/11/limits" 3
struct __numeric_limits_base { 
# 206
static constexpr inline bool is_specialized = false; 
# 211
static constexpr inline int digits = 0; 
# 214
static constexpr inline int digits10 = 0; 
# 219
static constexpr inline int max_digits10 = 0; 
# 223
static constexpr inline bool is_signed = false; 
# 226
static constexpr inline bool is_integer = false; 
# 231
static constexpr inline bool is_exact = false; 
# 235
static constexpr inline int radix = 0; 
# 239
static constexpr inline int min_exponent = 0; 
# 243
static constexpr inline int min_exponent10 = 0; 
# 248
static constexpr inline int max_exponent = 0; 
# 252
static constexpr inline int max_exponent10 = 0; 
# 255
static constexpr inline bool has_infinity = false; 
# 259
static constexpr inline bool has_quiet_NaN = false; 
# 263
static constexpr inline bool has_signaling_NaN = false; 
# 266
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 270
static constexpr inline bool has_denorm_loss = false; 
# 274
static constexpr inline bool is_iec559 = false; 
# 279
static constexpr inline bool is_bounded = false; 
# 288 "/usr/include/c++/11/limits" 3
static constexpr inline bool is_modulo = false; 
# 291
static constexpr inline bool traps = false; 
# 294
static constexpr inline bool tinyness_before = false; 
# 299
static constexpr inline float_round_style round_style = round_toward_zero; 
# 301
}; 
# 311 "/usr/include/c++/11/limits" 3
template< class _Tp> 
# 312
struct numeric_limits : public __numeric_limits_base { 
# 317
static constexpr _Tp min() noexcept { return _Tp(); } 
# 321
static constexpr _Tp max() noexcept { return _Tp(); } 
# 327
static constexpr _Tp lowest() noexcept { return _Tp(); } 
# 333
static constexpr _Tp epsilon() noexcept { return _Tp(); } 
# 337
static constexpr _Tp round_error() noexcept { return _Tp(); } 
# 341
static constexpr _Tp infinity() noexcept { return _Tp(); } 
# 346
static constexpr _Tp quiet_NaN() noexcept { return _Tp(); } 
# 351
static constexpr _Tp signaling_NaN() noexcept { return _Tp(); } 
# 357
static constexpr _Tp denorm_min() noexcept { return _Tp(); } 
# 358
}; 
# 363
template< class _Tp> 
# 364
struct numeric_limits< const _Tp>  : public std::numeric_limits< _Tp>  { 
# 365
}; 
# 367
template< class _Tp> 
# 368
struct numeric_limits< volatile _Tp>  : public std::numeric_limits< _Tp>  { 
# 369
}; 
# 371
template< class _Tp> 
# 372
struct numeric_limits< const volatile _Tp>  : public std::numeric_limits< _Tp>  { 
# 373
}; 
# 384 "/usr/include/c++/11/limits" 3
template<> struct numeric_limits< bool>  { 
# 386
static constexpr inline bool is_specialized = true; 
# 389
static constexpr bool min() noexcept { return false; } 
# 392
static constexpr bool max() noexcept { return true; } 
# 396
static constexpr bool lowest() noexcept { return min(); } 
# 398
static constexpr inline int digits = 1; 
# 399
static constexpr inline int digits10 = 0; 
# 401
static constexpr inline int max_digits10 = 0; 
# 403
static constexpr inline bool is_signed = false; 
# 404
static constexpr inline bool is_integer = true; 
# 405
static constexpr inline bool is_exact = true; 
# 406
static constexpr inline int radix = 2; 
# 409
static constexpr bool epsilon() noexcept { return false; } 
# 412
static constexpr bool round_error() noexcept { return false; } 
# 414
static constexpr inline int min_exponent = 0; 
# 415
static constexpr inline int min_exponent10 = 0; 
# 416
static constexpr inline int max_exponent = 0; 
# 417
static constexpr inline int max_exponent10 = 0; 
# 419
static constexpr inline bool has_infinity = false; 
# 420
static constexpr inline bool has_quiet_NaN = false; 
# 421
static constexpr inline bool has_signaling_NaN = false; 
# 422
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 424
static constexpr inline bool has_denorm_loss = false; 
# 427
static constexpr bool infinity() noexcept { return false; } 
# 430
static constexpr bool quiet_NaN() noexcept { return false; } 
# 433
static constexpr bool signaling_NaN() noexcept { return false; } 
# 436
static constexpr bool denorm_min() noexcept { return false; } 
# 438
static constexpr inline bool is_iec559 = false; 
# 439
static constexpr inline bool is_bounded = true; 
# 440
static constexpr inline bool is_modulo = false; 
# 445
static constexpr inline bool traps = true; 
# 446
static constexpr inline bool tinyness_before = false; 
# 447
static constexpr inline float_round_style round_style = round_toward_zero; 
# 449
}; 
# 453
template<> struct numeric_limits< char>  { 
# 455
static constexpr inline bool is_specialized = true; 
# 458
static constexpr char min() noexcept { return ((((char)(-1)) < 0) ? (-((((char)(-1)) < 0) ? (((((char)1) << (((sizeof(char) * (8)) - (((char)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((char)0)))) - 1 : ((char)0)); } 
# 461
static constexpr char max() noexcept { return ((((char)(-1)) < 0) ? (((((char)1) << (((sizeof(char) * (8)) - (((char)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((char)0))); } 
# 465
static constexpr char lowest() noexcept { return min(); } 
# 468
static constexpr inline int digits = ((sizeof(char) * (8)) - (((char)(-1)) < 0)); 
# 469
static constexpr inline int digits10 = ((((sizeof(char) * (8)) - (((char)(-1)) < 0)) * (643L)) / (2136)); 
# 471
static constexpr inline int max_digits10 = 0; 
# 473
static constexpr inline bool is_signed = (((char)(-1)) < 0); 
# 474
static constexpr inline bool is_integer = true; 
# 475
static constexpr inline bool is_exact = true; 
# 476
static constexpr inline int radix = 2; 
# 479
static constexpr char epsilon() noexcept { return 0; } 
# 482
static constexpr char round_error() noexcept { return 0; } 
# 484
static constexpr inline int min_exponent = 0; 
# 485
static constexpr inline int min_exponent10 = 0; 
# 486
static constexpr inline int max_exponent = 0; 
# 487
static constexpr inline int max_exponent10 = 0; 
# 489
static constexpr inline bool has_infinity = false; 
# 490
static constexpr inline bool has_quiet_NaN = false; 
# 491
static constexpr inline bool has_signaling_NaN = false; 
# 492
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 494
static constexpr inline bool has_denorm_loss = false; 
# 497
static constexpr char infinity() noexcept { return ((char)0); } 
# 500
static constexpr char quiet_NaN() noexcept { return ((char)0); } 
# 503
static constexpr char signaling_NaN() noexcept { return ((char)0); } 
# 506
static constexpr char denorm_min() noexcept { return static_cast< char>(0); } 
# 508
static constexpr inline bool is_iec559 = false; 
# 509
static constexpr inline bool is_bounded = true; 
# 510
static constexpr inline bool is_modulo = (!is_signed); 
# 512
static constexpr inline bool traps = true; 
# 513
static constexpr inline bool tinyness_before = false; 
# 514
static constexpr inline float_round_style round_style = round_toward_zero; 
# 516
}; 
# 520
template<> struct numeric_limits< signed char>  { 
# 522
static constexpr inline bool is_specialized = true; 
# 525
static constexpr signed char min() noexcept { return (-127) - 1; } 
# 528
static constexpr signed char max() noexcept { return 127; } 
# 532
static constexpr signed char lowest() noexcept { return min(); } 
# 535
static constexpr inline int digits = ((sizeof(signed char) * (8)) - (((signed char)(-1)) < 0)); 
# 536
static constexpr inline int digits10 = ((((sizeof(signed char) * (8)) - (((signed char)(-1)) < 0)) * (643L)) / (2136)); 
# 539
static constexpr inline int max_digits10 = 0; 
# 541
static constexpr inline bool is_signed = true; 
# 542
static constexpr inline bool is_integer = true; 
# 543
static constexpr inline bool is_exact = true; 
# 544
static constexpr inline int radix = 2; 
# 547
static constexpr signed char epsilon() noexcept { return 0; } 
# 550
static constexpr signed char round_error() noexcept { return 0; } 
# 552
static constexpr inline int min_exponent = 0; 
# 553
static constexpr inline int min_exponent10 = 0; 
# 554
static constexpr inline int max_exponent = 0; 
# 555
static constexpr inline int max_exponent10 = 0; 
# 557
static constexpr inline bool has_infinity = false; 
# 558
static constexpr inline bool has_quiet_NaN = false; 
# 559
static constexpr inline bool has_signaling_NaN = false; 
# 560
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 562
static constexpr inline bool has_denorm_loss = false; 
# 565
static constexpr signed char infinity() noexcept { return static_cast< signed char>(0); } 
# 568
static constexpr signed char quiet_NaN() noexcept { return static_cast< signed char>(0); } 
# 571
static constexpr signed char signaling_NaN() noexcept 
# 572
{ return static_cast< signed char>(0); } 
# 575
static constexpr signed char denorm_min() noexcept 
# 576
{ return static_cast< signed char>(0); } 
# 578
static constexpr inline bool is_iec559 = false; 
# 579
static constexpr inline bool is_bounded = true; 
# 580
static constexpr inline bool is_modulo = false; 
# 582
static constexpr inline bool traps = true; 
# 583
static constexpr inline bool tinyness_before = false; 
# 584
static constexpr inline float_round_style round_style = round_toward_zero; 
# 586
}; 
# 590
template<> struct numeric_limits< unsigned char>  { 
# 592
static constexpr inline bool is_specialized = true; 
# 595
static constexpr unsigned char min() noexcept { return 0; } 
# 598
static constexpr unsigned char max() noexcept { return ((127) * 2U) + (1); } 
# 602
static constexpr unsigned char lowest() noexcept { return min(); } 
# 605
static constexpr inline int digits = ((sizeof(unsigned char) * (8)) - (((unsigned char)(-1)) < 0)); 
# 607
static constexpr inline int digits10 = ((((sizeof(unsigned char) * (8)) - (((unsigned char)(-1)) < 0)) * (643L)) / (2136)); 
# 610
static constexpr inline int max_digits10 = 0; 
# 612
static constexpr inline bool is_signed = false; 
# 613
static constexpr inline bool is_integer = true; 
# 614
static constexpr inline bool is_exact = true; 
# 615
static constexpr inline int radix = 2; 
# 618
static constexpr unsigned char epsilon() noexcept { return 0; } 
# 621
static constexpr unsigned char round_error() noexcept { return 0; } 
# 623
static constexpr inline int min_exponent = 0; 
# 624
static constexpr inline int min_exponent10 = 0; 
# 625
static constexpr inline int max_exponent = 0; 
# 626
static constexpr inline int max_exponent10 = 0; 
# 628
static constexpr inline bool has_infinity = false; 
# 629
static constexpr inline bool has_quiet_NaN = false; 
# 630
static constexpr inline bool has_signaling_NaN = false; 
# 631
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 633
static constexpr inline bool has_denorm_loss = false; 
# 636
static constexpr unsigned char infinity() noexcept 
# 637
{ return static_cast< unsigned char>(0); } 
# 640
static constexpr unsigned char quiet_NaN() noexcept 
# 641
{ return static_cast< unsigned char>(0); } 
# 644
static constexpr unsigned char signaling_NaN() noexcept 
# 645
{ return static_cast< unsigned char>(0); } 
# 648
static constexpr unsigned char denorm_min() noexcept 
# 649
{ return static_cast< unsigned char>(0); } 
# 651
static constexpr inline bool is_iec559 = false; 
# 652
static constexpr inline bool is_bounded = true; 
# 653
static constexpr inline bool is_modulo = true; 
# 655
static constexpr inline bool traps = true; 
# 656
static constexpr inline bool tinyness_before = false; 
# 657
static constexpr inline float_round_style round_style = round_toward_zero; 
# 659
}; 
# 663
template<> struct numeric_limits< wchar_t>  { 
# 665
static constexpr inline bool is_specialized = true; 
# 668
static constexpr wchar_t min() noexcept { return ((((wchar_t)(-1)) < 0) ? (-((((wchar_t)(-1)) < 0) ? (((((wchar_t)1) << (((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((wchar_t)0)))) - 1 : ((wchar_t)0)); } 
# 671
static constexpr wchar_t max() noexcept { return ((((wchar_t)(-1)) < 0) ? (((((wchar_t)1) << (((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((wchar_t)0))); } 
# 675
static constexpr wchar_t lowest() noexcept { return min(); } 
# 678
static constexpr inline int digits = ((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0)); 
# 679
static constexpr inline int digits10 = ((((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0)) * (643L)) / (2136)); 
# 682
static constexpr inline int max_digits10 = 0; 
# 684
static constexpr inline bool is_signed = (((wchar_t)(-1)) < 0); 
# 685
static constexpr inline bool is_integer = true; 
# 686
static constexpr inline bool is_exact = true; 
# 687
static constexpr inline int radix = 2; 
# 690
static constexpr wchar_t epsilon() noexcept { return 0; } 
# 693
static constexpr wchar_t round_error() noexcept { return 0; } 
# 695
static constexpr inline int min_exponent = 0; 
# 696
static constexpr inline int min_exponent10 = 0; 
# 697
static constexpr inline int max_exponent = 0; 
# 698
static constexpr inline int max_exponent10 = 0; 
# 700
static constexpr inline bool has_infinity = false; 
# 701
static constexpr inline bool has_quiet_NaN = false; 
# 702
static constexpr inline bool has_signaling_NaN = false; 
# 703
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 705
static constexpr inline bool has_denorm_loss = false; 
# 708
static constexpr wchar_t infinity() noexcept { return ((wchar_t)0); } 
# 711
static constexpr wchar_t quiet_NaN() noexcept { return ((wchar_t)0); } 
# 714
static constexpr wchar_t signaling_NaN() noexcept { return ((wchar_t)0); } 
# 717
static constexpr wchar_t denorm_min() noexcept { return ((wchar_t)0); } 
# 719
static constexpr inline bool is_iec559 = false; 
# 720
static constexpr inline bool is_bounded = true; 
# 721
static constexpr inline bool is_modulo = (!is_signed); 
# 723
static constexpr inline bool traps = true; 
# 724
static constexpr inline bool tinyness_before = false; 
# 725
static constexpr inline float_round_style round_style = round_toward_zero; 
# 727
}; 
# 797 "/usr/include/c++/11/limits" 3
template<> struct numeric_limits< char16_t>  { 
# 799
static constexpr inline bool is_specialized = true; 
# 802
static constexpr char16_t min() noexcept { return ((((char16_t)(-1)) < 0) ? (-((((char16_t)(-1)) < 0) ? (((((char16_t)1) << (((sizeof(char16_t) * (8)) - (((char16_t)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((char16_t)0)))) - 1 : ((char16_t)0)); } 
# 805
static constexpr char16_t max() noexcept { return ((((char16_t)(-1)) < 0) ? (((((char16_t)1) << (((sizeof(char16_t) * (8)) - (((char16_t)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((char16_t)0))); } 
# 808
static constexpr char16_t lowest() noexcept { return min(); } 
# 810
static constexpr inline int digits = ((sizeof(char16_t) * (8)) - (((char16_t)(-1)) < 0)); 
# 811
static constexpr inline int digits10 = ((((sizeof(char16_t) * (8)) - (((char16_t)(-1)) < 0)) * (643L)) / (2136)); 
# 812
static constexpr inline int max_digits10 = 0; 
# 813
static constexpr inline bool is_signed = (((char16_t)(-1)) < 0); 
# 814
static constexpr inline bool is_integer = true; 
# 815
static constexpr inline bool is_exact = true; 
# 816
static constexpr inline int radix = 2; 
# 819
static constexpr char16_t epsilon() noexcept { return 0; } 
# 822
static constexpr char16_t round_error() noexcept { return 0; } 
# 824
static constexpr inline int min_exponent = 0; 
# 825
static constexpr inline int min_exponent10 = 0; 
# 826
static constexpr inline int max_exponent = 0; 
# 827
static constexpr inline int max_exponent10 = 0; 
# 829
static constexpr inline bool has_infinity = false; 
# 830
static constexpr inline bool has_quiet_NaN = false; 
# 831
static constexpr inline bool has_signaling_NaN = false; 
# 832
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 833
static constexpr inline bool has_denorm_loss = false; 
# 836
static constexpr char16_t infinity() noexcept { return ((char16_t)0); } 
# 839
static constexpr char16_t quiet_NaN() noexcept { return ((char16_t)0); } 
# 842
static constexpr char16_t signaling_NaN() noexcept { return ((char16_t)0); } 
# 845
static constexpr char16_t denorm_min() noexcept { return ((char16_t)0); } 
# 847
static constexpr inline bool is_iec559 = false; 
# 848
static constexpr inline bool is_bounded = true; 
# 849
static constexpr inline bool is_modulo = (!is_signed); 
# 851
static constexpr inline bool traps = true; 
# 852
static constexpr inline bool tinyness_before = false; 
# 853
static constexpr inline float_round_style round_style = round_toward_zero; 
# 854
}; 
# 858
template<> struct numeric_limits< char32_t>  { 
# 860
static constexpr inline bool is_specialized = true; 
# 863
static constexpr char32_t min() noexcept { return ((((char32_t)(-1)) < (0)) ? (-((((char32_t)(-1)) < (0)) ? (((((char32_t)1) << (((sizeof(char32_t) * (8)) - (((char32_t)(-1)) < (0))) - (1))) - (1)) << 1) + (1) : (~((char32_t)0)))) - (1) : ((char32_t)0)); } 
# 866
static constexpr char32_t max() noexcept { return ((((char32_t)(-1)) < (0)) ? (((((char32_t)1) << (((sizeof(char32_t) * (8)) - (((char32_t)(-1)) < (0))) - (1))) - (1)) << 1) + (1) : (~((char32_t)0))); } 
# 869
static constexpr char32_t lowest() noexcept { return min(); } 
# 871
static constexpr inline int digits = ((sizeof(char32_t) * (8)) - (((char32_t)(-1)) < (0))); 
# 872
static constexpr inline int digits10 = ((((sizeof(char32_t) * (8)) - (((char32_t)(-1)) < (0))) * (643L)) / (2136)); 
# 873
static constexpr inline int max_digits10 = 0; 
# 874
static constexpr inline bool is_signed = (((char32_t)(-1)) < (0)); 
# 875
static constexpr inline bool is_integer = true; 
# 876
static constexpr inline bool is_exact = true; 
# 877
static constexpr inline int radix = 2; 
# 880
static constexpr char32_t epsilon() noexcept { return 0; } 
# 883
static constexpr char32_t round_error() noexcept { return 0; } 
# 885
static constexpr inline int min_exponent = 0; 
# 886
static constexpr inline int min_exponent10 = 0; 
# 887
static constexpr inline int max_exponent = 0; 
# 888
static constexpr inline int max_exponent10 = 0; 
# 890
static constexpr inline bool has_infinity = false; 
# 891
static constexpr inline bool has_quiet_NaN = false; 
# 892
static constexpr inline bool has_signaling_NaN = false; 
# 893
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 894
static constexpr inline bool has_denorm_loss = false; 
# 897
static constexpr char32_t infinity() noexcept { return ((char32_t)0); } 
# 900
static constexpr char32_t quiet_NaN() noexcept { return ((char32_t)0); } 
# 903
static constexpr char32_t signaling_NaN() noexcept { return ((char32_t)0); } 
# 906
static constexpr char32_t denorm_min() noexcept { return ((char32_t)0); } 
# 908
static constexpr inline bool is_iec559 = false; 
# 909
static constexpr inline bool is_bounded = true; 
# 910
static constexpr inline bool is_modulo = (!is_signed); 
# 912
static constexpr inline bool traps = true; 
# 913
static constexpr inline bool tinyness_before = false; 
# 914
static constexpr inline float_round_style round_style = round_toward_zero; 
# 915
}; 
# 920
template<> struct numeric_limits< short>  { 
# 922
static constexpr inline bool is_specialized = true; 
# 925
static constexpr short min() noexcept { return (-32767) - 1; } 
# 928
static constexpr short max() noexcept { return 32767; } 
# 932
static constexpr short lowest() noexcept { return min(); } 
# 935
static constexpr inline int digits = ((sizeof(short) * (8)) - (((short)(-1)) < 0)); 
# 936
static constexpr inline int digits10 = ((((sizeof(short) * (8)) - (((short)(-1)) < 0)) * (643L)) / (2136)); 
# 938
static constexpr inline int max_digits10 = 0; 
# 940
static constexpr inline bool is_signed = true; 
# 941
static constexpr inline bool is_integer = true; 
# 942
static constexpr inline bool is_exact = true; 
# 943
static constexpr inline int radix = 2; 
# 946
static constexpr short epsilon() noexcept { return 0; } 
# 949
static constexpr short round_error() noexcept { return 0; } 
# 951
static constexpr inline int min_exponent = 0; 
# 952
static constexpr inline int min_exponent10 = 0; 
# 953
static constexpr inline int max_exponent = 0; 
# 954
static constexpr inline int max_exponent10 = 0; 
# 956
static constexpr inline bool has_infinity = false; 
# 957
static constexpr inline bool has_quiet_NaN = false; 
# 958
static constexpr inline bool has_signaling_NaN = false; 
# 959
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 961
static constexpr inline bool has_denorm_loss = false; 
# 964
static constexpr short infinity() noexcept { return ((short)0); } 
# 967
static constexpr short quiet_NaN() noexcept { return ((short)0); } 
# 970
static constexpr short signaling_NaN() noexcept { return ((short)0); } 
# 973
static constexpr short denorm_min() noexcept { return ((short)0); } 
# 975
static constexpr inline bool is_iec559 = false; 
# 976
static constexpr inline bool is_bounded = true; 
# 977
static constexpr inline bool is_modulo = false; 
# 979
static constexpr inline bool traps = true; 
# 980
static constexpr inline bool tinyness_before = false; 
# 981
static constexpr inline float_round_style round_style = round_toward_zero; 
# 983
}; 
# 987
template<> struct numeric_limits< unsigned short>  { 
# 989
static constexpr inline bool is_specialized = true; 
# 992
static constexpr unsigned short min() noexcept { return 0; } 
# 995
static constexpr unsigned short max() noexcept { return ((32767) * 2U) + (1); } 
# 999
static constexpr unsigned short lowest() noexcept { return min(); } 
# 1002
static constexpr inline int digits = ((sizeof(unsigned short) * (8)) - (((unsigned short)(-1)) < 0)); 
# 1004
static constexpr inline int digits10 = ((((sizeof(unsigned short) * (8)) - (((unsigned short)(-1)) < 0)) * (643L)) / (2136)); 
# 1007
static constexpr inline int max_digits10 = 0; 
# 1009
static constexpr inline bool is_signed = false; 
# 1010
static constexpr inline bool is_integer = true; 
# 1011
static constexpr inline bool is_exact = true; 
# 1012
static constexpr inline int radix = 2; 
# 1015
static constexpr unsigned short epsilon() noexcept { return 0; } 
# 1018
static constexpr unsigned short round_error() noexcept { return 0; } 
# 1020
static constexpr inline int min_exponent = 0; 
# 1021
static constexpr inline int min_exponent10 = 0; 
# 1022
static constexpr inline int max_exponent = 0; 
# 1023
static constexpr inline int max_exponent10 = 0; 
# 1025
static constexpr inline bool has_infinity = false; 
# 1026
static constexpr inline bool has_quiet_NaN = false; 
# 1027
static constexpr inline bool has_signaling_NaN = false; 
# 1028
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 1030
static constexpr inline bool has_denorm_loss = false; 
# 1033
static constexpr unsigned short infinity() noexcept 
# 1034
{ return static_cast< unsigned short>(0); } 
# 1037
static constexpr unsigned short quiet_NaN() noexcept 
# 1038
{ return static_cast< unsigned short>(0); } 
# 1041
static constexpr unsigned short signaling_NaN() noexcept 
# 1042
{ return static_cast< unsigned short>(0); } 
# 1045
static constexpr unsigned short denorm_min() noexcept 
# 1046
{ return static_cast< unsigned short>(0); } 
# 1048
static constexpr inline bool is_iec559 = false; 
# 1049
static constexpr inline bool is_bounded = true; 
# 1050
static constexpr inline bool is_modulo = true; 
# 1052
static constexpr inline bool traps = true; 
# 1053
static constexpr inline bool tinyness_before = false; 
# 1054
static constexpr inline float_round_style round_style = round_toward_zero; 
# 1056
}; 
# 1060
template<> struct numeric_limits< int>  { 
# 1062
static constexpr inline bool is_specialized = true; 
# 1065
static constexpr int min() noexcept { return (-2147483647) - 1; } 
# 1068
static constexpr int max() noexcept { return 2147483647; } 
# 1072
static constexpr int lowest() noexcept { return min(); } 
# 1075
static constexpr inline int digits = ((sizeof(int) * (8)) - (((int)(-1)) < 0)); 
# 1076
static constexpr inline int digits10 = ((((sizeof(int) * (8)) - (((int)(-1)) < 0)) * (643L)) / (2136)); 
# 1078
static constexpr inline int max_digits10 = 0; 
# 1080
static constexpr inline bool is_signed = true; 
# 1081
static constexpr inline bool is_integer = true; 
# 1082
static constexpr inline bool is_exact = true; 
# 1083
static constexpr inline int radix = 2; 
# 1086
static constexpr int epsilon() noexcept { return 0; } 
# 1089
static constexpr int round_error() noexcept { return 0; } 
# 1091
static constexpr inline int min_exponent = 0; 
# 1092
static constexpr inline int min_exponent10 = 0; 
# 1093
static constexpr inline int max_exponent = 0; 
# 1094
static constexpr inline int max_exponent10 = 0; 
# 1096
static constexpr inline bool has_infinity = false; 
# 1097
static constexpr inline bool has_quiet_NaN = false; 
# 1098
static constexpr inline bool has_signaling_NaN = false; 
# 1099
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 1101
static constexpr inline bool has_denorm_loss = false; 
# 1104
static constexpr int infinity() noexcept { return static_cast< int>(0); } 
# 1107
static constexpr int quiet_NaN() noexcept { return static_cast< int>(0); } 
# 1110
static constexpr int signaling_NaN() noexcept { return static_cast< int>(0); } 
# 1113
static constexpr int denorm_min() noexcept { return static_cast< int>(0); } 
# 1115
static constexpr inline bool is_iec559 = false; 
# 1116
static constexpr inline bool is_bounded = true; 
# 1117
static constexpr inline bool is_modulo = false; 
# 1119
static constexpr inline bool traps = true; 
# 1120
static constexpr inline bool tinyness_before = false; 
# 1121
static constexpr inline float_round_style round_style = round_toward_zero; 
# 1123
}; 
# 1127
template<> struct numeric_limits< unsigned>  { 
# 1129
static constexpr inline bool is_specialized = true; 
# 1132
static constexpr unsigned min() noexcept { return 0; } 
# 1135
static constexpr unsigned max() noexcept { return ((2147483647) * 2U) + (1); } 
# 1139
static constexpr unsigned lowest() noexcept { return min(); } 
# 1142
static constexpr inline int digits = ((sizeof(unsigned) * (8)) - (((unsigned)(-1)) < (0))); 
# 1144
static constexpr inline int digits10 = ((((sizeof(unsigned) * (8)) - (((unsigned)(-1)) < (0))) * (643L)) / (2136)); 
# 1147
static constexpr inline int max_digits10 = 0; 
# 1149
static constexpr inline bool is_signed = false; 
# 1150
static constexpr inline bool is_integer = true; 
# 1151
static constexpr inline bool is_exact = true; 
# 1152
static constexpr inline int radix = 2; 
# 1155
static constexpr unsigned epsilon() noexcept { return 0; } 
# 1158
static constexpr unsigned round_error() noexcept { return 0; } 
# 1160
static constexpr inline int min_exponent = 0; 
# 1161
static constexpr inline int min_exponent10 = 0; 
# 1162
static constexpr inline int max_exponent = 0; 
# 1163
static constexpr inline int max_exponent10 = 0; 
# 1165
static constexpr inline bool has_infinity = false; 
# 1166
static constexpr inline bool has_quiet_NaN = false; 
# 1167
static constexpr inline bool has_signaling_NaN = false; 
# 1168
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 1170
static constexpr inline bool has_denorm_loss = false; 
# 1173
static constexpr unsigned infinity() noexcept { return static_cast< unsigned>(0); } 
# 1176
static constexpr unsigned quiet_NaN() noexcept 
# 1177
{ return static_cast< unsigned>(0); } 
# 1180
static constexpr unsigned signaling_NaN() noexcept 
# 1181
{ return static_cast< unsigned>(0); } 
# 1184
static constexpr unsigned denorm_min() noexcept 
# 1185
{ return static_cast< unsigned>(0); } 
# 1187
static constexpr inline bool is_iec559 = false; 
# 1188
static constexpr inline bool is_bounded = true; 
# 1189
static constexpr inline bool is_modulo = true; 
# 1191
static constexpr inline bool traps = true; 
# 1192
static constexpr inline bool tinyness_before = false; 
# 1193
static constexpr inline float_round_style round_style = round_toward_zero; 
# 1195
}; 
# 1199
template<> struct numeric_limits< long>  { 
# 1201
static constexpr inline bool is_specialized = true; 
# 1204
static constexpr long min() noexcept { return (-9223372036854775807L) - (1); } 
# 1207
static constexpr long max() noexcept { return 9223372036854775807L; } 
# 1211
static constexpr long lowest() noexcept { return min(); } 
# 1214
static constexpr inline int digits = ((sizeof(long) * (8)) - (((long)(-1)) < (0))); 
# 1215
static constexpr inline int digits10 = ((((sizeof(long) * (8)) - (((long)(-1)) < (0))) * (643L)) / (2136)); 
# 1217
static constexpr inline int max_digits10 = 0; 
# 1219
static constexpr inline bool is_signed = true; 
# 1220
static constexpr inline bool is_integer = true; 
# 1221
static constexpr inline bool is_exact = true; 
# 1222
static constexpr inline int radix = 2; 
# 1225
static constexpr long epsilon() noexcept { return 0; } 
# 1228
static constexpr long round_error() noexcept { return 0; } 
# 1230
static constexpr inline int min_exponent = 0; 
# 1231
static constexpr inline int min_exponent10 = 0; 
# 1232
static constexpr inline int max_exponent = 0; 
# 1233
static constexpr inline int max_exponent10 = 0; 
# 1235
static constexpr inline bool has_infinity = false; 
# 1236
static constexpr inline bool has_quiet_NaN = false; 
# 1237
static constexpr inline bool has_signaling_NaN = false; 
# 1238
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 1240
static constexpr inline bool has_denorm_loss = false; 
# 1243
static constexpr long infinity() noexcept { return static_cast< long>(0); } 
# 1246
static constexpr long quiet_NaN() noexcept { return static_cast< long>(0); } 
# 1249
static constexpr long signaling_NaN() noexcept { return static_cast< long>(0); } 
# 1252
static constexpr long denorm_min() noexcept { return static_cast< long>(0); } 
# 1254
static constexpr inline bool is_iec559 = false; 
# 1255
static constexpr inline bool is_bounded = true; 
# 1256
static constexpr inline bool is_modulo = false; 
# 1258
static constexpr inline bool traps = true; 
# 1259
static constexpr inline bool tinyness_before = false; 
# 1260
static constexpr inline float_round_style round_style = round_toward_zero; 
# 1262
}; 
# 1266
template<> struct numeric_limits< unsigned long>  { 
# 1268
static constexpr inline bool is_specialized = true; 
# 1271
static constexpr unsigned long min() noexcept { return 0; } 
# 1274
static constexpr unsigned long max() noexcept { return ((9223372036854775807L) * 2UL) + (1); } 
# 1278
static constexpr unsigned long lowest() noexcept { return min(); } 
# 1281
static constexpr inline int digits = ((sizeof(unsigned long) * (8)) - (((unsigned long)(-1)) < (0))); 
# 1283
static constexpr inline int digits10 = ((((sizeof(unsigned long) * (8)) - (((unsigned long)(-1)) < (0))) * (643L)) / (2136)); 
# 1286
static constexpr inline int max_digits10 = 0; 
# 1288
static constexpr inline bool is_signed = false; 
# 1289
static constexpr inline bool is_integer = true; 
# 1290
static constexpr inline bool is_exact = true; 
# 1291
static constexpr inline int radix = 2; 
# 1294
static constexpr unsigned long epsilon() noexcept { return 0; } 
# 1297
static constexpr unsigned long round_error() noexcept { return 0; } 
# 1299
static constexpr inline int min_exponent = 0; 
# 1300
static constexpr inline int min_exponent10 = 0; 
# 1301
static constexpr inline int max_exponent = 0; 
# 1302
static constexpr inline int max_exponent10 = 0; 
# 1304
static constexpr inline bool has_infinity = false; 
# 1305
static constexpr inline bool has_quiet_NaN = false; 
# 1306
static constexpr inline bool has_signaling_NaN = false; 
# 1307
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 1309
static constexpr inline bool has_denorm_loss = false; 
# 1312
static constexpr unsigned long infinity() noexcept 
# 1313
{ return static_cast< unsigned long>(0); } 
# 1316
static constexpr unsigned long quiet_NaN() noexcept 
# 1317
{ return static_cast< unsigned long>(0); } 
# 1320
static constexpr unsigned long signaling_NaN() noexcept 
# 1321
{ return static_cast< unsigned long>(0); } 
# 1324
static constexpr unsigned long denorm_min() noexcept 
# 1325
{ return static_cast< unsigned long>(0); } 
# 1327
static constexpr inline bool is_iec559 = false; 
# 1328
static constexpr inline bool is_bounded = true; 
# 1329
static constexpr inline bool is_modulo = true; 
# 1331
static constexpr inline bool traps = true; 
# 1332
static constexpr inline bool tinyness_before = false; 
# 1333
static constexpr inline float_round_style round_style = round_toward_zero; 
# 1335
}; 
# 1339
template<> struct numeric_limits< long long>  { 
# 1341
static constexpr inline bool is_specialized = true; 
# 1344
static constexpr long long min() noexcept { return (-9223372036854775807LL) - (1); } 
# 1347
static constexpr long long max() noexcept { return 9223372036854775807LL; } 
# 1351
static constexpr long long lowest() noexcept { return min(); } 
# 1354
static constexpr inline int digits = ((sizeof(long long) * (8)) - (((long long)(-1)) < (0))); 
# 1356
static constexpr inline int digits10 = ((((sizeof(long long) * (8)) - (((long long)(-1)) < (0))) * (643L)) / (2136)); 
# 1359
static constexpr inline int max_digits10 = 0; 
# 1361
static constexpr inline bool is_signed = true; 
# 1362
static constexpr inline bool is_integer = true; 
# 1363
static constexpr inline bool is_exact = true; 
# 1364
static constexpr inline int radix = 2; 
# 1367
static constexpr long long epsilon() noexcept { return 0; } 
# 1370
static constexpr long long round_error() noexcept { return 0; } 
# 1372
static constexpr inline int min_exponent = 0; 
# 1373
static constexpr inline int min_exponent10 = 0; 
# 1374
static constexpr inline int max_exponent = 0; 
# 1375
static constexpr inline int max_exponent10 = 0; 
# 1377
static constexpr inline bool has_infinity = false; 
# 1378
static constexpr inline bool has_quiet_NaN = false; 
# 1379
static constexpr inline bool has_signaling_NaN = false; 
# 1380
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 1382
static constexpr inline bool has_denorm_loss = false; 
# 1385
static constexpr long long infinity() noexcept { return static_cast< long long>(0); } 
# 1388
static constexpr long long quiet_NaN() noexcept { return static_cast< long long>(0); } 
# 1391
static constexpr long long signaling_NaN() noexcept 
# 1392
{ return static_cast< long long>(0); } 
# 1395
static constexpr long long denorm_min() noexcept { return static_cast< long long>(0); } 
# 1397
static constexpr inline bool is_iec559 = false; 
# 1398
static constexpr inline bool is_bounded = true; 
# 1399
static constexpr inline bool is_modulo = false; 
# 1401
static constexpr inline bool traps = true; 
# 1402
static constexpr inline bool tinyness_before = false; 
# 1403
static constexpr inline float_round_style round_style = round_toward_zero; 
# 1405
}; 
# 1409
template<> struct numeric_limits< unsigned long long>  { 
# 1411
static constexpr inline bool is_specialized = true; 
# 1414
static constexpr unsigned long long min() noexcept { return 0; } 
# 1417
static constexpr unsigned long long max() noexcept { return ((9223372036854775807LL) * 2ULL) + (1); } 
# 1421
static constexpr unsigned long long lowest() noexcept { return min(); } 
# 1424
static constexpr inline int digits = ((sizeof(unsigned long long) * (8)) - (((unsigned long long)(-1)) < (0))); 
# 1426
static constexpr inline int digits10 = ((((sizeof(unsigned long long) * (8)) - (((unsigned long long)(-1)) < (0))) * (643L)) / (2136)); 
# 1429
static constexpr inline int max_digits10 = 0; 
# 1431
static constexpr inline bool is_signed = false; 
# 1432
static constexpr inline bool is_integer = true; 
# 1433
static constexpr inline bool is_exact = true; 
# 1434
static constexpr inline int radix = 2; 
# 1437
static constexpr unsigned long long epsilon() noexcept { return 0; } 
# 1440
static constexpr unsigned long long round_error() noexcept { return 0; } 
# 1442
static constexpr inline int min_exponent = 0; 
# 1443
static constexpr inline int min_exponent10 = 0; 
# 1444
static constexpr inline int max_exponent = 0; 
# 1445
static constexpr inline int max_exponent10 = 0; 
# 1447
static constexpr inline bool has_infinity = false; 
# 1448
static constexpr inline bool has_quiet_NaN = false; 
# 1449
static constexpr inline bool has_signaling_NaN = false; 
# 1450
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 1452
static constexpr inline bool has_denorm_loss = false; 
# 1455
static constexpr unsigned long long infinity() noexcept 
# 1456
{ return static_cast< unsigned long long>(0); } 
# 1459
static constexpr unsigned long long quiet_NaN() noexcept 
# 1460
{ return static_cast< unsigned long long>(0); } 
# 1463
static constexpr unsigned long long signaling_NaN() noexcept 
# 1464
{ return static_cast< unsigned long long>(0); } 
# 1467
static constexpr unsigned long long denorm_min() noexcept 
# 1468
{ return static_cast< unsigned long long>(0); } 
# 1470
static constexpr inline bool is_iec559 = false; 
# 1471
static constexpr inline bool is_bounded = true; 
# 1472
static constexpr inline bool is_modulo = true; 
# 1474
static constexpr inline bool traps = true; 
# 1475
static constexpr inline bool tinyness_before = false; 
# 1476
static constexpr inline float_round_style round_style = round_toward_zero; 
# 1478
}; 
# 1656 "/usr/include/c++/11/limits" 3
template<> struct numeric_limits< __int128>  { static constexpr inline bool is_specialized = true; static constexpr __int128 min() noexcept { return ((((__int128)(-1)) < (0)) ? (-((((__int128)(-1)) < (0)) ? (((((__int128)1) << ((128 - (((__int128)(-1)) < (0))) - 1)) - (1)) << 1) + (1) : (~((__int128)0)))) - (1) : ((__int128)0)); } static constexpr __int128 max() noexcept { return ((((__int128)(-1)) < (0)) ? (((((__int128)1) << ((128 - (((__int128)(-1)) < (0))) - 1)) - (1)) << 1) + (1) : (~((__int128)0))); } static constexpr inline int digits = (128 - 1); static constexpr inline int digits10 = (((128 - 1) * 643L) / (2136)); static constexpr inline bool is_signed = true; static constexpr inline bool is_integer = true; static constexpr inline bool is_exact = true; static constexpr inline int radix = 2; static constexpr __int128 epsilon() noexcept { return 0; } static constexpr __int128 round_error() noexcept { return 0; } static constexpr __int128 lowest() noexcept { return min(); } static constexpr inline int max_digits10 = 0; static constexpr inline int min_exponent = 0; static constexpr inline int min_exponent10 = 0; static constexpr inline int max_exponent = 0; static constexpr inline int max_exponent10 = 0; static constexpr inline bool has_infinity = false; static constexpr inline bool has_quiet_NaN = false; static constexpr inline bool has_signaling_NaN = false; static constexpr inline float_denorm_style has_denorm = denorm_absent; static constexpr inline bool has_denorm_loss = false; static constexpr __int128 infinity() noexcept { return static_cast< __int128>(0); } static constexpr __int128 quiet_NaN() noexcept { return static_cast< __int128>(0); } static constexpr __int128 signaling_NaN() noexcept { return static_cast< __int128>(0); } static constexpr __int128 denorm_min() noexcept { return static_cast< __int128>(0); } static constexpr inline bool is_iec559 = false; static constexpr inline bool is_bounded = true; static constexpr inline bool is_modulo = false; static constexpr inline bool traps = true; static constexpr inline bool tinyness_before = false; static constexpr inline float_round_style round_style = round_toward_zero; }; template<> struct numeric_limits< unsigned __int128>  { static constexpr inline bool is_specialized = true; static constexpr unsigned __int128 min() noexcept { return 0; } static constexpr unsigned __int128 max() noexcept { return ((((unsigned __int128)(-1)) < (0)) ? (((((unsigned __int128)1) << ((128 - (((unsigned __int128)(-1)) < (0))) - 1)) - (1)) << 1) + (1) : (~((unsigned __int128)0))); } static constexpr unsigned __int128 lowest() noexcept { return min(); } static constexpr inline int max_digits10 = 0; static constexpr inline int digits = 128; static constexpr inline int digits10 = (((128) * 643L) / (2136)); static constexpr inline bool is_signed = false; static constexpr inline bool is_integer = true; static constexpr inline bool is_exact = true; static constexpr inline int radix = 2; static constexpr unsigned __int128 epsilon() noexcept { return 0; } static constexpr unsigned __int128 round_error() noexcept { return 0; } static constexpr inline int min_exponent = 0; static constexpr inline int min_exponent10 = 0; static constexpr inline int max_exponent = 0; static constexpr inline int max_exponent10 = 0; static constexpr inline bool has_infinity = false; static constexpr inline bool has_quiet_NaN = false; static constexpr inline bool has_signaling_NaN = false; static constexpr inline float_denorm_style has_denorm = denorm_absent; static constexpr inline bool has_denorm_loss = false; static constexpr unsigned __int128 infinity() noexcept { return static_cast< unsigned __int128>(0); } static constexpr unsigned __int128 quiet_NaN() noexcept { return static_cast< unsigned __int128>(0); } static constexpr unsigned __int128 signaling_NaN() noexcept { return static_cast< unsigned __int128>(0); } static constexpr unsigned __int128 denorm_min() noexcept { return static_cast< unsigned __int128>(0); } static constexpr inline bool is_iec559 = false; static constexpr inline bool is_bounded = true; static constexpr inline bool is_modulo = true; static constexpr inline bool traps = true; static constexpr inline bool tinyness_before = false; static constexpr inline float_round_style round_style = round_toward_zero; }; 
# 1668 "/usr/include/c++/11/limits" 3
template<> struct numeric_limits< float>  { 
# 1670
static constexpr inline bool is_specialized = true; 
# 1673
static constexpr float min() noexcept { return (1.1754944E-38F); } 
# 1676
static constexpr float max() noexcept { return (3.4028235E38F); } 
# 1680
static constexpr float lowest() noexcept { return -(3.4028235E38F); } 
# 1683
static constexpr inline int digits = 24; 
# 1684
static constexpr inline int digits10 = 6; 
# 1686
static constexpr inline int max_digits10 = ((2) + (((24) * 643L) / (2136))); 
# 1689
static constexpr inline bool is_signed = true; 
# 1690
static constexpr inline bool is_integer = false; 
# 1691
static constexpr inline bool is_exact = false; 
# 1692
static constexpr inline int radix = 2; 
# 1695
static constexpr float epsilon() noexcept { return (1.1920929E-7F); } 
# 1698
static constexpr float round_error() noexcept { return (0.5F); } 
# 1700
static constexpr inline int min_exponent = (-125); 
# 1701
static constexpr inline int min_exponent10 = (-37); 
# 1702
static constexpr inline int max_exponent = 128; 
# 1703
static constexpr inline int max_exponent10 = 38; 
# 1705
static constexpr inline bool has_infinity = (1); 
# 1706
static constexpr inline bool has_quiet_NaN = (1); 
# 1707
static constexpr inline bool has_signaling_NaN = has_quiet_NaN; 
# 1708
static constexpr inline float_denorm_style has_denorm = (((bool)1) ? denorm_present : denorm_absent); 
# 1710
static constexpr inline bool has_denorm_loss = false; 
# 1714
static constexpr float infinity() noexcept { return __builtin_huge_valf(); } 
# 1717
static constexpr float quiet_NaN() noexcept { return __builtin_nanf(""); } 
# 1720
static constexpr float signaling_NaN() noexcept { return __builtin_nansf(""); } 
# 1723
static constexpr float denorm_min() noexcept { return (1.4E-45F); } 
# 1725
static constexpr inline bool is_iec559 = (has_infinity && has_quiet_NaN && (has_denorm == (denorm_present))); 
# 1727
static constexpr inline bool is_bounded = true; 
# 1728
static constexpr inline bool is_modulo = false; 
# 1730
static constexpr inline bool traps = false; 
# 1731
static constexpr inline bool tinyness_before = false; 
# 1733
static constexpr inline float_round_style round_style = round_to_nearest; 
# 1735
}; 
# 1743
template<> struct numeric_limits< double>  { 
# 1745
static constexpr inline bool is_specialized = true; 
# 1748
static constexpr double min() noexcept { return (double)(2.2250738585072013831E-308L); } 
# 1751
static constexpr double max() noexcept { return (double)(1.7976931348623157081E308L); } 
# 1755
static constexpr double lowest() noexcept { return -((double)(1.7976931348623157081E308L)); } 
# 1758
static constexpr inline int digits = 53; 
# 1759
static constexpr inline int digits10 = 15; 
# 1761
static constexpr inline int max_digits10 = ((2) + (((53) * 643L) / (2136))); 
# 1764
static constexpr inline bool is_signed = true; 
# 1765
static constexpr inline bool is_integer = false; 
# 1766
static constexpr inline bool is_exact = false; 
# 1767
static constexpr inline int radix = 2; 
# 1770
static constexpr double epsilon() noexcept { return (double)(2.2204460492503130808E-16L); } 
# 1773
static constexpr double round_error() noexcept { return (0.5); } 
# 1775
static constexpr inline int min_exponent = (-1021); 
# 1776
static constexpr inline int min_exponent10 = (-307); 
# 1777
static constexpr inline int max_exponent = 1024; 
# 1778
static constexpr inline int max_exponent10 = 308; 
# 1780
static constexpr inline bool has_infinity = (1); 
# 1781
static constexpr inline bool has_quiet_NaN = (1); 
# 1782
static constexpr inline bool has_signaling_NaN = has_quiet_NaN; 
# 1783
static constexpr inline float_denorm_style has_denorm = (((bool)1) ? denorm_present : denorm_absent); 
# 1785
static constexpr inline bool has_denorm_loss = false; 
# 1789
static constexpr double infinity() noexcept { return __builtin_huge_val(); } 
# 1792
static constexpr double quiet_NaN() noexcept { return __builtin_nan(""); } 
# 1795
static constexpr double signaling_NaN() noexcept { return __builtin_nans(""); } 
# 1798
static constexpr double denorm_min() noexcept { return (double)(4.940656458412465442E-324L); } 
# 1800
static constexpr inline bool is_iec559 = (has_infinity && has_quiet_NaN && (has_denorm == (denorm_present))); 
# 1802
static constexpr inline bool is_bounded = true; 
# 1803
static constexpr inline bool is_modulo = false; 
# 1805
static constexpr inline bool traps = false; 
# 1806
static constexpr inline bool tinyness_before = false; 
# 1808
static constexpr inline float_round_style round_style = round_to_nearest; 
# 1810
}; 
# 1818
template<> struct numeric_limits< long double>  { 
# 1820
static constexpr inline bool is_specialized = true; 
# 1823
static constexpr long double min() noexcept { return (3.3621031431120935063E-4932L); } 
# 1826
static constexpr long double max() noexcept { return (1.189731495357231765E4932L); } 
# 1830
static constexpr long double lowest() noexcept { return -(1.189731495357231765E4932L); } 
# 1833
static constexpr inline int digits = 64; 
# 1834
static constexpr inline int digits10 = 18; 
# 1836
static constexpr inline int max_digits10 = ((2) + (((64) * 643L) / (2136))); 
# 1839
static constexpr inline bool is_signed = true; 
# 1840
static constexpr inline bool is_integer = false; 
# 1841
static constexpr inline bool is_exact = false; 
# 1842
static constexpr inline int radix = 2; 
# 1845
static constexpr long double epsilon() noexcept { return (1.084202172485504434E-19L); } 
# 1848
static constexpr long double round_error() noexcept { return (0.5L); } 
# 1850
static constexpr inline int min_exponent = (-16381); 
# 1851
static constexpr inline int min_exponent10 = (-4931); 
# 1852
static constexpr inline int max_exponent = 16384; 
# 1853
static constexpr inline int max_exponent10 = 4932; 
# 1855
static constexpr inline bool has_infinity = (1); 
# 1856
static constexpr inline bool has_quiet_NaN = (1); 
# 1857
static constexpr inline bool has_signaling_NaN = has_quiet_NaN; 
# 1858
static constexpr inline float_denorm_style has_denorm = (((bool)1) ? denorm_present : denorm_absent); 
# 1860
static constexpr inline bool has_denorm_loss = false; 
# 1864
static constexpr long double infinity() noexcept { return __builtin_huge_vall(); } 
# 1867
static constexpr long double quiet_NaN() noexcept { return __builtin_nanl(""); } 
# 1870
static constexpr long double signaling_NaN() noexcept { return __builtin_nansl(""); } 
# 1873
static constexpr long double denorm_min() noexcept { return (3.6E-4951L); } 
# 1875
static constexpr inline bool is_iec559 = (has_infinity && has_quiet_NaN && (has_denorm == (denorm_present))); 
# 1877
static constexpr inline bool is_bounded = true; 
# 1878
static constexpr inline bool is_modulo = false; 
# 1880
static constexpr inline bool traps = false; 
# 1881
static constexpr inline bool tinyness_before = false; 
# 1883
static constexpr inline float_round_style round_style = round_to_nearest; 
# 1885
}; 
# 1892
}
# 39 "/usr/include/c++/11/tr1/special_function_util.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 50 "/usr/include/c++/11/tr1/special_function_util.h" 3
namespace __detail { 
# 55
template< class _Tp> 
# 56
struct __floating_point_constant { 
# 58
static const _Tp __value; 
# 59
}; 
# 63
template< class _Tp> 
# 64
struct __numeric_constants { 
# 67
static _Tp __pi() throw() 
# 68
{ return static_cast< _Tp>((3.1415926535897932385L)); } 
# 70
static _Tp __pi_2() throw() 
# 71
{ return static_cast< _Tp>((1.5707963267948966193L)); } 
# 73
static _Tp __pi_3() throw() 
# 74
{ return static_cast< _Tp>((1.0471975511965977461L)); } 
# 76
static _Tp __pi_4() throw() 
# 77
{ return static_cast< _Tp>((0.78539816339744830963L)); } 
# 79
static _Tp __1_pi() throw() 
# 80
{ return static_cast< _Tp>((0.31830988618379067154L)); } 
# 82
static _Tp __2_sqrtpi() throw() 
# 83
{ return static_cast< _Tp>((1.1283791670955125738L)); } 
# 85
static _Tp __sqrt2() throw() 
# 86
{ return static_cast< _Tp>((1.4142135623730950488L)); } 
# 88
static _Tp __sqrt3() throw() 
# 89
{ return static_cast< _Tp>((1.7320508075688772936L)); } 
# 91
static _Tp __sqrtpio2() throw() 
# 92
{ return static_cast< _Tp>((1.2533141373155002512L)); } 
# 94
static _Tp __sqrt1_2() throw() 
# 95
{ return static_cast< _Tp>((0.7071067811865475244L)); } 
# 97
static _Tp __lnpi() throw() 
# 98
{ return static_cast< _Tp>((1.1447298858494001742L)); } 
# 100
static _Tp __gamma_e() throw() 
# 101
{ return static_cast< _Tp>((0.5772156649015328606L)); } 
# 103
static _Tp __euler() throw() 
# 104
{ return static_cast< _Tp>((2.7182818284590452354L)); } 
# 105
}; 
# 114 "/usr/include/c++/11/tr1/special_function_util.h" 3
template< class _Tp> inline bool 
# 115
__isnan(_Tp __x) 
# 116
{ return std::isnan(__x); } 
# 133 "/usr/include/c++/11/tr1/special_function_util.h" 3
}
# 139
}
# 51 "/usr/include/c++/11/tr1/gamma.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 65 "/usr/include/c++/11/tr1/gamma.tcc" 3
namespace __detail { 
# 76 "/usr/include/c++/11/tr1/gamma.tcc" 3
template< class _Tp> _Tp 
# 78
__bernoulli_series(unsigned __n) 
# 79
{ 
# 81
static const _Tp __num[28] = {((_Tp)1UL), ((-((_Tp)1UL)) / ((_Tp)2UL)), (((_Tp)1UL) / ((_Tp)6UL)), ((_Tp)0UL), ((-((_Tp)1UL)) / ((_Tp)30UL)), ((_Tp)0UL), (((_Tp)1UL) / ((_Tp)42UL)), ((_Tp)0UL), ((-((_Tp)1UL)) / ((_Tp)30UL)), ((_Tp)0UL), (((_Tp)5UL) / ((_Tp)66UL)), ((_Tp)0UL), ((-((_Tp)691UL)) / ((_Tp)2730UL)), ((_Tp)0UL), (((_Tp)7UL) / ((_Tp)6UL)), ((_Tp)0UL), ((-((_Tp)3617UL)) / ((_Tp)510UL)), ((_Tp)0UL), (((_Tp)43867UL) / ((_Tp)798UL)), ((_Tp)0UL), ((-((_Tp)174611)) / ((_Tp)330UL)), ((_Tp)0UL), (((_Tp)854513UL) / ((_Tp)138UL)), ((_Tp)0UL), ((-((_Tp)236364091UL)) / ((_Tp)2730UL)), ((_Tp)0UL), (((_Tp)8553103UL) / ((_Tp)6UL)), ((_Tp)0UL)}; 
# 98
if (__n == (0)) { 
# 99
return (_Tp)1; }  
# 101
if (__n == (1)) { 
# 102
return (-((_Tp)1)) / ((_Tp)2); }  
# 105
if ((__n % (2)) == (1)) { 
# 106
return (_Tp)0; }  
# 109
if (__n < (28)) { 
# 110
return __num[__n]; }  
# 113
_Tp __fact = ((_Tp)1); 
# 114
if (((__n / (2)) % (2)) == (0)) { 
# 115
__fact *= ((_Tp)(-1)); }  
# 116
for (unsigned __k = (1); __k <= __n; ++__k) { 
# 117
__fact *= (__k / (((_Tp)2) * __numeric_constants< _Tp> ::__pi())); }  
# 118
__fact *= ((_Tp)2); 
# 120
_Tp __sum = ((_Tp)0); 
# 121
for (unsigned __i = (1); __i < (1000); ++__i) 
# 122
{ 
# 123
_Tp __term = std::pow((_Tp)__i, -((_Tp)__n)); 
# 124
if (__term < std::template numeric_limits< _Tp> ::epsilon()) { 
# 125
break; }  
# 126
__sum += __term; 
# 127
}  
# 129
return __fact * __sum; 
# 130
} 
# 139 "/usr/include/c++/11/tr1/gamma.tcc" 3
template< class _Tp> inline _Tp 
# 141
__bernoulli(int __n) 
# 142
{ return __bernoulli_series< _Tp> (__n); } 
# 153 "/usr/include/c++/11/tr1/gamma.tcc" 3
template< class _Tp> _Tp 
# 155
__log_gamma_bernoulli(_Tp __x) 
# 156
{ 
# 157
_Tp __lg = (((__x - ((_Tp)(0.5L))) * std::log(__x)) - __x) + (((_Tp)(0.5L)) * std::log(((_Tp)2) * __numeric_constants< _Tp> ::__pi())); 
# 161
const _Tp __xx = __x * __x; 
# 162
_Tp __help = ((_Tp)1) / __x; 
# 163
for (unsigned __i = (1); __i < (20); ++__i) 
# 164
{ 
# 165
const _Tp __2i = (_Tp)((2) * __i); 
# 166
__help /= ((__2i * (__2i - ((_Tp)1))) * __xx); 
# 167
__lg += (__bernoulli< _Tp> ((2) * __i) * __help); 
# 168
}  
# 170
return __lg; 
# 171
} 
# 181 "/usr/include/c++/11/tr1/gamma.tcc" 3
template< class _Tp> _Tp 
# 183
__log_gamma_lanczos(_Tp __x) 
# 184
{ 
# 185
const _Tp __xm1 = __x - ((_Tp)1); 
# 187
static const _Tp __lanczos_cheb_7[9] = {((_Tp)(0.99999999999980993226L)), ((_Tp)(676.52036812188509857L)), ((_Tp)(-(1259.1392167224028704L))), ((_Tp)(771.32342877765307887L)), ((_Tp)(-(176.61502916214059906L))), ((_Tp)(12.507343278686904814L)), ((_Tp)(-(0.1385710952657201169L))), ((_Tp)(9.9843695780195708595E-6L)), ((_Tp)(1.5056327351493115584E-7L))}; 
# 199
static const _Tp __LOGROOT2PI = ((_Tp)(0.9189385332046727418L)); 
# 202
_Tp __sum = (__lanczos_cheb_7[0]); 
# 203
for (unsigned __k = (1); __k < (9); ++__k) { 
# 204
__sum += ((__lanczos_cheb_7[__k]) / (__xm1 + __k)); }  
# 206
const _Tp __term1 = (__xm1 + ((_Tp)(0.5L))) * std::log((__xm1 + ((_Tp)(7.5L))) / __numeric_constants< _Tp> ::__euler()); 
# 209
const _Tp __term2 = __LOGROOT2PI + std::log(__sum); 
# 210
const _Tp __result = __term1 + (__term2 - ((_Tp)7)); 
# 212
return __result; 
# 213
} 
# 225 "/usr/include/c++/11/tr1/gamma.tcc" 3
template< class _Tp> _Tp 
# 227
__log_gamma(_Tp __x) 
# 228
{ 
# 229
if (__x > ((_Tp)(0.5L))) { 
# 230
return __log_gamma_lanczos(__x); } else 
# 232
{ 
# 233
const _Tp __sin_fact = std::abs(std::sin(__numeric_constants< _Tp> ::__pi() * __x)); 
# 235
if (__sin_fact == ((_Tp)0)) { 
# 236
std::__throw_domain_error("Argument is nonpositive integer in __log_gamma"); }  
# 238
return (__numeric_constants< _Tp> ::__lnpi() - std::log(__sin_fact)) - __log_gamma_lanczos(((_Tp)1) - __x); 
# 241
}  
# 242
} 
# 252 "/usr/include/c++/11/tr1/gamma.tcc" 3
template< class _Tp> _Tp 
# 254
__log_gamma_sign(_Tp __x) 
# 255
{ 
# 256
if (__x > ((_Tp)0)) { 
# 257
return (_Tp)1; } else 
# 259
{ 
# 260
const _Tp __sin_fact = std::sin(__numeric_constants< _Tp> ::__pi() * __x); 
# 262
if (__sin_fact > ((_Tp)0)) { 
# 263
return 1; } else { 
# 264
if (__sin_fact < ((_Tp)0)) { 
# 265
return -((_Tp)1); } else { 
# 267
return (_Tp)0; }  }  
# 268
}  
# 269
} 
# 283 "/usr/include/c++/11/tr1/gamma.tcc" 3
template< class _Tp> _Tp 
# 285
__log_bincoef(unsigned __n, unsigned __k) 
# 286
{ 
# 288
static const _Tp __max_bincoeff = (std::template numeric_limits< _Tp> ::max_exponent10 * std::log((_Tp)10)) - ((_Tp)1); 
# 292
_Tp __coeff = (std::lgamma((_Tp)((1) + __n)) - std::lgamma((_Tp)((1) + __k))) - std::lgamma((_Tp)(((1) + __n) - __k)); 
# 300
} 
# 314 "/usr/include/c++/11/tr1/gamma.tcc" 3
template< class _Tp> _Tp 
# 316
__bincoef(unsigned __n, unsigned __k) 
# 317
{ 
# 319
static const _Tp __max_bincoeff = (std::template numeric_limits< _Tp> ::max_exponent10 * std::log((_Tp)10)) - ((_Tp)1); 
# 323
const _Tp __log_coeff = __log_bincoef< _Tp> (__n, __k); 
# 324
if (__log_coeff > __max_bincoeff) { 
# 325
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 327
return std::exp(__log_coeff); }  
# 328
} 
# 337 "/usr/include/c++/11/tr1/gamma.tcc" 3
template< class _Tp> inline _Tp 
# 339
__gamma(_Tp __x) 
# 340
{ return std::exp(__log_gamma(__x)); } 
# 356 "/usr/include/c++/11/tr1/gamma.tcc" 3
template< class _Tp> _Tp 
# 358
__psi_series(_Tp __x) 
# 359
{ 
# 360
_Tp __sum = (-__numeric_constants< _Tp> ::__gamma_e()) - (((_Tp)1) / __x); 
# 361
const unsigned __max_iter = (100000); 
# 362
for (unsigned __k = (1); __k < __max_iter; ++__k) 
# 363
{ 
# 364
const _Tp __term = __x / (__k * (__k + __x)); 
# 365
__sum += __term; 
# 366
if (std::abs(__term / __sum) < std::template numeric_limits< _Tp> ::epsilon()) { 
# 367
break; }  
# 368
}  
# 369
return __sum; 
# 370
} 
# 386 "/usr/include/c++/11/tr1/gamma.tcc" 3
template< class _Tp> _Tp 
# 388
__psi_asymp(_Tp __x) 
# 389
{ 
# 390
_Tp __sum = std::log(__x) - (((_Tp)(0.5L)) / __x); 
# 391
const _Tp __xx = __x * __x; 
# 392
_Tp __xp = __xx; 
# 393
const unsigned __max_iter = (100); 
# 394
for (unsigned __k = (1); __k < __max_iter; ++__k) 
# 395
{ 
# 396
const _Tp __term = __bernoulli< _Tp> ((2) * __k) / (((2) * __k) * __xp); 
# 397
__sum -= __term; 
# 398
if (std::abs(__term / __sum) < std::template numeric_limits< _Tp> ::epsilon()) { 
# 399
break; }  
# 400
__xp *= __xx; 
# 401
}  
# 402
return __sum; 
# 403
} 
# 417 "/usr/include/c++/11/tr1/gamma.tcc" 3
template< class _Tp> _Tp 
# 419
__psi(_Tp __x) 
# 420
{ 
# 421
const int __n = static_cast< int>(__x + (0.5L)); 
# 422
const _Tp __eps = ((_Tp)4) * std::template numeric_limits< _Tp> ::epsilon(); 
# 423
if ((__n <= 0) && (std::abs(__x - ((_Tp)__n)) < __eps)) { 
# 424
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 425
if (__x < ((_Tp)0)) 
# 426
{ 
# 427
const _Tp __pi = __numeric_constants< _Tp> ::__pi(); 
# 428
return __psi(((_Tp)1) - __x) - ((__pi * std::cos(__pi * __x)) / std::sin(__pi * __x)); 
# 430
} else { 
# 431
if (__x > ((_Tp)100)) { 
# 432
return __psi_asymp(__x); } else { 
# 434
return __psi_series(__x); }  }  }  
# 435
} 
# 446 "/usr/include/c++/11/tr1/gamma.tcc" 3
template< class _Tp> _Tp 
# 448
__psi(unsigned __n, _Tp __x) 
# 449
{ 
# 450
if (__x <= ((_Tp)0)) { 
# 451
std::__throw_domain_error("Argument out of range in __psi"); } else { 
# 453
if (__n == (0)) { 
# 454
return __psi(__x); } else 
# 456
{ 
# 457
const _Tp __hzeta = __hurwitz_zeta((_Tp)(__n + (1)), __x); 
# 459
const _Tp __ln_nfact = std::lgamma((_Tp)(__n + (1))); 
# 463
_Tp __result = std::exp(__ln_nfact) * __hzeta; 
# 464
if ((__n % (2)) == (1)) { 
# 465
__result = (-__result); }  
# 466
return __result; 
# 467
}  }  
# 468
} 
# 469
}
# 476
}
# 55 "/usr/include/c++/11/tr1/bessel_function.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 71 "/usr/include/c++/11/tr1/bessel_function.tcc" 3
namespace __detail { 
# 98 "/usr/include/c++/11/tr1/bessel_function.tcc" 3
template< class _Tp> void 
# 100
__gamma_temme(_Tp __mu, _Tp &
# 101
__gam1, _Tp &__gam2, _Tp &__gampl, _Tp &__gammi) 
# 102
{ 
# 104
__gampl = (((_Tp)1) / std::tgamma(((_Tp)1) + __mu)); 
# 105
__gammi = (((_Tp)1) / std::tgamma(((_Tp)1) - __mu)); 
# 111
if (std::abs(__mu) < std::template numeric_limits< _Tp> ::epsilon()) { 
# 112
__gam1 = (-((_Tp)__numeric_constants< _Tp> ::__gamma_e())); } else { 
# 114
__gam1 = ((__gammi - __gampl) / (((_Tp)2) * __mu)); }  
# 116
__gam2 = ((__gammi + __gampl) / ((_Tp)2)); 
# 119
} 
# 136 "/usr/include/c++/11/tr1/bessel_function.tcc" 3
template< class _Tp> void 
# 138
__bessel_jn(_Tp __nu, _Tp __x, _Tp &
# 139
__Jnu, _Tp &__Nnu, _Tp &__Jpnu, _Tp &__Npnu) 
# 140
{ 
# 141
if (__x == ((_Tp)0)) 
# 142
{ 
# 143
if (__nu == ((_Tp)0)) 
# 144
{ 
# 145
__Jnu = ((_Tp)1); 
# 146
__Jpnu = ((_Tp)0); 
# 147
} else { 
# 148
if (__nu == ((_Tp)1)) 
# 149
{ 
# 150
__Jnu = ((_Tp)0); 
# 151
__Jpnu = ((_Tp)(0.5L)); 
# 152
} else 
# 154
{ 
# 155
__Jnu = ((_Tp)0); 
# 156
__Jpnu = ((_Tp)0); 
# 157
}  }  
# 158
__Nnu = (-std::template numeric_limits< _Tp> ::infinity()); 
# 159
__Npnu = std::template numeric_limits< _Tp> ::infinity(); 
# 160
return; 
# 161
}  
# 163
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 168
const _Tp __fp_min = std::sqrt(std::template numeric_limits< _Tp> ::min()); 
# 169
const int __max_iter = 15000; 
# 170
const _Tp __x_min = ((_Tp)2); 
# 172
const int __nl = (__x < __x_min) ? static_cast< int>(__nu + ((_Tp)(0.5L))) : std::max(0, static_cast< int>((__nu - __x) + ((_Tp)(1.5L)))); 
# 176
const _Tp __mu = __nu - __nl; 
# 177
const _Tp __mu2 = __mu * __mu; 
# 178
const _Tp __xi = ((_Tp)1) / __x; 
# 179
const _Tp __xi2 = ((_Tp)2) * __xi; 
# 180
_Tp __w = __xi2 / __numeric_constants< _Tp> ::__pi(); 
# 181
int __isign = 1; 
# 182
_Tp __h = __nu * __xi; 
# 183
if (__h < __fp_min) { 
# 184
__h = __fp_min; }  
# 185
_Tp __b = __xi2 * __nu; 
# 186
_Tp __d = ((_Tp)0); 
# 187
_Tp __c = __h; 
# 188
int __i; 
# 189
for (__i = 1; __i <= __max_iter; ++__i) 
# 190
{ 
# 191
__b += __xi2; 
# 192
__d = (__b - __d); 
# 193
if (std::abs(__d) < __fp_min) { 
# 194
__d = __fp_min; }  
# 195
__c = (__b - (((_Tp)1) / __c)); 
# 196
if (std::abs(__c) < __fp_min) { 
# 197
__c = __fp_min; }  
# 198
__d = (((_Tp)1) / __d); 
# 199
const _Tp __del = __c * __d; 
# 200
__h *= __del; 
# 201
if (__d < ((_Tp)0)) { 
# 202
__isign = (-__isign); }  
# 203
if (std::abs(__del - ((_Tp)1)) < __eps) { 
# 204
break; }  
# 205
}  
# 206
if (__i > __max_iter) { 
# 207
std::__throw_runtime_error("Argument x too large in __bessel_jn; try asymptotic expansion."); }  
# 209
_Tp __Jnul = __isign * __fp_min; 
# 210
_Tp __Jpnul = __h * __Jnul; 
# 211
_Tp __Jnul1 = __Jnul; 
# 212
_Tp __Jpnu1 = __Jpnul; 
# 213
_Tp __fact = __nu * __xi; 
# 214
for (int __l = __nl; __l >= 1; --__l) 
# 215
{ 
# 216
const _Tp __Jnutemp = (__fact * __Jnul) + __Jpnul; 
# 217
__fact -= __xi; 
# 218
__Jpnul = ((__fact * __Jnutemp) - __Jnul); 
# 219
__Jnul = __Jnutemp; 
# 220
}  
# 221
if (__Jnul == ((_Tp)0)) { 
# 222
__Jnul = __eps; }  
# 223
_Tp __f = __Jpnul / __Jnul; 
# 224
_Tp __Nmu, __Nnu1, __Npmu, __Jmu; 
# 225
if (__x < __x_min) 
# 226
{ 
# 227
const _Tp __x2 = __x / ((_Tp)2); 
# 228
const _Tp __pimu = __numeric_constants< _Tp> ::__pi() * __mu; 
# 229
_Tp __fact = (std::abs(__pimu) < __eps) ? (_Tp)1 : (__pimu / std::sin(__pimu)); 
# 231
_Tp __d = (-std::log(__x2)); 
# 232
_Tp __e = __mu * __d; 
# 233
_Tp __fact2 = (std::abs(__e) < __eps) ? (_Tp)1 : (std::sinh(__e) / __e); 
# 235
_Tp __gam1, __gam2, __gampl, __gammi; 
# 236
__gamma_temme(__mu, __gam1, __gam2, __gampl, __gammi); 
# 237
_Tp __ff = ((((_Tp)2) / __numeric_constants< _Tp> ::__pi()) * __fact) * ((__gam1 * std::cosh(__e)) + ((__gam2 * __fact2) * __d)); 
# 239
__e = std::exp(__e); 
# 240
_Tp __p = __e / (__numeric_constants< _Tp> ::__pi() * __gampl); 
# 241
_Tp __q = ((_Tp)1) / ((__e * __numeric_constants< _Tp> ::__pi()) * __gammi); 
# 242
const _Tp __pimu2 = __pimu / ((_Tp)2); 
# 243
_Tp __fact3 = (std::abs(__pimu2) < __eps) ? (_Tp)1 : (std::sin(__pimu2) / __pimu2); 
# 245
_Tp __r = ((__numeric_constants< _Tp> ::__pi() * __pimu2) * __fact3) * __fact3; 
# 246
_Tp __c = ((_Tp)1); 
# 247
__d = ((-__x2) * __x2); 
# 248
_Tp __sum = __ff + (__r * __q); 
# 249
_Tp __sum1 = __p; 
# 250
for (__i = 1; __i <= __max_iter; ++__i) 
# 251
{ 
# 252
__ff = ((((__i * __ff) + __p) + __q) / ((__i * __i) - __mu2)); 
# 253
__c *= (__d / ((_Tp)__i)); 
# 254
__p /= (((_Tp)__i) - __mu); 
# 255
__q /= (((_Tp)__i) + __mu); 
# 256
const _Tp __del = __c * (__ff + (__r * __q)); 
# 257
__sum += __del; 
# 258
const _Tp __del1 = (__c * __p) - (__i * __del); 
# 259
__sum1 += __del1; 
# 260
if (std::abs(__del) < (__eps * (((_Tp)1) + std::abs(__sum)))) { 
# 261
break; }  
# 262
}  
# 263
if (__i > __max_iter) { 
# 264
std::__throw_runtime_error("Bessel y series failed to converge in __bessel_jn."); }  
# 266
__Nmu = (-__sum); 
# 267
__Nnu1 = ((-__sum1) * __xi2); 
# 268
__Npmu = (((__mu * __xi) * __Nmu) - __Nnu1); 
# 269
__Jmu = (__w / (__Npmu - (__f * __Nmu))); 
# 270
} else 
# 272
{ 
# 273
_Tp __a = ((_Tp)(0.25L)) - __mu2; 
# 274
_Tp __q = ((_Tp)1); 
# 275
_Tp __p = ((-__xi) / ((_Tp)2)); 
# 276
_Tp __br = ((_Tp)2) * __x; 
# 277
_Tp __bi = ((_Tp)2); 
# 278
_Tp __fact = (__a * __xi) / ((__p * __p) + (__q * __q)); 
# 279
_Tp __cr = __br + (__q * __fact); 
# 280
_Tp __ci = __bi + (__p * __fact); 
# 281
_Tp __den = (__br * __br) + (__bi * __bi); 
# 282
_Tp __dr = __br / __den; 
# 283
_Tp __di = (-__bi) / __den; 
# 284
_Tp __dlr = (__cr * __dr) - (__ci * __di); 
# 285
_Tp __dli = (__cr * __di) + (__ci * __dr); 
# 286
_Tp __temp = (__p * __dlr) - (__q * __dli); 
# 287
__q = ((__p * __dli) + (__q * __dlr)); 
# 288
__p = __temp; 
# 289
int __i; 
# 290
for (__i = 2; __i <= __max_iter; ++__i) 
# 291
{ 
# 292
__a += ((_Tp)(2 * (__i - 1))); 
# 293
__bi += ((_Tp)2); 
# 294
__dr = ((__a * __dr) + __br); 
# 295
__di = ((__a * __di) + __bi); 
# 296
if ((std::abs(__dr) + std::abs(__di)) < __fp_min) { 
# 297
__dr = __fp_min; }  
# 298
__fact = (__a / ((__cr * __cr) + (__ci * __ci))); 
# 299
__cr = (__br + (__cr * __fact)); 
# 300
__ci = (__bi - (__ci * __fact)); 
# 301
if ((std::abs(__cr) + std::abs(__ci)) < __fp_min) { 
# 302
__cr = __fp_min; }  
# 303
__den = ((__dr * __dr) + (__di * __di)); 
# 304
__dr /= __den; 
# 305
__di /= (-__den); 
# 306
__dlr = ((__cr * __dr) - (__ci * __di)); 
# 307
__dli = ((__cr * __di) + (__ci * __dr)); 
# 308
__temp = ((__p * __dlr) - (__q * __dli)); 
# 309
__q = ((__p * __dli) + (__q * __dlr)); 
# 310
__p = __temp; 
# 311
if ((std::abs(__dlr - ((_Tp)1)) + std::abs(__dli)) < __eps) { 
# 312
break; }  
# 313
}  
# 314
if (__i > __max_iter) { 
# 315
std::__throw_runtime_error("Lentz\'s method failed in __bessel_jn."); }  
# 317
const _Tp __gam = (__p - __f) / __q; 
# 318
__Jmu = std::sqrt(__w / (((__p - __f) * __gam) + __q)); 
# 320
__Jmu = std::copysign(__Jmu, __Jnul); 
# 325
__Nmu = (__gam * __Jmu); 
# 326
__Npmu = ((__p + (__q / __gam)) * __Nmu); 
# 327
__Nnu1 = (((__mu * __xi) * __Nmu) - __Npmu); 
# 328
}  
# 329
__fact = (__Jmu / __Jnul); 
# 330
__Jnu = (__fact * __Jnul1); 
# 331
__Jpnu = (__fact * __Jpnu1); 
# 332
for (__i = 1; __i <= __nl; ++__i) 
# 333
{ 
# 334
const _Tp __Nnutemp = (((__mu + __i) * __xi2) * __Nnu1) - __Nmu; 
# 335
__Nmu = __Nnu1; 
# 336
__Nnu1 = __Nnutemp; 
# 337
}  
# 338
__Nnu = __Nmu; 
# 339
__Npnu = (((__nu * __xi) * __Nmu) - __Nnu1); 
# 342
} 
# 361 "/usr/include/c++/11/tr1/bessel_function.tcc" 3
template< class _Tp> void 
# 363
__cyl_bessel_jn_asymp(_Tp __nu, _Tp __x, _Tp &__Jnu, _Tp &__Nnu) 
# 364
{ 
# 365
const _Tp __mu = (((_Tp)4) * __nu) * __nu; 
# 366
const _Tp __8x = ((_Tp)8) * __x; 
# 368
_Tp __P = ((_Tp)0); 
# 369
_Tp __Q = ((_Tp)0); 
# 371
_Tp __k = ((_Tp)0); 
# 372
_Tp __term = ((_Tp)1); 
# 374
int __epsP = 0; 
# 375
int __epsQ = 0; 
# 377
_Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 379
do 
# 380
{ 
# 381
__term *= ((__k == 0) ? (_Tp)1 : ((-(__mu - (((2 * __k) - 1) * ((2 * __k) - 1)))) / (__k * __8x))); 
# 385
__epsP = (std::abs(__term) < (__eps * std::abs(__P))); 
# 386
__P += __term; 
# 388
__k++; 
# 390
__term *= ((__mu - (((2 * __k) - 1) * ((2 * __k) - 1))) / (__k * __8x)); 
# 391
__epsQ = (std::abs(__term) < (__eps * std::abs(__Q))); 
# 392
__Q += __term; 
# 394
if (__epsP && __epsQ && (__k > (__nu / (2.0)))) { 
# 395
break; }  
# 397
__k++; 
# 398
} 
# 399
while (__k < 1000); 
# 401
const _Tp __chi = __x - ((__nu + ((_Tp)(0.5L))) * __numeric_constants< _Tp> ::__pi_2()); 
# 404
const _Tp __c = std::cos(__chi); 
# 405
const _Tp __s = std::sin(__chi); 
# 407
const _Tp __coef = std::sqrt(((_Tp)2) / (__numeric_constants< _Tp> ::__pi() * __x)); 
# 410
__Jnu = (__coef * ((__c * __P) - (__s * __Q))); 
# 411
__Nnu = (__coef * ((__s * __P) + (__c * __Q))); 
# 414
} 
# 444 "/usr/include/c++/11/tr1/bessel_function.tcc" 3
template< class _Tp> _Tp 
# 446
__cyl_bessel_ij_series(_Tp __nu, _Tp __x, _Tp __sgn, unsigned 
# 447
__max_iter) 
# 448
{ 
# 449
if (__x == ((_Tp)0)) { 
# 450
return (__nu == ((_Tp)0)) ? (_Tp)1 : ((_Tp)0); }  
# 452
const _Tp __x2 = __x / ((_Tp)2); 
# 453
_Tp __fact = __nu * std::log(__x2); 
# 455
__fact -= std::lgamma(__nu + ((_Tp)1)); 
# 459
__fact = std::exp(__fact); 
# 460
const _Tp __xx4 = (__sgn * __x2) * __x2; 
# 461
_Tp __Jn = ((_Tp)1); 
# 462
_Tp __term = ((_Tp)1); 
# 464
for (unsigned __i = (1); __i < __max_iter; ++__i) 
# 465
{ 
# 466
__term *= (__xx4 / (((_Tp)__i) * (__nu + ((_Tp)__i)))); 
# 467
__Jn += __term; 
# 468
if (std::abs(__term / __Jn) < std::template numeric_limits< _Tp> ::epsilon()) { 
# 469
break; }  
# 470
}  
# 472
return __fact * __Jn; 
# 473
} 
# 490 "/usr/include/c++/11/tr1/bessel_function.tcc" 3
template< class _Tp> _Tp 
# 492
__cyl_bessel_j(_Tp __nu, _Tp __x) 
# 493
{ 
# 494
if ((__nu < ((_Tp)0)) || (__x < ((_Tp)0))) { 
# 495
std::__throw_domain_error("Bad argument in __cyl_bessel_j."); } else { 
# 497
if (__isnan(__nu) || __isnan(__x)) { 
# 498
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 499
if ((__x * __x) < (((_Tp)10) * (__nu + ((_Tp)1)))) { 
# 500
return __cyl_bessel_ij_series(__nu, __x, -((_Tp)1), 200); } else { 
# 501
if (__x > ((_Tp)1000)) 
# 502
{ 
# 503
_Tp __J_nu, __N_nu; 
# 504
__cyl_bessel_jn_asymp(__nu, __x, __J_nu, __N_nu); 
# 505
return __J_nu; 
# 506
} else 
# 508
{ 
# 509
_Tp __J_nu, __N_nu, __Jp_nu, __Np_nu; 
# 510
__bessel_jn(__nu, __x, __J_nu, __N_nu, __Jp_nu, __Np_nu); 
# 511
return __J_nu; 
# 512
}  }  }  }  
# 513
} 
# 532 "/usr/include/c++/11/tr1/bessel_function.tcc" 3
template< class _Tp> _Tp 
# 534
__cyl_neumann_n(_Tp __nu, _Tp __x) 
# 535
{ 
# 536
if ((__nu < ((_Tp)0)) || (__x < ((_Tp)0))) { 
# 537
std::__throw_domain_error("Bad argument in __cyl_neumann_n."); } else { 
# 539
if (__isnan(__nu) || __isnan(__x)) { 
# 540
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 541
if (__x > ((_Tp)1000)) 
# 542
{ 
# 543
_Tp __J_nu, __N_nu; 
# 544
__cyl_bessel_jn_asymp(__nu, __x, __J_nu, __N_nu); 
# 545
return __N_nu; 
# 546
} else 
# 548
{ 
# 549
_Tp __J_nu, __N_nu, __Jp_nu, __Np_nu; 
# 550
__bessel_jn(__nu, __x, __J_nu, __N_nu, __Jp_nu, __Np_nu); 
# 551
return __N_nu; 
# 552
}  }  }  
# 553
} 
# 569 "/usr/include/c++/11/tr1/bessel_function.tcc" 3
template< class _Tp> void 
# 571
__sph_bessel_jn(unsigned __n, _Tp __x, _Tp &
# 572
__j_n, _Tp &__n_n, _Tp &__jp_n, _Tp &__np_n) 
# 573
{ 
# 574
const _Tp __nu = ((_Tp)__n) + ((_Tp)(0.5L)); 
# 576
_Tp __J_nu, __N_nu, __Jp_nu, __Np_nu; 
# 577
__bessel_jn(__nu, __x, __J_nu, __N_nu, __Jp_nu, __Np_nu); 
# 579
const _Tp __factor = __numeric_constants< _Tp> ::__sqrtpio2() / std::sqrt(__x); 
# 582
__j_n = (__factor * __J_nu); 
# 583
__n_n = (__factor * __N_nu); 
# 584
__jp_n = ((__factor * __Jp_nu) - (__j_n / (((_Tp)2) * __x))); 
# 585
__np_n = ((__factor * __Np_nu) - (__n_n / (((_Tp)2) * __x))); 
# 588
} 
# 604 "/usr/include/c++/11/tr1/bessel_function.tcc" 3
template< class _Tp> _Tp 
# 606
__sph_bessel(unsigned __n, _Tp __x) 
# 607
{ 
# 608
if (__x < ((_Tp)0)) { 
# 609
std::__throw_domain_error("Bad argument in __sph_bessel."); } else { 
# 611
if (__isnan(__x)) { 
# 612
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 613
if (__x == ((_Tp)0)) 
# 614
{ 
# 615
if (__n == (0)) { 
# 616
return (_Tp)1; } else { 
# 618
return (_Tp)0; }  
# 619
} else 
# 621
{ 
# 622
_Tp __j_n, __n_n, __jp_n, __np_n; 
# 623
__sph_bessel_jn(__n, __x, __j_n, __n_n, __jp_n, __np_n); 
# 624
return __j_n; 
# 625
}  }  }  
# 626
} 
# 642 "/usr/include/c++/11/tr1/bessel_function.tcc" 3
template< class _Tp> _Tp 
# 644
__sph_neumann(unsigned __n, _Tp __x) 
# 645
{ 
# 646
if (__x < ((_Tp)0)) { 
# 647
std::__throw_domain_error("Bad argument in __sph_neumann."); } else { 
# 649
if (__isnan(__x)) { 
# 650
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 651
if (__x == ((_Tp)0)) { 
# 652
return -std::template numeric_limits< _Tp> ::infinity(); } else 
# 654
{ 
# 655
_Tp __j_n, __n_n, __jp_n, __np_n; 
# 656
__sph_bessel_jn(__n, __x, __j_n, __n_n, __jp_n, __np_n); 
# 657
return __n_n; 
# 658
}  }  }  
# 659
} 
# 660
}
# 667
}
# 49 "/usr/include/c++/11/tr1/beta_function.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 65 "/usr/include/c++/11/tr1/beta_function.tcc" 3
namespace __detail { 
# 79 "/usr/include/c++/11/tr1/beta_function.tcc" 3
template< class _Tp> _Tp 
# 81
__beta_gamma(_Tp __x, _Tp __y) 
# 82
{ 
# 84
_Tp __bet; 
# 86
if (__x > __y) 
# 87
{ 
# 88
__bet = (std::tgamma(__x) / std::tgamma(__x + __y)); 
# 90
__bet *= std::tgamma(__y); 
# 91
} else 
# 93
{ 
# 94
__bet = (std::tgamma(__y) / std::tgamma(__x + __y)); 
# 96
__bet *= std::tgamma(__x); 
# 97
}  
# 111 "/usr/include/c++/11/tr1/beta_function.tcc" 3
return __bet; 
# 112
} 
# 127 "/usr/include/c++/11/tr1/beta_function.tcc" 3
template< class _Tp> _Tp 
# 129
__beta_lgamma(_Tp __x, _Tp __y) 
# 130
{ 
# 132
_Tp __bet = (std::lgamma(__x) + std::lgamma(__y)) - std::lgamma(__x + __y); 
# 140
__bet = std::exp(__bet); 
# 141
return __bet; 
# 142
} 
# 158 "/usr/include/c++/11/tr1/beta_function.tcc" 3
template< class _Tp> _Tp 
# 160
__beta_product(_Tp __x, _Tp __y) 
# 161
{ 
# 163
_Tp __bet = (__x + __y) / (__x * __y); 
# 165
unsigned __max_iter = (1000000); 
# 166
for (unsigned __k = (1); __k < __max_iter; ++__k) 
# 167
{ 
# 168
_Tp __term = (((_Tp)1) + ((__x + __y) / __k)) / ((((_Tp)1) + (__x / __k)) * (((_Tp)1) + (__y / __k))); 
# 170
__bet *= __term; 
# 171
}  
# 173
return __bet; 
# 174
} 
# 189 "/usr/include/c++/11/tr1/beta_function.tcc" 3
template< class _Tp> inline _Tp 
# 191
__beta(_Tp __x, _Tp __y) 
# 192
{ 
# 193
if (__isnan(__x) || __isnan(__y)) { 
# 194
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 196
return __beta_lgamma(__x, __y); }  
# 197
} 
# 198
}
# 205
}
# 45 "/usr/include/c++/11/tr1/ell_integral.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 59 "/usr/include/c++/11/tr1/ell_integral.tcc" 3
namespace __detail { 
# 76 "/usr/include/c++/11/tr1/ell_integral.tcc" 3
template< class _Tp> _Tp 
# 78
__ellint_rf(_Tp __x, _Tp __y, _Tp __z) 
# 79
{ 
# 80
const _Tp __min = std::template numeric_limits< _Tp> ::min(); 
# 81
const _Tp __lolim = ((_Tp)5) * __min; 
# 83
if (((__x < ((_Tp)0)) || (__y < ((_Tp)0))) || (__z < ((_Tp)0))) { 
# 84
std::__throw_domain_error("Argument less than zero in __ellint_rf."); } else { 
# 86
if ((((__x + __y) < __lolim) || ((__x + __z) < __lolim)) || ((__y + __z) < __lolim)) { 
# 88
std::__throw_domain_error("Argument too small in __ellint_rf"); } else 
# 90
{ 
# 91
const _Tp __c0 = (((_Tp)1) / ((_Tp)4)); 
# 92
const _Tp __c1 = (((_Tp)1) / ((_Tp)24)); 
# 93
const _Tp __c2 = (((_Tp)1) / ((_Tp)10)); 
# 94
const _Tp __c3 = (((_Tp)3) / ((_Tp)44)); 
# 95
const _Tp __c4 = (((_Tp)1) / ((_Tp)14)); 
# 97
_Tp __xn = __x; 
# 98
_Tp __yn = __y; 
# 99
_Tp __zn = __z; 
# 101
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 102
const _Tp __errtol = std::pow(__eps, ((_Tp)1) / ((_Tp)6)); 
# 103
_Tp __mu; 
# 104
_Tp __xndev, __yndev, __zndev; 
# 106
const unsigned __max_iter = (100); 
# 107
for (unsigned __iter = (0); __iter < __max_iter; ++__iter) 
# 108
{ 
# 109
__mu = (((__xn + __yn) + __zn) / ((_Tp)3)); 
# 110
__xndev = (2 - ((__mu + __xn) / __mu)); 
# 111
__yndev = (2 - ((__mu + __yn) / __mu)); 
# 112
__zndev = (2 - ((__mu + __zn) / __mu)); 
# 113
_Tp __epsilon = std::max(std::abs(__xndev), std::abs(__yndev)); 
# 114
__epsilon = std::max(__epsilon, std::abs(__zndev)); 
# 115
if (__epsilon < __errtol) { 
# 116
break; }  
# 117
const _Tp __xnroot = std::sqrt(__xn); 
# 118
const _Tp __ynroot = std::sqrt(__yn); 
# 119
const _Tp __znroot = std::sqrt(__zn); 
# 120
const _Tp __lambda = (__xnroot * (__ynroot + __znroot)) + (__ynroot * __znroot); 
# 122
__xn = (__c0 * (__xn + __lambda)); 
# 123
__yn = (__c0 * (__yn + __lambda)); 
# 124
__zn = (__c0 * (__zn + __lambda)); 
# 125
}  
# 127
const _Tp __e2 = (__xndev * __yndev) - (__zndev * __zndev); 
# 128
const _Tp __e3 = (__xndev * __yndev) * __zndev; 
# 129
const _Tp __s = (((_Tp)1) + ((((__c1 * __e2) - __c2) - (__c3 * __e3)) * __e2)) + (__c4 * __e3); 
# 132
return __s / std::sqrt(__mu); 
# 133
}  }  
# 134
} 
# 153 "/usr/include/c++/11/tr1/ell_integral.tcc" 3
template< class _Tp> _Tp 
# 155
__comp_ellint_1_series(_Tp __k) 
# 156
{ 
# 158
const _Tp __kk = __k * __k; 
# 160
_Tp __term = __kk / ((_Tp)4); 
# 161
_Tp __sum = ((_Tp)1) + __term; 
# 163
const unsigned __max_iter = (1000); 
# 164
for (unsigned __i = (2); __i < __max_iter; ++__i) 
# 165
{ 
# 166
__term *= (((((2) * __i) - (1)) * __kk) / ((2) * __i)); 
# 167
if (__term < std::template numeric_limits< _Tp> ::epsilon()) { 
# 168
break; }  
# 169
__sum += __term; 
# 170
}  
# 172
return __numeric_constants< _Tp> ::__pi_2() * __sum; 
# 173
} 
# 191 "/usr/include/c++/11/tr1/ell_integral.tcc" 3
template< class _Tp> _Tp 
# 193
__comp_ellint_1(_Tp __k) 
# 194
{ 
# 196
if (__isnan(__k)) { 
# 197
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 198
if (std::abs(__k) >= ((_Tp)1)) { 
# 199
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 201
return __ellint_rf((_Tp)0, ((_Tp)1) - (__k * __k), (_Tp)1); }  }  
# 202
} 
# 219 "/usr/include/c++/11/tr1/ell_integral.tcc" 3
template< class _Tp> _Tp 
# 221
__ellint_1(_Tp __k, _Tp __phi) 
# 222
{ 
# 224
if (__isnan(__k) || __isnan(__phi)) { 
# 225
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 226
if (std::abs(__k) > ((_Tp)1)) { 
# 227
std::__throw_domain_error("Bad argument in __ellint_1."); } else 
# 229
{ 
# 231
const int __n = std::floor((__phi / __numeric_constants< _Tp> ::__pi()) + ((_Tp)(0.5L))); 
# 233
const _Tp __phi_red = __phi - (__n * __numeric_constants< _Tp> ::__pi()); 
# 236
const _Tp __s = std::sin(__phi_red); 
# 237
const _Tp __c = std::cos(__phi_red); 
# 239
const _Tp __F = __s * __ellint_rf(__c * __c, ((_Tp)1) - (((__k * __k) * __s) * __s), (_Tp)1); 
# 243
if (__n == 0) { 
# 244
return __F; } else { 
# 246
return __F + ((((_Tp)2) * __n) * __comp_ellint_1(__k)); }  
# 247
}  }  
# 248
} 
# 266 "/usr/include/c++/11/tr1/ell_integral.tcc" 3
template< class _Tp> _Tp 
# 268
__comp_ellint_2_series(_Tp __k) 
# 269
{ 
# 271
const _Tp __kk = __k * __k; 
# 273
_Tp __term = __kk; 
# 274
_Tp __sum = __term; 
# 276
const unsigned __max_iter = (1000); 
# 277
for (unsigned __i = (2); __i < __max_iter; ++__i) 
# 278
{ 
# 279
const _Tp __i2m = ((2) * __i) - (1); 
# 280
const _Tp __i2 = (2) * __i; 
# 281
__term *= (((__i2m * __i2m) * __kk) / (__i2 * __i2)); 
# 282
if (__term < std::template numeric_limits< _Tp> ::epsilon()) { 
# 283
break; }  
# 284
__sum += (__term / __i2m); 
# 285
}  
# 287
return __numeric_constants< _Tp> ::__pi_2() * (((_Tp)1) - __sum); 
# 288
} 
# 314 "/usr/include/c++/11/tr1/ell_integral.tcc" 3
template< class _Tp> _Tp 
# 316
__ellint_rd(_Tp __x, _Tp __y, _Tp __z) 
# 317
{ 
# 318
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 319
const _Tp __errtol = std::pow(__eps / ((_Tp)8), ((_Tp)1) / ((_Tp)6)); 
# 320
const _Tp __max = std::template numeric_limits< _Tp> ::max(); 
# 321
const _Tp __lolim = ((_Tp)2) / std::pow(__max, ((_Tp)2) / ((_Tp)3)); 
# 323
if ((__x < ((_Tp)0)) || (__y < ((_Tp)0))) { 
# 324
std::__throw_domain_error("Argument less than zero in __ellint_rd."); } else { 
# 326
if (((__x + __y) < __lolim) || (__z < __lolim)) { 
# 327
std::__throw_domain_error("Argument too small in __ellint_rd."); } else 
# 330
{ 
# 331
const _Tp __c0 = (((_Tp)1) / ((_Tp)4)); 
# 332
const _Tp __c1 = (((_Tp)3) / ((_Tp)14)); 
# 333
const _Tp __c2 = (((_Tp)1) / ((_Tp)6)); 
# 334
const _Tp __c3 = (((_Tp)9) / ((_Tp)22)); 
# 335
const _Tp __c4 = (((_Tp)3) / ((_Tp)26)); 
# 337
_Tp __xn = __x; 
# 338
_Tp __yn = __y; 
# 339
_Tp __zn = __z; 
# 340
_Tp __sigma = ((_Tp)0); 
# 341
_Tp __power4 = ((_Tp)1); 
# 343
_Tp __mu; 
# 344
_Tp __xndev, __yndev, __zndev; 
# 346
const unsigned __max_iter = (100); 
# 347
for (unsigned __iter = (0); __iter < __max_iter; ++__iter) 
# 348
{ 
# 349
__mu = (((__xn + __yn) + (((_Tp)3) * __zn)) / ((_Tp)5)); 
# 350
__xndev = ((__mu - __xn) / __mu); 
# 351
__yndev = ((__mu - __yn) / __mu); 
# 352
__zndev = ((__mu - __zn) / __mu); 
# 353
_Tp __epsilon = std::max(std::abs(__xndev), std::abs(__yndev)); 
# 354
__epsilon = std::max(__epsilon, std::abs(__zndev)); 
# 355
if (__epsilon < __errtol) { 
# 356
break; }  
# 357
_Tp __xnroot = std::sqrt(__xn); 
# 358
_Tp __ynroot = std::sqrt(__yn); 
# 359
_Tp __znroot = std::sqrt(__zn); 
# 360
_Tp __lambda = (__xnroot * (__ynroot + __znroot)) + (__ynroot * __znroot); 
# 362
__sigma += (__power4 / (__znroot * (__zn + __lambda))); 
# 363
__power4 *= __c0; 
# 364
__xn = (__c0 * (__xn + __lambda)); 
# 365
__yn = (__c0 * (__yn + __lambda)); 
# 366
__zn = (__c0 * (__zn + __lambda)); 
# 367
}  
# 369
_Tp __ea = __xndev * __yndev; 
# 370
_Tp __eb = __zndev * __zndev; 
# 371
_Tp __ec = __ea - __eb; 
# 372
_Tp __ed = __ea - (((_Tp)6) * __eb); 
# 373
_Tp __ef = (__ed + __ec) + __ec; 
# 374
_Tp __s1 = __ed * (((-__c1) + ((__c3 * __ed) / ((_Tp)3))) - ((((((_Tp)3) * __c4) * __zndev) * __ef) / ((_Tp)2))); 
# 377
_Tp __s2 = __zndev * ((__c2 * __ef) + (__zndev * ((((-__c3) * __ec) - (__zndev * __c4)) - __ea))); 
# 381
return (((_Tp)3) * __sigma) + ((__power4 * ((((_Tp)1) + __s1) + __s2)) / (__mu * std::sqrt(__mu))); 
# 383
}  }  
# 384
} 
# 399 "/usr/include/c++/11/tr1/ell_integral.tcc" 3
template< class _Tp> _Tp 
# 401
__comp_ellint_2(_Tp __k) 
# 402
{ 
# 404
if (__isnan(__k)) { 
# 405
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 406
if (std::abs(__k) == 1) { 
# 407
return (_Tp)1; } else { 
# 408
if (std::abs(__k) > ((_Tp)1)) { 
# 409
std::__throw_domain_error("Bad argument in __comp_ellint_2."); } else 
# 411
{ 
# 412
const _Tp __kk = __k * __k; 
# 414
return __ellint_rf((_Tp)0, ((_Tp)1) - __kk, (_Tp)1) - ((__kk * __ellint_rd((_Tp)0, ((_Tp)1) - __kk, (_Tp)1)) / ((_Tp)3)); 
# 416
}  }  }  
# 417
} 
# 433 "/usr/include/c++/11/tr1/ell_integral.tcc" 3
template< class _Tp> _Tp 
# 435
__ellint_2(_Tp __k, _Tp __phi) 
# 436
{ 
# 438
if (__isnan(__k) || __isnan(__phi)) { 
# 439
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 440
if (std::abs(__k) > ((_Tp)1)) { 
# 441
std::__throw_domain_error("Bad argument in __ellint_2."); } else 
# 443
{ 
# 445
const int __n = std::floor((__phi / __numeric_constants< _Tp> ::__pi()) + ((_Tp)(0.5L))); 
# 447
const _Tp __phi_red = __phi - (__n * __numeric_constants< _Tp> ::__pi()); 
# 450
const _Tp __kk = __k * __k; 
# 451
const _Tp __s = std::sin(__phi_red); 
# 452
const _Tp __ss = __s * __s; 
# 453
const _Tp __sss = __ss * __s; 
# 454
const _Tp __c = std::cos(__phi_red); 
# 455
const _Tp __cc = __c * __c; 
# 457
const _Tp __E = (__s * __ellint_rf(__cc, ((_Tp)1) - (__kk * __ss), (_Tp)1)) - (((__kk * __sss) * __ellint_rd(__cc, ((_Tp)1) - (__kk * __ss), (_Tp)1)) / ((_Tp)3)); 
# 463
if (__n == 0) { 
# 464
return __E; } else { 
# 466
return __E + ((((_Tp)2) * __n) * __comp_ellint_2(__k)); }  
# 467
}  }  
# 468
} 
# 492 "/usr/include/c++/11/tr1/ell_integral.tcc" 3
template< class _Tp> _Tp 
# 494
__ellint_rc(_Tp __x, _Tp __y) 
# 495
{ 
# 496
const _Tp __min = std::template numeric_limits< _Tp> ::min(); 
# 497
const _Tp __lolim = ((_Tp)5) * __min; 
# 499
if (((__x < ((_Tp)0)) || (__y < ((_Tp)0))) || ((__x + __y) < __lolim)) { 
# 500
std::__throw_domain_error("Argument less than zero in __ellint_rc."); } else 
# 503
{ 
# 504
const _Tp __c0 = (((_Tp)1) / ((_Tp)4)); 
# 505
const _Tp __c1 = (((_Tp)1) / ((_Tp)7)); 
# 506
const _Tp __c2 = (((_Tp)9) / ((_Tp)22)); 
# 507
const _Tp __c3 = (((_Tp)3) / ((_Tp)10)); 
# 508
const _Tp __c4 = (((_Tp)3) / ((_Tp)8)); 
# 510
_Tp __xn = __x; 
# 511
_Tp __yn = __y; 
# 513
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 514
const _Tp __errtol = std::pow(__eps / ((_Tp)30), ((_Tp)1) / ((_Tp)6)); 
# 515
_Tp __mu; 
# 516
_Tp __sn; 
# 518
const unsigned __max_iter = (100); 
# 519
for (unsigned __iter = (0); __iter < __max_iter; ++__iter) 
# 520
{ 
# 521
__mu = ((__xn + (((_Tp)2) * __yn)) / ((_Tp)3)); 
# 522
__sn = (((__yn + __mu) / __mu) - ((_Tp)2)); 
# 523
if (std::abs(__sn) < __errtol) { 
# 524
break; }  
# 525
const _Tp __lambda = ((((_Tp)2) * std::sqrt(__xn)) * std::sqrt(__yn)) + __yn; 
# 527
__xn = (__c0 * (__xn + __lambda)); 
# 528
__yn = (__c0 * (__yn + __lambda)); 
# 529
}  
# 531
_Tp __s = (__sn * __sn) * (__c3 + (__sn * (__c1 + (__sn * (__c4 + (__sn * __c2)))))); 
# 534
return (((_Tp)1) + __s) / std::sqrt(__mu); 
# 535
}  
# 536
} 
# 561 "/usr/include/c++/11/tr1/ell_integral.tcc" 3
template< class _Tp> _Tp 
# 563
__ellint_rj(_Tp __x, _Tp __y, _Tp __z, _Tp __p) 
# 564
{ 
# 565
const _Tp __min = std::template numeric_limits< _Tp> ::min(); 
# 566
const _Tp __lolim = std::pow(((_Tp)5) * __min, ((_Tp)1) / ((_Tp)3)); 
# 568
if (((__x < ((_Tp)0)) || (__y < ((_Tp)0))) || (__z < ((_Tp)0))) { 
# 569
std::__throw_domain_error("Argument less than zero in __ellint_rj."); } else { 
# 571
if (((((__x + __y) < __lolim) || ((__x + __z) < __lolim)) || ((__y + __z) < __lolim)) || (__p < __lolim)) { 
# 573
std::__throw_domain_error("Argument too small in __ellint_rj"); } else 
# 576
{ 
# 577
const _Tp __c0 = (((_Tp)1) / ((_Tp)4)); 
# 578
const _Tp __c1 = (((_Tp)3) / ((_Tp)14)); 
# 579
const _Tp __c2 = (((_Tp)1) / ((_Tp)3)); 
# 580
const _Tp __c3 = (((_Tp)3) / ((_Tp)22)); 
# 581
const _Tp __c4 = (((_Tp)3) / ((_Tp)26)); 
# 583
_Tp __xn = __x; 
# 584
_Tp __yn = __y; 
# 585
_Tp __zn = __z; 
# 586
_Tp __pn = __p; 
# 587
_Tp __sigma = ((_Tp)0); 
# 588
_Tp __power4 = ((_Tp)1); 
# 590
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 591
const _Tp __errtol = std::pow(__eps / ((_Tp)8), ((_Tp)1) / ((_Tp)6)); 
# 593
_Tp __mu; 
# 594
_Tp __xndev, __yndev, __zndev, __pndev; 
# 596
const unsigned __max_iter = (100); 
# 597
for (unsigned __iter = (0); __iter < __max_iter; ++__iter) 
# 598
{ 
# 599
__mu = ((((__xn + __yn) + __zn) + (((_Tp)2) * __pn)) / ((_Tp)5)); 
# 600
__xndev = ((__mu - __xn) / __mu); 
# 601
__yndev = ((__mu - __yn) / __mu); 
# 602
__zndev = ((__mu - __zn) / __mu); 
# 603
__pndev = ((__mu - __pn) / __mu); 
# 604
_Tp __epsilon = std::max(std::abs(__xndev), std::abs(__yndev)); 
# 605
__epsilon = std::max(__epsilon, std::abs(__zndev)); 
# 606
__epsilon = std::max(__epsilon, std::abs(__pndev)); 
# 607
if (__epsilon < __errtol) { 
# 608
break; }  
# 609
const _Tp __xnroot = std::sqrt(__xn); 
# 610
const _Tp __ynroot = std::sqrt(__yn); 
# 611
const _Tp __znroot = std::sqrt(__zn); 
# 612
const _Tp __lambda = (__xnroot * (__ynroot + __znroot)) + (__ynroot * __znroot); 
# 614
const _Tp __alpha1 = (__pn * ((__xnroot + __ynroot) + __znroot)) + ((__xnroot * __ynroot) * __znroot); 
# 616
const _Tp __alpha2 = __alpha1 * __alpha1; 
# 617
const _Tp __beta = (__pn * (__pn + __lambda)) * (__pn + __lambda); 
# 619
__sigma += (__power4 * __ellint_rc(__alpha2, __beta)); 
# 620
__power4 *= __c0; 
# 621
__xn = (__c0 * (__xn + __lambda)); 
# 622
__yn = (__c0 * (__yn + __lambda)); 
# 623
__zn = (__c0 * (__zn + __lambda)); 
# 624
__pn = (__c0 * (__pn + __lambda)); 
# 625
}  
# 627
_Tp __ea = (__xndev * (__yndev + __zndev)) + (__yndev * __zndev); 
# 628
_Tp __eb = (__xndev * __yndev) * __zndev; 
# 629
_Tp __ec = __pndev * __pndev; 
# 630
_Tp __e2 = __ea - (((_Tp)3) * __ec); 
# 631
_Tp __e3 = __eb + ((((_Tp)2) * __pndev) * (__ea - __ec)); 
# 632
_Tp __s1 = ((_Tp)1) + (__e2 * (((-__c1) + (((((_Tp)3) * __c3) * __e2) / ((_Tp)4))) - (((((_Tp)3) * __c4) * __e3) / ((_Tp)2)))); 
# 634
_Tp __s2 = __eb * ((__c2 / ((_Tp)2)) + (__pndev * (((-__c3) - __c3) + (__pndev * __c4)))); 
# 636
_Tp __s3 = ((__pndev * __ea) * (__c2 - (__pndev * __c3))) - ((__c2 * __pndev) * __ec); 
# 639
return (((_Tp)3) * __sigma) + ((__power4 * ((__s1 + __s2) + __s3)) / (__mu * std::sqrt(__mu))); 
# 641
}  }  
# 642
} 
# 661 "/usr/include/c++/11/tr1/ell_integral.tcc" 3
template< class _Tp> _Tp 
# 663
__comp_ellint_3(_Tp __k, _Tp __nu) 
# 664
{ 
# 666
if (__isnan(__k) || __isnan(__nu)) { 
# 667
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 668
if (__nu == ((_Tp)1)) { 
# 669
return std::template numeric_limits< _Tp> ::infinity(); } else { 
# 670
if (std::abs(__k) > ((_Tp)1)) { 
# 671
std::__throw_domain_error("Bad argument in __comp_ellint_3."); } else 
# 673
{ 
# 674
const _Tp __kk = __k * __k; 
# 676
return __ellint_rf((_Tp)0, ((_Tp)1) - __kk, (_Tp)1) + ((__nu * __ellint_rj((_Tp)0, ((_Tp)1) - __kk, (_Tp)1, ((_Tp)1) - __nu)) / ((_Tp)3)); 
# 680
}  }  }  
# 681
} 
# 701 "/usr/include/c++/11/tr1/ell_integral.tcc" 3
template< class _Tp> _Tp 
# 703
__ellint_3(_Tp __k, _Tp __nu, _Tp __phi) 
# 704
{ 
# 706
if ((__isnan(__k) || __isnan(__nu)) || __isnan(__phi)) { 
# 707
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 708
if (std::abs(__k) > ((_Tp)1)) { 
# 709
std::__throw_domain_error("Bad argument in __ellint_3."); } else 
# 711
{ 
# 713
const int __n = std::floor((__phi / __numeric_constants< _Tp> ::__pi()) + ((_Tp)(0.5L))); 
# 715
const _Tp __phi_red = __phi - (__n * __numeric_constants< _Tp> ::__pi()); 
# 718
const _Tp __kk = __k * __k; 
# 719
const _Tp __s = std::sin(__phi_red); 
# 720
const _Tp __ss = __s * __s; 
# 721
const _Tp __sss = __ss * __s; 
# 722
const _Tp __c = std::cos(__phi_red); 
# 723
const _Tp __cc = __c * __c; 
# 725
const _Tp __Pi = (__s * __ellint_rf(__cc, ((_Tp)1) - (__kk * __ss), (_Tp)1)) + (((__nu * __sss) * __ellint_rj(__cc, ((_Tp)1) - (__kk * __ss), (_Tp)1, ((_Tp)1) - (__nu * __ss))) / ((_Tp)3)); 
# 731
if (__n == 0) { 
# 732
return __Pi; } else { 
# 734
return __Pi + ((((_Tp)2) * __n) * __comp_ellint_3(__k, __nu)); }  
# 735
}  }  
# 736
} 
# 737
}
# 743
}
# 50 "/usr/include/c++/11/tr1/exp_integral.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 64 "/usr/include/c++/11/tr1/exp_integral.tcc" 3
namespace __detail { 
# 66
template< class _Tp> _Tp __expint_E1(_Tp); 
# 81 "/usr/include/c++/11/tr1/exp_integral.tcc" 3
template< class _Tp> _Tp 
# 83
__expint_E1_series(_Tp __x) 
# 84
{ 
# 85
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 86
_Tp __term = ((_Tp)1); 
# 87
_Tp __esum = ((_Tp)0); 
# 88
_Tp __osum = ((_Tp)0); 
# 89
const unsigned __max_iter = (1000); 
# 90
for (unsigned __i = (1); __i < __max_iter; ++__i) 
# 91
{ 
# 92
__term *= ((-__x) / __i); 
# 93
if (std::abs(__term) < __eps) { 
# 94
break; }  
# 95
if (__term >= ((_Tp)0)) { 
# 96
__esum += (__term / __i); } else { 
# 98
__osum += (__term / __i); }  
# 99
}  
# 101
return (((-__esum) - __osum) - __numeric_constants< _Tp> ::__gamma_e()) - std::log(__x); 
# 103
} 
# 118 "/usr/include/c++/11/tr1/exp_integral.tcc" 3
template< class _Tp> _Tp 
# 120
__expint_E1_asymp(_Tp __x) 
# 121
{ 
# 122
_Tp __term = ((_Tp)1); 
# 123
_Tp __esum = ((_Tp)1); 
# 124
_Tp __osum = ((_Tp)0); 
# 125
const unsigned __max_iter = (1000); 
# 126
for (unsigned __i = (1); __i < __max_iter; ++__i) 
# 127
{ 
# 128
_Tp __prev = __term; 
# 129
__term *= ((-__i) / __x); 
# 130
if (std::abs(__term) > std::abs(__prev)) { 
# 131
break; }  
# 132
if (__term >= ((_Tp)0)) { 
# 133
__esum += __term; } else { 
# 135
__osum += __term; }  
# 136
}  
# 138
return (std::exp(-__x) * (__esum + __osum)) / __x; 
# 139
} 
# 155 "/usr/include/c++/11/tr1/exp_integral.tcc" 3
template< class _Tp> _Tp 
# 157
__expint_En_series(unsigned __n, _Tp __x) 
# 158
{ 
# 159
const unsigned __max_iter = (1000); 
# 160
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 161
const int __nm1 = __n - (1); 
# 162
_Tp __ans = (__nm1 != 0) ? ((_Tp)1) / __nm1 : ((-std::log(__x)) - __numeric_constants< _Tp> ::__gamma_e()); 
# 165
_Tp __fact = ((_Tp)1); 
# 166
for (int __i = 1; __i <= __max_iter; ++__i) 
# 167
{ 
# 168
__fact *= ((-__x) / ((_Tp)__i)); 
# 169
_Tp __del; 
# 170
if (__i != __nm1) { 
# 171
__del = ((-__fact) / ((_Tp)(__i - __nm1))); } else 
# 173
{ 
# 174
_Tp __psi = (-__numeric_constants< _Tp> ::gamma_e()); 
# 175
for (int __ii = 1; __ii <= __nm1; ++__ii) { 
# 176
__psi += (((_Tp)1) / ((_Tp)__ii)); }  
# 177
__del = (__fact * (__psi - std::log(__x))); 
# 178
}  
# 179
__ans += __del; 
# 180
if (std::abs(__del) < (__eps * std::abs(__ans))) { 
# 181
return __ans; }  
# 182
}  
# 183
std::__throw_runtime_error("Series summation failed in __expint_En_series."); 
# 185
} 
# 201 "/usr/include/c++/11/tr1/exp_integral.tcc" 3
template< class _Tp> _Tp 
# 203
__expint_En_cont_frac(unsigned __n, _Tp __x) 
# 204
{ 
# 205
const unsigned __max_iter = (1000); 
# 206
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 207
const _Tp __fp_min = std::template numeric_limits< _Tp> ::min(); 
# 208
const int __nm1 = __n - (1); 
# 209
_Tp __b = __x + ((_Tp)__n); 
# 210
_Tp __c = ((_Tp)1) / __fp_min; 
# 211
_Tp __d = ((_Tp)1) / __b; 
# 212
_Tp __h = __d; 
# 213
for (unsigned __i = (1); __i <= __max_iter; ++__i) 
# 214
{ 
# 215
_Tp __a = (-((_Tp)(__i * (__nm1 + __i)))); 
# 216
__b += ((_Tp)2); 
# 217
__d = (((_Tp)1) / ((__a * __d) + __b)); 
# 218
__c = (__b + (__a / __c)); 
# 219
const _Tp __del = __c * __d; 
# 220
__h *= __del; 
# 221
if (std::abs(__del - ((_Tp)1)) < __eps) 
# 222
{ 
# 223
const _Tp __ans = __h * std::exp(-__x); 
# 224
return __ans; 
# 225
}  
# 226
}  
# 227
std::__throw_runtime_error("Continued fraction failed in __expint_En_cont_frac."); 
# 229
} 
# 246 "/usr/include/c++/11/tr1/exp_integral.tcc" 3
template< class _Tp> _Tp 
# 248
__expint_En_recursion(unsigned __n, _Tp __x) 
# 249
{ 
# 250
_Tp __En; 
# 251
_Tp __E1 = __expint_E1(__x); 
# 252
if (__x < ((_Tp)__n)) 
# 253
{ 
# 255
__En = __E1; 
# 256
for (unsigned __j = (2); __j < __n; ++__j) { 
# 257
__En = ((std::exp(-__x) - (__x * __En)) / ((_Tp)(__j - (1)))); }  
# 258
} else 
# 260
{ 
# 262
__En = ((_Tp)1); 
# 263
const int __N = __n + (20); 
# 264
_Tp __save = ((_Tp)0); 
# 265
for (int __j = __N; __j > 0; --__j) 
# 266
{ 
# 267
__En = ((std::exp(-__x) - (__j * __En)) / __x); 
# 268
if (__j == __n) { 
# 269
__save = __En; }  
# 270
}  
# 271
_Tp __norm = __En / __E1; 
# 272
__En /= __norm; 
# 273
}  
# 275
return __En; 
# 276
} 
# 290 "/usr/include/c++/11/tr1/exp_integral.tcc" 3
template< class _Tp> _Tp 
# 292
__expint_Ei_series(_Tp __x) 
# 293
{ 
# 294
_Tp __term = ((_Tp)1); 
# 295
_Tp __sum = ((_Tp)0); 
# 296
const unsigned __max_iter = (1000); 
# 297
for (unsigned __i = (1); __i < __max_iter; ++__i) 
# 298
{ 
# 299
__term *= (__x / __i); 
# 300
__sum += (__term / __i); 
# 301
if (__term < (std::template numeric_limits< _Tp> ::epsilon() * __sum)) { 
# 302
break; }  
# 303
}  
# 305
return (__numeric_constants< _Tp> ::__gamma_e() + __sum) + std::log(__x); 
# 306
} 
# 321 "/usr/include/c++/11/tr1/exp_integral.tcc" 3
template< class _Tp> _Tp 
# 323
__expint_Ei_asymp(_Tp __x) 
# 324
{ 
# 325
_Tp __term = ((_Tp)1); 
# 326
_Tp __sum = ((_Tp)1); 
# 327
const unsigned __max_iter = (1000); 
# 328
for (unsigned __i = (1); __i < __max_iter; ++__i) 
# 329
{ 
# 330
_Tp __prev = __term; 
# 331
__term *= (__i / __x); 
# 332
if (__term < std::template numeric_limits< _Tp> ::epsilon()) { 
# 333
break; }  
# 334
if (__term >= __prev) { 
# 335
break; }  
# 336
__sum += __term; 
# 337
}  
# 339
return (std::exp(__x) * __sum) / __x; 
# 340
} 
# 354 "/usr/include/c++/11/tr1/exp_integral.tcc" 3
template< class _Tp> _Tp 
# 356
__expint_Ei(_Tp __x) 
# 357
{ 
# 358
if (__x < ((_Tp)0)) { 
# 359
return -__expint_E1(-__x); } else { 
# 360
if (__x < (-std::log(std::template numeric_limits< _Tp> ::epsilon()))) { 
# 361
return __expint_Ei_series(__x); } else { 
# 363
return __expint_Ei_asymp(__x); }  }  
# 364
} 
# 378 "/usr/include/c++/11/tr1/exp_integral.tcc" 3
template< class _Tp> _Tp 
# 380
__expint_E1(_Tp __x) 
# 381
{ 
# 382
if (__x < ((_Tp)0)) { 
# 383
return -__expint_Ei(-__x); } else { 
# 384
if (__x < ((_Tp)1)) { 
# 385
return __expint_E1_series(__x); } else { 
# 386
if (__x < ((_Tp)100)) { 
# 387
return __expint_En_cont_frac(1, __x); } else { 
# 389
return __expint_E1_asymp(__x); }  }  }  
# 390
} 
# 408 "/usr/include/c++/11/tr1/exp_integral.tcc" 3
template< class _Tp> _Tp 
# 410
__expint_asymp(unsigned __n, _Tp __x) 
# 411
{ 
# 412
_Tp __term = ((_Tp)1); 
# 413
_Tp __sum = ((_Tp)1); 
# 414
for (unsigned __i = (1); __i <= __n; ++__i) 
# 415
{ 
# 416
_Tp __prev = __term; 
# 417
__term *= ((-((__n - __i) + (1))) / __x); 
# 418
if (std::abs(__term) > std::abs(__prev)) { 
# 419
break; }  
# 420
__sum += __term; 
# 421
}  
# 423
return (std::exp(-__x) * __sum) / __x; 
# 424
} 
# 442 "/usr/include/c++/11/tr1/exp_integral.tcc" 3
template< class _Tp> _Tp 
# 444
__expint_large_n(unsigned __n, _Tp __x) 
# 445
{ 
# 446
const _Tp __xpn = __x + __n; 
# 447
const _Tp __xpn2 = __xpn * __xpn; 
# 448
_Tp __term = ((_Tp)1); 
# 449
_Tp __sum = ((_Tp)1); 
# 450
for (unsigned __i = (1); __i <= __n; ++__i) 
# 451
{ 
# 452
_Tp __prev = __term; 
# 453
__term *= ((__n - (((2) * (__i - (1))) * __x)) / __xpn2); 
# 454
if (std::abs(__term) < std::template numeric_limits< _Tp> ::epsilon()) { 
# 455
break; }  
# 456
__sum += __term; 
# 457
}  
# 459
return (std::exp(-__x) * __sum) / __xpn; 
# 460
} 
# 476 "/usr/include/c++/11/tr1/exp_integral.tcc" 3
template< class _Tp> _Tp 
# 478
__expint(unsigned __n, _Tp __x) 
# 479
{ 
# 481
if (__isnan(__x)) { 
# 482
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 483
if ((__n <= (1)) && (__x == ((_Tp)0))) { 
# 484
return std::template numeric_limits< _Tp> ::infinity(); } else 
# 486
{ 
# 487
_Tp __E0 = std::exp(__x) / __x; 
# 488
if (__n == (0)) { 
# 489
return __E0; }  
# 491
_Tp __E1 = __expint_E1(__x); 
# 492
if (__n == (1)) { 
# 493
return __E1; }  
# 495
if (__x == ((_Tp)0)) { 
# 496
return ((_Tp)1) / (static_cast< _Tp>(__n - (1))); }  
# 498
_Tp __En = __expint_En_recursion(__n, __x); 
# 500
return __En; 
# 501
}  }  
# 502
} 
# 516 "/usr/include/c++/11/tr1/exp_integral.tcc" 3
template< class _Tp> inline _Tp 
# 518
__expint(_Tp __x) 
# 519
{ 
# 520
if (__isnan(__x)) { 
# 521
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 523
return __expint_Ei(__x); }  
# 524
} 
# 525
}
# 531
}
# 44 "/usr/include/c++/11/tr1/hypergeometric.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 60 "/usr/include/c++/11/tr1/hypergeometric.tcc" 3
namespace __detail { 
# 83 "/usr/include/c++/11/tr1/hypergeometric.tcc" 3
template< class _Tp> _Tp 
# 85
__conf_hyperg_series(_Tp __a, _Tp __c, _Tp __x) 
# 86
{ 
# 87
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 89
_Tp __term = ((_Tp)1); 
# 90
_Tp __Fac = ((_Tp)1); 
# 91
const unsigned __max_iter = (100000); 
# 92
unsigned __i; 
# 93
for (__i = (0); __i < __max_iter; ++__i) 
# 94
{ 
# 95
__term *= (((__a + ((_Tp)__i)) * __x) / ((__c + ((_Tp)__i)) * ((_Tp)((1) + __i)))); 
# 97
if (std::abs(__term) < __eps) 
# 98
{ 
# 99
break; 
# 100
}  
# 101
__Fac += __term; 
# 102
}  
# 103
if (__i == __max_iter) { 
# 104
std::__throw_runtime_error("Series failed to converge in __conf_hyperg_series."); }  
# 107
return __Fac; 
# 108
} 
# 120 "/usr/include/c++/11/tr1/hypergeometric.tcc" 3
template< class _Tp> _Tp 
# 122
__conf_hyperg_luke(_Tp __a, _Tp __c, _Tp __xin) 
# 123
{ 
# 124
const _Tp __big = std::pow(std::template numeric_limits< _Tp> ::max(), (_Tp)(0.16L)); 
# 125
const int __nmax = 20000; 
# 126
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 127
const _Tp __x = (-__xin); 
# 128
const _Tp __x3 = (__x * __x) * __x; 
# 129
const _Tp __t0 = __a / __c; 
# 130
const _Tp __t1 = (__a + ((_Tp)1)) / (((_Tp)2) * __c); 
# 131
const _Tp __t2 = (__a + ((_Tp)2)) / (((_Tp)2) * (__c + ((_Tp)1))); 
# 132
_Tp __F = ((_Tp)1); 
# 133
_Tp __prec; 
# 135
_Tp __Bnm3 = ((_Tp)1); 
# 136
_Tp __Bnm2 = ((_Tp)1) + (__t1 * __x); 
# 137
_Tp __Bnm1 = ((_Tp)1) + ((__t2 * __x) * (((_Tp)1) + ((__t1 / ((_Tp)3)) * __x))); 
# 139
_Tp __Anm3 = ((_Tp)1); 
# 140
_Tp __Anm2 = __Bnm2 - (__t0 * __x); 
# 141
_Tp __Anm1 = (__Bnm1 - ((__t0 * (((_Tp)1) + (__t2 * __x))) * __x)) + ((((__t0 * __t1) * (__c / (__c + ((_Tp)1)))) * __x) * __x); 
# 144
int __n = 3; 
# 145
while (1) 
# 146
{ 
# 147
_Tp __npam1 = ((_Tp)(__n - 1)) + __a; 
# 148
_Tp __npcm1 = ((_Tp)(__n - 1)) + __c; 
# 149
_Tp __npam2 = ((_Tp)(__n - 2)) + __a; 
# 150
_Tp __npcm2 = ((_Tp)(__n - 2)) + __c; 
# 151
_Tp __tnm1 = (_Tp)((2 * __n) - 1); 
# 152
_Tp __tnm3 = (_Tp)((2 * __n) - 3); 
# 153
_Tp __tnm5 = (_Tp)((2 * __n) - 5); 
# 154
_Tp __F1 = (((_Tp)(__n - 2)) - __a) / ((((_Tp)2) * __tnm3) * __npcm1); 
# 155
_Tp __F2 = ((((_Tp)__n) + __a) * __npam1) / ((((((_Tp)4) * __tnm1) * __tnm3) * __npcm2) * __npcm1); 
# 157
_Tp __F3 = (((-__npam2) * __npam1) * (((_Tp)(__n - 2)) - __a)) / ((((((((_Tp)8) * __tnm3) * __tnm3) * __tnm5) * (((_Tp)(__n - 3)) + __c)) * __npcm2) * __npcm1); 
# 160
_Tp __E = ((-__npam1) * (((_Tp)(__n - 1)) - __c)) / (((((_Tp)2) * __tnm3) * __npcm2) * __npcm1); 
# 163
_Tp __An = (((((_Tp)1) + (__F1 * __x)) * __Anm1) + (((__E + (__F2 * __x)) * __x) * __Anm2)) + ((__F3 * __x3) * __Anm3); 
# 165
_Tp __Bn = (((((_Tp)1) + (__F1 * __x)) * __Bnm1) + (((__E + (__F2 * __x)) * __x) * __Bnm2)) + ((__F3 * __x3) * __Bnm3); 
# 167
_Tp __r = __An / __Bn; 
# 169
__prec = std::abs((__F - __r) / __F); 
# 170
__F = __r; 
# 172
if ((__prec < __eps) || (__n > __nmax)) { 
# 173
break; }  
# 175
if ((std::abs(__An) > __big) || (std::abs(__Bn) > __big)) 
# 176
{ 
# 177
__An /= __big; 
# 178
__Bn /= __big; 
# 179
__Anm1 /= __big; 
# 180
__Bnm1 /= __big; 
# 181
__Anm2 /= __big; 
# 182
__Bnm2 /= __big; 
# 183
__Anm3 /= __big; 
# 184
__Bnm3 /= __big; 
# 185
} else { 
# 186
if ((std::abs(__An) < (((_Tp)1) / __big)) || (std::abs(__Bn) < (((_Tp)1) / __big))) 
# 188
{ 
# 189
__An *= __big; 
# 190
__Bn *= __big; 
# 191
__Anm1 *= __big; 
# 192
__Bnm1 *= __big; 
# 193
__Anm2 *= __big; 
# 194
__Bnm2 *= __big; 
# 195
__Anm3 *= __big; 
# 196
__Bnm3 *= __big; 
# 197
}  }  
# 199
++__n; 
# 200
__Bnm3 = __Bnm2; 
# 201
__Bnm2 = __Bnm1; 
# 202
__Bnm1 = __Bn; 
# 203
__Anm3 = __Anm2; 
# 204
__Anm2 = __Anm1; 
# 205
__Anm1 = __An; 
# 206
}  
# 208
if (__n >= __nmax) { 
# 209
std::__throw_runtime_error("Iteration failed to converge in __conf_hyperg_luke."); }  
# 212
return __F; 
# 213
} 
# 227 "/usr/include/c++/11/tr1/hypergeometric.tcc" 3
template< class _Tp> _Tp 
# 229
__conf_hyperg(_Tp __a, _Tp __c, _Tp __x) 
# 230
{ 
# 232
const _Tp __c_nint = std::nearbyint(__c); 
# 236
if ((__isnan(__a) || __isnan(__c)) || __isnan(__x)) { 
# 237
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 238
if ((__c_nint == __c) && (__c_nint <= 0)) { 
# 239
return std::template numeric_limits< _Tp> ::infinity(); } else { 
# 240
if (__a == ((_Tp)0)) { 
# 241
return (_Tp)1; } else { 
# 242
if (__c == __a) { 
# 243
return std::exp(__x); } else { 
# 244
if (__x < ((_Tp)0)) { 
# 245
return __conf_hyperg_luke(__a, __c, __x); } else { 
# 247
return __conf_hyperg_series(__a, __c, __x); }  }  }  }  }  
# 248
} 
# 271 "/usr/include/c++/11/tr1/hypergeometric.tcc" 3
template< class _Tp> _Tp 
# 273
__hyperg_series(_Tp __a, _Tp __b, _Tp __c, _Tp __x) 
# 274
{ 
# 275
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 277
_Tp __term = ((_Tp)1); 
# 278
_Tp __Fabc = ((_Tp)1); 
# 279
const unsigned __max_iter = (100000); 
# 280
unsigned __i; 
# 281
for (__i = (0); __i < __max_iter; ++__i) 
# 282
{ 
# 283
__term *= ((((__a + ((_Tp)__i)) * (__b + ((_Tp)__i))) * __x) / ((__c + ((_Tp)__i)) * ((_Tp)((1) + __i)))); 
# 285
if (std::abs(__term) < __eps) 
# 286
{ 
# 287
break; 
# 288
}  
# 289
__Fabc += __term; 
# 290
}  
# 291
if (__i == __max_iter) { 
# 292
std::__throw_runtime_error("Series failed to converge in __hyperg_series."); }  
# 295
return __Fabc; 
# 296
} 
# 304
template< class _Tp> _Tp 
# 306
__hyperg_luke(_Tp __a, _Tp __b, _Tp __c, _Tp __xin) 
# 307
{ 
# 308
const _Tp __big = std::pow(std::template numeric_limits< _Tp> ::max(), (_Tp)(0.16L)); 
# 309
const int __nmax = 20000; 
# 310
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 311
const _Tp __x = (-__xin); 
# 312
const _Tp __x3 = (__x * __x) * __x; 
# 313
const _Tp __t0 = (__a * __b) / __c; 
# 314
const _Tp __t1 = ((__a + ((_Tp)1)) * (__b + ((_Tp)1))) / (((_Tp)2) * __c); 
# 315
const _Tp __t2 = ((__a + ((_Tp)2)) * (__b + ((_Tp)2))) / (((_Tp)2) * (__c + ((_Tp)1))); 
# 318
_Tp __F = ((_Tp)1); 
# 320
_Tp __Bnm3 = ((_Tp)1); 
# 321
_Tp __Bnm2 = ((_Tp)1) + (__t1 * __x); 
# 322
_Tp __Bnm1 = ((_Tp)1) + ((__t2 * __x) * (((_Tp)1) + ((__t1 / ((_Tp)3)) * __x))); 
# 324
_Tp __Anm3 = ((_Tp)1); 
# 325
_Tp __Anm2 = __Bnm2 - (__t0 * __x); 
# 326
_Tp __Anm1 = (__Bnm1 - ((__t0 * (((_Tp)1) + (__t2 * __x))) * __x)) + ((((__t0 * __t1) * (__c / (__c + ((_Tp)1)))) * __x) * __x); 
# 329
int __n = 3; 
# 330
while (1) 
# 331
{ 
# 332
const _Tp __npam1 = ((_Tp)(__n - 1)) + __a; 
# 333
const _Tp __npbm1 = ((_Tp)(__n - 1)) + __b; 
# 334
const _Tp __npcm1 = ((_Tp)(__n - 1)) + __c; 
# 335
const _Tp __npam2 = ((_Tp)(__n - 2)) + __a; 
# 336
const _Tp __npbm2 = ((_Tp)(__n - 2)) + __b; 
# 337
const _Tp __npcm2 = ((_Tp)(__n - 2)) + __c; 
# 338
const _Tp __tnm1 = (_Tp)((2 * __n) - 1); 
# 339
const _Tp __tnm3 = (_Tp)((2 * __n) - 3); 
# 340
const _Tp __tnm5 = (_Tp)((2 * __n) - 5); 
# 341
const _Tp __n2 = __n * __n; 
# 342
const _Tp __F1 = (((((((_Tp)3) * __n2) + (((__a + __b) - ((_Tp)6)) * __n)) + ((_Tp)2)) - (__a * __b)) - (((_Tp)2) * (__a + __b))) / ((((_Tp)2) * __tnm3) * __npcm1); 
# 345
const _Tp __F2 = (((-((((((_Tp)3) * __n2) - (((__a + __b) + ((_Tp)6)) * __n)) + ((_Tp)2)) - (__a * __b))) * __npam1) * __npbm1) / ((((((_Tp)4) * __tnm1) * __tnm3) * __npcm2) * __npcm1); 
# 348
const _Tp __F3 = (((((__npam2 * __npam1) * __npbm2) * __npbm1) * (((_Tp)(__n - 2)) - __a)) * (((_Tp)(__n - 2)) - __b)) / ((((((((_Tp)8) * __tnm3) * __tnm3) * __tnm5) * (((_Tp)(__n - 3)) + __c)) * __npcm2) * __npcm1); 
# 352
const _Tp __E = (((-__npam1) * __npbm1) * (((_Tp)(__n - 1)) - __c)) / (((((_Tp)2) * __tnm3) * __npcm2) * __npcm1); 
# 355
_Tp __An = (((((_Tp)1) + (__F1 * __x)) * __Anm1) + (((__E + (__F2 * __x)) * __x) * __Anm2)) + ((__F3 * __x3) * __Anm3); 
# 357
_Tp __Bn = (((((_Tp)1) + (__F1 * __x)) * __Bnm1) + (((__E + (__F2 * __x)) * __x) * __Bnm2)) + ((__F3 * __x3) * __Bnm3); 
# 359
const _Tp __r = __An / __Bn; 
# 361
const _Tp __prec = std::abs((__F - __r) / __F); 
# 362
__F = __r; 
# 364
if ((__prec < __eps) || (__n > __nmax)) { 
# 365
break; }  
# 367
if ((std::abs(__An) > __big) || (std::abs(__Bn) > __big)) 
# 368
{ 
# 369
__An /= __big; 
# 370
__Bn /= __big; 
# 371
__Anm1 /= __big; 
# 372
__Bnm1 /= __big; 
# 373
__Anm2 /= __big; 
# 374
__Bnm2 /= __big; 
# 375
__Anm3 /= __big; 
# 376
__Bnm3 /= __big; 
# 377
} else { 
# 378
if ((std::abs(__An) < (((_Tp)1) / __big)) || (std::abs(__Bn) < (((_Tp)1) / __big))) 
# 380
{ 
# 381
__An *= __big; 
# 382
__Bn *= __big; 
# 383
__Anm1 *= __big; 
# 384
__Bnm1 *= __big; 
# 385
__Anm2 *= __big; 
# 386
__Bnm2 *= __big; 
# 387
__Anm3 *= __big; 
# 388
__Bnm3 *= __big; 
# 389
}  }  
# 391
++__n; 
# 392
__Bnm3 = __Bnm2; 
# 393
__Bnm2 = __Bnm1; 
# 394
__Bnm1 = __Bn; 
# 395
__Anm3 = __Anm2; 
# 396
__Anm2 = __Anm1; 
# 397
__Anm1 = __An; 
# 398
}  
# 400
if (__n >= __nmax) { 
# 401
std::__throw_runtime_error("Iteration failed to converge in __hyperg_luke."); }  
# 404
return __F; 
# 405
} 
# 438 "/usr/include/c++/11/tr1/hypergeometric.tcc" 3
template< class _Tp> _Tp 
# 440
__hyperg_reflect(_Tp __a, _Tp __b, _Tp __c, _Tp __x) 
# 441
{ 
# 442
const _Tp __d = (__c - __a) - __b; 
# 443
const int __intd = std::floor(__d + ((_Tp)(0.5L))); 
# 444
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 445
const _Tp __toler = ((_Tp)1000) * __eps; 
# 446
const _Tp __log_max = std::log(std::template numeric_limits< _Tp> ::max()); 
# 447
const bool __d_integer = std::abs(__d - __intd) < __toler; 
# 449
if (__d_integer) 
# 450
{ 
# 451
const _Tp __ln_omx = std::log(((_Tp)1) - __x); 
# 452
const _Tp __ad = std::abs(__d); 
# 453
_Tp __F1, __F2; 
# 455
_Tp __d1, __d2; 
# 456
if (__d >= ((_Tp)0)) 
# 457
{ 
# 458
__d1 = __d; 
# 459
__d2 = ((_Tp)0); 
# 460
} else 
# 462
{ 
# 463
__d1 = ((_Tp)0); 
# 464
__d2 = __d; 
# 465
}  
# 467
const _Tp __lng_c = __log_gamma(__c); 
# 470
if (__ad < __eps) 
# 471
{ 
# 473
__F1 = ((_Tp)0); 
# 474
} else 
# 476
{ 
# 478
bool __ok_d1 = true; 
# 479
_Tp __lng_ad, __lng_ad1, __lng_bd1; 
# 480
try 
# 481
{ 
# 482
__lng_ad = __log_gamma(__ad); 
# 483
__lng_ad1 = __log_gamma(__a + __d1); 
# 484
__lng_bd1 = __log_gamma(__b + __d1); 
# 485
} 
# 486
catch (...) 
# 487
{ 
# 488
__ok_d1 = false; 
# 489
}  
# 491
if (__ok_d1) 
# 492
{ 
# 496
_Tp __sum1 = ((_Tp)1); 
# 497
_Tp __term = ((_Tp)1); 
# 498
_Tp __ln_pre1 = (((__lng_ad + __lng_c) + (__d2 * __ln_omx)) - __lng_ad1) - __lng_bd1; 
# 503
for (int __i = 1; __i < __ad; ++__i) 
# 504
{ 
# 505
const int __j = __i - 1; 
# 506
__term *= ((((((__a + __d2) + __j) * ((__b + __d2) + __j)) / ((((_Tp)1) + __d2) + __j)) / __i) * (((_Tp)1) - __x)); 
# 508
__sum1 += __term; 
# 509
}  
# 511
if (__ln_pre1 > __log_max) { 
# 512
std::__throw_runtime_error("Overflow of gamma functions in __hyperg_luke."); } else { 
# 515
__F1 = (std::exp(__ln_pre1) * __sum1); }  
# 516
} else 
# 518
{ 
# 521
__F1 = ((_Tp)0); 
# 522
}  
# 523
}  
# 526
bool __ok_d2 = true; 
# 527
_Tp __lng_ad2, __lng_bd2; 
# 528
try 
# 529
{ 
# 530
__lng_ad2 = __log_gamma(__a + __d2); 
# 531
__lng_bd2 = __log_gamma(__b + __d2); 
# 532
} 
# 533
catch (...) 
# 534
{ 
# 535
__ok_d2 = false; 
# 536
}  
# 538
if (__ok_d2) 
# 539
{ 
# 542
const int __maxiter = 2000; 
# 543
const _Tp __psi_1 = (-__numeric_constants< _Tp> ::__gamma_e()); 
# 544
const _Tp __psi_1pd = __psi(((_Tp)1) + __ad); 
# 545
const _Tp __psi_apd1 = __psi(__a + __d1); 
# 546
const _Tp __psi_bpd1 = __psi(__b + __d1); 
# 548
_Tp __psi_term = (((__psi_1 + __psi_1pd) - __psi_apd1) - __psi_bpd1) - __ln_omx; 
# 550
_Tp __fact = ((_Tp)1); 
# 551
_Tp __sum2 = __psi_term; 
# 552
_Tp __ln_pre2 = ((__lng_c + (__d1 * __ln_omx)) - __lng_ad2) - __lng_bd2; 
# 556
int __j; 
# 557
for (__j = 1; __j < __maxiter; ++__j) 
# 558
{ 
# 561
const _Tp __term1 = (((_Tp)1) / ((_Tp)__j)) + (((_Tp)1) / (__ad + __j)); 
# 563
const _Tp __term2 = (((_Tp)1) / ((__a + __d1) + ((_Tp)(__j - 1)))) + (((_Tp)1) / ((__b + __d1) + ((_Tp)(__j - 1)))); 
# 565
__psi_term += (__term1 - __term2); 
# 566
__fact *= (((((__a + __d1) + ((_Tp)(__j - 1))) * ((__b + __d1) + ((_Tp)(__j - 1)))) / ((__ad + __j) * __j)) * (((_Tp)1) - __x)); 
# 569
const _Tp __delta = __fact * __psi_term; 
# 570
__sum2 += __delta; 
# 571
if (std::abs(__delta) < (__eps * std::abs(__sum2))) { 
# 572
break; }  
# 573
}  
# 574
if (__j == __maxiter) { 
# 575
std::__throw_runtime_error("Sum F2 failed to converge in __hyperg_reflect"); }  
# 578
if (__sum2 == ((_Tp)0)) { 
# 579
__F2 = ((_Tp)0); } else { 
# 581
__F2 = (std::exp(__ln_pre2) * __sum2); }  
# 582
} else 
# 584
{ 
# 587
__F2 = ((_Tp)0); 
# 588
}  
# 590
const _Tp __sgn_2 = (((__intd % 2) == 1) ? -((_Tp)1) : ((_Tp)1)); 
# 591
const _Tp __F = __F1 + (__sgn_2 * __F2); 
# 593
return __F; 
# 594
} else 
# 596
{ 
# 601
bool __ok1 = true; 
# 602
_Tp __sgn_g1ca = ((_Tp)0), __ln_g1ca = ((_Tp)0); 
# 603
_Tp __sgn_g1cb = ((_Tp)0), __ln_g1cb = ((_Tp)0); 
# 604
try 
# 605
{ 
# 606
__sgn_g1ca = __log_gamma_sign(__c - __a); 
# 607
__ln_g1ca = __log_gamma(__c - __a); 
# 608
__sgn_g1cb = __log_gamma_sign(__c - __b); 
# 609
__ln_g1cb = __log_gamma(__c - __b); 
# 610
} 
# 611
catch (...) 
# 612
{ 
# 613
__ok1 = false; 
# 614
}  
# 616
bool __ok2 = true; 
# 617
_Tp __sgn_g2a = ((_Tp)0), __ln_g2a = ((_Tp)0); 
# 618
_Tp __sgn_g2b = ((_Tp)0), __ln_g2b = ((_Tp)0); 
# 619
try 
# 620
{ 
# 621
__sgn_g2a = __log_gamma_sign(__a); 
# 622
__ln_g2a = __log_gamma(__a); 
# 623
__sgn_g2b = __log_gamma_sign(__b); 
# 624
__ln_g2b = __log_gamma(__b); 
# 625
} 
# 626
catch (...) 
# 627
{ 
# 628
__ok2 = false; 
# 629
}  
# 631
const _Tp __sgn_gc = __log_gamma_sign(__c); 
# 632
const _Tp __ln_gc = __log_gamma(__c); 
# 633
const _Tp __sgn_gd = __log_gamma_sign(__d); 
# 634
const _Tp __ln_gd = __log_gamma(__d); 
# 635
const _Tp __sgn_gmd = __log_gamma_sign(-__d); 
# 636
const _Tp __ln_gmd = __log_gamma(-__d); 
# 638
const _Tp __sgn1 = ((__sgn_gc * __sgn_gd) * __sgn_g1ca) * __sgn_g1cb; 
# 639
const _Tp __sgn2 = ((__sgn_gc * __sgn_gmd) * __sgn_g2a) * __sgn_g2b; 
# 641
_Tp __pre1, __pre2; 
# 642
if (__ok1 && __ok2) 
# 643
{ 
# 644
_Tp __ln_pre1 = ((__ln_gc + __ln_gd) - __ln_g1ca) - __ln_g1cb; 
# 645
_Tp __ln_pre2 = (((__ln_gc + __ln_gmd) - __ln_g2a) - __ln_g2b) + (__d * std::log(((_Tp)1) - __x)); 
# 647
if ((__ln_pre1 < __log_max) && (__ln_pre2 < __log_max)) 
# 648
{ 
# 649
__pre1 = std::exp(__ln_pre1); 
# 650
__pre2 = std::exp(__ln_pre2); 
# 651
__pre1 *= __sgn1; 
# 652
__pre2 *= __sgn2; 
# 653
} else 
# 655
{ 
# 656
std::__throw_runtime_error("Overflow of gamma functions in __hyperg_reflect"); 
# 658
}  
# 659
} else { 
# 660
if (__ok1 && (!__ok2)) 
# 661
{ 
# 662
_Tp __ln_pre1 = ((__ln_gc + __ln_gd) - __ln_g1ca) - __ln_g1cb; 
# 663
if (__ln_pre1 < __log_max) 
# 664
{ 
# 665
__pre1 = std::exp(__ln_pre1); 
# 666
__pre1 *= __sgn1; 
# 667
__pre2 = ((_Tp)0); 
# 668
} else 
# 670
{ 
# 671
std::__throw_runtime_error("Overflow of gamma functions in __hyperg_reflect"); 
# 673
}  
# 674
} else { 
# 675
if ((!__ok1) && __ok2) 
# 676
{ 
# 677
_Tp __ln_pre2 = (((__ln_gc + __ln_gmd) - __ln_g2a) - __ln_g2b) + (__d * std::log(((_Tp)1) - __x)); 
# 679
if (__ln_pre2 < __log_max) 
# 680
{ 
# 681
__pre1 = ((_Tp)0); 
# 682
__pre2 = std::exp(__ln_pre2); 
# 683
__pre2 *= __sgn2; 
# 684
} else 
# 686
{ 
# 687
std::__throw_runtime_error("Overflow of gamma functions in __hyperg_reflect"); 
# 689
}  
# 690
} else 
# 692
{ 
# 693
__pre1 = ((_Tp)0); 
# 694
__pre2 = ((_Tp)0); 
# 695
std::__throw_runtime_error("Underflow of gamma functions in __hyperg_reflect"); 
# 697
}  }  }  
# 699
const _Tp __F1 = __hyperg_series(__a, __b, ((_Tp)1) - __d, ((_Tp)1) - __x); 
# 701
const _Tp __F2 = __hyperg_series(__c - __a, __c - __b, ((_Tp)1) + __d, ((_Tp)1) - __x); 
# 704
const _Tp __F = (__pre1 * __F1) + (__pre2 * __F2); 
# 706
return __F; 
# 707
}  
# 708
} 
# 728 "/usr/include/c++/11/tr1/hypergeometric.tcc" 3
template< class _Tp> _Tp 
# 730
__hyperg(_Tp __a, _Tp __b, _Tp __c, _Tp __x) 
# 731
{ 
# 733
const _Tp __a_nint = std::nearbyint(__a); 
# 734
const _Tp __b_nint = std::nearbyint(__b); 
# 735
const _Tp __c_nint = std::nearbyint(__c); 
# 741
const _Tp __toler = ((_Tp)1000) * std::template numeric_limits< _Tp> ::epsilon(); 
# 742
if (std::abs(__x) >= ((_Tp)1)) { 
# 743
std::__throw_domain_error("Argument outside unit circle in __hyperg."); } else { 
# 745
if (((__isnan(__a) || __isnan(__b)) || __isnan(__c)) || __isnan(__x)) { 
# 747
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 748
if ((__c_nint == __c) && (__c_nint <= ((_Tp)0))) { 
# 749
return std::template numeric_limits< _Tp> ::infinity(); } else { 
# 750
if ((std::abs(__c - __b) < __toler) || (std::abs(__c - __a) < __toler)) { 
# 751
return std::pow(((_Tp)1) - __x, (__c - __a) - __b); } else { 
# 752
if ((__a >= ((_Tp)0)) && (__b >= ((_Tp)0)) && (__c >= ((_Tp)0)) && (__x >= ((_Tp)0)) && (__x < ((_Tp)(0.995L)))) { 
# 754
return __hyperg_series(__a, __b, __c, __x); } else { 
# 755
if ((std::abs(__a) < ((_Tp)10)) && (std::abs(__b) < ((_Tp)10))) 
# 756
{ 
# 759
if ((__a < ((_Tp)0)) && (std::abs(__a - __a_nint) < __toler)) { 
# 760
return __hyperg_series(__a_nint, __b, __c, __x); } else { 
# 761
if ((__b < ((_Tp)0)) && (std::abs(__b - __b_nint) < __toler)) { 
# 762
return __hyperg_series(__a, __b_nint, __c, __x); } else { 
# 763
if (__x < (-((_Tp)(0.25L)))) { 
# 764
return __hyperg_luke(__a, __b, __c, __x); } else { 
# 765
if (__x < ((_Tp)(0.5L))) { 
# 766
return __hyperg_series(__a, __b, __c, __x); } else { 
# 768
if (std::abs(__c) > ((_Tp)10)) { 
# 769
return __hyperg_series(__a, __b, __c, __x); } else { 
# 771
return __hyperg_reflect(__a, __b, __c, __x); }  }  }  }  }  
# 772
} else { 
# 774
return __hyperg_luke(__a, __b, __c, __x); }  }  }  }  }  }  
# 775
} 
# 776
}
# 783
}
# 49 "/usr/include/c++/11/tr1/legendre_function.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 65 "/usr/include/c++/11/tr1/legendre_function.tcc" 3
namespace __detail { 
# 80 "/usr/include/c++/11/tr1/legendre_function.tcc" 3
template< class _Tp> _Tp 
# 82
__poly_legendre_p(unsigned __l, _Tp __x) 
# 83
{ 
# 85
if (__isnan(__x)) { 
# 86
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 87
if (__x == (+((_Tp)1))) { 
# 88
return +((_Tp)1); } else { 
# 89
if (__x == (-((_Tp)1))) { 
# 90
return (((__l % (2)) == (1)) ? -((_Tp)1) : (+((_Tp)1))); } else 
# 92
{ 
# 93
_Tp __p_lm2 = ((_Tp)1); 
# 94
if (__l == (0)) { 
# 95
return __p_lm2; }  
# 97
_Tp __p_lm1 = __x; 
# 98
if (__l == (1)) { 
# 99
return __p_lm1; }  
# 101
_Tp __p_l = (0); 
# 102
for (unsigned __ll = (2); __ll <= __l; ++__ll) 
# 103
{ 
# 106
__p_l = ((((((_Tp)2) * __x) * __p_lm1) - __p_lm2) - (((__x * __p_lm1) - __p_lm2) / ((_Tp)__ll))); 
# 108
__p_lm2 = __p_lm1; 
# 109
__p_lm1 = __p_l; 
# 110
}  
# 112
return __p_l; 
# 113
}  }  }  
# 114
} 
# 136 "/usr/include/c++/11/tr1/legendre_function.tcc" 3
template< class _Tp> _Tp 
# 138
__assoc_legendre_p(unsigned __l, unsigned __m, _Tp __x, _Tp 
# 139
__phase = (_Tp)(+1)) 
# 140
{ 
# 142
if (__m > __l) { 
# 143
return (_Tp)0; } else { 
# 144
if (__isnan(__x)) { 
# 145
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 146
if (__m == (0)) { 
# 147
return __poly_legendre_p(__l, __x); } else 
# 149
{ 
# 150
_Tp __p_mm = ((_Tp)1); 
# 151
if (__m > (0)) 
# 152
{ 
# 155
_Tp __root = std::sqrt(((_Tp)1) - __x) * std::sqrt(((_Tp)1) + __x); 
# 156
_Tp __fact = ((_Tp)1); 
# 157
for (unsigned __i = (1); __i <= __m; ++__i) 
# 158
{ 
# 159
__p_mm *= ((__phase * __fact) * __root); 
# 160
__fact += ((_Tp)2); 
# 161
}  
# 162
}  
# 163
if (__l == __m) { 
# 164
return __p_mm; }  
# 166
_Tp __p_mp1m = (((_Tp)(((2) * __m) + (1))) * __x) * __p_mm; 
# 167
if (__l == (__m + (1))) { 
# 168
return __p_mp1m; }  
# 170
_Tp __p_lm2m = __p_mm; 
# 171
_Tp __P_lm1m = __p_mp1m; 
# 172
_Tp __p_lm = ((_Tp)0); 
# 173
for (unsigned __j = __m + (2); __j <= __l; ++__j) 
# 174
{ 
# 175
__p_lm = ((((((_Tp)(((2) * __j) - (1))) * __x) * __P_lm1m) - (((_Tp)((__j + __m) - (1))) * __p_lm2m)) / ((_Tp)(__j - __m))); 
# 177
__p_lm2m = __P_lm1m; 
# 178
__P_lm1m = __p_lm; 
# 179
}  
# 181
return __p_lm; 
# 182
}  }  }  
# 183
} 
# 214 "/usr/include/c++/11/tr1/legendre_function.tcc" 3
template< class _Tp> _Tp 
# 216
__sph_legendre(unsigned __l, unsigned __m, _Tp __theta) 
# 217
{ 
# 218
if (__isnan(__theta)) { 
# 219
return std::template numeric_limits< _Tp> ::quiet_NaN(); }  
# 221
const _Tp __x = std::cos(__theta); 
# 223
if (__m > __l) { 
# 224
return (_Tp)0; } else { 
# 225
if (__m == (0)) 
# 226
{ 
# 227
_Tp __P = __poly_legendre_p(__l, __x); 
# 228
_Tp __fact = std::sqrt(((_Tp)(((2) * __l) + (1))) / (((_Tp)4) * __numeric_constants< _Tp> ::__pi())); 
# 230
__P *= __fact; 
# 231
return __P; 
# 232
} else { 
# 233
if ((__x == ((_Tp)1)) || (__x == (-((_Tp)1)))) 
# 234
{ 
# 236
return (_Tp)0; 
# 237
} else 
# 239
{ 
# 245
const _Tp __sgn = ((__m % (2)) == (1)) ? -((_Tp)1) : ((_Tp)1); 
# 246
const _Tp __y_mp1m_factor = __x * std::sqrt((_Tp)(((2) * __m) + (3))); 
# 248
const _Tp __lncirc = std::log1p((-__x) * __x); 
# 254
const _Tp __lnpoch = std::lgamma((_Tp)(__m + ((_Tp)(0.5L)))) - std::lgamma((_Tp)__m); 
# 260
const _Tp __lnpre_val = ((-((_Tp)(0.25L))) * __numeric_constants< _Tp> ::__lnpi()) + (((_Tp)(0.5L)) * (__lnpoch + (__m * __lncirc))); 
# 263
const _Tp __sr = std::sqrt((((_Tp)2) + (((_Tp)1) / __m)) / (((_Tp)4) * __numeric_constants< _Tp> ::__pi())); 
# 265
_Tp __y_mm = (__sgn * __sr) * std::exp(__lnpre_val); 
# 266
_Tp __y_mp1m = __y_mp1m_factor * __y_mm; 
# 268
if (__l == __m) { 
# 269
return __y_mm; } else { 
# 270
if (__l == (__m + (1))) { 
# 271
return __y_mp1m; } else 
# 273
{ 
# 274
_Tp __y_lm = ((_Tp)0); 
# 277
for (unsigned __ll = __m + (2); __ll <= __l; ++__ll) 
# 278
{ 
# 279
const _Tp __rat1 = ((_Tp)(__ll - __m)) / ((_Tp)(__ll + __m)); 
# 280
const _Tp __rat2 = ((_Tp)((__ll - __m) - (1))) / ((_Tp)((__ll + __m) - (1))); 
# 281
const _Tp __fact1 = std::sqrt((__rat1 * ((_Tp)(((2) * __ll) + (1)))) * ((_Tp)(((2) * __ll) - (1)))); 
# 283
const _Tp __fact2 = std::sqrt(((__rat1 * __rat2) * ((_Tp)(((2) * __ll) + (1)))) / ((_Tp)(((2) * __ll) - (3)))); 
# 285
__y_lm = ((((__x * __y_mp1m) * __fact1) - ((((__ll + __m) - (1)) * __y_mm) * __fact2)) / ((_Tp)(__ll - __m))); 
# 287
__y_mm = __y_mp1m; 
# 288
__y_mp1m = __y_lm; 
# 289
}  
# 291
return __y_lm; 
# 292
}  }  
# 293
}  }  }  
# 294
} 
# 295
}
# 302
}
# 51 "/usr/include/c++/11/tr1/modified_bessel_func.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 65 "/usr/include/c++/11/tr1/modified_bessel_func.tcc" 3
namespace __detail { 
# 83 "/usr/include/c++/11/tr1/modified_bessel_func.tcc" 3
template< class _Tp> void 
# 85
__bessel_ik(_Tp __nu, _Tp __x, _Tp &
# 86
__Inu, _Tp &__Knu, _Tp &__Ipnu, _Tp &__Kpnu) 
# 87
{ 
# 88
if (__x == ((_Tp)0)) 
# 89
{ 
# 90
if (__nu == ((_Tp)0)) 
# 91
{ 
# 92
__Inu = ((_Tp)1); 
# 93
__Ipnu = ((_Tp)0); 
# 94
} else { 
# 95
if (__nu == ((_Tp)1)) 
# 96
{ 
# 97
__Inu = ((_Tp)0); 
# 98
__Ipnu = ((_Tp)(0.5L)); 
# 99
} else 
# 101
{ 
# 102
__Inu = ((_Tp)0); 
# 103
__Ipnu = ((_Tp)0); 
# 104
}  }  
# 105
__Knu = std::template numeric_limits< _Tp> ::infinity(); 
# 106
__Kpnu = (-std::template numeric_limits< _Tp> ::infinity()); 
# 107
return; 
# 108
}  
# 110
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 111
const _Tp __fp_min = ((_Tp)10) * std::template numeric_limits< _Tp> ::epsilon(); 
# 112
const int __max_iter = 15000; 
# 113
const _Tp __x_min = ((_Tp)2); 
# 115
const int __nl = static_cast< int>(__nu + ((_Tp)(0.5L))); 
# 117
const _Tp __mu = __nu - __nl; 
# 118
const _Tp __mu2 = __mu * __mu; 
# 119
const _Tp __xi = ((_Tp)1) / __x; 
# 120
const _Tp __xi2 = ((_Tp)2) * __xi; 
# 121
_Tp __h = __nu * __xi; 
# 122
if (__h < __fp_min) { 
# 123
__h = __fp_min; }  
# 124
_Tp __b = __xi2 * __nu; 
# 125
_Tp __d = ((_Tp)0); 
# 126
_Tp __c = __h; 
# 127
int __i; 
# 128
for (__i = 1; __i <= __max_iter; ++__i) 
# 129
{ 
# 130
__b += __xi2; 
# 131
__d = (((_Tp)1) / (__b + __d)); 
# 132
__c = (__b + (((_Tp)1) / __c)); 
# 133
const _Tp __del = __c * __d; 
# 134
__h *= __del; 
# 135
if (std::abs(__del - ((_Tp)1)) < __eps) { 
# 136
break; }  
# 137
}  
# 138
if (__i > __max_iter) { 
# 139
std::__throw_runtime_error("Argument x too large in __bessel_ik; try asymptotic expansion."); }  
# 142
_Tp __Inul = __fp_min; 
# 143
_Tp __Ipnul = __h * __Inul; 
# 144
_Tp __Inul1 = __Inul; 
# 145
_Tp __Ipnu1 = __Ipnul; 
# 146
_Tp __fact = __nu * __xi; 
# 147
for (int __l = __nl; __l >= 1; --__l) 
# 148
{ 
# 149
const _Tp __Inutemp = (__fact * __Inul) + __Ipnul; 
# 150
__fact -= __xi; 
# 151
__Ipnul = ((__fact * __Inutemp) + __Inul); 
# 152
__Inul = __Inutemp; 
# 153
}  
# 154
_Tp __f = __Ipnul / __Inul; 
# 155
_Tp __Kmu, __Knu1; 
# 156
if (__x < __x_min) 
# 157
{ 
# 158
const _Tp __x2 = __x / ((_Tp)2); 
# 159
const _Tp __pimu = __numeric_constants< _Tp> ::__pi() * __mu; 
# 160
const _Tp __fact = (std::abs(__pimu) < __eps) ? (_Tp)1 : (__pimu / std::sin(__pimu)); 
# 162
_Tp __d = (-std::log(__x2)); 
# 163
_Tp __e = __mu * __d; 
# 164
const _Tp __fact2 = (std::abs(__e) < __eps) ? (_Tp)1 : (std::sinh(__e) / __e); 
# 166
_Tp __gam1, __gam2, __gampl, __gammi; 
# 167
__gamma_temme(__mu, __gam1, __gam2, __gampl, __gammi); 
# 168
_Tp __ff = __fact * ((__gam1 * std::cosh(__e)) + ((__gam2 * __fact2) * __d)); 
# 170
_Tp __sum = __ff; 
# 171
__e = std::exp(__e); 
# 172
_Tp __p = __e / (((_Tp)2) * __gampl); 
# 173
_Tp __q = ((_Tp)1) / ((((_Tp)2) * __e) * __gammi); 
# 174
_Tp __c = ((_Tp)1); 
# 175
__d = (__x2 * __x2); 
# 176
_Tp __sum1 = __p; 
# 177
int __i; 
# 178
for (__i = 1; __i <= __max_iter; ++__i) 
# 179
{ 
# 180
__ff = ((((__i * __ff) + __p) + __q) / ((__i * __i) - __mu2)); 
# 181
__c *= (__d / __i); 
# 182
__p /= (__i - __mu); 
# 183
__q /= (__i + __mu); 
# 184
const _Tp __del = __c * __ff; 
# 185
__sum += __del; 
# 186
const _Tp __del1 = __c * (__p - (__i * __ff)); 
# 187
__sum1 += __del1; 
# 188
if (std::abs(__del) < (__eps * std::abs(__sum))) { 
# 189
break; }  
# 190
}  
# 191
if (__i > __max_iter) { 
# 192
std::__throw_runtime_error("Bessel k series failed to converge in __bessel_ik."); }  
# 194
__Kmu = __sum; 
# 195
__Knu1 = (__sum1 * __xi2); 
# 196
} else 
# 198
{ 
# 199
_Tp __b = ((_Tp)2) * (((_Tp)1) + __x); 
# 200
_Tp __d = ((_Tp)1) / __b; 
# 201
_Tp __delh = __d; 
# 202
_Tp __h = __delh; 
# 203
_Tp __q1 = ((_Tp)0); 
# 204
_Tp __q2 = ((_Tp)1); 
# 205
_Tp __a1 = ((_Tp)(0.25L)) - __mu2; 
# 206
_Tp __q = __c = __a1; 
# 207
_Tp __a = (-__a1); 
# 208
_Tp __s = ((_Tp)1) + (__q * __delh); 
# 209
int __i; 
# 210
for (__i = 2; __i <= __max_iter; ++__i) 
# 211
{ 
# 212
__a -= (2 * (__i - 1)); 
# 213
__c = (((-__a) * __c) / __i); 
# 214
const _Tp __qnew = (__q1 - (__b * __q2)) / __a; 
# 215
__q1 = __q2; 
# 216
__q2 = __qnew; 
# 217
__q += (__c * __qnew); 
# 218
__b += ((_Tp)2); 
# 219
__d = (((_Tp)1) / (__b + (__a * __d))); 
# 220
__delh = (((__b * __d) - ((_Tp)1)) * __delh); 
# 221
__h += __delh; 
# 222
const _Tp __dels = __q * __delh; 
# 223
__s += __dels; 
# 224
if (std::abs(__dels / __s) < __eps) { 
# 225
break; }  
# 226
}  
# 227
if (__i > __max_iter) { 
# 228
std::__throw_runtime_error("Steed\'s method failed in __bessel_ik."); }  
# 230
__h = (__a1 * __h); 
# 231
__Kmu = ((std::sqrt(__numeric_constants< _Tp> ::__pi() / (((_Tp)2) * __x)) * std::exp(-__x)) / __s); 
# 233
__Knu1 = ((__Kmu * (((__mu + __x) + ((_Tp)(0.5L))) - __h)) * __xi); 
# 234
}  
# 236
_Tp __Kpmu = ((__mu * __xi) * __Kmu) - __Knu1; 
# 237
_Tp __Inumu = __xi / ((__f * __Kmu) - __Kpmu); 
# 238
__Inu = ((__Inumu * __Inul1) / __Inul); 
# 239
__Ipnu = ((__Inumu * __Ipnu1) / __Inul); 
# 240
for (__i = 1; __i <= __nl; ++__i) 
# 241
{ 
# 242
const _Tp __Knutemp = (((__mu + __i) * __xi2) * __Knu1) + __Kmu; 
# 243
__Kmu = __Knu1; 
# 244
__Knu1 = __Knutemp; 
# 245
}  
# 246
__Knu = __Kmu; 
# 247
__Kpnu = (((__nu * __xi) * __Kmu) - __Knu1); 
# 250
} 
# 267 "/usr/include/c++/11/tr1/modified_bessel_func.tcc" 3
template< class _Tp> _Tp 
# 269
__cyl_bessel_i(_Tp __nu, _Tp __x) 
# 270
{ 
# 271
if ((__nu < ((_Tp)0)) || (__x < ((_Tp)0))) { 
# 272
std::__throw_domain_error("Bad argument in __cyl_bessel_i."); } else { 
# 274
if (__isnan(__nu) || __isnan(__x)) { 
# 275
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 276
if ((__x * __x) < (((_Tp)10) * (__nu + ((_Tp)1)))) { 
# 277
return __cyl_bessel_ij_series(__nu, __x, +((_Tp)1), 200); } else 
# 279
{ 
# 280
_Tp __I_nu, __K_nu, __Ip_nu, __Kp_nu; 
# 281
__bessel_ik(__nu, __x, __I_nu, __K_nu, __Ip_nu, __Kp_nu); 
# 282
return __I_nu; 
# 283
}  }  }  
# 284
} 
# 303 "/usr/include/c++/11/tr1/modified_bessel_func.tcc" 3
template< class _Tp> _Tp 
# 305
__cyl_bessel_k(_Tp __nu, _Tp __x) 
# 306
{ 
# 307
if ((__nu < ((_Tp)0)) || (__x < ((_Tp)0))) { 
# 308
std::__throw_domain_error("Bad argument in __cyl_bessel_k."); } else { 
# 310
if (__isnan(__nu) || __isnan(__x)) { 
# 311
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else 
# 313
{ 
# 314
_Tp __I_nu, __K_nu, __Ip_nu, __Kp_nu; 
# 315
__bessel_ik(__nu, __x, __I_nu, __K_nu, __Ip_nu, __Kp_nu); 
# 316
return __K_nu; 
# 317
}  }  
# 318
} 
# 337 "/usr/include/c++/11/tr1/modified_bessel_func.tcc" 3
template< class _Tp> void 
# 339
__sph_bessel_ik(unsigned __n, _Tp __x, _Tp &
# 340
__i_n, _Tp &__k_n, _Tp &__ip_n, _Tp &__kp_n) 
# 341
{ 
# 342
const _Tp __nu = ((_Tp)__n) + ((_Tp)(0.5L)); 
# 344
_Tp __I_nu, __Ip_nu, __K_nu, __Kp_nu; 
# 345
__bessel_ik(__nu, __x, __I_nu, __K_nu, __Ip_nu, __Kp_nu); 
# 347
const _Tp __factor = __numeric_constants< _Tp> ::__sqrtpio2() / std::sqrt(__x); 
# 350
__i_n = (__factor * __I_nu); 
# 351
__k_n = (__factor * __K_nu); 
# 352
__ip_n = ((__factor * __Ip_nu) - (__i_n / (((_Tp)2) * __x))); 
# 353
__kp_n = ((__factor * __Kp_nu) - (__k_n / (((_Tp)2) * __x))); 
# 356
} 
# 373 "/usr/include/c++/11/tr1/modified_bessel_func.tcc" 3
template< class _Tp> void 
# 375
__airy(_Tp __x, _Tp &__Ai, _Tp &__Bi, _Tp &__Aip, _Tp &__Bip) 
# 376
{ 
# 377
const _Tp __absx = std::abs(__x); 
# 378
const _Tp __rootx = std::sqrt(__absx); 
# 379
const _Tp __z = ((((_Tp)2) * __absx) * __rootx) / ((_Tp)3); 
# 380
const _Tp _S_inf = std::template numeric_limits< _Tp> ::infinity(); 
# 382
if (__isnan(__x)) { 
# 383
__Bip = (__Aip = (__Bi = (__Ai = std::template numeric_limits< _Tp> ::quiet_NaN()))); } else { 
# 384
if (__z == _S_inf) 
# 385
{ 
# 386
__Aip = (__Ai = ((_Tp)0)); 
# 387
__Bip = (__Bi = _S_inf); 
# 388
} else { 
# 389
if (__z == (-_S_inf)) { 
# 390
__Bip = (__Aip = (__Bi = (__Ai = ((_Tp)0)))); } else { 
# 391
if (__x > ((_Tp)0)) 
# 392
{ 
# 393
_Tp __I_nu, __Ip_nu, __K_nu, __Kp_nu; 
# 395
__bessel_ik(((_Tp)1) / ((_Tp)3), __z, __I_nu, __K_nu, __Ip_nu, __Kp_nu); 
# 396
__Ai = ((__rootx * __K_nu) / (__numeric_constants< _Tp> ::__sqrt3() * __numeric_constants< _Tp> ::__pi())); 
# 399
__Bi = (__rootx * ((__K_nu / __numeric_constants< _Tp> ::__pi()) + ((((_Tp)2) * __I_nu) / __numeric_constants< _Tp> ::__sqrt3()))); 
# 402
__bessel_ik(((_Tp)2) / ((_Tp)3), __z, __I_nu, __K_nu, __Ip_nu, __Kp_nu); 
# 403
__Aip = (((-__x) * __K_nu) / (__numeric_constants< _Tp> ::__sqrt3() * __numeric_constants< _Tp> ::__pi())); 
# 406
__Bip = (__x * ((__K_nu / __numeric_constants< _Tp> ::__pi()) + ((((_Tp)2) * __I_nu) / __numeric_constants< _Tp> ::__sqrt3()))); 
# 409
} else { 
# 410
if (__x < ((_Tp)0)) 
# 411
{ 
# 412
_Tp __J_nu, __Jp_nu, __N_nu, __Np_nu; 
# 414
__bessel_jn(((_Tp)1) / ((_Tp)3), __z, __J_nu, __N_nu, __Jp_nu, __Np_nu); 
# 415
__Ai = ((__rootx * (__J_nu - (__N_nu / __numeric_constants< _Tp> ::__sqrt3()))) / ((_Tp)2)); 
# 417
__Bi = (((-__rootx) * (__N_nu + (__J_nu / __numeric_constants< _Tp> ::__sqrt3()))) / ((_Tp)2)); 
# 420
__bessel_jn(((_Tp)2) / ((_Tp)3), __z, __J_nu, __N_nu, __Jp_nu, __Np_nu); 
# 421
__Aip = ((__absx * ((__N_nu / __numeric_constants< _Tp> ::__sqrt3()) + __J_nu)) / ((_Tp)2)); 
# 423
__Bip = ((__absx * ((__J_nu / __numeric_constants< _Tp> ::__sqrt3()) - __N_nu)) / ((_Tp)2)); 
# 425
} else 
# 427
{ 
# 431
__Ai = ((_Tp)(0.35502805388781723926L)); 
# 432
__Bi = (__Ai * __numeric_constants< _Tp> ::__sqrt3()); 
# 437
__Aip = (-((_Tp)(0.2588194037928067984L))); 
# 438
__Bip = ((-__Aip) * __numeric_constants< _Tp> ::__sqrt3()); 
# 439
}  }  }  }  }  
# 442
} 
# 443
}
# 449
}
# 42 "/usr/include/c++/11/tr1/poly_hermite.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 56 "/usr/include/c++/11/tr1/poly_hermite.tcc" 3
namespace __detail { 
# 72 "/usr/include/c++/11/tr1/poly_hermite.tcc" 3
template< class _Tp> _Tp 
# 74
__poly_hermite_recursion(unsigned __n, _Tp __x) 
# 75
{ 
# 77
_Tp __H_0 = (1); 
# 78
if (__n == (0)) { 
# 79
return __H_0; }  
# 82
_Tp __H_1 = 2 * __x; 
# 83
if (__n == (1)) { 
# 84
return __H_1; }  
# 87
_Tp __H_n, __H_nm1, __H_nm2; 
# 88
unsigned __i; 
# 89
for (((__H_nm2 = __H_0), (__H_nm1 = __H_1)), (__i = (2)); __i <= __n; ++__i) 
# 90
{ 
# 91
__H_n = (2 * ((__x * __H_nm1) - ((__i - (1)) * __H_nm2))); 
# 92
__H_nm2 = __H_nm1; 
# 93
__H_nm1 = __H_n; 
# 94
}  
# 96
return __H_n; 
# 97
} 
# 114 "/usr/include/c++/11/tr1/poly_hermite.tcc" 3
template< class _Tp> inline _Tp 
# 116
__poly_hermite(unsigned __n, _Tp __x) 
# 117
{ 
# 118
if (__isnan(__x)) { 
# 119
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 121
return __poly_hermite_recursion(__n, __x); }  
# 122
} 
# 123
}
# 129
}
# 44 "/usr/include/c++/11/tr1/poly_laguerre.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 60 "/usr/include/c++/11/tr1/poly_laguerre.tcc" 3
namespace __detail { 
# 75 "/usr/include/c++/11/tr1/poly_laguerre.tcc" 3
template< class _Tpa, class _Tp> _Tp 
# 77
__poly_laguerre_large_n(unsigned __n, _Tpa __alpha1, _Tp __x) 
# 78
{ 
# 79
const _Tp __a = (-((_Tp)__n)); 
# 80
const _Tp __b = ((_Tp)__alpha1) + ((_Tp)1); 
# 81
const _Tp __eta = (((_Tp)2) * __b) - (((_Tp)4) * __a); 
# 82
const _Tp __cos2th = __x / __eta; 
# 83
const _Tp __sin2th = ((_Tp)1) - __cos2th; 
# 84
const _Tp __th = std::acos(std::sqrt(__cos2th)); 
# 85
const _Tp __pre_h = ((((__numeric_constants< _Tp> ::__pi_2() * __numeric_constants< _Tp> ::__pi_2()) * __eta) * __eta) * __cos2th) * __sin2th; 
# 90
const _Tp __lg_b = std::lgamma(((_Tp)__n) + __b); 
# 91
const _Tp __lnfact = std::lgamma((_Tp)(__n + (1))); 
# 97
_Tp __pre_term1 = (((_Tp)(0.5L)) * (((_Tp)1) - __b)) * std::log((((_Tp)(0.25L)) * __x) * __eta); 
# 99
_Tp __pre_term2 = ((_Tp)(0.25L)) * std::log(__pre_h); 
# 100
_Tp __lnpre = (((__lg_b - __lnfact) + (((_Tp)(0.5L)) * __x)) + __pre_term1) - __pre_term2; 
# 102
_Tp __ser_term1 = std::sin(__a * __numeric_constants< _Tp> ::__pi()); 
# 103
_Tp __ser_term2 = std::sin(((((_Tp)(0.25L)) * __eta) * ((((_Tp)2) * __th) - std::sin(((_Tp)2) * __th))) + __numeric_constants< _Tp> ::__pi_4()); 
# 107
_Tp __ser = __ser_term1 + __ser_term2; 
# 109
return std::exp(__lnpre) * __ser; 
# 110
} 
# 129 "/usr/include/c++/11/tr1/poly_laguerre.tcc" 3
template< class _Tpa, class _Tp> _Tp 
# 131
__poly_laguerre_hyperg(unsigned __n, _Tpa __alpha1, _Tp __x) 
# 132
{ 
# 133
const _Tp __b = ((_Tp)__alpha1) + ((_Tp)1); 
# 134
const _Tp __mx = (-__x); 
# 135
const _Tp __tc_sgn = (__x < ((_Tp)0)) ? (_Tp)1 : (((__n % (2)) == (1)) ? -((_Tp)1) : ((_Tp)1)); 
# 138
_Tp __tc = ((_Tp)1); 
# 139
const _Tp __ax = std::abs(__x); 
# 140
for (unsigned __k = (1); __k <= __n; ++__k) { 
# 141
__tc *= (__ax / __k); }  
# 143
_Tp __term = __tc * __tc_sgn; 
# 144
_Tp __sum = __term; 
# 145
for (int __k = ((int)__n) - 1; __k >= 0; --__k) 
# 146
{ 
# 147
__term *= ((((__b + ((_Tp)__k)) / ((_Tp)(((int)__n) - __k))) * ((_Tp)(__k + 1))) / __mx); 
# 149
__sum += __term; 
# 150
}  
# 152
return __sum; 
# 153
} 
# 185 "/usr/include/c++/11/tr1/poly_laguerre.tcc" 3
template< class _Tpa, class _Tp> _Tp 
# 187
__poly_laguerre_recursion(unsigned __n, _Tpa __alpha1, _Tp __x) 
# 188
{ 
# 190
_Tp __l_0 = ((_Tp)1); 
# 191
if (__n == (0)) { 
# 192
return __l_0; }  
# 195
_Tp __l_1 = ((-__x) + ((_Tp)1)) + ((_Tp)__alpha1); 
# 196
if (__n == (1)) { 
# 197
return __l_1; }  
# 200
_Tp __l_n2 = __l_0; 
# 201
_Tp __l_n1 = __l_1; 
# 202
_Tp __l_n = ((_Tp)0); 
# 203
for (unsigned __nn = (2); __nn <= __n; ++__nn) 
# 204
{ 
# 205
__l_n = (((((((_Tp)(((2) * __nn) - (1))) + ((_Tp)__alpha1)) - __x) * __l_n1) / ((_Tp)__nn)) - (((((_Tp)(__nn - (1))) + ((_Tp)__alpha1)) * __l_n2) / ((_Tp)__nn))); 
# 208
__l_n2 = __l_n1; 
# 209
__l_n1 = __l_n; 
# 210
}  
# 212
return __l_n; 
# 213
} 
# 244 "/usr/include/c++/11/tr1/poly_laguerre.tcc" 3
template< class _Tpa, class _Tp> _Tp 
# 246
__poly_laguerre(unsigned __n, _Tpa __alpha1, _Tp __x) 
# 247
{ 
# 248
if (__x < ((_Tp)0)) { 
# 249
std::__throw_domain_error("Negative argument in __poly_laguerre."); } else { 
# 252
if (__isnan(__x)) { 
# 253
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 254
if (__n == (0)) { 
# 255
return (_Tp)1; } else { 
# 256
if (__n == (1)) { 
# 257
return (((_Tp)1) + ((_Tp)__alpha1)) - __x; } else { 
# 258
if (__x == ((_Tp)0)) 
# 259
{ 
# 260
_Tp __prod = ((_Tp)__alpha1) + ((_Tp)1); 
# 261
for (unsigned __k = (2); __k <= __n; ++__k) { 
# 262
__prod *= ((((_Tp)__alpha1) + ((_Tp)__k)) / ((_Tp)__k)); }  
# 263
return __prod; 
# 264
} else { 
# 265
if ((__n > (10000000)) && (((_Tp)__alpha1) > (-((_Tp)1))) && (__x < ((((_Tp)2) * (((_Tp)__alpha1) + ((_Tp)1))) + ((_Tp)((4) * __n))))) { 
# 267
return __poly_laguerre_large_n(__n, __alpha1, __x); } else { 
# 268
if ((((_Tp)__alpha1) >= ((_Tp)0)) || ((__x > ((_Tp)0)) && (((_Tp)__alpha1) < (-((_Tp)(__n + (1))))))) { 
# 270
return __poly_laguerre_recursion(__n, __alpha1, __x); } else { 
# 272
return __poly_laguerre_hyperg(__n, __alpha1, __x); }  }  }  }  }  }  }  
# 273
} 
# 296 "/usr/include/c++/11/tr1/poly_laguerre.tcc" 3
template< class _Tp> inline _Tp 
# 298
__assoc_laguerre(unsigned __n, unsigned __m, _Tp __x) 
# 299
{ return __poly_laguerre< unsigned, _Tp> (__n, __m, __x); } 
# 316 "/usr/include/c++/11/tr1/poly_laguerre.tcc" 3
template< class _Tp> inline _Tp 
# 318
__laguerre(unsigned __n, _Tp __x) 
# 319
{ return __poly_laguerre< unsigned, _Tp> (__n, 0, __x); } 
# 320
}
# 327
}
# 47 "/usr/include/c++/11/tr1/riemann_zeta.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 63 "/usr/include/c++/11/tr1/riemann_zeta.tcc" 3
namespace __detail { 
# 78 "/usr/include/c++/11/tr1/riemann_zeta.tcc" 3
template< class _Tp> _Tp 
# 80
__riemann_zeta_sum(_Tp __s) 
# 81
{ 
# 83
if (__s < ((_Tp)1)) { 
# 84
std::__throw_domain_error("Bad argument in zeta sum."); }  
# 86
const unsigned max_iter = (10000); 
# 87
_Tp __zeta = ((_Tp)0); 
# 88
for (unsigned __k = (1); __k < max_iter; ++__k) 
# 89
{ 
# 90
_Tp __term = std::pow(static_cast< _Tp>(__k), -__s); 
# 91
if (__term < std::template numeric_limits< _Tp> ::epsilon()) 
# 92
{ 
# 93
break; 
# 94
}  
# 95
__zeta += __term; 
# 96
}  
# 98
return __zeta; 
# 99
} 
# 115 "/usr/include/c++/11/tr1/riemann_zeta.tcc" 3
template< class _Tp> _Tp 
# 117
__riemann_zeta_alt(_Tp __s) 
# 118
{ 
# 119
_Tp __sgn = ((_Tp)1); 
# 120
_Tp __zeta = ((_Tp)0); 
# 121
for (unsigned __i = (1); __i < (10000000); ++__i) 
# 122
{ 
# 123
_Tp __term = __sgn / std::pow(__i, __s); 
# 124
if (std::abs(__term) < std::template numeric_limits< _Tp> ::epsilon()) { 
# 125
break; }  
# 126
__zeta += __term; 
# 127
__sgn *= ((_Tp)(-1)); 
# 128
}  
# 129
__zeta /= (((_Tp)1) - std::pow((_Tp)2, ((_Tp)1) - __s)); 
# 131
return __zeta; 
# 132
} 
# 157 "/usr/include/c++/11/tr1/riemann_zeta.tcc" 3
template< class _Tp> _Tp 
# 159
__riemann_zeta_glob(_Tp __s) 
# 160
{ 
# 161
_Tp __zeta = ((_Tp)0); 
# 163
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 165
const _Tp __max_bincoeff = (std::template numeric_limits< _Tp> ::max_exponent10 * std::log((_Tp)10)) - ((_Tp)1); 
# 170
if (__s < ((_Tp)0)) 
# 171
{ 
# 173
if (std::fmod(__s, (_Tp)2) == ((_Tp)0)) { 
# 174
return (_Tp)0; } else 
# 177
{ 
# 178
_Tp __zeta = __riemann_zeta_glob(((_Tp)1) - __s); 
# 179
__zeta *= (((std::pow(((_Tp)2) * __numeric_constants< _Tp> ::__pi(), __s) * std::sin(__numeric_constants< _Tp> ::__pi_2() * __s)) * std::exp(std::lgamma(((_Tp)1) - __s))) / __numeric_constants< _Tp> ::__pi()); 
# 188
return __zeta; 
# 189
}  
# 190
}  
# 192
_Tp __num = ((_Tp)(0.5L)); 
# 193
const unsigned __maxit = (10000); 
# 194
for (unsigned __i = (0); __i < __maxit; ++__i) 
# 195
{ 
# 196
bool __punt = false; 
# 197
_Tp __sgn = ((_Tp)1); 
# 198
_Tp __term = ((_Tp)0); 
# 199
for (unsigned __j = (0); __j <= __i; ++__j) 
# 200
{ 
# 202
_Tp __bincoeff = (std::lgamma((_Tp)((1) + __i)) - std::lgamma((_Tp)((1) + __j))) - std::lgamma((_Tp)(((1) + __i) - __j)); 
# 210
if (__bincoeff > __max_bincoeff) 
# 211
{ 
# 213
__punt = true; 
# 214
break; 
# 215
}  
# 216
__bincoeff = std::exp(__bincoeff); 
# 217
__term += ((__sgn * __bincoeff) * std::pow((_Tp)((1) + __j), -__s)); 
# 218
__sgn *= ((_Tp)(-1)); 
# 219
}  
# 220
if (__punt) { 
# 221
break; }  
# 222
__term *= __num; 
# 223
__zeta += __term; 
# 224
if (std::abs(__term / __zeta) < __eps) { 
# 225
break; }  
# 226
__num *= ((_Tp)(0.5L)); 
# 227
}  
# 229
__zeta /= (((_Tp)1) - std::pow((_Tp)2, ((_Tp)1) - __s)); 
# 231
return __zeta; 
# 232
} 
# 252 "/usr/include/c++/11/tr1/riemann_zeta.tcc" 3
template< class _Tp> _Tp 
# 254
__riemann_zeta_product(_Tp __s) 
# 255
{ 
# 256
static const _Tp __prime[] = {((_Tp)2), ((_Tp)3), ((_Tp)5), ((_Tp)7), ((_Tp)11), ((_Tp)13), ((_Tp)17), ((_Tp)19), ((_Tp)23), ((_Tp)29), ((_Tp)31), ((_Tp)37), ((_Tp)41), ((_Tp)43), ((_Tp)47), ((_Tp)53), ((_Tp)59), ((_Tp)61), ((_Tp)67), ((_Tp)71), ((_Tp)73), ((_Tp)79), ((_Tp)83), ((_Tp)89), ((_Tp)97), ((_Tp)101), ((_Tp)103), ((_Tp)107), ((_Tp)109)}; 
# 262
static const unsigned __num_primes = (sizeof(__prime) / sizeof(_Tp)); 
# 264
_Tp __zeta = ((_Tp)1); 
# 265
for (unsigned __i = (0); __i < __num_primes; ++__i) 
# 266
{ 
# 267
const _Tp __fact = ((_Tp)1) - std::pow(__prime[__i], -__s); 
# 268
__zeta *= __fact; 
# 269
if ((((_Tp)1) - __fact) < std::template numeric_limits< _Tp> ::epsilon()) { 
# 270
break; }  
# 271
}  
# 273
__zeta = (((_Tp)1) / __zeta); 
# 275
return __zeta; 
# 276
} 
# 293 "/usr/include/c++/11/tr1/riemann_zeta.tcc" 3
template< class _Tp> _Tp 
# 295
__riemann_zeta(_Tp __s) 
# 296
{ 
# 297
if (__isnan(__s)) { 
# 298
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 299
if (__s == ((_Tp)1)) { 
# 300
return std::template numeric_limits< _Tp> ::infinity(); } else { 
# 301
if (__s < (-((_Tp)19))) 
# 302
{ 
# 303
_Tp __zeta = __riemann_zeta_product(((_Tp)1) - __s); 
# 304
__zeta *= (((std::pow(((_Tp)2) * __numeric_constants< _Tp> ::__pi(), __s) * std::sin(__numeric_constants< _Tp> ::__pi_2() * __s)) * std::exp(std::lgamma(((_Tp)1) - __s))) / __numeric_constants< _Tp> ::__pi()); 
# 312
return __zeta; 
# 313
} else { 
# 314
if (__s < ((_Tp)20)) 
# 315
{ 
# 317
bool __glob = true; 
# 318
if (__glob) { 
# 319
return __riemann_zeta_glob(__s); } else 
# 321
{ 
# 322
if (__s > ((_Tp)1)) { 
# 323
return __riemann_zeta_sum(__s); } else 
# 325
{ 
# 326
_Tp __zeta = ((std::pow(((_Tp)2) * __numeric_constants< _Tp> ::__pi(), __s) * std::sin(__numeric_constants< _Tp> ::__pi_2() * __s)) * std::tgamma(((_Tp)1) - __s)) * __riemann_zeta_sum(((_Tp)1) - __s); 
# 335
return __zeta; 
# 336
}  
# 337
}  
# 338
} else { 
# 340
return __riemann_zeta_product(__s); }  }  }  }  
# 341
} 
# 365 "/usr/include/c++/11/tr1/riemann_zeta.tcc" 3
template< class _Tp> _Tp 
# 367
__hurwitz_zeta_glob(_Tp __a, _Tp __s) 
# 368
{ 
# 369
_Tp __zeta = ((_Tp)0); 
# 371
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 373
const _Tp __max_bincoeff = (std::template numeric_limits< _Tp> ::max_exponent10 * std::log((_Tp)10)) - ((_Tp)1); 
# 376
const unsigned __maxit = (10000); 
# 377
for (unsigned __i = (0); __i < __maxit; ++__i) 
# 378
{ 
# 379
bool __punt = false; 
# 380
_Tp __sgn = ((_Tp)1); 
# 381
_Tp __term = ((_Tp)0); 
# 382
for (unsigned __j = (0); __j <= __i; ++__j) 
# 383
{ 
# 385
_Tp __bincoeff = (std::lgamma((_Tp)((1) + __i)) - std::lgamma((_Tp)((1) + __j))) - std::lgamma((_Tp)(((1) + __i) - __j)); 
# 393
if (__bincoeff > __max_bincoeff) 
# 394
{ 
# 396
__punt = true; 
# 397
break; 
# 398
}  
# 399
__bincoeff = std::exp(__bincoeff); 
# 400
__term += ((__sgn * __bincoeff) * std::pow((_Tp)(__a + __j), -__s)); 
# 401
__sgn *= ((_Tp)(-1)); 
# 402
}  
# 403
if (__punt) { 
# 404
break; }  
# 405
__term /= ((_Tp)(__i + (1))); 
# 406
if (std::abs(__term / __zeta) < __eps) { 
# 407
break; }  
# 408
__zeta += __term; 
# 409
}  
# 411
__zeta /= (__s - ((_Tp)1)); 
# 413
return __zeta; 
# 414
} 
# 430 "/usr/include/c++/11/tr1/riemann_zeta.tcc" 3
template< class _Tp> inline _Tp 
# 432
__hurwitz_zeta(_Tp __a, _Tp __s) 
# 433
{ return __hurwitz_zeta_glob(__a, __s); } 
# 434
}
# 441
}
# 61 "/usr/include/c++/11/bits/specfun.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 206 "/usr/include/c++/11/bits/specfun.h" 3
inline float assoc_laguerref(unsigned __n, unsigned __m, float __x) 
# 207
{ return __detail::__assoc_laguerre< float> (__n, __m, __x); } 
# 216
inline long double assoc_laguerrel(unsigned __n, unsigned __m, long double __x) 
# 217
{ return __detail::__assoc_laguerre< long double> (__n, __m, __x); } 
# 250 "/usr/include/c++/11/bits/specfun.h" 3
template< class _Tp> inline typename __gnu_cxx::__promote< _Tp> ::__type 
# 252
assoc_laguerre(unsigned __n, unsigned __m, _Tp __x) 
# 253
{ 
# 254
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 255
return __detail::__assoc_laguerre< typename __gnu_cxx::__promote< _Tp> ::__type> (__n, __m, __x); 
# 256
} 
# 267 "/usr/include/c++/11/bits/specfun.h" 3
inline float assoc_legendref(unsigned __l, unsigned __m, float __x) 
# 268
{ return __detail::__assoc_legendre_p< float> (__l, __m, __x); } 
# 276
inline long double assoc_legendrel(unsigned __l, unsigned __m, long double __x) 
# 277
{ return __detail::__assoc_legendre_p< long double> (__l, __m, __x); } 
# 296 "/usr/include/c++/11/bits/specfun.h" 3
template< class _Tp> inline typename __gnu_cxx::__promote< _Tp> ::__type 
# 298
assoc_legendre(unsigned __l, unsigned __m, _Tp __x) 
# 299
{ 
# 300
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 301
return __detail::__assoc_legendre_p< typename __gnu_cxx::__promote< _Tp> ::__type> (__l, __m, __x); 
# 302
} 
# 312 "/usr/include/c++/11/bits/specfun.h" 3
inline float betaf(float __a, float __b) 
# 313
{ return __detail::__beta< float> (__a, __b); } 
# 322
inline long double betal(long double __a, long double __b) 
# 323
{ return __detail::__beta< long double> (__a, __b); } 
# 341 "/usr/include/c++/11/bits/specfun.h" 3
template< class _Tpa, class _Tpb> inline typename __gnu_cxx::__promote_2< _Tpa, _Tpb> ::__type 
# 343
beta(_Tpa __a, _Tpb __b) 
# 344
{ 
# 345
typedef typename __gnu_cxx::__promote_2< _Tpa, _Tpb> ::__type __type; 
# 346
return __detail::__beta< typename __gnu_cxx::__promote_2< _Tpa, _Tpb> ::__type> (__a, __b); 
# 347
} 
# 358 "/usr/include/c++/11/bits/specfun.h" 3
inline float comp_ellint_1f(float __k) 
# 359
{ return __detail::__comp_ellint_1< float> (__k); } 
# 368
inline long double comp_ellint_1l(long double __k) 
# 369
{ return __detail::__comp_ellint_1< long double> (__k); } 
# 389 "/usr/include/c++/11/bits/specfun.h" 3
template< class _Tp> inline typename __gnu_cxx::__promote< _Tp> ::__type 
# 391
comp_ellint_1(_Tp __k) 
# 392
{ 
# 393
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 394
return __detail::__comp_ellint_1< typename __gnu_cxx::__promote< _Tp> ::__type> (__k); 
# 395
} 
# 406 "/usr/include/c++/11/bits/specfun.h" 3
inline float comp_ellint_2f(float __k) 
# 407
{ return __detail::__comp_ellint_2< float> (__k); } 
# 416
inline long double comp_ellint_2l(long double __k) 
# 417
{ return __detail::__comp_ellint_2< long double> (__k); } 
# 436 "/usr/include/c++/11/bits/specfun.h" 3
template< class _Tp> inline typename __gnu_cxx::__promote< _Tp> ::__type 
# 438
comp_ellint_2(_Tp __k) 
# 439
{ 
# 440
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 441
return __detail::__comp_ellint_2< typename __gnu_cxx::__promote< _Tp> ::__type> (__k); 
# 442
} 
# 453 "/usr/include/c++/11/bits/specfun.h" 3
inline float comp_ellint_3f(float __k, float __nu) 
# 454
{ return __detail::__comp_ellint_3< float> (__k, __nu); } 
# 463
inline long double comp_ellint_3l(long double __k, long double __nu) 
# 464
{ return __detail::__comp_ellint_3< long double> (__k, __nu); } 
# 487 "/usr/include/c++/11/bits/specfun.h" 3
template< class _Tp, class _Tpn> inline typename __gnu_cxx::__promote_2< _Tp, _Tpn> ::__type 
# 489
comp_ellint_3(_Tp __k, _Tpn __nu) 
# 490
{ 
# 491
typedef typename __gnu_cxx::__promote_2< _Tp, _Tpn> ::__type __type; 
# 492
return __detail::__comp_ellint_3< typename __gnu_cxx::__promote_2< _Tp, _Tpn> ::__type> (__k, __nu); 
# 493
} 
# 504 "/usr/include/c++/11/bits/specfun.h" 3
inline float cyl_bessel_if(float __nu, float __x) 
# 505
{ return __detail::__cyl_bessel_i< float> (__nu, __x); } 
# 514
inline long double cyl_bessel_il(long double __nu, long double __x) 
# 515
{ return __detail::__cyl_bessel_i< long double> (__nu, __x); } 
# 533 "/usr/include/c++/11/bits/specfun.h" 3
template< class _Tpnu, class _Tp> inline typename __gnu_cxx::__promote_2< _Tpnu, _Tp> ::__type 
# 535
cyl_bessel_i(_Tpnu __nu, _Tp __x) 
# 536
{ 
# 537
typedef typename __gnu_cxx::__promote_2< _Tpnu, _Tp> ::__type __type; 
# 538
return __detail::__cyl_bessel_i< typename __gnu_cxx::__promote_2< _Tpnu, _Tp> ::__type> (__nu, __x); 
# 539
} 
# 550 "/usr/include/c++/11/bits/specfun.h" 3
inline float cyl_bessel_jf(float __nu, float __x) 
# 551
{ return __detail::__cyl_bessel_j< float> (__nu, __x); } 
# 560
inline long double cyl_bessel_jl(long double __nu, long double __x) 
# 561
{ return __detail::__cyl_bessel_j< long double> (__nu, __x); } 
# 579 "/usr/include/c++/11/bits/specfun.h" 3
template< class _Tpnu, class _Tp> inline typename __gnu_cxx::__promote_2< _Tpnu, _Tp> ::__type 
# 581
cyl_bessel_j(_Tpnu __nu, _Tp __x) 
# 582
{ 
# 583
typedef typename __gnu_cxx::__promote_2< _Tpnu, _Tp> ::__type __type; 
# 584
return __detail::__cyl_bessel_j< typename __gnu_cxx::__promote_2< _Tpnu, _Tp> ::__type> (__nu, __x); 
# 585
} 
# 596 "/usr/include/c++/11/bits/specfun.h" 3
inline float cyl_bessel_kf(float __nu, float __x) 
# 597
{ return __detail::__cyl_bessel_k< float> (__nu, __x); } 
# 606
inline long double cyl_bessel_kl(long double __nu, long double __x) 
# 607
{ return __detail::__cyl_bessel_k< long double> (__nu, __x); } 
# 631 "/usr/include/c++/11/bits/specfun.h" 3
template< class _Tpnu, class _Tp> inline typename __gnu_cxx::__promote_2< _Tpnu, _Tp> ::__type 
# 633
cyl_bessel_k(_Tpnu __nu, _Tp __x) 
# 634
{ 
# 635
typedef typename __gnu_cxx::__promote_2< _Tpnu, _Tp> ::__type __type; 
# 636
return __detail::__cyl_bessel_k< typename __gnu_cxx::__promote_2< _Tpnu, _Tp> ::__type> (__nu, __x); 
# 637
} 
# 648 "/usr/include/c++/11/bits/specfun.h" 3
inline float cyl_neumannf(float __nu, float __x) 
# 649
{ return __detail::__cyl_neumann_n< float> (__nu, __x); } 
# 658
inline long double cyl_neumannl(long double __nu, long double __x) 
# 659
{ return __detail::__cyl_neumann_n< long double> (__nu, __x); } 
# 679 "/usr/include/c++/11/bits/specfun.h" 3
template< class _Tpnu, class _Tp> inline typename __gnu_cxx::__promote_2< _Tpnu, _Tp> ::__type 
# 681
cyl_neumann(_Tpnu __nu, _Tp __x) 
# 682
{ 
# 683
typedef typename __gnu_cxx::__promote_2< _Tpnu, _Tp> ::__type __type; 
# 684
return __detail::__cyl_neumann_n< typename __gnu_cxx::__promote_2< _Tpnu, _Tp> ::__type> (__nu, __x); 
# 685
} 
# 696 "/usr/include/c++/11/bits/specfun.h" 3
inline float ellint_1f(float __k, float __phi) 
# 697
{ return __detail::__ellint_1< float> (__k, __phi); } 
# 706
inline long double ellint_1l(long double __k, long double __phi) 
# 707
{ return __detail::__ellint_1< long double> (__k, __phi); } 
# 727 "/usr/include/c++/11/bits/specfun.h" 3
template< class _Tp, class _Tpp> inline typename __gnu_cxx::__promote_2< _Tp, _Tpp> ::__type 
# 729
ellint_1(_Tp __k, _Tpp __phi) 
# 730
{ 
# 731
typedef typename __gnu_cxx::__promote_2< _Tp, _Tpp> ::__type __type; 
# 732
return __detail::__ellint_1< typename __gnu_cxx::__promote_2< _Tp, _Tpp> ::__type> (__k, __phi); 
# 733
} 
# 744 "/usr/include/c++/11/bits/specfun.h" 3
inline float ellint_2f(float __k, float __phi) 
# 745
{ return __detail::__ellint_2< float> (__k, __phi); } 
# 754
inline long double ellint_2l(long double __k, long double __phi) 
# 755
{ return __detail::__ellint_2< long double> (__k, __phi); } 
# 775 "/usr/include/c++/11/bits/specfun.h" 3
template< class _Tp, class _Tpp> inline typename __gnu_cxx::__promote_2< _Tp, _Tpp> ::__type 
# 777
ellint_2(_Tp __k, _Tpp __phi) 
# 778
{ 
# 779
typedef typename __gnu_cxx::__promote_2< _Tp, _Tpp> ::__type __type; 
# 780
return __detail::__ellint_2< typename __gnu_cxx::__promote_2< _Tp, _Tpp> ::__type> (__k, __phi); 
# 781
} 
# 792 "/usr/include/c++/11/bits/specfun.h" 3
inline float ellint_3f(float __k, float __nu, float __phi) 
# 793
{ return __detail::__ellint_3< float> (__k, __nu, __phi); } 
# 802
inline long double ellint_3l(long double __k, long double __nu, long double __phi) 
# 803
{ return __detail::__ellint_3< long double> (__k, __nu, __phi); } 
# 828 "/usr/include/c++/11/bits/specfun.h" 3
template< class _Tp, class _Tpn, class _Tpp> inline typename __gnu_cxx::__promote_3< _Tp, _Tpn, _Tpp> ::__type 
# 830
ellint_3(_Tp __k, _Tpn __nu, _Tpp __phi) 
# 831
{ 
# 832
typedef typename __gnu_cxx::__promote_3< _Tp, _Tpn, _Tpp> ::__type __type; 
# 833
return __detail::__ellint_3< typename __gnu_cxx::__promote_3< _Tp, _Tpn, _Tpp> ::__type> (__k, __nu, __phi); 
# 834
} 
# 844 "/usr/include/c++/11/bits/specfun.h" 3
inline float expintf(float __x) 
# 845
{ return __detail::__expint< float> (__x); } 
# 854
inline long double expintl(long double __x) 
# 855
{ return __detail::__expint< long double> (__x); } 
# 868 "/usr/include/c++/11/bits/specfun.h" 3
template< class _Tp> inline typename __gnu_cxx::__promote< _Tp> ::__type 
# 870
expint(_Tp __x) 
# 871
{ 
# 872
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 873
return __detail::__expint< typename __gnu_cxx::__promote< _Tp> ::__type> (__x); 
# 874
} 
# 885 "/usr/include/c++/11/bits/specfun.h" 3
inline float hermitef(unsigned __n, float __x) 
# 886
{ return __detail::__poly_hermite< float> (__n, __x); } 
# 895
inline long double hermitel(unsigned __n, long double __x) 
# 896
{ return __detail::__poly_hermite< long double> (__n, __x); } 
# 916 "/usr/include/c++/11/bits/specfun.h" 3
template< class _Tp> inline typename __gnu_cxx::__promote< _Tp> ::__type 
# 918
hermite(unsigned __n, _Tp __x) 
# 919
{ 
# 920
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 921
return __detail::__poly_hermite< typename __gnu_cxx::__promote< _Tp> ::__type> (__n, __x); 
# 922
} 
# 933 "/usr/include/c++/11/bits/specfun.h" 3
inline float laguerref(unsigned __n, float __x) 
# 934
{ return __detail::__laguerre< float> (__n, __x); } 
# 943
inline long double laguerrel(unsigned __n, long double __x) 
# 944
{ return __detail::__laguerre< long double> (__n, __x); } 
# 960 "/usr/include/c++/11/bits/specfun.h" 3
template< class _Tp> inline typename __gnu_cxx::__promote< _Tp> ::__type 
# 962
laguerre(unsigned __n, _Tp __x) 
# 963
{ 
# 964
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 965
return __detail::__laguerre< typename __gnu_cxx::__promote< _Tp> ::__type> (__n, __x); 
# 966
} 
# 977 "/usr/include/c++/11/bits/specfun.h" 3
inline float legendref(unsigned __l, float __x) 
# 978
{ return __detail::__poly_legendre_p< float> (__l, __x); } 
# 987
inline long double legendrel(unsigned __l, long double __x) 
# 988
{ return __detail::__poly_legendre_p< long double> (__l, __x); } 
# 1005 "/usr/include/c++/11/bits/specfun.h" 3
template< class _Tp> inline typename __gnu_cxx::__promote< _Tp> ::__type 
# 1007
legendre(unsigned __l, _Tp __x) 
# 1008
{ 
# 1009
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 1010
return __detail::__poly_legendre_p< typename __gnu_cxx::__promote< _Tp> ::__type> (__l, __x); 
# 1011
} 
# 1022 "/usr/include/c++/11/bits/specfun.h" 3
inline float riemann_zetaf(float __s) 
# 1023
{ return __detail::__riemann_zeta< float> (__s); } 
# 1032
inline long double riemann_zetal(long double __s) 
# 1033
{ return __detail::__riemann_zeta< long double> (__s); } 
# 1056 "/usr/include/c++/11/bits/specfun.h" 3
template< class _Tp> inline typename __gnu_cxx::__promote< _Tp> ::__type 
# 1058
riemann_zeta(_Tp __s) 
# 1059
{ 
# 1060
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 1061
return __detail::__riemann_zeta< typename __gnu_cxx::__promote< _Tp> ::__type> (__s); 
# 1062
} 
# 1073 "/usr/include/c++/11/bits/specfun.h" 3
inline float sph_besself(unsigned __n, float __x) 
# 1074
{ return __detail::__sph_bessel< float> (__n, __x); } 
# 1083
inline long double sph_bessell(unsigned __n, long double __x) 
# 1084
{ return __detail::__sph_bessel< long double> (__n, __x); } 
# 1100 "/usr/include/c++/11/bits/specfun.h" 3
template< class _Tp> inline typename __gnu_cxx::__promote< _Tp> ::__type 
# 1102
sph_bessel(unsigned __n, _Tp __x) 
# 1103
{ 
# 1104
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 1105
return __detail::__sph_bessel< typename __gnu_cxx::__promote< _Tp> ::__type> (__n, __x); 
# 1106
} 
# 1117 "/usr/include/c++/11/bits/specfun.h" 3
inline float sph_legendref(unsigned __l, unsigned __m, float __theta) 
# 1118
{ return __detail::__sph_legendre< float> (__l, __m, __theta); } 
# 1128 "/usr/include/c++/11/bits/specfun.h" 3
inline long double sph_legendrel(unsigned __l, unsigned __m, long double __theta) 
# 1129
{ return __detail::__sph_legendre< long double> (__l, __m, __theta); } 
# 1147 "/usr/include/c++/11/bits/specfun.h" 3
template< class _Tp> inline typename __gnu_cxx::__promote< _Tp> ::__type 
# 1149
sph_legendre(unsigned __l, unsigned __m, _Tp __theta) 
# 1150
{ 
# 1151
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 1152
return __detail::__sph_legendre< typename __gnu_cxx::__promote< _Tp> ::__type> (__l, __m, __theta); 
# 1153
} 
# 1164 "/usr/include/c++/11/bits/specfun.h" 3
inline float sph_neumannf(unsigned __n, float __x) 
# 1165
{ return __detail::__sph_neumann< float> (__n, __x); } 
# 1174
inline long double sph_neumannl(unsigned __n, long double __x) 
# 1175
{ return __detail::__sph_neumann< long double> (__n, __x); } 
# 1191 "/usr/include/c++/11/bits/specfun.h" 3
template< class _Tp> inline typename __gnu_cxx::__promote< _Tp> ::__type 
# 1193
sph_neumann(unsigned __n, _Tp __x) 
# 1194
{ 
# 1195
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 1196
return __detail::__sph_neumann< typename __gnu_cxx::__promote< _Tp> ::__type> (__n, __x); 
# 1197
} 
# 1202
}
# 1938 "/usr/include/c++/11/cmath" 3
}
# 1388 "/usr/include/c++/11/bits/specfun.h" 3
#pragma GCC visibility pop
# 38 "/usr/include/c++/11/math.h" 3
using std::abs;
# 39
using std::acos;
# 40
using std::asin;
# 41
using std::atan;
# 42
using std::atan2;
# 43
using std::cos;
# 44
using std::sin;
# 45
using std::tan;
# 46
using std::cosh;
# 47
using std::sinh;
# 48
using std::tanh;
# 49
using std::exp;
# 50
using std::frexp;
# 51
using std::ldexp;
# 52
using std::log;
# 53
using std::log10;
# 54
using std::modf;
# 55
using std::pow;
# 56
using std::sqrt;
# 57
using std::ceil;
# 58
using std::fabs;
# 59
using std::floor;
# 60
using std::fmod;
# 63
using std::fpclassify;
# 64
using std::isfinite;
# 65
using std::isinf;
# 66
using std::isnan;
# 67
using std::isnormal;
# 68
using std::signbit;
# 69
using std::isgreater;
# 70
using std::isgreaterequal;
# 71
using std::isless;
# 72
using std::islessequal;
# 73
using std::islessgreater;
# 74
using std::isunordered;
# 78
using std::acosh;
# 79
using std::asinh;
# 80
using std::atanh;
# 81
using std::cbrt;
# 82
using std::copysign;
# 83
using std::erf;
# 84
using std::erfc;
# 85
using std::exp2;
# 86
using std::expm1;
# 87
using std::fdim;
# 88
using std::fma;
# 89
using std::fmax;
# 90
using std::fmin;
# 91
using std::hypot;
# 92
using std::ilogb;
# 93
using std::lgamma;
# 94
using std::llrint;
# 95
using std::llround;
# 96
using std::log1p;
# 97
using std::log2;
# 98
using std::logb;
# 99
using std::lrint;
# 100
using std::lround;
# 101
using std::nearbyint;
# 102
using std::nextafter;
# 103
using std::nexttoward;
# 104
using std::remainder;
# 105
using std::remquo;
# 106
using std::rint;
# 107
using std::round;
# 108
using std::scalbln;
# 109
using std::scalbn;
# 110
using std::tgamma;
# 111
using std::trunc;
# 4647 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
namespace std { 
# 4648
constexpr bool signbit(float x); 
# 4649
constexpr bool signbit(double x); 
# 4650
constexpr bool signbit(long double x); 
# 4651
constexpr bool isfinite(float x); 
# 4652
constexpr bool isfinite(double x); 
# 4653
constexpr bool isfinite(long double x); 
# 4654
constexpr bool isnan(float x); 
# 4659
constexpr bool isnan(double x); 
# 4661
constexpr bool isnan(long double x); 
# 4662
constexpr bool isinf(float x); 
# 4667
constexpr bool isinf(double x); 
# 4669
constexpr bool isinf(long double x); 
# 4670
}
# 4826 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
namespace std { 
# 4828
template< class T> extern T __pow_helper(T, int); 
# 4829
template< class T> extern T __cmath_power(T, unsigned); 
# 4830
}
# 4832
using std::abs;
# 4833
using std::fabs;
# 4834
using std::ceil;
# 4835
using std::floor;
# 4836
using std::sqrt;
# 4838
using std::pow;
# 4840
using std::log;
# 4841
using std::log10;
# 4842
using std::fmod;
# 4843
using std::modf;
# 4844
using std::exp;
# 4845
using std::frexp;
# 4846
using std::ldexp;
# 4847
using std::asin;
# 4848
using std::sin;
# 4849
using std::sinh;
# 4850
using std::acos;
# 4851
using std::cos;
# 4852
using std::cosh;
# 4853
using std::atan;
# 4854
using std::atan2;
# 4855
using std::tan;
# 4856
using std::tanh;
# 5237 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
namespace std { 
# 5246 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern inline long long abs(long long); 
# 5266 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern inline long abs(long a); 
# 5267
extern constexpr float abs(float); 
# 5268
extern constexpr double abs(double); 
# 5269
extern constexpr float fabs(float); 
# 5270
extern constexpr float ceil(float); 
# 5271
extern constexpr float floor(float); 
# 5272
extern constexpr float sqrt(float); 
# 5273
extern constexpr float pow(float, float); 
# 5278
template< class _Tp, class _Up> extern constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type pow(_Tp, _Up); 
# 5288
extern constexpr float log(float); 
# 5289
extern constexpr float log10(float); 
# 5290
extern constexpr float fmod(float, float); 
# 5291
extern inline float modf(float, float *); 
# 5292
extern constexpr float exp(float); 
# 5293
extern inline float frexp(float, int *); 
# 5294
extern constexpr float ldexp(float, int); 
# 5295
extern constexpr float asin(float); 
# 5296
extern constexpr float sin(float); 
# 5297
extern constexpr float sinh(float); 
# 5298
extern constexpr float acos(float); 
# 5299
extern constexpr float cos(float); 
# 5300
extern constexpr float cosh(float); 
# 5301
extern constexpr float atan(float); 
# 5302
extern constexpr float atan2(float, float); 
# 5303
extern constexpr float tan(float); 
# 5304
extern constexpr float tanh(float); 
# 5391 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
}
# 5497 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
namespace std { 
# 5498
constexpr float logb(float a); 
# 5499
constexpr int ilogb(float a); 
# 5500
constexpr float scalbn(float a, int b); 
# 5501
constexpr float scalbln(float a, long b); 
# 5502
constexpr float exp2(float a); 
# 5503
constexpr float expm1(float a); 
# 5504
constexpr float log2(float a); 
# 5505
constexpr float log1p(float a); 
# 5506
constexpr float acosh(float a); 
# 5507
constexpr float asinh(float a); 
# 5508
constexpr float atanh(float a); 
# 5509
constexpr float hypot(float a, float b); 
# 5510
constexpr float cbrt(float a); 
# 5511
constexpr float erf(float a); 
# 5512
constexpr float erfc(float a); 
# 5513
constexpr float lgamma(float a); 
# 5514
constexpr float tgamma(float a); 
# 5515
constexpr float copysign(float a, float b); 
# 5516
constexpr float nextafter(float a, float b); 
# 5517
constexpr float remainder(float a, float b); 
# 5518
inline float remquo(float a, float b, int * quo); 
# 5519
constexpr float round(float a); 
# 5520
constexpr long lround(float a); 
# 5521
constexpr long long llround(float a); 
# 5522
constexpr float trunc(float a); 
# 5523
constexpr float rint(float a); 
# 5524
constexpr long lrint(float a); 
# 5525
constexpr long long llrint(float a); 
# 5526
constexpr float nearbyint(float a); 
# 5527
constexpr float fdim(float a, float b); 
# 5528
constexpr float fma(float a, float b, float c); 
# 5529
constexpr float fmax(float a, float b); 
# 5530
constexpr float fmin(float a, float b); 
# 5531
}
# 5636 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
static inline float exp10(const float a); 
# 5638
static inline float rsqrt(const float a); 
# 5640
static inline float rcbrt(const float a); 
# 5642
static inline float sinpi(const float a); 
# 5644
static inline float cospi(const float a); 
# 5646
static inline void sincospi(const float a, float *const sptr, float *const cptr); 
# 5648
static inline void sincos(const float a, float *const sptr, float *const cptr); 
# 5650
static inline float j0(const float a); 
# 5652
static inline float j1(const float a); 
# 5654
static inline float jn(const int n, const float a); 
# 5656
static inline float y0(const float a); 
# 5658
static inline float y1(const float a); 
# 5660
static inline float yn(const int n, const float a); 
# 5662
__attribute__((unused)) static inline float cyl_bessel_i0(const float a); 
# 5664
__attribute__((unused)) static inline float cyl_bessel_i1(const float a); 
# 5666
static inline float erfinv(const float a); 
# 5668
static inline float erfcinv(const float a); 
# 5670
static inline float normcdfinv(const float a); 
# 5672
static inline float normcdf(const float a); 
# 5674
static inline float erfcx(const float a); 
# 5676
static inline double copysign(const double a, const float b); 
# 5678
static inline double copysign(const float a, const double b); 
# 5686
static inline unsigned min(const unsigned a, const unsigned b); 
# 5694
static inline unsigned min(const int a, const unsigned b); 
# 5702
static inline unsigned min(const unsigned a, const int b); 
# 5710
static inline long min(const long a, const long b); 
# 5718
static inline unsigned long min(const unsigned long a, const unsigned long b); 
# 5726
static inline unsigned long min(const long a, const unsigned long b); 
# 5734
static inline unsigned long min(const unsigned long a, const long b); 
# 5742
static inline long long min(const long long a, const long long b); 
# 5750
static inline unsigned long long min(const unsigned long long a, const unsigned long long b); 
# 5758
static inline unsigned long long min(const long long a, const unsigned long long b); 
# 5766
static inline unsigned long long min(const unsigned long long a, const long long b); 
# 5777 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
static inline float min(const float a, const float b); 
# 5788 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
static inline double min(const double a, const double b); 
# 5798 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
static inline double min(const float a, const double b); 
# 5808 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
static inline double min(const double a, const float b); 
# 5816
static inline unsigned max(const unsigned a, const unsigned b); 
# 5824
static inline unsigned max(const int a, const unsigned b); 
# 5832
static inline unsigned max(const unsigned a, const int b); 
# 5840
static inline long max(const long a, const long b); 
# 5848
static inline unsigned long max(const unsigned long a, const unsigned long b); 
# 5856
static inline unsigned long max(const long a, const unsigned long b); 
# 5864
static inline unsigned long max(const unsigned long a, const long b); 
# 5872
static inline long long max(const long long a, const long long b); 
# 5880
static inline unsigned long long max(const unsigned long long a, const unsigned long long b); 
# 5888
static inline unsigned long long max(const long long a, const unsigned long long b); 
# 5896
static inline unsigned long long max(const unsigned long long a, const long long b); 
# 5907 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
static inline float max(const float a, const float b); 
# 5918 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
static inline double max(const double a, const double b); 
# 5928 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
static inline double max(const float a, const double b); 
# 5938 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
static inline double max(const double a, const float b); 
# 5950 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
extern "C" {
# 5951
__attribute__((unused)) inline void *__nv_aligned_device_malloc(size_t size, size_t align) 
# 5952
{int volatile ___ = 1;(void)size;(void)align;
# 5955
::exit(___);}
#if 0
# 5952
{ 
# 5953
__attribute__((unused)) void *__nv_aligned_device_malloc_impl(size_t, size_t); 
# 5954
return __nv_aligned_device_malloc_impl(size, align); 
# 5955
} 
#endif
# 5956 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.h" 3
}
# 758 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.hpp" 3
static inline float exp10(const float a) 
# 759
{ 
# 760
return exp10f(a); 
# 761
} 
# 763
static inline float rsqrt(const float a) 
# 764
{ 
# 765
return rsqrtf(a); 
# 766
} 
# 768
static inline float rcbrt(const float a) 
# 769
{ 
# 770
return rcbrtf(a); 
# 771
} 
# 773
static inline float sinpi(const float a) 
# 774
{ 
# 775
return sinpif(a); 
# 776
} 
# 778
static inline float cospi(const float a) 
# 779
{ 
# 780
return cospif(a); 
# 781
} 
# 783
static inline void sincospi(const float a, float *const sptr, float *const cptr) 
# 784
{ 
# 785
sincospif(a, sptr, cptr); 
# 786
} 
# 788
static inline void sincos(const float a, float *const sptr, float *const cptr) 
# 789
{ 
# 790
sincosf(a, sptr, cptr); 
# 791
} 
# 793
static inline float j0(const float a) 
# 794
{ 
# 795
return j0f(a); 
# 796
} 
# 798
static inline float j1(const float a) 
# 799
{ 
# 800
return j1f(a); 
# 801
} 
# 803
static inline float jn(const int n, const float a) 
# 804
{ 
# 805
return jnf(n, a); 
# 806
} 
# 808
static inline float y0(const float a) 
# 809
{ 
# 810
return y0f(a); 
# 811
} 
# 813
static inline float y1(const float a) 
# 814
{ 
# 815
return y1f(a); 
# 816
} 
# 818
static inline float yn(const int n, const float a) 
# 819
{ 
# 820
return ynf(n, a); 
# 821
} 
# 823
__attribute__((unused)) static inline float cyl_bessel_i0(const float a) 
# 824
{int volatile ___ = 1;(void)a;
# 826
::exit(___);}
#if 0
# 824
{ 
# 825
return cyl_bessel_i0f(a); 
# 826
} 
#endif
# 828 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.hpp" 3
__attribute__((unused)) static inline float cyl_bessel_i1(const float a) 
# 829
{int volatile ___ = 1;(void)a;
# 831
::exit(___);}
#if 0
# 829
{ 
# 830
return cyl_bessel_i1f(a); 
# 831
} 
#endif
# 833 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.hpp" 3
static inline float erfinv(const float a) 
# 834
{ 
# 835
return erfinvf(a); 
# 836
} 
# 838
static inline float erfcinv(const float a) 
# 839
{ 
# 840
return erfcinvf(a); 
# 841
} 
# 843
static inline float normcdfinv(const float a) 
# 844
{ 
# 845
return normcdfinvf(a); 
# 846
} 
# 848
static inline float normcdf(const float a) 
# 849
{ 
# 850
return normcdff(a); 
# 851
} 
# 853
static inline float erfcx(const float a) 
# 854
{ 
# 855
return erfcxf(a); 
# 856
} 
# 858
static inline double copysign(const double a, const float b) 
# 859
{ 
# 860
return copysign(a, static_cast< double>(b)); 
# 861
} 
# 863
static inline double copysign(const float a, const double b) 
# 864
{ 
# 865
return copysign(static_cast< double>(a), b); 
# 866
} 
# 868
static inline unsigned min(const unsigned a, const unsigned b) 
# 869
{ 
# 870
return umin(a, b); 
# 871
} 
# 873
static inline unsigned min(const int a, const unsigned b) 
# 874
{ 
# 875
return umin(static_cast< unsigned>(a), b); 
# 876
} 
# 878
static inline unsigned min(const unsigned a, const int b) 
# 879
{ 
# 880
return umin(a, static_cast< unsigned>(b)); 
# 881
} 
# 883
static inline long min(const long a, const long b) 
# 884
{ 
# 885
long retval; 
# 892
if (sizeof(long) == sizeof(int)) { 
# 896
retval = (static_cast< long>(min(static_cast< int>(a), static_cast< int>(b)))); 
# 897
} else { 
# 898
retval = (static_cast< long>(llmin(static_cast< long long>(a), static_cast< long long>(b)))); 
# 899
}  
# 900
return retval; 
# 901
} 
# 903
static inline unsigned long min(const unsigned long a, const unsigned long b) 
# 904
{ 
# 905
unsigned long retval; 
# 910
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 914
retval = (static_cast< unsigned long>(umin(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
# 915
} else { 
# 916
retval = (static_cast< unsigned long>(ullmin(static_cast< unsigned long long>(a), static_cast< unsigned long long>(b)))); 
# 917
}  
# 918
return retval; 
# 919
} 
# 921
static inline unsigned long min(const long a, const unsigned long b) 
# 922
{ 
# 923
unsigned long retval; 
# 928
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 932
retval = (static_cast< unsigned long>(umin(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
# 933
} else { 
# 934
retval = (static_cast< unsigned long>(ullmin(static_cast< unsigned long long>(a), static_cast< unsigned long long>(b)))); 
# 935
}  
# 936
return retval; 
# 937
} 
# 939
static inline unsigned long min(const unsigned long a, const long b) 
# 940
{ 
# 941
unsigned long retval; 
# 946
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 950
retval = (static_cast< unsigned long>(umin(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
# 951
} else { 
# 952
retval = (static_cast< unsigned long>(ullmin(static_cast< unsigned long long>(a), static_cast< unsigned long long>(b)))); 
# 953
}  
# 954
return retval; 
# 955
} 
# 957
static inline long long min(const long long a, const long long b) 
# 958
{ 
# 959
return llmin(a, b); 
# 960
} 
# 962
static inline unsigned long long min(const unsigned long long a, const unsigned long long b) 
# 963
{ 
# 964
return ullmin(a, b); 
# 965
} 
# 967
static inline unsigned long long min(const long long a, const unsigned long long b) 
# 968
{ 
# 969
return ullmin(static_cast< unsigned long long>(a), b); 
# 970
} 
# 972
static inline unsigned long long min(const unsigned long long a, const long long b) 
# 973
{ 
# 974
return ullmin(a, static_cast< unsigned long long>(b)); 
# 975
} 
# 977
static inline float min(const float a, const float b) 
# 978
{ 
# 979
return fminf(a, b); 
# 980
} 
# 982
static inline double min(const double a, const double b) 
# 983
{ 
# 984
return fmin(a, b); 
# 985
} 
# 987
static inline double min(const float a, const double b) 
# 988
{ 
# 989
return fmin(static_cast< double>(a), b); 
# 990
} 
# 992
static inline double min(const double a, const float b) 
# 993
{ 
# 994
return fmin(a, static_cast< double>(b)); 
# 995
} 
# 997
static inline unsigned max(const unsigned a, const unsigned b) 
# 998
{ 
# 999
return umax(a, b); 
# 1000
} 
# 1002
static inline unsigned max(const int a, const unsigned b) 
# 1003
{ 
# 1004
return umax(static_cast< unsigned>(a), b); 
# 1005
} 
# 1007
static inline unsigned max(const unsigned a, const int b) 
# 1008
{ 
# 1009
return umax(a, static_cast< unsigned>(b)); 
# 1010
} 
# 1012
static inline long max(const long a, const long b) 
# 1013
{ 
# 1014
long retval; 
# 1020
if (sizeof(long) == sizeof(int)) { 
# 1024
retval = (static_cast< long>(max(static_cast< int>(a), static_cast< int>(b)))); 
# 1025
} else { 
# 1026
retval = (static_cast< long>(llmax(static_cast< long long>(a), static_cast< long long>(b)))); 
# 1027
}  
# 1028
return retval; 
# 1029
} 
# 1031
static inline unsigned long max(const unsigned long a, const unsigned long b) 
# 1032
{ 
# 1033
unsigned long retval; 
# 1038
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 1042
retval = (static_cast< unsigned long>(umax(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
# 1043
} else { 
# 1044
retval = (static_cast< unsigned long>(ullmax(static_cast< unsigned long long>(a), static_cast< unsigned long long>(b)))); 
# 1045
}  
# 1046
return retval; 
# 1047
} 
# 1049
static inline unsigned long max(const long a, const unsigned long b) 
# 1050
{ 
# 1051
unsigned long retval; 
# 1056
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 1060
retval = (static_cast< unsigned long>(umax(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
# 1061
} else { 
# 1062
retval = (static_cast< unsigned long>(ullmax(static_cast< unsigned long long>(a), static_cast< unsigned long long>(b)))); 
# 1063
}  
# 1064
return retval; 
# 1065
} 
# 1067
static inline unsigned long max(const unsigned long a, const long b) 
# 1068
{ 
# 1069
unsigned long retval; 
# 1074
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 1078
retval = (static_cast< unsigned long>(umax(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
# 1079
} else { 
# 1080
retval = (static_cast< unsigned long>(ullmax(static_cast< unsigned long long>(a), static_cast< unsigned long long>(b)))); 
# 1081
}  
# 1082
return retval; 
# 1083
} 
# 1085
static inline long long max(const long long a, const long long b) 
# 1086
{ 
# 1087
return llmax(a, b); 
# 1088
} 
# 1090
static inline unsigned long long max(const unsigned long long a, const unsigned long long b) 
# 1091
{ 
# 1092
return ullmax(a, b); 
# 1093
} 
# 1095
static inline unsigned long long max(const long long a, const unsigned long long b) 
# 1096
{ 
# 1097
return ullmax(static_cast< unsigned long long>(a), b); 
# 1098
} 
# 1100
static inline unsigned long long max(const unsigned long long a, const long long b) 
# 1101
{ 
# 1102
return ullmax(a, static_cast< unsigned long long>(b)); 
# 1103
} 
# 1105
static inline float max(const float a, const float b) 
# 1106
{ 
# 1107
return fmaxf(a, b); 
# 1108
} 
# 1110
static inline double max(const double a, const double b) 
# 1111
{ 
# 1112
return fmax(a, b); 
# 1113
} 
# 1115
static inline double max(const float a, const double b) 
# 1116
{ 
# 1117
return fmax(static_cast< double>(a), b); 
# 1118
} 
# 1120
static inline double max(const double a, const float b) 
# 1121
{ 
# 1122
return fmax(a, static_cast< double>(b)); 
# 1123
} 
# 1135 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/math_functions.hpp" 3
inline int min(const int a, const int b) 
# 1136
{ 
# 1137
return (a < b) ? a : b; 
# 1138
} 
# 1140
inline unsigned umin(const unsigned a, const unsigned b) 
# 1141
{ 
# 1142
return (a < b) ? a : b; 
# 1143
} 
# 1145
inline long long llmin(const long long a, const long long b) 
# 1146
{ 
# 1147
return (a < b) ? a : b; 
# 1148
} 
# 1150
inline unsigned long long ullmin(const unsigned long long a, const unsigned long long 
# 1151
b) 
# 1152
{ 
# 1153
return (a < b) ? a : b; 
# 1154
} 
# 1156
inline int max(const int a, const int b) 
# 1157
{ 
# 1158
return (a > b) ? a : b; 
# 1159
} 
# 1161
inline unsigned umax(const unsigned a, const unsigned b) 
# 1162
{ 
# 1163
return (a > b) ? a : b; 
# 1164
} 
# 1166
inline long long llmax(const long long a, const long long b) 
# 1167
{ 
# 1168
return (a > b) ? a : b; 
# 1169
} 
# 1171
inline unsigned long long ullmax(const unsigned long long a, const unsigned long long 
# 1172
b) 
# 1173
{ 
# 1174
return (a > b) ? a : b; 
# 1175
} 
# 95 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.h" 3
extern "C" {
# 2486 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.h" 3
static inline int __vimax_s32_relu(const int a, const int b); 
# 2498 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.h" 3
static inline unsigned __vimax_s16x2_relu(const unsigned a, const unsigned b); 
# 2507 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.h" 3
static inline int __vimin_s32_relu(const int a, const int b); 
# 2519 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.h" 3
static inline unsigned __vimin_s16x2_relu(const unsigned a, const unsigned b); 
# 2528 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.h" 3
static inline int __vimax3_s32(const int a, const int b, const int c); 
# 2540 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.h" 3
static inline unsigned __vimax3_s16x2(const unsigned a, const unsigned b, const unsigned c); 
# 2549 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.h" 3
static inline unsigned __vimax3_u32(const unsigned a, const unsigned b, const unsigned c); 
# 2561 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.h" 3
static inline unsigned __vimax3_u16x2(const unsigned a, const unsigned b, const unsigned c); 
# 2570 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.h" 3
static inline int __vimin3_s32(const int a, const int b, const int c); 
# 2582 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.h" 3
static inline unsigned __vimin3_s16x2(const unsigned a, const unsigned b, const unsigned c); 
# 2591 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.h" 3
static inline unsigned __vimin3_u32(const unsigned a, const unsigned b, const unsigned c); 
# 2603 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.h" 3
static inline unsigned __vimin3_u16x2(const unsigned a, const unsigned b, const unsigned c); 
# 2612 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.h" 3
static inline int __vimax3_s32_relu(const int a, const int b, const int c); 
# 2624 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.h" 3
static inline unsigned __vimax3_s16x2_relu(const unsigned a, const unsigned b, const unsigned c); 
# 2633 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.h" 3
static inline int __vimin3_s32_relu(const int a, const int b, const int c); 
# 2645 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.h" 3
static inline unsigned __vimin3_s16x2_relu(const unsigned a, const unsigned b, const unsigned c); 
# 2654 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.h" 3
static inline int __viaddmax_s32(const int a, const int b, const int c); 
# 2666 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.h" 3
static inline unsigned __viaddmax_s16x2(const unsigned a, const unsigned b, const unsigned c); 
# 2675 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.h" 3
static inline unsigned __viaddmax_u32(const unsigned a, const unsigned b, const unsigned c); 
# 2687 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.h" 3
static inline unsigned __viaddmax_u16x2(const unsigned a, const unsigned b, const unsigned c); 
# 2696 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.h" 3
static inline int __viaddmin_s32(const int a, const int b, const int c); 
# 2708 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.h" 3
static inline unsigned __viaddmin_s16x2(const unsigned a, const unsigned b, const unsigned c); 
# 2717 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.h" 3
static inline unsigned __viaddmin_u32(const unsigned a, const unsigned b, const unsigned c); 
# 2729 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.h" 3
static inline unsigned __viaddmin_u16x2(const unsigned a, const unsigned b, const unsigned c); 
# 2739 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.h" 3
static inline int __viaddmax_s32_relu(const int a, const int b, const int c); 
# 2751 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.h" 3
static inline unsigned __viaddmax_s16x2_relu(const unsigned a, const unsigned b, const unsigned c); 
# 2761 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.h" 3
static inline int __viaddmin_s32_relu(const int a, const int b, const int c); 
# 2773 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.h" 3
static inline unsigned __viaddmin_s16x2_relu(const unsigned a, const unsigned b, const unsigned c); 
# 2782 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.h" 3
static inline int __vibmax_s32(const int a, const int b, bool *const pred); 
# 2791 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.h" 3
static inline unsigned __vibmax_u32(const unsigned a, const unsigned b, bool *const pred); 
# 2800 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.h" 3
static inline int __vibmin_s32(const int a, const int b, bool *const pred); 
# 2809 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.h" 3
static inline unsigned __vibmin_u32(const unsigned a, const unsigned b, bool *const pred); 
# 2823 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.h" 3
static inline unsigned __vibmax_s16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo); 
# 2837 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.h" 3
static inline unsigned __vibmax_u16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo); 
# 2851 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.h" 3
static inline unsigned __vibmin_s16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo); 
# 2865 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.h" 3
static inline unsigned __vibmin_u16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo); 
# 2872
}
# 108 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.hpp" 3
static inline int __vimax_s32_relu(const int a, const int b) { 
# 115
int ans = max(a, b); 
# 117
return (ans > 0) ? ans : 0; 
# 119
} 
# 121
static inline unsigned __vimax_s16x2_relu(const unsigned a, const unsigned b) { 
# 122
unsigned res; 
# 130
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 131
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 133
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 134
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 137
short aS_lo = *((short *)(&aU_lo)); 
# 138
short aS_hi = *((short *)(&aU_hi)); 
# 140
short bS_lo = *((short *)(&bU_lo)); 
# 141
short bS_hi = *((short *)(&bU_hi)); 
# 144
short ansS_lo = (short)max(aS_lo, bS_lo); 
# 145
short ansS_hi = (short)max(aS_hi, bS_hi); 
# 148
if (ansS_lo < 0) { ansS_lo = (0); }  
# 149
if (ansS_hi < 0) { ansS_hi = (0); }  
# 152
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
# 153
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
# 156
res = (((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16)); 
# 159
return res; 
# 160
} 
# 162
static inline int __vimin_s32_relu(const int a, const int b) { 
# 169
int ans = min(a, b); 
# 171
return (ans > 0) ? ans : 0; 
# 173
} 
# 175
static inline unsigned __vimin_s16x2_relu(const unsigned a, const unsigned b) { 
# 176
unsigned res; 
# 184
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 185
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 187
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 188
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 191
short aS_lo = *((short *)(&aU_lo)); 
# 192
short aS_hi = *((short *)(&aU_hi)); 
# 194
short bS_lo = *((short *)(&bU_lo)); 
# 195
short bS_hi = *((short *)(&bU_hi)); 
# 198
short ansS_lo = (short)min(aS_lo, bS_lo); 
# 199
short ansS_hi = (short)min(aS_hi, bS_hi); 
# 202
if (ansS_lo < 0) { ansS_lo = (0); }  
# 203
if (ansS_hi < 0) { ansS_hi = (0); }  
# 206
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
# 207
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
# 210
res = (((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16)); 
# 213
return res; 
# 214
} 
# 216
static inline int __vimax3_s32(const int a, const int b, const int c) { 
# 226 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.hpp" 3
return max(max(a, b), c); 
# 228
} 
# 230
static inline unsigned __vimax3_s16x2(const unsigned a, const unsigned b, const unsigned c) { 
# 231
unsigned res; 
# 243 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.hpp" 3
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 244
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 246
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 247
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 249
unsigned short cU_lo = (unsigned short)(c & 65535U); 
# 250
unsigned short cU_hi = (unsigned short)(c >> 16); 
# 253
short aS_lo = *((short *)(&aU_lo)); 
# 254
short aS_hi = *((short *)(&aU_hi)); 
# 256
short bS_lo = *((short *)(&bU_lo)); 
# 257
short bS_hi = *((short *)(&bU_hi)); 
# 259
short cS_lo = *((short *)(&cU_lo)); 
# 260
short cS_hi = *((short *)(&cU_hi)); 
# 263
short ansS_lo = (short)max(max(aS_lo, bS_lo), cS_lo); 
# 264
short ansS_hi = (short)max(max(aS_hi, bS_hi), cS_hi); 
# 267
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
# 268
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
# 271
res = (((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16)); 
# 273
return res; 
# 274
} 
# 276
static inline unsigned __vimax3_u32(const unsigned a, const unsigned b, const unsigned c) { 
# 286 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.hpp" 3
return max(max(a, b), c); 
# 288
} 
# 290
static inline unsigned __vimax3_u16x2(const unsigned a, const unsigned b, const unsigned c) { 
# 291
unsigned res; 
# 302 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.hpp" 3
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 303
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 305
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 306
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 308
unsigned short cU_lo = (unsigned short)(c & 65535U); 
# 309
unsigned short cU_hi = (unsigned short)(c >> 16); 
# 312
unsigned short ansU_lo = (unsigned short)max(max(aU_lo, bU_lo), cU_lo); 
# 313
unsigned short ansU_hi = (unsigned short)max(max(aU_hi, bU_hi), cU_hi); 
# 316
res = (((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16)); 
# 319
return res; 
# 320
} 
# 322
static inline int __vimin3_s32(const int a, const int b, const int c) { 
# 332 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.hpp" 3
return min(min(a, b), c); 
# 334
} 
# 336
static inline unsigned __vimin3_s16x2(const unsigned a, const unsigned b, const unsigned c) { 
# 337
unsigned res; 
# 348 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.hpp" 3
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 349
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 351
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 352
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 354
unsigned short cU_lo = (unsigned short)(c & 65535U); 
# 355
unsigned short cU_hi = (unsigned short)(c >> 16); 
# 358
short aS_lo = *((short *)(&aU_lo)); 
# 359
short aS_hi = *((short *)(&aU_hi)); 
# 361
short bS_lo = *((short *)(&bU_lo)); 
# 362
short bS_hi = *((short *)(&bU_hi)); 
# 364
short cS_lo = *((short *)(&cU_lo)); 
# 365
short cS_hi = *((short *)(&cU_hi)); 
# 368
short ansS_lo = (short)min(min(aS_lo, bS_lo), cS_lo); 
# 369
short ansS_hi = (short)min(min(aS_hi, bS_hi), cS_hi); 
# 372
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
# 373
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
# 376
res = (((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16)); 
# 379
return res; 
# 380
} 
# 382
static inline unsigned __vimin3_u32(const unsigned a, const unsigned b, const unsigned c) { 
# 392 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.hpp" 3
return min(min(a, b), c); 
# 394
} 
# 396
static inline unsigned __vimin3_u16x2(const unsigned a, const unsigned b, const unsigned c) { 
# 397
unsigned res; 
# 408 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.hpp" 3
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 409
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 411
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 412
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 414
unsigned short cU_lo = (unsigned short)(c & 65535U); 
# 415
unsigned short cU_hi = (unsigned short)(c >> 16); 
# 418
unsigned short ansU_lo = (unsigned short)min(min(aU_lo, bU_lo), cU_lo); 
# 419
unsigned short ansU_hi = (unsigned short)min(min(aU_hi, bU_hi), cU_hi); 
# 422
res = (((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16)); 
# 425
return res; 
# 426
} 
# 428
static inline int __vimax3_s32_relu(const int a, const int b, const int c) { 
# 438 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.hpp" 3
int ans = max(max(a, b), c); 
# 440
return (ans > 0) ? ans : 0; 
# 442
} 
# 444
static inline unsigned __vimax3_s16x2_relu(const unsigned a, const unsigned b, const unsigned c) { 
# 445
unsigned res; 
# 456 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.hpp" 3
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 457
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 459
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 460
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 462
unsigned short cU_lo = (unsigned short)(c & 65535U); 
# 463
unsigned short cU_hi = (unsigned short)(c >> 16); 
# 466
short aS_lo = *((short *)(&aU_lo)); 
# 467
short aS_hi = *((short *)(&aU_hi)); 
# 469
short bS_lo = *((short *)(&bU_lo)); 
# 470
short bS_hi = *((short *)(&bU_hi)); 
# 472
short cS_lo = *((short *)(&cU_lo)); 
# 473
short cS_hi = *((short *)(&cU_hi)); 
# 476
short ansS_lo = (short)max(max(aS_lo, bS_lo), cS_lo); 
# 477
short ansS_hi = (short)max(max(aS_hi, bS_hi), cS_hi); 
# 480
if (ansS_lo < 0) { ansS_lo = (0); }  
# 481
if (ansS_hi < 0) { ansS_hi = (0); }  
# 484
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
# 485
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
# 488
res = (((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16)); 
# 491
return res; 
# 492
} 
# 494
static inline int __vimin3_s32_relu(const int a, const int b, const int c) { 
# 504 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.hpp" 3
int ans = min(min(a, b), c); 
# 506
return (ans > 0) ? ans : 0; 
# 508
} 
# 510
static inline unsigned __vimin3_s16x2_relu(const unsigned a, const unsigned b, const unsigned c) { 
# 511
unsigned res; 
# 522 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.hpp" 3
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 523
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 525
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 526
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 528
unsigned short cU_lo = (unsigned short)(c & 65535U); 
# 529
unsigned short cU_hi = (unsigned short)(c >> 16); 
# 532
short aS_lo = *((short *)(&aU_lo)); 
# 533
short aS_hi = *((short *)(&aU_hi)); 
# 535
short bS_lo = *((short *)(&bU_lo)); 
# 536
short bS_hi = *((short *)(&bU_hi)); 
# 538
short cS_lo = *((short *)(&cU_lo)); 
# 539
short cS_hi = *((short *)(&cU_hi)); 
# 542
short ansS_lo = (short)min(min(aS_lo, bS_lo), cS_lo); 
# 543
short ansS_hi = (short)min(min(aS_hi, bS_hi), cS_hi); 
# 546
if (ansS_lo < 0) { ansS_lo = (0); }  
# 547
if (ansS_hi < 0) { ansS_hi = (0); }  
# 550
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
# 551
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
# 554
res = (((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16)); 
# 557
return res; 
# 558
} 
# 560
static inline int __viaddmax_s32(const int a, const int b, const int c) { 
# 570 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.hpp" 3
return max(a + b, c); 
# 572
} 
# 574
static inline unsigned __viaddmax_s16x2(const unsigned a, const unsigned b, const unsigned c) { 
# 575
unsigned res; 
# 586 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.hpp" 3
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 587
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 589
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 590
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 592
unsigned short cU_lo = (unsigned short)(c & 65535U); 
# 593
unsigned short cU_hi = (unsigned short)(c >> 16); 
# 596
short aS_lo = *((short *)(&aU_lo)); 
# 597
short aS_hi = *((short *)(&aU_hi)); 
# 599
short bS_lo = *((short *)(&bU_lo)); 
# 600
short bS_hi = *((short *)(&bU_hi)); 
# 602
short cS_lo = *((short *)(&cU_lo)); 
# 603
short cS_hi = *((short *)(&cU_hi)); 
# 606
short ansS_lo = (short)max((short)(aS_lo + bS_lo), cS_lo); 
# 607
short ansS_hi = (short)max((short)(aS_hi + bS_hi), cS_hi); 
# 610
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
# 611
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
# 614
res = (((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16)); 
# 617
return res; 
# 618
} 
# 620
static inline unsigned __viaddmax_u32(const unsigned a, const unsigned b, const unsigned c) { 
# 630 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.hpp" 3
return max(a + b, c); 
# 632
} 
# 634
static inline unsigned __viaddmax_u16x2(const unsigned a, const unsigned b, const unsigned c) { 
# 635
unsigned res; 
# 646 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.hpp" 3
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 647
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 649
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 650
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 652
unsigned short cU_lo = (unsigned short)(c & 65535U); 
# 653
unsigned short cU_hi = (unsigned short)(c >> 16); 
# 656
unsigned short ansU_lo = (unsigned short)max((unsigned short)(aU_lo + bU_lo), cU_lo); 
# 657
unsigned short ansU_hi = (unsigned short)max((unsigned short)(aU_hi + bU_hi), cU_hi); 
# 660
res = (((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16)); 
# 663
return res; 
# 664
} 
# 666
static inline int __viaddmin_s32(const int a, const int b, const int c) { 
# 676 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.hpp" 3
return min(a + b, c); 
# 678
} 
# 680
static inline unsigned __viaddmin_s16x2(const unsigned a, const unsigned b, const unsigned c) { 
# 681
unsigned res; 
# 692 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.hpp" 3
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 693
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 695
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 696
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 698
unsigned short cU_lo = (unsigned short)(c & 65535U); 
# 699
unsigned short cU_hi = (unsigned short)(c >> 16); 
# 702
short aS_lo = *((short *)(&aU_lo)); 
# 703
short aS_hi = *((short *)(&aU_hi)); 
# 705
short bS_lo = *((short *)(&bU_lo)); 
# 706
short bS_hi = *((short *)(&bU_hi)); 
# 708
short cS_lo = *((short *)(&cU_lo)); 
# 709
short cS_hi = *((short *)(&cU_hi)); 
# 712
short ansS_lo = (short)min((short)(aS_lo + bS_lo), cS_lo); 
# 713
short ansS_hi = (short)min((short)(aS_hi + bS_hi), cS_hi); 
# 716
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
# 717
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
# 720
res = (((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16)); 
# 723
return res; 
# 724
} 
# 726
static inline unsigned __viaddmin_u32(const unsigned a, const unsigned b, const unsigned c) { 
# 736 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.hpp" 3
return min(a + b, c); 
# 738
} 
# 740
static inline unsigned __viaddmin_u16x2(const unsigned a, const unsigned b, const unsigned c) { 
# 741
unsigned res; 
# 752 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.hpp" 3
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 753
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 755
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 756
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 758
unsigned short cU_lo = (unsigned short)(c & 65535U); 
# 759
unsigned short cU_hi = (unsigned short)(c >> 16); 
# 762
unsigned short ansU_lo = (unsigned short)min((unsigned short)(aU_lo + bU_lo), cU_lo); 
# 763
unsigned short ansU_hi = (unsigned short)min((unsigned short)(aU_hi + bU_hi), cU_hi); 
# 766
res = (((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16)); 
# 769
return res; 
# 770
} 
# 772
static inline int __viaddmax_s32_relu(const int a, const int b, const int c) { 
# 782 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.hpp" 3
int ans = max(a + b, c); 
# 784
return (ans > 0) ? ans : 0; 
# 786
} 
# 788
static inline unsigned __viaddmax_s16x2_relu(const unsigned a, const unsigned b, const unsigned c) { 
# 789
unsigned res; 
# 800 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.hpp" 3
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 801
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 803
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 804
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 806
unsigned short cU_lo = (unsigned short)(c & 65535U); 
# 807
unsigned short cU_hi = (unsigned short)(c >> 16); 
# 810
short aS_lo = *((short *)(&aU_lo)); 
# 811
short aS_hi = *((short *)(&aU_hi)); 
# 813
short bS_lo = *((short *)(&bU_lo)); 
# 814
short bS_hi = *((short *)(&bU_hi)); 
# 816
short cS_lo = *((short *)(&cU_lo)); 
# 817
short cS_hi = *((short *)(&cU_hi)); 
# 820
short ansS_lo = (short)max((short)(aS_lo + bS_lo), cS_lo); 
# 821
short ansS_hi = (short)max((short)(aS_hi + bS_hi), cS_hi); 
# 823
if (ansS_lo < 0) { ansS_lo = (0); }  
# 824
if (ansS_hi < 0) { ansS_hi = (0); }  
# 827
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
# 828
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
# 831
res = (((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16)); 
# 834
return res; 
# 835
} 
# 837
static inline int __viaddmin_s32_relu(const int a, const int b, const int c) { 
# 847 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.hpp" 3
int ans = min(a + b, c); 
# 849
return (ans > 0) ? ans : 0; 
# 851
} 
# 853
static inline unsigned __viaddmin_s16x2_relu(const unsigned a, const unsigned b, const unsigned c) { 
# 854
unsigned res; 
# 865 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.hpp" 3
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 866
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 868
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 869
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 871
unsigned short cU_lo = (unsigned short)(c & 65535U); 
# 872
unsigned short cU_hi = (unsigned short)(c >> 16); 
# 875
short aS_lo = *((short *)(&aU_lo)); 
# 876
short aS_hi = *((short *)(&aU_hi)); 
# 878
short bS_lo = *((short *)(&bU_lo)); 
# 879
short bS_hi = *((short *)(&bU_hi)); 
# 881
short cS_lo = *((short *)(&cU_lo)); 
# 882
short cS_hi = *((short *)(&cU_hi)); 
# 885
short ansS_lo = (short)min((short)(aS_lo + bS_lo), cS_lo); 
# 886
short ansS_hi = (short)min((short)(aS_hi + bS_hi), cS_hi); 
# 888
if (ansS_lo < 0) { ansS_lo = (0); }  
# 889
if (ansS_hi < 0) { ansS_hi = (0); }  
# 892
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
# 893
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
# 896
res = (((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16)); 
# 899
return res; 
# 900
} 
# 904
static inline int __vibmax_s32(const int a, const int b, bool *const pred) { 
# 918 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.hpp" 3
int ans = max(a, b); 
# 920
(*pred) = (a >= b); 
# 921
return ans; 
# 923
} 
# 925
static inline unsigned __vibmax_u32(const unsigned a, const unsigned b, bool *const pred) { 
# 939 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.hpp" 3
unsigned ans = max(a, b); 
# 941
(*pred) = (a >= b); 
# 942
return ans; 
# 944
} 
# 947
static inline int __vibmin_s32(const int a, const int b, bool *const pred) { 
# 961 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.hpp" 3
int ans = min(a, b); 
# 963
(*pred) = (a <= b); 
# 964
return ans; 
# 966
} 
# 969
static inline unsigned __vibmin_u32(const unsigned a, const unsigned b, bool *const pred) { 
# 983 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.hpp" 3
unsigned ans = min(a, b); 
# 985
(*pred) = (a <= b); 
# 986
return ans; 
# 988
} 
# 990
static inline unsigned __vibmax_s16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo) { 
# 1012 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.hpp" 3
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 1013
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 1015
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 1016
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 1019
short aS_lo = *((short *)(&aU_lo)); 
# 1020
short aS_hi = *((short *)(&aU_hi)); 
# 1022
short bS_lo = *((short *)(&bU_lo)); 
# 1023
short bS_hi = *((short *)(&bU_hi)); 
# 1026
short ansS_lo = (short)max(aS_lo, bS_lo); 
# 1027
short ansS_hi = (short)max(aS_hi, bS_hi); 
# 1029
(*pred_hi) = (aS_hi >= bS_hi); 
# 1030
(*pred_lo) = (aS_lo >= bS_lo); 
# 1033
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
# 1034
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
# 1037
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 1039
return ans; 
# 1041
} 
# 1043
static inline unsigned __vibmax_u16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo) { 
# 1065 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.hpp" 3
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 1066
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 1068
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 1069
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 1072
unsigned short ansU_lo = (unsigned short)max(aU_lo, bU_lo); 
# 1073
unsigned short ansU_hi = (unsigned short)max(aU_hi, bU_hi); 
# 1075
(*pred_hi) = (aU_hi >= bU_hi); 
# 1076
(*pred_lo) = (aU_lo >= bU_lo); 
# 1079
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 1081
return ans; 
# 1083
} 
# 1085
static inline unsigned __vibmin_s16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo) { 
# 1107 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.hpp" 3
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 1108
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 1110
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 1111
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 1114
short aS_lo = *((short *)(&aU_lo)); 
# 1115
short aS_hi = *((short *)(&aU_hi)); 
# 1117
short bS_lo = *((short *)(&bU_lo)); 
# 1118
short bS_hi = *((short *)(&bU_hi)); 
# 1121
short ansS_lo = (short)min(aS_lo, bS_lo); 
# 1122
short ansS_hi = (short)min(aS_hi, bS_hi); 
# 1124
(*pred_hi) = (aS_hi <= bS_hi); 
# 1125
(*pred_lo) = (aS_lo <= bS_lo); 
# 1128
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
# 1129
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
# 1132
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 1134
return ans; 
# 1136
} 
# 1138
static inline unsigned __vibmin_u16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo) { 
# 1160 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.hpp" 3
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 1161
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 1163
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 1164
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 1167
unsigned short ansU_lo = (unsigned short)min(aU_lo, bU_lo); 
# 1168
unsigned short ansU_hi = (unsigned short)min(aU_hi, bU_hi); 
# 1170
(*pred_hi) = (aU_hi <= bU_hi); 
# 1171
(*pred_lo) = (aU_lo <= bU_lo); 
# 1174
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 1176
return ans; 
# 1178
} 
# 89 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/device_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicAdd(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 89
{ } 
#endif
# 91 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/device_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicAdd(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 91
{ } 
#endif
# 93 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/device_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicSub(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 93
{ } 
#endif
# 95 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/device_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicSub(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 95
{ } 
#endif
# 97 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/device_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicExch(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 97
{ } 
#endif
# 99 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/device_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicExch(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 99
{ } 
#endif
# 101 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/device_atomic_functions.h" 3
__attribute__((unused)) static inline float atomicExch(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 101
{ } 
#endif
# 103 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/device_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicMin(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 103
{ } 
#endif
# 105 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/device_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicMin(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 105
{ } 
#endif
# 107 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/device_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicMax(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 107
{ } 
#endif
# 109 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/device_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicMax(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 109
{ } 
#endif
# 111 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/device_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicInc(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 111
{ } 
#endif
# 113 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/device_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicDec(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 113
{ } 
#endif
# 115 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/device_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicAnd(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 115
{ } 
#endif
# 117 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/device_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicAnd(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 117
{ } 
#endif
# 119 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/device_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicOr(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 119
{ } 
#endif
# 121 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/device_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicOr(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 121
{ } 
#endif
# 123 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/device_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicXor(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 123
{ } 
#endif
# 125 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/device_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicXor(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 125
{ } 
#endif
# 127 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/device_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicCAS(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 127
{ } 
#endif
# 129 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/device_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicCAS(unsigned *address, unsigned compare, unsigned val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 129
{ } 
#endif
# 156 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/device_atomic_functions.h" 3
extern "C" {
# 160
}
# 169 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/device_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned long long atomicAdd(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 169
{ } 
#endif
# 171 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/device_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned long long atomicExch(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 171
{ } 
#endif
# 173 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/device_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned long long atomicCAS(unsigned long long *address, unsigned long long compare, unsigned long long val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 173
{ } 
#endif
# 175 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/device_atomic_functions.h" 3
__attribute((deprecated("__any() is deprecated in favor of __any_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppr" "ess this warning)."))) __attribute__((unused)) static inline bool any(bool cond) {int volatile ___ = 1;(void)cond;::exit(___);}
#if 0
# 175
{ } 
#endif
# 177 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/device_atomic_functions.h" 3
__attribute((deprecated("__all() is deprecated in favor of __all_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppr" "ess this warning)."))) __attribute__((unused)) static inline bool all(bool cond) {int volatile ___ = 1;(void)cond;::exit(___);}
#if 0
# 177
{ } 
#endif
# 90 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_double_functions.h" 3
extern "C" {
# 1142 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_double_functions.h" 3
}
# 1150
__attribute__((unused)) static inline double fma(double a, double b, double c, cudaRoundMode mode); 
# 1154
__attribute__((unused)) static inline double dmul(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
# 1156
__attribute__((unused)) static inline double dadd(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
# 1158
__attribute__((unused)) static inline double dsub(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
# 1160
__attribute__((unused)) static inline int double2int(double a, cudaRoundMode mode = cudaRoundZero); 
# 1162
__attribute__((unused)) static inline unsigned double2uint(double a, cudaRoundMode mode = cudaRoundZero); 
# 1164
__attribute__((unused)) static inline long long double2ll(double a, cudaRoundMode mode = cudaRoundZero); 
# 1166
__attribute__((unused)) static inline unsigned long long double2ull(double a, cudaRoundMode mode = cudaRoundZero); 
# 1168
__attribute__((unused)) static inline double ll2double(long long a, cudaRoundMode mode = cudaRoundNearest); 
# 1170
__attribute__((unused)) static inline double ull2double(unsigned long long a, cudaRoundMode mode = cudaRoundNearest); 
# 1172
__attribute__((unused)) static inline double int2double(int a, cudaRoundMode mode = cudaRoundNearest); 
# 1174
__attribute__((unused)) static inline double uint2double(unsigned a, cudaRoundMode mode = cudaRoundNearest); 
# 1176
__attribute__((unused)) static inline double float2double(float a, cudaRoundMode mode = cudaRoundNearest); 
# 93 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_double_functions.hpp" 3
__attribute__((unused)) static inline double fma(double a, double b, double c, cudaRoundMode mode) 
# 94
{int volatile ___ = 1;(void)a;(void)b;(void)c;(void)mode;
# 99
::exit(___);}
#if 0
# 94
{ 
# 95
return (mode == (cudaRoundZero)) ? __fma_rz(a, b, c) : ((mode == (cudaRoundPosInf)) ? __fma_ru(a, b, c) : ((mode == (cudaRoundMinInf)) ? __fma_rd(a, b, c) : __fma_rn(a, b, c))); 
# 99
} 
#endif
# 101 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_double_functions.hpp" 3
__attribute__((unused)) static inline double dmul(double a, double b, cudaRoundMode mode) 
# 102
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
# 107
::exit(___);}
#if 0
# 102
{ 
# 103
return (mode == (cudaRoundZero)) ? __dmul_rz(a, b) : ((mode == (cudaRoundPosInf)) ? __dmul_ru(a, b) : ((mode == (cudaRoundMinInf)) ? __dmul_rd(a, b) : __dmul_rn(a, b))); 
# 107
} 
#endif
# 109 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_double_functions.hpp" 3
__attribute__((unused)) static inline double dadd(double a, double b, cudaRoundMode mode) 
# 110
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
# 115
::exit(___);}
#if 0
# 110
{ 
# 111
return (mode == (cudaRoundZero)) ? __dadd_rz(a, b) : ((mode == (cudaRoundPosInf)) ? __dadd_ru(a, b) : ((mode == (cudaRoundMinInf)) ? __dadd_rd(a, b) : __dadd_rn(a, b))); 
# 115
} 
#endif
# 117 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_double_functions.hpp" 3
__attribute__((unused)) static inline double dsub(double a, double b, cudaRoundMode mode) 
# 118
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
# 123
::exit(___);}
#if 0
# 118
{ 
# 119
return (mode == (cudaRoundZero)) ? __dsub_rz(a, b) : ((mode == (cudaRoundPosInf)) ? __dsub_ru(a, b) : ((mode == (cudaRoundMinInf)) ? __dsub_rd(a, b) : __dsub_rn(a, b))); 
# 123
} 
#endif
# 125 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_double_functions.hpp" 3
__attribute__((unused)) static inline int double2int(double a, cudaRoundMode mode) 
# 126
{int volatile ___ = 1;(void)a;(void)mode;
# 131
::exit(___);}
#if 0
# 126
{ 
# 127
return (mode == (cudaRoundNearest)) ? __double2int_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2int_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2int_rd(a) : __double2int_rz(a))); 
# 131
} 
#endif
# 133 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_double_functions.hpp" 3
__attribute__((unused)) static inline unsigned double2uint(double a, cudaRoundMode mode) 
# 134
{int volatile ___ = 1;(void)a;(void)mode;
# 139
::exit(___);}
#if 0
# 134
{ 
# 135
return (mode == (cudaRoundNearest)) ? __double2uint_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2uint_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2uint_rd(a) : __double2uint_rz(a))); 
# 139
} 
#endif
# 141 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_double_functions.hpp" 3
__attribute__((unused)) static inline long long double2ll(double a, cudaRoundMode mode) 
# 142
{int volatile ___ = 1;(void)a;(void)mode;
# 147
::exit(___);}
#if 0
# 142
{ 
# 143
return (mode == (cudaRoundNearest)) ? __double2ll_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2ll_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2ll_rd(a) : __double2ll_rz(a))); 
# 147
} 
#endif
# 149 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_double_functions.hpp" 3
__attribute__((unused)) static inline unsigned long long double2ull(double a, cudaRoundMode mode) 
# 150
{int volatile ___ = 1;(void)a;(void)mode;
# 155
::exit(___);}
#if 0
# 150
{ 
# 151
return (mode == (cudaRoundNearest)) ? __double2ull_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2ull_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2ull_rd(a) : __double2ull_rz(a))); 
# 155
} 
#endif
# 157 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_double_functions.hpp" 3
__attribute__((unused)) static inline double ll2double(long long a, cudaRoundMode mode) 
# 158
{int volatile ___ = 1;(void)a;(void)mode;
# 163
::exit(___);}
#if 0
# 158
{ 
# 159
return (mode == (cudaRoundZero)) ? __ll2double_rz(a) : ((mode == (cudaRoundPosInf)) ? __ll2double_ru(a) : ((mode == (cudaRoundMinInf)) ? __ll2double_rd(a) : __ll2double_rn(a))); 
# 163
} 
#endif
# 165 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_double_functions.hpp" 3
__attribute__((unused)) static inline double ull2double(unsigned long long a, cudaRoundMode mode) 
# 166
{int volatile ___ = 1;(void)a;(void)mode;
# 171
::exit(___);}
#if 0
# 166
{ 
# 167
return (mode == (cudaRoundZero)) ? __ull2double_rz(a) : ((mode == (cudaRoundPosInf)) ? __ull2double_ru(a) : ((mode == (cudaRoundMinInf)) ? __ull2double_rd(a) : __ull2double_rn(a))); 
# 171
} 
#endif
# 173 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_double_functions.hpp" 3
__attribute__((unused)) static inline double int2double(int a, cudaRoundMode mode) 
# 174
{int volatile ___ = 1;(void)a;(void)mode;
# 176
::exit(___);}
#if 0
# 174
{ 
# 175
return (double)a; 
# 176
} 
#endif
# 178 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_double_functions.hpp" 3
__attribute__((unused)) static inline double uint2double(unsigned a, cudaRoundMode mode) 
# 179
{int volatile ___ = 1;(void)a;(void)mode;
# 181
::exit(___);}
#if 0
# 179
{ 
# 180
return (double)a; 
# 181
} 
#endif
# 183 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_double_functions.hpp" 3
__attribute__((unused)) static inline double float2double(float a, cudaRoundMode mode) 
# 184
{int volatile ___ = 1;(void)a;(void)mode;
# 186
::exit(___);}
#if 0
# 184
{ 
# 185
return (double)a; 
# 186
} 
#endif
# 88 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_20_atomic_functions.h" 3
__attribute__((unused)) static inline float atomicAdd(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 88
{ } 
#endif
# 89 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_atomic_functions.h" 3
__attribute__((unused)) static inline long long atomicMin(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 89
{ } 
#endif
# 91 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_atomic_functions.h" 3
__attribute__((unused)) static inline long long atomicMax(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 91
{ } 
#endif
# 93 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_atomic_functions.h" 3
__attribute__((unused)) static inline long long atomicAnd(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 93
{ } 
#endif
# 95 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_atomic_functions.h" 3
__attribute__((unused)) static inline long long atomicOr(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 95
{ } 
#endif
# 97 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_atomic_functions.h" 3
__attribute__((unused)) static inline long long atomicXor(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 97
{ } 
#endif
# 99 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned long long atomicMin(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 99
{ } 
#endif
# 101 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned long long atomicMax(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 101
{ } 
#endif
# 103 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned long long atomicAnd(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 103
{ } 
#endif
# 105 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned long long atomicOr(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 105
{ } 
#endif
# 107 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned long long atomicXor(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 107
{ } 
#endif
# 93 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline double atomicAdd(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 93
{ } 
#endif
# 96 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicAdd_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 96
{ } 
#endif
# 99 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicAdd_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 99
{ } 
#endif
# 102 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicAdd_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 102
{ } 
#endif
# 105 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicAdd_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 105
{ } 
#endif
# 108 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned long long atomicAdd_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 108
{ } 
#endif
# 111 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned long long atomicAdd_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 111
{ } 
#endif
# 114 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline float atomicAdd_block(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 114
{ } 
#endif
# 117 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline float atomicAdd_system(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 117
{ } 
#endif
# 120 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline double atomicAdd_block(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 120
{ } 
#endif
# 123 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline double atomicAdd_system(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 123
{ } 
#endif
# 126 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicSub_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 126
{ } 
#endif
# 129 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicSub_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 129
{ } 
#endif
# 132 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicSub_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 132
{ } 
#endif
# 135 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicSub_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 135
{ } 
#endif
# 138 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicExch_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 138
{ } 
#endif
# 141 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicExch_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 141
{ } 
#endif
# 144 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicExch_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 144
{ } 
#endif
# 147 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicExch_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 147
{ } 
#endif
# 150 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned long long atomicExch_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 150
{ } 
#endif
# 153 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned long long atomicExch_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 153
{ } 
#endif
# 156 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline float atomicExch_block(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 156
{ } 
#endif
# 159 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline float atomicExch_system(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 159
{ } 
#endif
# 162 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicMin_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 162
{ } 
#endif
# 165 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicMin_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 165
{ } 
#endif
# 168 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline long long atomicMin_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 168
{ } 
#endif
# 171 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline long long atomicMin_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 171
{ } 
#endif
# 174 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicMin_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 174
{ } 
#endif
# 177 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicMin_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 177
{ } 
#endif
# 180 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned long long atomicMin_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 180
{ } 
#endif
# 183 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned long long atomicMin_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 183
{ } 
#endif
# 186 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicMax_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 186
{ } 
#endif
# 189 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicMax_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 189
{ } 
#endif
# 192 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline long long atomicMax_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 192
{ } 
#endif
# 195 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline long long atomicMax_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 195
{ } 
#endif
# 198 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicMax_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 198
{ } 
#endif
# 201 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicMax_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 201
{ } 
#endif
# 204 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned long long atomicMax_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 204
{ } 
#endif
# 207 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned long long atomicMax_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 207
{ } 
#endif
# 210 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicInc_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 210
{ } 
#endif
# 213 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicInc_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 213
{ } 
#endif
# 216 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicDec_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 216
{ } 
#endif
# 219 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicDec_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 219
{ } 
#endif
# 222 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicCAS_block(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 222
{ } 
#endif
# 225 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicCAS_system(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 225
{ } 
#endif
# 228 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicCAS_block(unsigned *address, unsigned compare, unsigned 
# 229
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 229
{ } 
#endif
# 232 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicCAS_system(unsigned *address, unsigned compare, unsigned 
# 233
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 233
{ } 
#endif
# 236 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned long long atomicCAS_block(unsigned long long *address, unsigned long long 
# 237
compare, unsigned long long 
# 238
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 238
{ } 
#endif
# 241 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned long long atomicCAS_system(unsigned long long *address, unsigned long long 
# 242
compare, unsigned long long 
# 243
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 243
{ } 
#endif
# 246 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicAnd_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 246
{ } 
#endif
# 249 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicAnd_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 249
{ } 
#endif
# 252 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline long long atomicAnd_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 252
{ } 
#endif
# 255 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline long long atomicAnd_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 255
{ } 
#endif
# 258 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicAnd_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 258
{ } 
#endif
# 261 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicAnd_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 261
{ } 
#endif
# 264 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned long long atomicAnd_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 264
{ } 
#endif
# 267 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned long long atomicAnd_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 267
{ } 
#endif
# 270 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicOr_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 270
{ } 
#endif
# 273 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicOr_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 273
{ } 
#endif
# 276 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline long long atomicOr_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 276
{ } 
#endif
# 279 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline long long atomicOr_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 279
{ } 
#endif
# 282 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicOr_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 282
{ } 
#endif
# 285 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicOr_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 285
{ } 
#endif
# 288 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned long long atomicOr_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 288
{ } 
#endif
# 291 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned long long atomicOr_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 291
{ } 
#endif
# 294 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicXor_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 294
{ } 
#endif
# 297 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline int atomicXor_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 297
{ } 
#endif
# 300 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline long long atomicXor_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 300
{ } 
#endif
# 303 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline long long atomicXor_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 303
{ } 
#endif
# 306 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicXor_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 306
{ } 
#endif
# 309 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned atomicXor_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 309
{ } 
#endif
# 312 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned long long atomicXor_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 312
{ } 
#endif
# 315 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_60_atomic_functions.h" 3
__attribute__((unused)) static inline unsigned long long atomicXor_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 315
{ } 
#endif
# 95 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_20_intrinsics.h" 3
extern "C" {
# 1036 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_20_intrinsics.h" 3
}
# 1043
__attribute((deprecated("__ballot() is deprecated in favor of __ballot_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to" " suppress this warning)."))) __attribute__((unused)) static inline unsigned ballot(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
# 1043
{ } 
#endif
# 1045 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_20_intrinsics.h" 3
__attribute__((unused)) static inline int syncthreads_count(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
# 1045
{ } 
#endif
# 1047 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_20_intrinsics.h" 3
__attribute__((unused)) static inline bool syncthreads_and(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
# 1047
{ } 
#endif
# 1049 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_20_intrinsics.h" 3
__attribute__((unused)) static inline bool syncthreads_or(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
# 1049
{ } 
#endif
# 1054 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_20_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __isGlobal(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1054
{ } 
#endif
# 1055 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_20_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __isShared(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1055
{ } 
#endif
# 1056 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_20_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __isConstant(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1056
{ } 
#endif
# 1057 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_20_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __isLocal(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1057
{ } 
#endif
# 1059 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_20_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __isGridConstant(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1059
{ } 
#endif
# 1061 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_20_intrinsics.h" 3
__attribute__((unused)) static inline size_t __cvta_generic_to_global(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1061
{ } 
#endif
# 1062 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_20_intrinsics.h" 3
__attribute__((unused)) static inline size_t __cvta_generic_to_shared(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1062
{ } 
#endif
# 1063 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_20_intrinsics.h" 3
__attribute__((unused)) static inline size_t __cvta_generic_to_constant(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1063
{ } 
#endif
# 1064 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_20_intrinsics.h" 3
__attribute__((unused)) static inline size_t __cvta_generic_to_local(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1064
{ } 
#endif
# 1066 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_20_intrinsics.h" 3
__attribute__((unused)) static inline size_t __cvta_generic_to_grid_constant(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1066
{ } 
#endif
# 1069 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_20_intrinsics.h" 3
__attribute__((unused)) static inline void *__cvta_global_to_generic(size_t rawbits) {int volatile ___ = 1;(void)rawbits;::exit(___);}
#if 0
# 1069
{ } 
#endif
# 1070 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_20_intrinsics.h" 3
__attribute__((unused)) static inline void *__cvta_shared_to_generic(size_t rawbits) {int volatile ___ = 1;(void)rawbits;::exit(___);}
#if 0
# 1070
{ } 
#endif
# 1071 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_20_intrinsics.h" 3
__attribute__((unused)) static inline void *__cvta_constant_to_generic(size_t rawbits) {int volatile ___ = 1;(void)rawbits;::exit(___);}
#if 0
# 1071
{ } 
#endif
# 1072 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_20_intrinsics.h" 3
__attribute__((unused)) static inline void *__cvta_local_to_generic(size_t rawbits) {int volatile ___ = 1;(void)rawbits;::exit(___);}
#if 0
# 1072
{ } 
#endif
# 1074 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_20_intrinsics.h" 3
__attribute__((unused)) static inline void *__cvta_grid_constant_to_generic(size_t rawbits) {int volatile ___ = 1;(void)rawbits;::exit(___);}
#if 0
# 1074
{ } 
#endif
# 123 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __fns(unsigned mask, unsigned base, int offset) {int volatile ___ = 1;(void)mask;(void)base;(void)offset;::exit(___);}
#if 0
# 123
{ } 
#endif
# 124 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline void __barrier_sync(unsigned id) {int volatile ___ = 1;(void)id;::exit(___);}
#if 0
# 124
{ } 
#endif
# 125 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline void __barrier_sync_count(unsigned id, unsigned cnt) {int volatile ___ = 1;(void)id;(void)cnt;::exit(___);}
#if 0
# 125
{ } 
#endif
# 126 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline void __syncwarp(unsigned mask = 4294967295U) {int volatile ___ = 1;(void)mask;::exit(___);}
#if 0
# 126
{ } 
#endif
# 127 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline int __all_sync(unsigned mask, int pred) {int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}
#if 0
# 127
{ } 
#endif
# 128 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline int __any_sync(unsigned mask, int pred) {int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}
#if 0
# 128
{ } 
#endif
# 129 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline int __uni_sync(unsigned mask, int pred) {int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}
#if 0
# 129
{ } 
#endif
# 130 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __ballot_sync(unsigned mask, int pred) {int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}
#if 0
# 130
{ } 
#endif
# 131 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __activemask() {int volatile ___ = 1;::exit(___);}
#if 0
# 131
{ } 
#endif
# 140 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline int __shfl(int var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 140
{ } 
#endif
# 141 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline unsigned __shfl(unsigned var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 141
{ } 
#endif
# 142 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline int __shfl_up(int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 142
{ } 
#endif
# 143 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline unsigned __shfl_up(unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 143
{ } 
#endif
# 144 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline int __shfl_down(int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 144
{ } 
#endif
# 145 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline unsigned __shfl_down(unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 145
{ } 
#endif
# 146 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline int __shfl_xor(int var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 146
{ } 
#endif
# 147 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline unsigned __shfl_xor(unsigned var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 147
{ } 
#endif
# 148 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline float __shfl(float var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 148
{ } 
#endif
# 149 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline float __shfl_up(float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 149
{ } 
#endif
# 150 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline float __shfl_down(float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 150
{ } 
#endif
# 151 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline float __shfl_xor(float var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 151
{ } 
#endif
# 154 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline int __shfl_sync(unsigned mask, int var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 154
{ } 
#endif
# 155 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __shfl_sync(unsigned mask, unsigned var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 155
{ } 
#endif
# 156 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline int __shfl_up_sync(unsigned mask, int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 156
{ } 
#endif
# 157 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __shfl_up_sync(unsigned mask, unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 157
{ } 
#endif
# 158 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline int __shfl_down_sync(unsigned mask, int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 158
{ } 
#endif
# 159 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __shfl_down_sync(unsigned mask, unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 159
{ } 
#endif
# 160 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline int __shfl_xor_sync(unsigned mask, int var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 160
{ } 
#endif
# 161 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __shfl_xor_sync(unsigned mask, unsigned var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 161
{ } 
#endif
# 162 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline float __shfl_sync(unsigned mask, float var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 162
{ } 
#endif
# 163 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline float __shfl_up_sync(unsigned mask, float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 163
{ } 
#endif
# 164 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline float __shfl_down_sync(unsigned mask, float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 164
{ } 
#endif
# 165 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline float __shfl_xor_sync(unsigned mask, float var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 165
{ } 
#endif
# 169 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline unsigned long long __shfl(unsigned long long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 169
{ } 
#endif
# 170 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline long long __shfl(long long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 170
{ } 
#endif
# 171 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline long long __shfl_up(long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 171
{ } 
#endif
# 172 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline unsigned long long __shfl_up(unsigned long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 172
{ } 
#endif
# 173 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline long long __shfl_down(long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 173
{ } 
#endif
# 174 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline unsigned long long __shfl_down(unsigned long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 174
{ } 
#endif
# 175 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline long long __shfl_xor(long long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 175
{ } 
#endif
# 176 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline unsigned long long __shfl_xor(unsigned long long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 176
{ } 
#endif
# 177 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline double __shfl(double var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 177
{ } 
#endif
# 178 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline double __shfl_up(double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 178
{ } 
#endif
# 179 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline double __shfl_down(double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 179
{ } 
#endif
# 180 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline double __shfl_xor(double var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 180
{ } 
#endif
# 183 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline long long __shfl_sync(unsigned mask, long long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 183
{ } 
#endif
# 184 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline unsigned long long __shfl_sync(unsigned mask, unsigned long long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 184
{ } 
#endif
# 185 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline long long __shfl_up_sync(unsigned mask, long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 185
{ } 
#endif
# 186 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline unsigned long long __shfl_up_sync(unsigned mask, unsigned long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 186
{ } 
#endif
# 187 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline long long __shfl_down_sync(unsigned mask, long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 187
{ } 
#endif
# 188 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline unsigned long long __shfl_down_sync(unsigned mask, unsigned long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 188
{ } 
#endif
# 189 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline long long __shfl_xor_sync(unsigned mask, long long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 189
{ } 
#endif
# 190 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline unsigned long long __shfl_xor_sync(unsigned mask, unsigned long long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 190
{ } 
#endif
# 191 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline double __shfl_sync(unsigned mask, double var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 191
{ } 
#endif
# 192 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline double __shfl_up_sync(unsigned mask, double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 192
{ } 
#endif
# 193 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline double __shfl_down_sync(unsigned mask, double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 193
{ } 
#endif
# 194 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline double __shfl_xor_sync(unsigned mask, double var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 194
{ } 
#endif
# 198 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline long __shfl(long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 198
{ } 
#endif
# 199 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline unsigned long __shfl(unsigned long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 199
{ } 
#endif
# 200 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline long __shfl_up(long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 200
{ } 
#endif
# 201 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline unsigned long __shfl_up(unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 201
{ } 
#endif
# 202 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline long __shfl_down(long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 202
{ } 
#endif
# 203 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline unsigned long __shfl_down(unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 203
{ } 
#endif
# 204 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline long __shfl_xor(long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 204
{ } 
#endif
# 205 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline unsigned long __shfl_xor(unsigned long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 205
{ } 
#endif
# 208 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline long __shfl_sync(unsigned mask, long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 208
{ } 
#endif
# 209 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline unsigned long __shfl_sync(unsigned mask, unsigned long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 209
{ } 
#endif
# 210 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline long __shfl_up_sync(unsigned mask, long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 210
{ } 
#endif
# 211 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline unsigned long __shfl_up_sync(unsigned mask, unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 211
{ } 
#endif
# 212 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline long __shfl_down_sync(unsigned mask, long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 212
{ } 
#endif
# 213 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline unsigned long __shfl_down_sync(unsigned mask, unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 213
{ } 
#endif
# 214 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline long __shfl_xor_sync(unsigned mask, long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 214
{ } 
#endif
# 215 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_30_intrinsics.h" 3
__attribute__((unused)) static inline unsigned long __shfl_xor_sync(unsigned mask, unsigned long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 215
{ } 
#endif
# 91 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline long __ldg(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 91
{ } 
#endif
# 92 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned long __ldg(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 92
{ } 
#endif
# 94 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline char __ldg(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 94
{ } 
#endif
# 95 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline signed char __ldg(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 95
{ } 
#endif
# 96 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline short __ldg(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 96
{ } 
#endif
# 97 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline int __ldg(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 97
{ } 
#endif
# 98 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline long long __ldg(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 98
{ } 
#endif
# 99 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline char2 __ldg(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 99
{ } 
#endif
# 100 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline char4 __ldg(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 100
{ } 
#endif
# 101 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline short2 __ldg(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 101
{ } 
#endif
# 102 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline short4 __ldg(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 102
{ } 
#endif
# 103 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline int2 __ldg(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 103
{ } 
#endif
# 104 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline int4 __ldg(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 104
{ } 
#endif
# 105 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline longlong2 __ldg(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 105
{ } 
#endif
# 107 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned char __ldg(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 107
{ } 
#endif
# 108 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned short __ldg(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 108
{ } 
#endif
# 109 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __ldg(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 109
{ } 
#endif
# 110 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned long long __ldg(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 110
{ } 
#endif
# 111 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline uchar2 __ldg(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 111
{ } 
#endif
# 112 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline uchar4 __ldg(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 112
{ } 
#endif
# 113 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline ushort2 __ldg(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 113
{ } 
#endif
# 114 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline ushort4 __ldg(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 114
{ } 
#endif
# 115 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline uint2 __ldg(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 115
{ } 
#endif
# 116 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline uint4 __ldg(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 116
{ } 
#endif
# 117 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline ulonglong2 __ldg(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 117
{ } 
#endif
# 119 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline float __ldg(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 119
{ } 
#endif
# 120 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline double __ldg(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 120
{ } 
#endif
# 121 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline float2 __ldg(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 121
{ } 
#endif
# 122 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline float4 __ldg(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 122
{ } 
#endif
# 123 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline double2 __ldg(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 123
{ } 
#endif
# 128 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline long __ldcg(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 128
{ } 
#endif
# 129 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned long __ldcg(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 129
{ } 
#endif
# 131 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline char __ldcg(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 131
{ } 
#endif
# 132 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline signed char __ldcg(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 132
{ } 
#endif
# 133 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline short __ldcg(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 133
{ } 
#endif
# 134 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline int __ldcg(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 134
{ } 
#endif
# 135 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline long long __ldcg(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 135
{ } 
#endif
# 136 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline char2 __ldcg(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 136
{ } 
#endif
# 137 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline char4 __ldcg(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 137
{ } 
#endif
# 138 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline short2 __ldcg(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 138
{ } 
#endif
# 139 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline short4 __ldcg(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 139
{ } 
#endif
# 140 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline int2 __ldcg(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 140
{ } 
#endif
# 141 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline int4 __ldcg(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 141
{ } 
#endif
# 142 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline longlong2 __ldcg(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 142
{ } 
#endif
# 144 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned char __ldcg(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 144
{ } 
#endif
# 145 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned short __ldcg(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 145
{ } 
#endif
# 146 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __ldcg(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 146
{ } 
#endif
# 147 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned long long __ldcg(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 147
{ } 
#endif
# 148 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline uchar2 __ldcg(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 148
{ } 
#endif
# 149 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline uchar4 __ldcg(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 149
{ } 
#endif
# 150 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline ushort2 __ldcg(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 150
{ } 
#endif
# 151 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline ushort4 __ldcg(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 151
{ } 
#endif
# 152 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline uint2 __ldcg(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 152
{ } 
#endif
# 153 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline uint4 __ldcg(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 153
{ } 
#endif
# 154 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline ulonglong2 __ldcg(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 154
{ } 
#endif
# 156 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline float __ldcg(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 156
{ } 
#endif
# 157 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline double __ldcg(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 157
{ } 
#endif
# 158 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline float2 __ldcg(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 158
{ } 
#endif
# 159 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline float4 __ldcg(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 159
{ } 
#endif
# 160 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline double2 __ldcg(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 160
{ } 
#endif
# 164 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline long __ldca(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 164
{ } 
#endif
# 165 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned long __ldca(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 165
{ } 
#endif
# 167 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline char __ldca(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 167
{ } 
#endif
# 168 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline signed char __ldca(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 168
{ } 
#endif
# 169 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline short __ldca(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 169
{ } 
#endif
# 170 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline int __ldca(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 170
{ } 
#endif
# 171 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline long long __ldca(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 171
{ } 
#endif
# 172 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline char2 __ldca(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 172
{ } 
#endif
# 173 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline char4 __ldca(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 173
{ } 
#endif
# 174 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline short2 __ldca(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 174
{ } 
#endif
# 175 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline short4 __ldca(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 175
{ } 
#endif
# 176 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline int2 __ldca(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 176
{ } 
#endif
# 177 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline int4 __ldca(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 177
{ } 
#endif
# 178 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline longlong2 __ldca(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 178
{ } 
#endif
# 180 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned char __ldca(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 180
{ } 
#endif
# 181 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned short __ldca(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 181
{ } 
#endif
# 182 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __ldca(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 182
{ } 
#endif
# 183 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned long long __ldca(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 183
{ } 
#endif
# 184 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline uchar2 __ldca(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 184
{ } 
#endif
# 185 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline uchar4 __ldca(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 185
{ } 
#endif
# 186 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline ushort2 __ldca(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 186
{ } 
#endif
# 187 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline ushort4 __ldca(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 187
{ } 
#endif
# 188 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline uint2 __ldca(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 188
{ } 
#endif
# 189 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline uint4 __ldca(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 189
{ } 
#endif
# 190 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline ulonglong2 __ldca(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 190
{ } 
#endif
# 192 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline float __ldca(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 192
{ } 
#endif
# 193 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline double __ldca(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 193
{ } 
#endif
# 194 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline float2 __ldca(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 194
{ } 
#endif
# 195 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline float4 __ldca(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 195
{ } 
#endif
# 196 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline double2 __ldca(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 196
{ } 
#endif
# 200 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline long __ldcs(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 200
{ } 
#endif
# 201 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned long __ldcs(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 201
{ } 
#endif
# 203 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline char __ldcs(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 203
{ } 
#endif
# 204 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline signed char __ldcs(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 204
{ } 
#endif
# 205 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline short __ldcs(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 205
{ } 
#endif
# 206 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline int __ldcs(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 206
{ } 
#endif
# 207 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline long long __ldcs(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 207
{ } 
#endif
# 208 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline char2 __ldcs(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 208
{ } 
#endif
# 209 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline char4 __ldcs(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 209
{ } 
#endif
# 210 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline short2 __ldcs(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 210
{ } 
#endif
# 211 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline short4 __ldcs(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 211
{ } 
#endif
# 212 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline int2 __ldcs(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 212
{ } 
#endif
# 213 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline int4 __ldcs(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 213
{ } 
#endif
# 214 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline longlong2 __ldcs(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 214
{ } 
#endif
# 216 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned char __ldcs(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 216
{ } 
#endif
# 217 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned short __ldcs(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 217
{ } 
#endif
# 218 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __ldcs(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 218
{ } 
#endif
# 219 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned long long __ldcs(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 219
{ } 
#endif
# 220 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline uchar2 __ldcs(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 220
{ } 
#endif
# 221 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline uchar4 __ldcs(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 221
{ } 
#endif
# 222 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline ushort2 __ldcs(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 222
{ } 
#endif
# 223 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline ushort4 __ldcs(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 223
{ } 
#endif
# 224 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline uint2 __ldcs(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 224
{ } 
#endif
# 225 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline uint4 __ldcs(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 225
{ } 
#endif
# 226 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline ulonglong2 __ldcs(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 226
{ } 
#endif
# 228 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline float __ldcs(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 228
{ } 
#endif
# 229 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline double __ldcs(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 229
{ } 
#endif
# 230 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline float2 __ldcs(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 230
{ } 
#endif
# 231 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline float4 __ldcs(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 231
{ } 
#endif
# 232 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline double2 __ldcs(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 232
{ } 
#endif
# 236 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline long __ldlu(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 236
{ } 
#endif
# 237 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned long __ldlu(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 237
{ } 
#endif
# 239 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline char __ldlu(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 239
{ } 
#endif
# 240 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline signed char __ldlu(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 240
{ } 
#endif
# 241 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline short __ldlu(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 241
{ } 
#endif
# 242 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline int __ldlu(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 242
{ } 
#endif
# 243 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline long long __ldlu(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 243
{ } 
#endif
# 244 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline char2 __ldlu(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 244
{ } 
#endif
# 245 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline char4 __ldlu(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 245
{ } 
#endif
# 246 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline short2 __ldlu(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 246
{ } 
#endif
# 247 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline short4 __ldlu(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 247
{ } 
#endif
# 248 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline int2 __ldlu(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 248
{ } 
#endif
# 249 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline int4 __ldlu(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 249
{ } 
#endif
# 250 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline longlong2 __ldlu(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 250
{ } 
#endif
# 252 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned char __ldlu(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 252
{ } 
#endif
# 253 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned short __ldlu(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 253
{ } 
#endif
# 254 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __ldlu(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 254
{ } 
#endif
# 255 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned long long __ldlu(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 255
{ } 
#endif
# 256 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline uchar2 __ldlu(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 256
{ } 
#endif
# 257 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline uchar4 __ldlu(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 257
{ } 
#endif
# 258 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline ushort2 __ldlu(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 258
{ } 
#endif
# 259 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline ushort4 __ldlu(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 259
{ } 
#endif
# 260 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline uint2 __ldlu(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 260
{ } 
#endif
# 261 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline uint4 __ldlu(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 261
{ } 
#endif
# 262 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline ulonglong2 __ldlu(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 262
{ } 
#endif
# 264 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline float __ldlu(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 264
{ } 
#endif
# 265 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline double __ldlu(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 265
{ } 
#endif
# 266 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline float2 __ldlu(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 266
{ } 
#endif
# 267 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline float4 __ldlu(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 267
{ } 
#endif
# 268 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline double2 __ldlu(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 268
{ } 
#endif
# 272 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline long __ldcv(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 272
{ } 
#endif
# 273 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned long __ldcv(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 273
{ } 
#endif
# 275 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline char __ldcv(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 275
{ } 
#endif
# 276 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline signed char __ldcv(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 276
{ } 
#endif
# 277 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline short __ldcv(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 277
{ } 
#endif
# 278 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline int __ldcv(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 278
{ } 
#endif
# 279 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline long long __ldcv(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 279
{ } 
#endif
# 280 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline char2 __ldcv(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 280
{ } 
#endif
# 281 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline char4 __ldcv(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 281
{ } 
#endif
# 282 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline short2 __ldcv(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 282
{ } 
#endif
# 283 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline short4 __ldcv(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 283
{ } 
#endif
# 284 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline int2 __ldcv(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 284
{ } 
#endif
# 285 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline int4 __ldcv(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 285
{ } 
#endif
# 286 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline longlong2 __ldcv(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 286
{ } 
#endif
# 288 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned char __ldcv(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 288
{ } 
#endif
# 289 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned short __ldcv(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 289
{ } 
#endif
# 290 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __ldcv(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 290
{ } 
#endif
# 291 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned long long __ldcv(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 291
{ } 
#endif
# 292 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline uchar2 __ldcv(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 292
{ } 
#endif
# 293 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline uchar4 __ldcv(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 293
{ } 
#endif
# 294 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline ushort2 __ldcv(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 294
{ } 
#endif
# 295 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline ushort4 __ldcv(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 295
{ } 
#endif
# 296 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline uint2 __ldcv(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 296
{ } 
#endif
# 297 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline uint4 __ldcv(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 297
{ } 
#endif
# 298 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline ulonglong2 __ldcv(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 298
{ } 
#endif
# 300 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline float __ldcv(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 300
{ } 
#endif
# 301 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline double __ldcv(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 301
{ } 
#endif
# 302 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline float2 __ldcv(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 302
{ } 
#endif
# 303 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline float4 __ldcv(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 303
{ } 
#endif
# 304 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline double2 __ldcv(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 304
{ } 
#endif
# 308 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwb(long *ptr, long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 308
{ } 
#endif
# 309 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwb(unsigned long *ptr, unsigned long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 309
{ } 
#endif
# 311 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwb(char *ptr, char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 311
{ } 
#endif
# 312 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwb(signed char *ptr, signed char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 312
{ } 
#endif
# 313 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwb(short *ptr, short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 313
{ } 
#endif
# 314 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwb(int *ptr, int value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 314
{ } 
#endif
# 315 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwb(long long *ptr, long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 315
{ } 
#endif
# 316 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwb(char2 *ptr, char2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 316
{ } 
#endif
# 317 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwb(char4 *ptr, char4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 317
{ } 
#endif
# 318 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwb(short2 *ptr, short2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 318
{ } 
#endif
# 319 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwb(short4 *ptr, short4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 319
{ } 
#endif
# 320 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwb(int2 *ptr, int2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 320
{ } 
#endif
# 321 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwb(int4 *ptr, int4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 321
{ } 
#endif
# 322 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwb(longlong2 *ptr, longlong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 322
{ } 
#endif
# 324 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwb(unsigned char *ptr, unsigned char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 324
{ } 
#endif
# 325 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwb(unsigned short *ptr, unsigned short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 325
{ } 
#endif
# 326 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwb(unsigned *ptr, unsigned value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 326
{ } 
#endif
# 327 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwb(unsigned long long *ptr, unsigned long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 327
{ } 
#endif
# 328 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwb(uchar2 *ptr, uchar2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 328
{ } 
#endif
# 329 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwb(uchar4 *ptr, uchar4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 329
{ } 
#endif
# 330 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwb(ushort2 *ptr, ushort2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 330
{ } 
#endif
# 331 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwb(ushort4 *ptr, ushort4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 331
{ } 
#endif
# 332 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwb(uint2 *ptr, uint2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 332
{ } 
#endif
# 333 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwb(uint4 *ptr, uint4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 333
{ } 
#endif
# 334 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwb(ulonglong2 *ptr, ulonglong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 334
{ } 
#endif
# 336 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwb(float *ptr, float value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 336
{ } 
#endif
# 337 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwb(double *ptr, double value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 337
{ } 
#endif
# 338 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwb(float2 *ptr, float2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 338
{ } 
#endif
# 339 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwb(float4 *ptr, float4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 339
{ } 
#endif
# 340 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwb(double2 *ptr, double2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 340
{ } 
#endif
# 344 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcg(long *ptr, long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 344
{ } 
#endif
# 345 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcg(unsigned long *ptr, unsigned long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 345
{ } 
#endif
# 347 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcg(char *ptr, char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 347
{ } 
#endif
# 348 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcg(signed char *ptr, signed char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 348
{ } 
#endif
# 349 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcg(short *ptr, short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 349
{ } 
#endif
# 350 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcg(int *ptr, int value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 350
{ } 
#endif
# 351 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcg(long long *ptr, long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 351
{ } 
#endif
# 352 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcg(char2 *ptr, char2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 352
{ } 
#endif
# 353 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcg(char4 *ptr, char4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 353
{ } 
#endif
# 354 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcg(short2 *ptr, short2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 354
{ } 
#endif
# 355 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcg(short4 *ptr, short4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 355
{ } 
#endif
# 356 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcg(int2 *ptr, int2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 356
{ } 
#endif
# 357 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcg(int4 *ptr, int4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 357
{ } 
#endif
# 358 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcg(longlong2 *ptr, longlong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 358
{ } 
#endif
# 360 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcg(unsigned char *ptr, unsigned char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 360
{ } 
#endif
# 361 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcg(unsigned short *ptr, unsigned short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 361
{ } 
#endif
# 362 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcg(unsigned *ptr, unsigned value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 362
{ } 
#endif
# 363 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcg(unsigned long long *ptr, unsigned long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 363
{ } 
#endif
# 364 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcg(uchar2 *ptr, uchar2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 364
{ } 
#endif
# 365 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcg(uchar4 *ptr, uchar4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 365
{ } 
#endif
# 366 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcg(ushort2 *ptr, ushort2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 366
{ } 
#endif
# 367 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcg(ushort4 *ptr, ushort4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 367
{ } 
#endif
# 368 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcg(uint2 *ptr, uint2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 368
{ } 
#endif
# 369 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcg(uint4 *ptr, uint4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 369
{ } 
#endif
# 370 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcg(ulonglong2 *ptr, ulonglong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 370
{ } 
#endif
# 372 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcg(float *ptr, float value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 372
{ } 
#endif
# 373 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcg(double *ptr, double value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 373
{ } 
#endif
# 374 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcg(float2 *ptr, float2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 374
{ } 
#endif
# 375 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcg(float4 *ptr, float4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 375
{ } 
#endif
# 376 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcg(double2 *ptr, double2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 376
{ } 
#endif
# 380 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcs(long *ptr, long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 380
{ } 
#endif
# 381 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcs(unsigned long *ptr, unsigned long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 381
{ } 
#endif
# 383 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcs(char *ptr, char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 383
{ } 
#endif
# 384 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcs(signed char *ptr, signed char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 384
{ } 
#endif
# 385 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcs(short *ptr, short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 385
{ } 
#endif
# 386 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcs(int *ptr, int value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 386
{ } 
#endif
# 387 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcs(long long *ptr, long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 387
{ } 
#endif
# 388 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcs(char2 *ptr, char2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 388
{ } 
#endif
# 389 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcs(char4 *ptr, char4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 389
{ } 
#endif
# 390 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcs(short2 *ptr, short2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 390
{ } 
#endif
# 391 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcs(short4 *ptr, short4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 391
{ } 
#endif
# 392 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcs(int2 *ptr, int2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 392
{ } 
#endif
# 393 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcs(int4 *ptr, int4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 393
{ } 
#endif
# 394 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcs(longlong2 *ptr, longlong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 394
{ } 
#endif
# 396 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcs(unsigned char *ptr, unsigned char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 396
{ } 
#endif
# 397 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcs(unsigned short *ptr, unsigned short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 397
{ } 
#endif
# 398 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcs(unsigned *ptr, unsigned value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 398
{ } 
#endif
# 399 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcs(unsigned long long *ptr, unsigned long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 399
{ } 
#endif
# 400 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcs(uchar2 *ptr, uchar2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 400
{ } 
#endif
# 401 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcs(uchar4 *ptr, uchar4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 401
{ } 
#endif
# 402 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcs(ushort2 *ptr, ushort2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 402
{ } 
#endif
# 403 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcs(ushort4 *ptr, ushort4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 403
{ } 
#endif
# 404 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcs(uint2 *ptr, uint2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 404
{ } 
#endif
# 405 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcs(uint4 *ptr, uint4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 405
{ } 
#endif
# 406 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcs(ulonglong2 *ptr, ulonglong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 406
{ } 
#endif
# 408 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcs(float *ptr, float value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 408
{ } 
#endif
# 409 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcs(double *ptr, double value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 409
{ } 
#endif
# 410 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcs(float2 *ptr, float2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 410
{ } 
#endif
# 411 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcs(float4 *ptr, float4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 411
{ } 
#endif
# 412 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stcs(double2 *ptr, double2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 412
{ } 
#endif
# 416 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwt(long *ptr, long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 416
{ } 
#endif
# 417 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwt(unsigned long *ptr, unsigned long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 417
{ } 
#endif
# 419 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwt(char *ptr, char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 419
{ } 
#endif
# 420 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwt(signed char *ptr, signed char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 420
{ } 
#endif
# 421 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwt(short *ptr, short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 421
{ } 
#endif
# 422 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwt(int *ptr, int value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 422
{ } 
#endif
# 423 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwt(long long *ptr, long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 423
{ } 
#endif
# 424 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwt(char2 *ptr, char2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 424
{ } 
#endif
# 425 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwt(char4 *ptr, char4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 425
{ } 
#endif
# 426 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwt(short2 *ptr, short2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 426
{ } 
#endif
# 427 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwt(short4 *ptr, short4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 427
{ } 
#endif
# 428 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwt(int2 *ptr, int2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 428
{ } 
#endif
# 429 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwt(int4 *ptr, int4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 429
{ } 
#endif
# 430 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwt(longlong2 *ptr, longlong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 430
{ } 
#endif
# 432 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwt(unsigned char *ptr, unsigned char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 432
{ } 
#endif
# 433 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwt(unsigned short *ptr, unsigned short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 433
{ } 
#endif
# 434 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwt(unsigned *ptr, unsigned value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 434
{ } 
#endif
# 435 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwt(unsigned long long *ptr, unsigned long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 435
{ } 
#endif
# 436 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwt(uchar2 *ptr, uchar2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 436
{ } 
#endif
# 437 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwt(uchar4 *ptr, uchar4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 437
{ } 
#endif
# 438 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwt(ushort2 *ptr, ushort2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 438
{ } 
#endif
# 439 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwt(ushort4 *ptr, ushort4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 439
{ } 
#endif
# 440 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwt(uint2 *ptr, uint2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 440
{ } 
#endif
# 441 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwt(uint4 *ptr, uint4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 441
{ } 
#endif
# 442 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwt(ulonglong2 *ptr, ulonglong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 442
{ } 
#endif
# 444 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwt(float *ptr, float value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 444
{ } 
#endif
# 445 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwt(double *ptr, double value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 445
{ } 
#endif
# 446 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwt(float2 *ptr, float2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 446
{ } 
#endif
# 447 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwt(float4 *ptr, float4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 447
{ } 
#endif
# 448 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline void __stwt(double2 *ptr, double2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 448
{ } 
#endif
# 465 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __funnelshift_l(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
# 465
{ } 
#endif
# 477 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __funnelshift_lc(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
# 477
{ } 
#endif
# 490 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __funnelshift_r(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
# 490
{ } 
#endif
# 502 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_32_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __funnelshift_rc(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
# 502
{ } 
#endif
# 102 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_61_intrinsics.h" 3
__attribute__((unused)) static inline int __dp2a_lo(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 102
{ } 
#endif
# 113 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_61_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __dp2a_lo(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 113
{ } 
#endif
# 125 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_61_intrinsics.h" 3
__attribute__((unused)) static inline int __dp2a_lo(short2 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 125
{ } 
#endif
# 136 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_61_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __dp2a_lo(ushort2 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 136
{ } 
#endif
# 148 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_61_intrinsics.h" 3
__attribute__((unused)) static inline int __dp2a_hi(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 148
{ } 
#endif
# 159 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_61_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __dp2a_hi(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 159
{ } 
#endif
# 171 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_61_intrinsics.h" 3
__attribute__((unused)) static inline int __dp2a_hi(short2 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 171
{ } 
#endif
# 182 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_61_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __dp2a_hi(ushort2 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 182
{ } 
#endif
# 197 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_61_intrinsics.h" 3
__attribute__((unused)) static inline int __dp4a(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 197
{ } 
#endif
# 206 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_61_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __dp4a(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 206
{ } 
#endif
# 216 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_61_intrinsics.h" 3
__attribute__((unused)) static inline int __dp4a(char4 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 216
{ } 
#endif
# 225 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/sm_61_intrinsics.h" 3
__attribute__((unused)) static inline unsigned __dp4a(uchar4 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 225
{ } 
#endif
# 98 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_70_rt.h" 3
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 98
{ } 
#endif
# 99 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_70_rt.h" 3
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, int value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 99
{ } 
#endif
# 100 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_70_rt.h" 3
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, unsigned long value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 100
{ } 
#endif
# 101 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_70_rt.h" 3
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, long value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 101
{ } 
#endif
# 102 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_70_rt.h" 3
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, unsigned long long value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 102
{ } 
#endif
# 103 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_70_rt.h" 3
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, long long value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 103
{ } 
#endif
# 104 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_70_rt.h" 3
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, float value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 104
{ } 
#endif
# 105 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_70_rt.h" 3
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, double value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 105
{ } 
#endif
# 107 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_70_rt.h" 3
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, unsigned value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 107
{ } 
#endif
# 108 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_70_rt.h" 3
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, int value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 108
{ } 
#endif
# 109 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_70_rt.h" 3
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, unsigned long value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 109
{ } 
#endif
# 110 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_70_rt.h" 3
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, long value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 110
{ } 
#endif
# 111 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_70_rt.h" 3
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, unsigned long long value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 111
{ } 
#endif
# 112 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_70_rt.h" 3
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, long long value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 112
{ } 
#endif
# 113 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_70_rt.h" 3
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, float value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 113
{ } 
#endif
# 114 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_70_rt.h" 3
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, double value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 114
{ } 
#endif
# 116 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_70_rt.h" 3
__attribute__((unused)) static inline void __nanosleep(unsigned ns) {int volatile ___ = 1;(void)ns;::exit(___);}
#if 0
# 116
{ } 
#endif
# 118 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_70_rt.h" 3
__attribute__((unused)) static inline unsigned short atomicCAS(unsigned short *address, unsigned short compare, unsigned short val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 118
{ } 
#endif
# 97 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_80_rt.h" 3
__attribute__((unused)) static inline unsigned __reduce_add_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 97
{ } 
#endif
# 98 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_80_rt.h" 3
__attribute__((unused)) static inline unsigned __reduce_min_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 98
{ } 
#endif
# 99 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_80_rt.h" 3
__attribute__((unused)) static inline unsigned __reduce_max_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 99
{ } 
#endif
# 101 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_80_rt.h" 3
__attribute__((unused)) static inline int __reduce_add_sync(unsigned mask, int value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 101
{ } 
#endif
# 102 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_80_rt.h" 3
__attribute__((unused)) static inline int __reduce_min_sync(unsigned mask, int value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 102
{ } 
#endif
# 103 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_80_rt.h" 3
__attribute__((unused)) static inline int __reduce_max_sync(unsigned mask, int value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 103
{ } 
#endif
# 105 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_80_rt.h" 3
__attribute__((unused)) static inline unsigned __reduce_and_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 105
{ } 
#endif
# 106 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_80_rt.h" 3
__attribute__((unused)) static inline unsigned __reduce_or_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 106
{ } 
#endif
# 107 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_80_rt.h" 3
__attribute__((unused)) static inline unsigned __reduce_xor_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 107
{ } 
#endif
# 112 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_80_rt.h" 3
extern "C" {
# 113
__attribute__((unused)) inline void *__nv_associate_access_property(const void *ptr, unsigned long long 
# 114
property) {int volatile ___ = 1;(void)ptr;(void)property;
# 118
::exit(___);}
#if 0
# 114
{ 
# 115
__attribute__((unused)) extern void *__nv_associate_access_property_impl(const void *, unsigned long long); 
# 117
return __nv_associate_access_property_impl(ptr, property); 
# 118
} 
#endif
# 120 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_80_rt.h" 3
__attribute__((unused)) inline void __nv_memcpy_async_shared_global_4(void *dst, const void *
# 121
src, unsigned 
# 122
src_size) {int volatile ___ = 1;(void)dst;(void)src;(void)src_size;
# 127
::exit(___);}
#if 0
# 122
{ 
# 123
__attribute__((unused)) extern void __nv_memcpy_async_shared_global_4_impl(void *, const void *, unsigned); 
# 126
__nv_memcpy_async_shared_global_4_impl(dst, src, src_size); 
# 127
} 
#endif
# 129 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_80_rt.h" 3
__attribute__((unused)) inline void __nv_memcpy_async_shared_global_8(void *dst, const void *
# 130
src, unsigned 
# 131
src_size) {int volatile ___ = 1;(void)dst;(void)src;(void)src_size;
# 136
::exit(___);}
#if 0
# 131
{ 
# 132
__attribute__((unused)) extern void __nv_memcpy_async_shared_global_8_impl(void *, const void *, unsigned); 
# 135
__nv_memcpy_async_shared_global_8_impl(dst, src, src_size); 
# 136
} 
#endif
# 138 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_80_rt.h" 3
__attribute__((unused)) inline void __nv_memcpy_async_shared_global_16(void *dst, const void *
# 139
src, unsigned 
# 140
src_size) {int volatile ___ = 1;(void)dst;(void)src;(void)src_size;
# 145
::exit(___);}
#if 0
# 140
{ 
# 141
__attribute__((unused)) extern void __nv_memcpy_async_shared_global_16_impl(void *, const void *, unsigned); 
# 144
__nv_memcpy_async_shared_global_16_impl(dst, src, src_size); 
# 145
} 
#endif
# 147 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_80_rt.h" 3
}
# 92 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_90_rt.h" 3
__attribute__((unused)) static inline unsigned __isCtaShared(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 92
{ } 
#endif
# 93 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_90_rt.h" 3
__attribute__((unused)) static inline unsigned __isClusterShared(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 93
{ } 
#endif
# 94 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_90_rt.h" 3
__attribute__((unused)) static inline void *__cluster_map_shared_rank(const void *ptr, unsigned target_block_rank) {int volatile ___ = 1;(void)ptr;(void)target_block_rank;::exit(___);}
#if 0
# 94
{ } 
#endif
# 95 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_90_rt.h" 3
__attribute__((unused)) static inline unsigned __cluster_query_shared_rank(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 95
{ } 
#endif
# 96 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_90_rt.h" 3
__attribute__((unused)) static inline uint2 __cluster_map_shared_multicast(const void *ptr, unsigned cluster_cta_mask) {int volatile ___ = 1;(void)ptr;(void)cluster_cta_mask;::exit(___);}
#if 0
# 96
{ } 
#endif
# 97 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_90_rt.h" 3
__attribute__((unused)) static inline unsigned __clusterDimIsSpecified() {int volatile ___ = 1;::exit(___);}
#if 0
# 97
{ } 
#endif
# 98 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_90_rt.h" 3
__attribute__((unused)) static inline dim3 __clusterDim() {int volatile ___ = 1;::exit(___);}
#if 0
# 98
{ } 
#endif
# 99 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_90_rt.h" 3
__attribute__((unused)) static inline dim3 __clusterRelativeBlockIdx() {int volatile ___ = 1;::exit(___);}
#if 0
# 99
{ } 
#endif
# 100 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_90_rt.h" 3
__attribute__((unused)) static inline dim3 __clusterGridDimInClusters() {int volatile ___ = 1;::exit(___);}
#if 0
# 100
{ } 
#endif
# 101 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_90_rt.h" 3
__attribute__((unused)) static inline dim3 __clusterIdx() {int volatile ___ = 1;::exit(___);}
#if 0
# 101
{ } 
#endif
# 102 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_90_rt.h" 3
__attribute__((unused)) static inline unsigned __clusterRelativeBlockRank() {int volatile ___ = 1;::exit(___);}
#if 0
# 102
{ } 
#endif
# 103 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_90_rt.h" 3
__attribute__((unused)) static inline unsigned __clusterSizeInBlocks() {int volatile ___ = 1;::exit(___);}
#if 0
# 103
{ } 
#endif
# 104 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_90_rt.h" 3
__attribute__((unused)) static inline void __cluster_barrier_arrive() {int volatile ___ = 1;::exit(___);}
#if 0
# 104
{ } 
#endif
# 105 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_90_rt.h" 3
__attribute__((unused)) static inline void __cluster_barrier_arrive_relaxed() {int volatile ___ = 1;::exit(___);}
#if 0
# 105
{ } 
#endif
# 106 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_90_rt.h" 3
__attribute__((unused)) static inline void __cluster_barrier_wait() {int volatile ___ = 1;::exit(___);}
#if 0
# 106
{ } 
#endif
# 107 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_90_rt.h" 3
__attribute__((unused)) static inline void __threadfence_cluster() {int volatile ___ = 1;::exit(___);}
#if 0
# 107
{ } 
#endif
# 109 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_90_rt.h" 3
__attribute__((unused)) static inline float2 atomicAdd(float2 *__address, float2 val) {int volatile ___ = 1;(void)__address;(void)val;::exit(___);}
#if 0
# 109
{ } 
#endif
# 110 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_90_rt.h" 3
__attribute__((unused)) static inline float2 atomicAdd_block(float2 *__address, float2 val) {int volatile ___ = 1;(void)__address;(void)val;::exit(___);}
#if 0
# 110
{ } 
#endif
# 111 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_90_rt.h" 3
__attribute__((unused)) static inline float2 atomicAdd_system(float2 *__address, float2 val) {int volatile ___ = 1;(void)__address;(void)val;::exit(___);}
#if 0
# 111
{ } 
#endif
# 112 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_90_rt.h" 3
__attribute__((unused)) static inline float4 atomicAdd(float4 *__address, float4 val) {int volatile ___ = 1;(void)__address;(void)val;::exit(___);}
#if 0
# 112
{ } 
#endif
# 113 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_90_rt.h" 3
__attribute__((unused)) static inline float4 atomicAdd_block(float4 *__address, float4 val) {int volatile ___ = 1;(void)__address;(void)val;::exit(___);}
#if 0
# 113
{ } 
#endif
# 114 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_90_rt.h" 3
__attribute__((unused)) static inline float4 atomicAdd_system(float4 *__address, float4 val) {int volatile ___ = 1;(void)__address;(void)val;::exit(___);}
#if 0
# 114
{ } 
#endif
# 125 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_90_rt.h" 3
extern "C" {
# 132
}
# 139
template< bool __b, class _T> 
# 140
struct __nv_atomic_enable_if { }; 
# 142
template< class _T> 
# 143
struct __nv_atomic_enable_if< true, _T>  { typedef _T __type; }; 
# 153 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_90_rt.h" 3
template< class _T> 
# 154
struct __nv_atomic_triv_cp_helper { 
# 161
static const bool __val = __is_trivially_copyable(_T); 
# 166
}; 
# 201 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_90_rt.h" 3
template< class _T> __attribute__((unused)) static inline typename __nv_atomic_enable_if< (sizeof(_T) == (16)) && (__alignof__(_T) >= (16)) && __nv_atomic_triv_cp_helper< _T> ::__val, _T> ::__type 
# 203
atomicCAS(_T *__address, _T __compare, _T __val) {int volatile ___ = 1;(void)__address;(void)__compare;(void)__val;
# 210
::exit(___);}
#if 0
# 203
{ 
# 204
union _U { _T __ret; _U() {int *volatile ___ = 0;::free(___);}
#if 0
# 204
{ } 
#endif
# 204 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_90_rt.h" 3
}; _U __u; 
# 205
__u128AtomicCAS((void *)__address, (void *)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(__compare)))), (void *)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(__val)))), (void *)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(__u.__ret))))); 
# 209
return __u.__ret; 
# 210
} 
#endif
# 212 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_90_rt.h" 3
template< class _T> __attribute__((unused)) static inline typename __nv_atomic_enable_if< (sizeof(_T) == (16)) && (__alignof__(_T) >= (16)) && __nv_atomic_triv_cp_helper< _T> ::__val, _T> ::__type 
# 214
atomicCAS_block(_T *__address, _T __compare, _T __val) {int volatile ___ = 1;(void)__address;(void)__compare;(void)__val;
# 221
::exit(___);}
#if 0
# 214
{ 
# 215
union _U { _T __ret; _U() {int *volatile ___ = 0;::free(___);}
#if 0
# 215
{ } 
#endif
# 215 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_90_rt.h" 3
}; _U __u; 
# 216
__u128AtomicCAS_block((void *)__address, (void *)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(__compare)))), (void *)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(__val)))), (void *)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(__u.__ret))))); 
# 220
return __u.__ret; 
# 221
} 
#endif
# 223 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_90_rt.h" 3
template< class _T> __attribute__((unused)) static inline typename __nv_atomic_enable_if< (sizeof(_T) == (16)) && (__alignof__(_T) >= (16)) && __nv_atomic_triv_cp_helper< _T> ::__val, _T> ::__type 
# 225
atomicCAS_system(_T *__address, _T __compare, _T __val) {int volatile ___ = 1;(void)__address;(void)__compare;(void)__val;
# 232
::exit(___);}
#if 0
# 225
{ 
# 226
union _U { _T __ret; _U() {int *volatile ___ = 0;::free(___);}
#if 0
# 226
{ } 
#endif
# 226 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_90_rt.h" 3
}; _U __u; 
# 227
__u128AtomicCAS_system((void *)__address, (void *)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(__compare)))), (void *)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(__val)))), (void *)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(__u.__ret))))); 
# 231
return __u.__ret; 
# 232
} 
#endif
# 234 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_90_rt.h" 3
template< class _T> __attribute__((unused)) static inline typename __nv_atomic_enable_if< (sizeof(_T) == (16)) && (__alignof__(_T) >= (16)) && __nv_atomic_triv_cp_helper< _T> ::__val, _T> ::__type 
# 236
atomicExch(_T *__address, _T __val) {int volatile ___ = 1;(void)__address;(void)__val;
# 242
::exit(___);}
#if 0
# 236
{ 
# 237
union _U { _T __ret; _U() {int *volatile ___ = 0;::free(___);}
#if 0
# 237
{ } 
#endif
# 237 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_90_rt.h" 3
}; _U __u; 
# 238
__u128AtomicExch((void *)__address, (void *)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(__val)))), (void *)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(__u.__ret))))); 
# 241
return __u.__ret; 
# 242
} 
#endif
# 244 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_90_rt.h" 3
template< class _T> __attribute__((unused)) static inline typename __nv_atomic_enable_if< (sizeof(_T) == (16)) && (__alignof__(_T) >= (16)) && __nv_atomic_triv_cp_helper< _T> ::__val, _T> ::__type 
# 246
atomicExch_block(_T *__address, _T __val) {int volatile ___ = 1;(void)__address;(void)__val;
# 252
::exit(___);}
#if 0
# 246
{ 
# 247
union _U { _T __ret; _U() {int *volatile ___ = 0;::free(___);}
#if 0
# 247
{ } 
#endif
# 247 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_90_rt.h" 3
}; _U __u; 
# 248
__u128AtomicExch_block((void *)__address, (void *)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(__val)))), (void *)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(__u.__ret))))); 
# 251
return __u.__ret; 
# 252
} 
#endif
# 254 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_90_rt.h" 3
template< class _T> __attribute__((unused)) static inline typename __nv_atomic_enable_if< (sizeof(_T) == (16)) && (__alignof__(_T) >= (16)) && __nv_atomic_triv_cp_helper< _T> ::__val, _T> ::__type 
# 256
atomicExch_system(_T *__address, _T __val) {int volatile ___ = 1;(void)__address;(void)__val;
# 262
::exit(___);}
#if 0
# 256
{ 
# 257
union _U { _T __ret; _U() {int *volatile ___ = 0;::free(___);}
#if 0
# 257
{ } 
#endif
# 257 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/sm_90_rt.h" 3
}; _U __u; 
# 258
__u128AtomicExch_system((void *)__address, (void *)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(__val)))), (void *)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(__u.__ret))))); 
# 261
return __u.__ret; 
# 262
} 
#endif
# 65 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> struct __nv_itex_trait { }; 
# 66
template<> struct __nv_itex_trait< char>  { typedef void type; }; 
# 67
template<> struct __nv_itex_trait< signed char>  { typedef void type; }; 
# 68
template<> struct __nv_itex_trait< char1>  { typedef void type; }; 
# 69
template<> struct __nv_itex_trait< char2>  { typedef void type; }; 
# 70
template<> struct __nv_itex_trait< char4>  { typedef void type; }; 
# 71
template<> struct __nv_itex_trait< unsigned char>  { typedef void type; }; 
# 72
template<> struct __nv_itex_trait< uchar1>  { typedef void type; }; 
# 73
template<> struct __nv_itex_trait< uchar2>  { typedef void type; }; 
# 74
template<> struct __nv_itex_trait< uchar4>  { typedef void type; }; 
# 75
template<> struct __nv_itex_trait< short>  { typedef void type; }; 
# 76
template<> struct __nv_itex_trait< short1>  { typedef void type; }; 
# 77
template<> struct __nv_itex_trait< short2>  { typedef void type; }; 
# 78
template<> struct __nv_itex_trait< short4>  { typedef void type; }; 
# 79
template<> struct __nv_itex_trait< unsigned short>  { typedef void type; }; 
# 80
template<> struct __nv_itex_trait< ushort1>  { typedef void type; }; 
# 81
template<> struct __nv_itex_trait< ushort2>  { typedef void type; }; 
# 82
template<> struct __nv_itex_trait< ushort4>  { typedef void type; }; 
# 83
template<> struct __nv_itex_trait< int>  { typedef void type; }; 
# 84
template<> struct __nv_itex_trait< int1>  { typedef void type; }; 
# 85
template<> struct __nv_itex_trait< int2>  { typedef void type; }; 
# 86
template<> struct __nv_itex_trait< int4>  { typedef void type; }; 
# 87
template<> struct __nv_itex_trait< unsigned>  { typedef void type; }; 
# 88
template<> struct __nv_itex_trait< uint1>  { typedef void type; }; 
# 89
template<> struct __nv_itex_trait< uint2>  { typedef void type; }; 
# 90
template<> struct __nv_itex_trait< uint4>  { typedef void type; }; 
# 101 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template<> struct __nv_itex_trait< float>  { typedef void type; }; 
# 102
template<> struct __nv_itex_trait< float1>  { typedef void type; }; 
# 103
template<> struct __nv_itex_trait< float2>  { typedef void type; }; 
# 104
template<> struct __nv_itex_trait< float4>  { typedef void type; }; 
# 108
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 109
tex1Dfetch(T *ptr, cudaTextureObject_t obj, int x) 
# 110
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;
# 112
::exit(___);}
#if 0
# 110
{ 
# 111
__nv_tex_surf_handler("__itex1Dfetch", ptr, obj, x); 
# 112
} 
#endif
# 114 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 115
tex1Dfetch(cudaTextureObject_t texObject, int x) 
# 116
{int volatile ___ = 1;(void)texObject;(void)x;
# 120
::exit(___);}
#if 0
# 116
{ 
# 117
T ret; 
# 118
tex1Dfetch(&ret, texObject, x); 
# 119
return ret; 
# 120
} 
#endif
# 122 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 123
tex1D(T *ptr, cudaTextureObject_t obj, float x) 
# 124
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;
# 126
::exit(___);}
#if 0
# 124
{ 
# 125
__nv_tex_surf_handler("__itex1D", ptr, obj, x); 
# 126
} 
#endif
# 129 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 130
tex1D(cudaTextureObject_t texObject, float x) 
# 131
{int volatile ___ = 1;(void)texObject;(void)x;
# 135
::exit(___);}
#if 0
# 131
{ 
# 132
T ret; 
# 133
tex1D(&ret, texObject, x); 
# 134
return ret; 
# 135
} 
#endif
# 138 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 139
tex2D(T *ptr, cudaTextureObject_t obj, float x, float y) 
# 140
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;
# 142
::exit(___);}
#if 0
# 140
{ 
# 141
__nv_tex_surf_handler("__itex2D", ptr, obj, x, y); 
# 142
} 
#endif
# 144 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 145
tex2D(cudaTextureObject_t texObject, float x, float y) 
# 146
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;
# 150
::exit(___);}
#if 0
# 146
{ 
# 147
T ret; 
# 148
tex2D(&ret, texObject, x, y); 
# 149
return ret; 
# 150
} 
#endif
# 153 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 154
tex2D(T *ptr, cudaTextureObject_t obj, float x, float y, bool *
# 155
isResident) 
# 156
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)isResident;
# 160
::exit(___);}
#if 0
# 156
{ 
# 157
unsigned char res; 
# 158
__nv_tex_surf_handler("__itex2D_sparse", ptr, obj, x, y, &res); 
# 159
(*isResident) = (res != 0); 
# 160
} 
#endif
# 162 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 163
tex2D(cudaTextureObject_t texObject, float x, float y, bool *isResident) 
# 164
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)isResident;
# 168
::exit(___);}
#if 0
# 164
{ 
# 165
T ret; 
# 166
tex2D(&ret, texObject, x, y, isResident); 
# 167
return ret; 
# 168
} 
#endif
# 173 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 174
tex3D(T *ptr, cudaTextureObject_t obj, float x, float y, float z) 
# 175
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;
# 177
::exit(___);}
#if 0
# 175
{ 
# 176
__nv_tex_surf_handler("__itex3D", ptr, obj, x, y, z); 
# 177
} 
#endif
# 179 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 180
tex3D(cudaTextureObject_t texObject, float x, float y, float z) 
# 181
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;
# 185
::exit(___);}
#if 0
# 181
{ 
# 182
T ret; 
# 183
tex3D(&ret, texObject, x, y, z); 
# 184
return ret; 
# 185
} 
#endif
# 188 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 189
tex3D(T *ptr, cudaTextureObject_t obj, float x, float y, float z, bool *
# 190
isResident) 
# 191
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)isResident;
# 195
::exit(___);}
#if 0
# 191
{ 
# 192
unsigned char res; 
# 193
__nv_tex_surf_handler("__itex3D_sparse", ptr, obj, x, y, z, &res); 
# 194
(*isResident) = (res != 0); 
# 195
} 
#endif
# 197 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 198
tex3D(cudaTextureObject_t texObject, float x, float y, float z, bool *isResident) 
# 199
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)isResident;
# 203
::exit(___);}
#if 0
# 199
{ 
# 200
T ret; 
# 201
tex3D(&ret, texObject, x, y, z, isResident); 
# 202
return ret; 
# 203
} 
#endif
# 207 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 208
tex1DLayered(T *ptr, cudaTextureObject_t obj, float x, int layer) 
# 209
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;
# 211
::exit(___);}
#if 0
# 209
{ 
# 210
__nv_tex_surf_handler("__itex1DLayered", ptr, obj, x, layer); 
# 211
} 
#endif
# 213 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 214
tex1DLayered(cudaTextureObject_t texObject, float x, int layer) 
# 215
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;
# 219
::exit(___);}
#if 0
# 215
{ 
# 216
T ret; 
# 217
tex1DLayered(&ret, texObject, x, layer); 
# 218
return ret; 
# 219
} 
#endif
# 221 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 222
tex2DLayered(T *ptr, cudaTextureObject_t obj, float x, float y, int layer) 
# 223
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;
# 225
::exit(___);}
#if 0
# 223
{ 
# 224
__nv_tex_surf_handler("__itex2DLayered", ptr, obj, x, y, layer); 
# 225
} 
#endif
# 227 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 228
tex2DLayered(cudaTextureObject_t texObject, float x, float y, int layer) 
# 229
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;
# 233
::exit(___);}
#if 0
# 229
{ 
# 230
T ret; 
# 231
tex2DLayered(&ret, texObject, x, y, layer); 
# 232
return ret; 
# 233
} 
#endif
# 236 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 237
tex2DLayered(T *ptr, cudaTextureObject_t obj, float x, float y, int layer, bool *isResident) 
# 238
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)isResident;
# 242
::exit(___);}
#if 0
# 238
{ 
# 239
unsigned char res; 
# 240
__nv_tex_surf_handler("__itex2DLayered_sparse", ptr, obj, x, y, layer, &res); 
# 241
(*isResident) = (res != 0); 
# 242
} 
#endif
# 244 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 245
tex2DLayered(cudaTextureObject_t texObject, float x, float y, int layer, bool *isResident) 
# 246
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)isResident;
# 250
::exit(___);}
#if 0
# 246
{ 
# 247
T ret; 
# 248
tex2DLayered(&ret, texObject, x, y, layer, isResident); 
# 249
return ret; 
# 250
} 
#endif
# 254 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 255
texCubemap(T *ptr, cudaTextureObject_t obj, float x, float y, float z) 
# 256
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;
# 258
::exit(___);}
#if 0
# 256
{ 
# 257
__nv_tex_surf_handler("__itexCubemap", ptr, obj, x, y, z); 
# 258
} 
#endif
# 261 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 262
texCubemap(cudaTextureObject_t texObject, float x, float y, float z) 
# 263
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;
# 267
::exit(___);}
#if 0
# 263
{ 
# 264
T ret; 
# 265
texCubemap(&ret, texObject, x, y, z); 
# 266
return ret; 
# 267
} 
#endif
# 270 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 271
texCubemapLayered(T *ptr, cudaTextureObject_t obj, float x, float y, float z, int layer) 
# 272
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)layer;
# 274
::exit(___);}
#if 0
# 272
{ 
# 273
__nv_tex_surf_handler("__itexCubemapLayered", ptr, obj, x, y, z, layer); 
# 274
} 
#endif
# 276 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 277
texCubemapLayered(cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 278
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 282
::exit(___);}
#if 0
# 278
{ 
# 279
T ret; 
# 280
texCubemapLayered(&ret, texObject, x, y, z, layer); 
# 281
return ret; 
# 282
} 
#endif
# 284 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 285
tex2Dgather(T *ptr, cudaTextureObject_t obj, float x, float y, int comp = 0) 
# 286
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)comp;
# 288
::exit(___);}
#if 0
# 286
{ 
# 287
__nv_tex_surf_handler("__itex2Dgather", ptr, obj, x, y, comp); 
# 288
} 
#endif
# 290 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 291
tex2Dgather(cudaTextureObject_t to, float x, float y, int comp = 0) 
# 292
{int volatile ___ = 1;(void)to;(void)x;(void)y;(void)comp;
# 296
::exit(___);}
#if 0
# 292
{ 
# 293
T ret; 
# 294
tex2Dgather(&ret, to, x, y, comp); 
# 295
return ret; 
# 296
} 
#endif
# 299 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 300
tex2Dgather(T *ptr, cudaTextureObject_t obj, float x, float y, bool *isResident, int comp = 0) 
# 301
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)isResident;(void)comp;
# 305
::exit(___);}
#if 0
# 301
{ 
# 302
unsigned char res; 
# 303
__nv_tex_surf_handler("__itex2Dgather_sparse", ptr, obj, x, y, comp, &res); 
# 304
(*isResident) = (res != 0); 
# 305
} 
#endif
# 307 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 308
tex2Dgather(cudaTextureObject_t to, float x, float y, bool *isResident, int comp = 0) 
# 309
{int volatile ___ = 1;(void)to;(void)x;(void)y;(void)isResident;(void)comp;
# 313
::exit(___);}
#if 0
# 309
{ 
# 310
T ret; 
# 311
tex2Dgather(&ret, to, x, y, isResident, comp); 
# 312
return ret; 
# 313
} 
#endif
# 317 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 318
tex1DLod(T *ptr, cudaTextureObject_t obj, float x, float level) 
# 319
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)level;
# 321
::exit(___);}
#if 0
# 319
{ 
# 320
__nv_tex_surf_handler("__itex1DLod", ptr, obj, x, level); 
# 321
} 
#endif
# 323 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 324
tex1DLod(cudaTextureObject_t texObject, float x, float level) 
# 325
{int volatile ___ = 1;(void)texObject;(void)x;(void)level;
# 329
::exit(___);}
#if 0
# 325
{ 
# 326
T ret; 
# 327
tex1DLod(&ret, texObject, x, level); 
# 328
return ret; 
# 329
} 
#endif
# 332 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 333
tex2DLod(T *ptr, cudaTextureObject_t obj, float x, float y, float level) 
# 334
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)level;
# 336
::exit(___);}
#if 0
# 334
{ 
# 335
__nv_tex_surf_handler("__itex2DLod", ptr, obj, x, y, level); 
# 336
} 
#endif
# 338 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 339
tex2DLod(cudaTextureObject_t texObject, float x, float y, float level) 
# 340
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)level;
# 344
::exit(___);}
#if 0
# 340
{ 
# 341
T ret; 
# 342
tex2DLod(&ret, texObject, x, y, level); 
# 343
return ret; 
# 344
} 
#endif
# 348 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 349
tex2DLod(T *ptr, cudaTextureObject_t obj, float x, float y, float level, bool *isResident) 
# 350
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)level;(void)isResident;
# 354
::exit(___);}
#if 0
# 350
{ 
# 351
unsigned char res; 
# 352
__nv_tex_surf_handler("__itex2DLod_sparse", ptr, obj, x, y, level, &res); 
# 353
(*isResident) = (res != 0); 
# 354
} 
#endif
# 356 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 357
tex2DLod(cudaTextureObject_t texObject, float x, float y, float level, bool *isResident) 
# 358
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)level;(void)isResident;
# 362
::exit(___);}
#if 0
# 358
{ 
# 359
T ret; 
# 360
tex2DLod(&ret, texObject, x, y, level, isResident); 
# 361
return ret; 
# 362
} 
#endif
# 367 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 368
tex3DLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float level) 
# 369
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)level;
# 371
::exit(___);}
#if 0
# 369
{ 
# 370
__nv_tex_surf_handler("__itex3DLod", ptr, obj, x, y, z, level); 
# 371
} 
#endif
# 373 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 374
tex3DLod(cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 375
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 379
::exit(___);}
#if 0
# 375
{ 
# 376
T ret; 
# 377
tex3DLod(&ret, texObject, x, y, z, level); 
# 378
return ret; 
# 379
} 
#endif
# 382 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 383
tex3DLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float level, bool *isResident) 
# 384
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)level;(void)isResident;
# 388
::exit(___);}
#if 0
# 384
{ 
# 385
unsigned char res; 
# 386
__nv_tex_surf_handler("__itex3DLod_sparse", ptr, obj, x, y, z, level, &res); 
# 387
(*isResident) = (res != 0); 
# 388
} 
#endif
# 390 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 391
tex3DLod(cudaTextureObject_t texObject, float x, float y, float z, float level, bool *isResident) 
# 392
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;(void)isResident;
# 396
::exit(___);}
#if 0
# 392
{ 
# 393
T ret; 
# 394
tex3DLod(&ret, texObject, x, y, z, level, isResident); 
# 395
return ret; 
# 396
} 
#endif
# 401 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 402
tex1DLayeredLod(T *ptr, cudaTextureObject_t obj, float x, int layer, float level) 
# 403
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;(void)level;
# 405
::exit(___);}
#if 0
# 403
{ 
# 404
__nv_tex_surf_handler("__itex1DLayeredLod", ptr, obj, x, layer, level); 
# 405
} 
#endif
# 407 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 408
tex1DLayeredLod(cudaTextureObject_t texObject, float x, int layer, float level) 
# 409
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;(void)level;
# 413
::exit(___);}
#if 0
# 409
{ 
# 410
T ret; 
# 411
tex1DLayeredLod(&ret, texObject, x, layer, level); 
# 412
return ret; 
# 413
} 
#endif
# 416 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 417
tex2DLayeredLod(T *ptr, cudaTextureObject_t obj, float x, float y, int layer, float level) 
# 418
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)level;
# 420
::exit(___);}
#if 0
# 418
{ 
# 419
__nv_tex_surf_handler("__itex2DLayeredLod", ptr, obj, x, y, layer, level); 
# 420
} 
#endif
# 422 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 423
tex2DLayeredLod(cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 424
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 428
::exit(___);}
#if 0
# 424
{ 
# 425
T ret; 
# 426
tex2DLayeredLod(&ret, texObject, x, y, layer, level); 
# 427
return ret; 
# 428
} 
#endif
# 431 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 432
tex2DLayeredLod(T *ptr, cudaTextureObject_t obj, float x, float y, int layer, float level, bool *isResident) 
# 433
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)level;(void)isResident;
# 437
::exit(___);}
#if 0
# 433
{ 
# 434
unsigned char res; 
# 435
__nv_tex_surf_handler("__itex2DLayeredLod_sparse", ptr, obj, x, y, layer, level, &res); 
# 436
(*isResident) = (res != 0); 
# 437
} 
#endif
# 439 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 440
tex2DLayeredLod(cudaTextureObject_t texObject, float x, float y, int layer, float level, bool *isResident) 
# 441
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)level;(void)isResident;
# 445
::exit(___);}
#if 0
# 441
{ 
# 442
T ret; 
# 443
tex2DLayeredLod(&ret, texObject, x, y, layer, level, isResident); 
# 444
return ret; 
# 445
} 
#endif
# 448 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 449
texCubemapLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float level) 
# 450
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)level;
# 452
::exit(___);}
#if 0
# 450
{ 
# 451
__nv_tex_surf_handler("__itexCubemapLod", ptr, obj, x, y, z, level); 
# 452
} 
#endif
# 454 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 455
texCubemapLod(cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 456
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 460
::exit(___);}
#if 0
# 456
{ 
# 457
T ret; 
# 458
texCubemapLod(&ret, texObject, x, y, z, level); 
# 459
return ret; 
# 460
} 
#endif
# 463 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 464
texCubemapGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 465
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 467
::exit(___);}
#if 0
# 465
{ 
# 466
__nv_tex_surf_handler("__itexCubemapGrad_v2", ptr, obj, x, y, z, &dPdx, &dPdy); 
# 467
} 
#endif
# 469 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 470
texCubemapGrad(cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 471
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 475
::exit(___);}
#if 0
# 471
{ 
# 472
T ret; 
# 473
texCubemapGrad(&ret, texObject, x, y, z, dPdx, dPdy); 
# 474
return ret; 
# 475
} 
#endif
# 477 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 478
texCubemapLayeredLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, int layer, float level) 
# 479
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 481
::exit(___);}
#if 0
# 479
{ 
# 480
__nv_tex_surf_handler("__itexCubemapLayeredLod", ptr, obj, x, y, z, layer, level); 
# 481
} 
#endif
# 483 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 484
texCubemapLayeredLod(cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 485
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 489
::exit(___);}
#if 0
# 485
{ 
# 486
T ret; 
# 487
texCubemapLayeredLod(&ret, texObject, x, y, z, layer, level); 
# 488
return ret; 
# 489
} 
#endif
# 491 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 492
tex1DGrad(T *ptr, cudaTextureObject_t obj, float x, float dPdx, float dPdy) 
# 493
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)dPdx;(void)dPdy;
# 495
::exit(___);}
#if 0
# 493
{ 
# 494
__nv_tex_surf_handler("__itex1DGrad", ptr, obj, x, dPdx, dPdy); 
# 495
} 
#endif
# 497 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 498
tex1DGrad(cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 499
{int volatile ___ = 1;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 503
::exit(___);}
#if 0
# 499
{ 
# 500
T ret; 
# 501
tex1DGrad(&ret, texObject, x, dPdx, dPdy); 
# 502
return ret; 
# 503
} 
#endif
# 506 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 507
tex2DGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float2 dPdx, float2 dPdy) 
# 508
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 510
::exit(___);}
#if 0
# 508
{ 
# 509
__nv_tex_surf_handler("__itex2DGrad_v2", ptr, obj, x, y, &dPdx, &dPdy); 
# 510
} 
#endif
# 512 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 513
tex2DGrad(cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 514
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 518
::exit(___);}
#if 0
# 514
{ 
# 515
T ret; 
# 516
tex2DGrad(&ret, texObject, x, y, dPdx, dPdy); 
# 517
return ret; 
# 518
} 
#endif
# 521 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 522
tex2DGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float2 dPdx, float2 dPdy, bool *isResident) 
# 523
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)dPdx;(void)dPdy;(void)isResident;
# 527
::exit(___);}
#if 0
# 523
{ 
# 524
unsigned char res; 
# 525
__nv_tex_surf_handler("__itex2DGrad_sparse", ptr, obj, x, y, &dPdx, &dPdy, &res); 
# 526
(*isResident) = (res != 0); 
# 527
} 
#endif
# 529 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 530
tex2DGrad(cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy, bool *isResident) 
# 531
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;(void)isResident;
# 535
::exit(___);}
#if 0
# 531
{ 
# 532
T ret; 
# 533
tex2DGrad(&ret, texObject, x, y, dPdx, dPdy, isResident); 
# 534
return ret; 
# 535
} 
#endif
# 539 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 540
tex3DGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 541
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 543
::exit(___);}
#if 0
# 541
{ 
# 542
__nv_tex_surf_handler("__itex3DGrad_v2", ptr, obj, x, y, z, &dPdx, &dPdy); 
# 543
} 
#endif
# 545 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 546
tex3DGrad(cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 547
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 551
::exit(___);}
#if 0
# 547
{ 
# 548
T ret; 
# 549
tex3DGrad(&ret, texObject, x, y, z, dPdx, dPdy); 
# 550
return ret; 
# 551
} 
#endif
# 554 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 555
tex3DGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float4 dPdx, float4 dPdy, bool *isResident) 
# 556
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;(void)isResident;
# 560
::exit(___);}
#if 0
# 556
{ 
# 557
unsigned char res; 
# 558
__nv_tex_surf_handler("__itex3DGrad_sparse", ptr, obj, x, y, z, &dPdx, &dPdy, &res); 
# 559
(*isResident) = (res != 0); 
# 560
} 
#endif
# 562 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 563
tex3DGrad(cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy, bool *isResident) 
# 564
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;(void)isResident;
# 568
::exit(___);}
#if 0
# 564
{ 
# 565
T ret; 
# 566
tex3DGrad(&ret, texObject, x, y, z, dPdx, dPdy, isResident); 
# 567
return ret; 
# 568
} 
#endif
# 573 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 574
tex1DLayeredGrad(T *ptr, cudaTextureObject_t obj, float x, int layer, float dPdx, float dPdy) 
# 575
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 577
::exit(___);}
#if 0
# 575
{ 
# 576
__nv_tex_surf_handler("__itex1DLayeredGrad", ptr, obj, x, layer, dPdx, dPdy); 
# 577
} 
#endif
# 579 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 580
tex1DLayeredGrad(cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 581
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 585
::exit(___);}
#if 0
# 581
{ 
# 582
T ret; 
# 583
tex1DLayeredGrad(&ret, texObject, x, layer, dPdx, dPdy); 
# 584
return ret; 
# 585
} 
#endif
# 588 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 589
tex2DLayeredGrad(T *ptr, cudaTextureObject_t obj, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 590
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 592
::exit(___);}
#if 0
# 590
{ 
# 591
__nv_tex_surf_handler("__itex2DLayeredGrad_v2", ptr, obj, x, y, layer, &dPdx, &dPdy); 
# 592
} 
#endif
# 594 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 595
tex2DLayeredGrad(cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 596
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 600
::exit(___);}
#if 0
# 596
{ 
# 597
T ret; 
# 598
tex2DLayeredGrad(&ret, texObject, x, y, layer, dPdx, dPdy); 
# 599
return ret; 
# 600
} 
#endif
# 603 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 604
tex2DLayeredGrad(T *ptr, cudaTextureObject_t obj, float x, float y, int layer, float2 dPdx, float2 dPdy, bool *isResident) 
# 605
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;(void)isResident;
# 609
::exit(___);}
#if 0
# 605
{ 
# 606
unsigned char res; 
# 607
__nv_tex_surf_handler("__itex2DLayeredGrad_sparse", ptr, obj, x, y, layer, &dPdx, &dPdy, &res); 
# 608
(*isResident) = (res != 0); 
# 609
} 
#endif
# 611 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 612
tex2DLayeredGrad(cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy, bool *isResident) 
# 613
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;(void)isResident;
# 617
::exit(___);}
#if 0
# 613
{ 
# 614
T ret; 
# 615
tex2DLayeredGrad(&ret, texObject, x, y, layer, dPdx, dPdy, isResident); 
# 616
return ret; 
# 617
} 
#endif
# 621 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 622
texCubemapLayeredGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, int layer, float4 dPdx, float4 dPdy) 
# 623
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)layer;(void)dPdx;(void)dPdy;
# 625
::exit(___);}
#if 0
# 623
{ 
# 624
__nv_tex_surf_handler("__itexCubemapLayeredGrad_v2", ptr, obj, x, y, z, layer, &dPdx, &dPdy); 
# 625
} 
#endif
# 627 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/texture_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 628
texCubemapLayeredGrad(cudaTextureObject_t texObject, float x, float y, float z, int layer, float4 dPdx, float4 dPdy) 
# 629
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)dPdx;(void)dPdy;
# 633
::exit(___);}
#if 0
# 629
{ 
# 630
T ret; 
# 631
texCubemapLayeredGrad(&ret, texObject, x, y, z, layer, dPdx, dPdy); 
# 632
return ret; 
# 633
} 
#endif
# 58 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/surface_indirect_functions.h" 3
template< class T> struct __nv_isurf_trait { }; 
# 59
template<> struct __nv_isurf_trait< char>  { typedef void type; }; 
# 60
template<> struct __nv_isurf_trait< signed char>  { typedef void type; }; 
# 61
template<> struct __nv_isurf_trait< char1>  { typedef void type; }; 
# 62
template<> struct __nv_isurf_trait< unsigned char>  { typedef void type; }; 
# 63
template<> struct __nv_isurf_trait< uchar1>  { typedef void type; }; 
# 64
template<> struct __nv_isurf_trait< short>  { typedef void type; }; 
# 65
template<> struct __nv_isurf_trait< short1>  { typedef void type; }; 
# 66
template<> struct __nv_isurf_trait< unsigned short>  { typedef void type; }; 
# 67
template<> struct __nv_isurf_trait< ushort1>  { typedef void type; }; 
# 68
template<> struct __nv_isurf_trait< int>  { typedef void type; }; 
# 69
template<> struct __nv_isurf_trait< int1>  { typedef void type; }; 
# 70
template<> struct __nv_isurf_trait< unsigned>  { typedef void type; }; 
# 71
template<> struct __nv_isurf_trait< uint1>  { typedef void type; }; 
# 72
template<> struct __nv_isurf_trait< long long>  { typedef void type; }; 
# 73
template<> struct __nv_isurf_trait< longlong1>  { typedef void type; }; 
# 74
template<> struct __nv_isurf_trait< unsigned long long>  { typedef void type; }; 
# 75
template<> struct __nv_isurf_trait< ulonglong1>  { typedef void type; }; 
# 76
template<> struct __nv_isurf_trait< float>  { typedef void type; }; 
# 77
template<> struct __nv_isurf_trait< float1>  { typedef void type; }; 
# 79
template<> struct __nv_isurf_trait< char2>  { typedef void type; }; 
# 80
template<> struct __nv_isurf_trait< uchar2>  { typedef void type; }; 
# 81
template<> struct __nv_isurf_trait< short2>  { typedef void type; }; 
# 82
template<> struct __nv_isurf_trait< ushort2>  { typedef void type; }; 
# 83
template<> struct __nv_isurf_trait< int2>  { typedef void type; }; 
# 84
template<> struct __nv_isurf_trait< uint2>  { typedef void type; }; 
# 85
template<> struct __nv_isurf_trait< longlong2>  { typedef void type; }; 
# 86
template<> struct __nv_isurf_trait< ulonglong2>  { typedef void type; }; 
# 87
template<> struct __nv_isurf_trait< float2>  { typedef void type; }; 
# 89
template<> struct __nv_isurf_trait< char4>  { typedef void type; }; 
# 90
template<> struct __nv_isurf_trait< uchar4>  { typedef void type; }; 
# 91
template<> struct __nv_isurf_trait< short4>  { typedef void type; }; 
# 92
template<> struct __nv_isurf_trait< ushort4>  { typedef void type; }; 
# 93
template<> struct __nv_isurf_trait< int4>  { typedef void type; }; 
# 94
template<> struct __nv_isurf_trait< uint4>  { typedef void type; }; 
# 95
template<> struct __nv_isurf_trait< float4>  { typedef void type; }; 
# 98
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 99
surf1Dread(T *ptr, cudaSurfaceObject_t obj, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 100
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)mode;
# 102
::exit(___);}
#if 0
# 100
{ 
# 101
__nv_tex_surf_handler("__isurf1Dread", ptr, obj, x, mode); 
# 102
} 
#endif
# 104 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/surface_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 105
surf1Dread(cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 106
{int volatile ___ = 1;(void)surfObject;(void)x;(void)boundaryMode;
# 110
::exit(___);}
#if 0
# 106
{ 
# 107
T ret; 
# 108
surf1Dread(&ret, surfObject, x, boundaryMode); 
# 109
return ret; 
# 110
} 
#endif
# 112 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/surface_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 113
surf2Dread(T *ptr, cudaSurfaceObject_t obj, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 114
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)mode;
# 116
::exit(___);}
#if 0
# 114
{ 
# 115
__nv_tex_surf_handler("__isurf2Dread", ptr, obj, x, y, mode); 
# 116
} 
#endif
# 118 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/surface_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 119
surf2Dread(cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 120
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 124
::exit(___);}
#if 0
# 120
{ 
# 121
T ret; 
# 122
surf2Dread(&ret, surfObject, x, y, boundaryMode); 
# 123
return ret; 
# 124
} 
#endif
# 127 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/surface_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 128
surf3Dread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 129
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)mode;
# 131
::exit(___);}
#if 0
# 129
{ 
# 130
__nv_tex_surf_handler("__isurf3Dread", ptr, obj, x, y, z, mode); 
# 131
} 
#endif
# 133 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/surface_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 134
surf3Dread(cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 135
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 139
::exit(___);}
#if 0
# 135
{ 
# 136
T ret; 
# 137
surf3Dread(&ret, surfObject, x, y, z, boundaryMode); 
# 138
return ret; 
# 139
} 
#endif
# 141 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/surface_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 142
surf1DLayeredread(T *ptr, cudaSurfaceObject_t obj, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 143
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;(void)mode;
# 145
::exit(___);}
#if 0
# 143
{ 
# 144
__nv_tex_surf_handler("__isurf1DLayeredread", ptr, obj, x, layer, mode); 
# 145
} 
#endif
# 147 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/surface_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 148
surf1DLayeredread(cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 149
{int volatile ___ = 1;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 153
::exit(___);}
#if 0
# 149
{ 
# 150
T ret; 
# 151
surf1DLayeredread(&ret, surfObject, x, layer, boundaryMode); 
# 152
return ret; 
# 153
} 
#endif
# 155 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/surface_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 156
surf2DLayeredread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 157
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)mode;
# 159
::exit(___);}
#if 0
# 157
{ 
# 158
__nv_tex_surf_handler("__isurf2DLayeredread", ptr, obj, x, y, layer, mode); 
# 159
} 
#endif
# 161 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/surface_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 162
surf2DLayeredread(cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 163
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 167
::exit(___);}
#if 0
# 163
{ 
# 164
T ret; 
# 165
surf2DLayeredread(&ret, surfObject, x, y, layer, boundaryMode); 
# 166
return ret; 
# 167
} 
#endif
# 169 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/surface_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 170
surfCubemapread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 171
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)face;(void)mode;
# 173
::exit(___);}
#if 0
# 171
{ 
# 172
__nv_tex_surf_handler("__isurfCubemapread", ptr, obj, x, y, face, mode); 
# 173
} 
#endif
# 175 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/surface_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 176
surfCubemapread(cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 177
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 181
::exit(___);}
#if 0
# 177
{ 
# 178
T ret; 
# 179
surfCubemapread(&ret, surfObject, x, y, face, boundaryMode); 
# 180
return ret; 
# 181
} 
#endif
# 183 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/surface_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 184
surfCubemapLayeredread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int layerface, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 185
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layerface;(void)mode;
# 187
::exit(___);}
#if 0
# 185
{ 
# 186
__nv_tex_surf_handler("__isurfCubemapLayeredread", ptr, obj, x, y, layerface, mode); 
# 187
} 
#endif
# 189 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/surface_indirect_functions.h" 3
template< class T> __attribute__((unused)) static T 
# 190
surfCubemapLayeredread(cudaSurfaceObject_t surfObject, int x, int y, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 191
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)layerface;(void)boundaryMode;
# 195
::exit(___);}
#if 0
# 191
{ 
# 192
T ret; 
# 193
surfCubemapLayeredread(&ret, surfObject, x, y, layerface, boundaryMode); 
# 194
return ret; 
# 195
} 
#endif
# 197 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/surface_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 198
surf1Dwrite(T val, cudaSurfaceObject_t obj, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 199
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)mode;
# 201
::exit(___);}
#if 0
# 199
{ 
# 200
__nv_tex_surf_handler("__isurf1Dwrite_v2", &val, obj, x, mode); 
# 201
} 
#endif
# 203 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/surface_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 204
surf2Dwrite(T val, cudaSurfaceObject_t obj, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 205
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)mode;
# 207
::exit(___);}
#if 0
# 205
{ 
# 206
__nv_tex_surf_handler("__isurf2Dwrite_v2", &val, obj, x, y, mode); 
# 207
} 
#endif
# 209 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/surface_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 210
surf3Dwrite(T val, cudaSurfaceObject_t obj, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 211
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)z;(void)mode;
# 213
::exit(___);}
#if 0
# 211
{ 
# 212
__nv_tex_surf_handler("__isurf3Dwrite_v2", &val, obj, x, y, z, mode); 
# 213
} 
#endif
# 215 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/surface_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 216
surf1DLayeredwrite(T val, cudaSurfaceObject_t obj, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 217
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)layer;(void)mode;
# 219
::exit(___);}
#if 0
# 217
{ 
# 218
__nv_tex_surf_handler("__isurf1DLayeredwrite_v2", &val, obj, x, layer, mode); 
# 219
} 
#endif
# 221 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/surface_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 222
surf2DLayeredwrite(T val, cudaSurfaceObject_t obj, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 223
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)layer;(void)mode;
# 225
::exit(___);}
#if 0
# 223
{ 
# 224
__nv_tex_surf_handler("__isurf2DLayeredwrite_v2", &val, obj, x, y, layer, mode); 
# 225
} 
#endif
# 227 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/surface_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 228
surfCubemapwrite(T val, cudaSurfaceObject_t obj, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 229
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)face;(void)mode;
# 231
::exit(___);}
#if 0
# 229
{ 
# 230
__nv_tex_surf_handler("__isurfCubemapwrite_v2", &val, obj, x, y, face, mode); 
# 231
} 
#endif
# 233 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/surface_indirect_functions.h" 3
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 234
surfCubemapLayeredwrite(T val, cudaSurfaceObject_t obj, int x, int y, int layerface, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 235
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)layerface;(void)mode;
# 237
::exit(___);}
#if 0
# 235
{ 
# 236
__nv_tex_surf_handler("__isurfCubemapLayeredwrite_v2", &val, obj, x, y, layerface, mode); 
# 237
} 
#endif
# 2912 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/crt/device_functions.h" 3
extern "C" unsigned __cudaPushCallConfiguration(dim3 gridDim, dim3 blockDim, size_t sharedMem = 0, CUstream_st * stream = 0); 
# 68 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/device_launch_parameters.h" 3
extern "C" {
# 71
extern const uint3 __device_builtin_variable_threadIdx; 
# 72
extern const uint3 __device_builtin_variable_blockIdx; 
# 73
extern const dim3 __device_builtin_variable_blockDim; 
# 74
extern const dim3 __device_builtin_variable_gridDim; 
# 75
extern const int __device_builtin_variable_warpSize; 
# 80
}
# 63 "/usr/include/c++/11/bits/stl_function.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 116 "/usr/include/c++/11/bits/stl_function.h" 3
template< class _Arg, class _Result> 
# 117
struct unary_function { 
# 120
typedef _Arg argument_type; 
# 123
typedef _Result result_type; 
# 124
}; 
# 130
template< class _Arg1, class _Arg2, class _Result> 
# 131
struct binary_function { 
# 134
typedef _Arg1 first_argument_type; 
# 137
typedef _Arg2 second_argument_type; 
# 140
typedef _Result result_type; 
# 141
}; 
# 157 "/usr/include/c++/11/bits/stl_function.h" 3
struct __is_transparent; 
# 159
template< class _Tp = void> struct plus; 
# 162
template< class _Tp = void> struct minus; 
# 165
template< class _Tp = void> struct multiplies; 
# 168
template< class _Tp = void> struct divides; 
# 171
template< class _Tp = void> struct modulus; 
# 174
template< class _Tp = void> struct negate; 
# 179
template< class _Tp> 
# 180
struct plus : public binary_function< _Tp, _Tp, _Tp>  { 
# 185
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 186
{ return __x + __y; } 
# 187
}; 
# 190
template< class _Tp> 
# 191
struct minus : public binary_function< _Tp, _Tp, _Tp>  { 
# 195
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 196
{ return __x - __y; } 
# 197
}; 
# 200
template< class _Tp> 
# 201
struct multiplies : public binary_function< _Tp, _Tp, _Tp>  { 
# 205
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 206
{ return __x * __y; } 
# 207
}; 
# 210
template< class _Tp> 
# 211
struct divides : public binary_function< _Tp, _Tp, _Tp>  { 
# 215
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 216
{ return __x / __y; } 
# 217
}; 
# 220
template< class _Tp> 
# 221
struct modulus : public binary_function< _Tp, _Tp, _Tp>  { 
# 225
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 226
{ return __x % __y; } 
# 227
}; 
# 230
template< class _Tp> 
# 231
struct negate : public unary_function< _Tp, _Tp>  { 
# 235
constexpr _Tp operator()(const _Tp &__x) const 
# 236
{ return -__x; } 
# 237
}; 
# 244
template<> struct plus< void>  { 
# 246
template< class _Tp, class _Up> constexpr auto 
# 249
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) + std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) + std::forward< _Up> (__u))) 
# 252
{ return std::forward< _Tp> (__t) + std::forward< _Up> (__u); } 
# 254
typedef __is_transparent is_transparent; 
# 255
}; 
# 259
template<> struct minus< void>  { 
# 261
template< class _Tp, class _Up> constexpr auto 
# 264
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) - std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) - std::forward< _Up> (__u))) 
# 267
{ return std::forward< _Tp> (__t) - std::forward< _Up> (__u); } 
# 269
typedef __is_transparent is_transparent; 
# 270
}; 
# 274
template<> struct multiplies< void>  { 
# 276
template< class _Tp, class _Up> constexpr auto 
# 279
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) * std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) * std::forward< _Up> (__u))) 
# 282
{ return std::forward< _Tp> (__t) * std::forward< _Up> (__u); } 
# 284
typedef __is_transparent is_transparent; 
# 285
}; 
# 289
template<> struct divides< void>  { 
# 291
template< class _Tp, class _Up> constexpr auto 
# 294
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) / std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) / std::forward< _Up> (__u))) 
# 297
{ return std::forward< _Tp> (__t) / std::forward< _Up> (__u); } 
# 299
typedef __is_transparent is_transparent; 
# 300
}; 
# 304
template<> struct modulus< void>  { 
# 306
template< class _Tp, class _Up> constexpr auto 
# 309
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) % std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) % std::forward< _Up> (__u))) 
# 312
{ return std::forward< _Tp> (__t) % std::forward< _Up> (__u); } 
# 314
typedef __is_transparent is_transparent; 
# 315
}; 
# 319
template<> struct negate< void>  { 
# 321
template< class _Tp> constexpr auto 
# 324
operator()(_Tp &&__t) const noexcept(noexcept((-std::forward< _Tp> (__t))))->__decltype((-std::forward< _Tp> (__t))) 
# 327
{ return -std::forward< _Tp> (__t); } 
# 329
typedef __is_transparent is_transparent; 
# 330
}; 
# 344 "/usr/include/c++/11/bits/stl_function.h" 3
template< class _Tp = void> struct equal_to; 
# 347
template< class _Tp = void> struct not_equal_to; 
# 350
template< class _Tp = void> struct greater; 
# 353
template< class _Tp = void> struct less; 
# 356
template< class _Tp = void> struct greater_equal; 
# 359
template< class _Tp = void> struct less_equal; 
# 364
template< class _Tp> 
# 365
struct equal_to : public binary_function< _Tp, _Tp, bool>  { 
# 369
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 370
{ return __x == __y; } 
# 371
}; 
# 374
template< class _Tp> 
# 375
struct not_equal_to : public binary_function< _Tp, _Tp, bool>  { 
# 379
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 380
{ return __x != __y; } 
# 381
}; 
# 384
template< class _Tp> 
# 385
struct greater : public binary_function< _Tp, _Tp, bool>  { 
# 389
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 390
{ return __x > __y; } 
# 391
}; 
# 394
template< class _Tp> 
# 395
struct less : public binary_function< _Tp, _Tp, bool>  { 
# 399
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 400
{ return __x < __y; } 
# 401
}; 
# 404
template< class _Tp> 
# 405
struct greater_equal : public binary_function< _Tp, _Tp, bool>  { 
# 409
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 410
{ return __x >= __y; } 
# 411
}; 
# 414
template< class _Tp> 
# 415
struct less_equal : public binary_function< _Tp, _Tp, bool>  { 
# 419
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 420
{ return __x <= __y; } 
# 421
}; 
# 424
template< class _Tp> 
# 425
struct greater< _Tp *>  : public binary_function< _Tp *, _Tp *, bool>  { 
# 428
constexpr bool operator()(_Tp *__x, _Tp *__y) const noexcept 
# 429
{ 
# 432
if (__builtin_is_constant_evaluated()) { 
# 436
return __x > __y; }  
# 438
return ((unsigned long)__x) > ((unsigned long)__y); 
# 439
} 
# 440
}; 
# 443
template< class _Tp> 
# 444
struct less< _Tp *>  : public binary_function< _Tp *, _Tp *, bool>  { 
# 447
constexpr bool operator()(_Tp *__x, _Tp *__y) const noexcept 
# 448
{ 
# 451
if (__builtin_is_constant_evaluated()) { 
# 455
return __x < __y; }  
# 457
return ((unsigned long)__x) < ((unsigned long)__y); 
# 458
} 
# 459
}; 
# 462
template< class _Tp> 
# 463
struct greater_equal< _Tp *>  : public binary_function< _Tp *, _Tp *, bool>  { 
# 466
constexpr bool operator()(_Tp *__x, _Tp *__y) const noexcept 
# 467
{ 
# 470
if (__builtin_is_constant_evaluated()) { 
# 474
return __x >= __y; }  
# 476
return ((unsigned long)__x) >= ((unsigned long)__y); 
# 477
} 
# 478
}; 
# 481
template< class _Tp> 
# 482
struct less_equal< _Tp *>  : public binary_function< _Tp *, _Tp *, bool>  { 
# 485
constexpr bool operator()(_Tp *__x, _Tp *__y) const noexcept 
# 486
{ 
# 489
if (__builtin_is_constant_evaluated()) { 
# 493
return __x <= __y; }  
# 495
return ((unsigned long)__x) <= ((unsigned long)__y); 
# 496
} 
# 497
}; 
# 502
template<> struct equal_to<>  { 
# 504
template< class _Tp, class _Up> constexpr auto 
# 506
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) == std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) == std::forward< _Up> (__u))) 
# 509
{ return std::forward< _Tp> (__t) == std::forward< _Up> (__u); } 
# 511
typedef __is_transparent is_transparent; 
# 512
}; 
# 516
template<> struct not_equal_to< void>  { 
# 518
template< class _Tp, class _Up> constexpr auto 
# 520
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) != std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) != std::forward< _Up> (__u))) 
# 523
{ return std::forward< _Tp> (__t) != std::forward< _Up> (__u); } 
# 525
typedef __is_transparent is_transparent; 
# 526
}; 
# 530
template<> struct greater< void>  { 
# 532
template< class _Tp, class _Up> constexpr auto 
# 534
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) > std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) > std::forward< _Up> (__u))) 
# 537
{ 
# 538
return _S_cmp(std::forward< _Tp> (__t), std::forward< _Up> (__u), __ptr_cmp< _Tp, _Up> {}); 
# 540
} 
# 542
template< class _Tp, class _Up> constexpr bool 
# 544
operator()(_Tp *__t, _Up *__u) const noexcept 
# 545
{ return std::greater< common_type_t< _Tp *, _Up *> > {}(__t, __u); } 
# 547
typedef __is_transparent is_transparent; 
# 552
private: 
# 550
template< class _Tp, class _Up> static constexpr decltype(auto) 
# 552
_S_cmp(_Tp &&__t, _Up &&__u, false_type) 
# 553
{ return std::forward< _Tp> (__t) > std::forward< _Up> (__u); } 
# 555
template< class _Tp, class _Up> static constexpr bool 
# 557
_S_cmp(_Tp &&__t, _Up &&__u, true_type) noexcept 
# 558
{ 
# 559
return std::greater< const volatile void *> {}(static_cast< const volatile void *>(std::forward< _Tp> (__t)), static_cast< const volatile void *>(std::forward< _Up> (__u))); 
# 562
} 
# 565
template< class _Tp, class _Up, class  = void> 
# 566
struct __not_overloaded2 : public true_type { }; 
# 569
template< class _Tp, class _Up> 
# 570
struct __not_overloaded2< _Tp, _Up, __void_t< __decltype((std::declval< _Tp> ().operator>(std::declval< _Up> ())))> >  : public false_type { 
# 572
}; 
# 575
template< class _Tp, class _Up, class  = void> 
# 576
struct __not_overloaded : public __not_overloaded2< _Tp, _Up>  { }; 
# 579
template< class _Tp, class _Up> 
# 580
struct __not_overloaded< _Tp, _Up, __void_t< __decltype((operator>(std::declval< _Tp> (), std::declval< _Up> ())))> >  : public false_type { 
# 582
}; 
# 584
template< class _Tp, class _Up> using __ptr_cmp = __and_< __not_overloaded< _Tp, _Up> , is_convertible< _Tp, const volatile void *> , is_convertible< _Up, const volatile void *> > ; 
# 588
}; 
# 592
template<> struct less< void>  { 
# 594
template< class _Tp, class _Up> constexpr auto 
# 596
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) < std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) < std::forward< _Up> (__u))) 
# 599
{ 
# 600
return _S_cmp(std::forward< _Tp> (__t), std::forward< _Up> (__u), __ptr_cmp< _Tp, _Up> {}); 
# 602
} 
# 604
template< class _Tp, class _Up> constexpr bool 
# 606
operator()(_Tp *__t, _Up *__u) const noexcept 
# 607
{ return std::less< common_type_t< _Tp *, _Up *> > {}(__t, __u); } 
# 609
typedef __is_transparent is_transparent; 
# 614
private: 
# 612
template< class _Tp, class _Up> static constexpr decltype(auto) 
# 614
_S_cmp(_Tp &&__t, _Up &&__u, false_type) 
# 615
{ return std::forward< _Tp> (__t) < std::forward< _Up> (__u); } 
# 617
template< class _Tp, class _Up> static constexpr bool 
# 619
_S_cmp(_Tp &&__t, _Up &&__u, true_type) noexcept 
# 620
{ 
# 621
return std::less< const volatile void *> {}(static_cast< const volatile void *>(std::forward< _Tp> (__t)), static_cast< const volatile void *>(std::forward< _Up> (__u))); 
# 624
} 
# 627
template< class _Tp, class _Up, class  = void> 
# 628
struct __not_overloaded2 : public true_type { }; 
# 631
template< class _Tp, class _Up> 
# 632
struct __not_overloaded2< _Tp, _Up, __void_t< __decltype((std::declval< _Tp> ().operator< (std::declval< _Up> ())))> >  : public false_type { 
# 634
}; 
# 637
template< class _Tp, class _Up, class  = void> 
# 638
struct __not_overloaded : public __not_overloaded2< _Tp, _Up>  { }; 
# 641
template< class _Tp, class _Up> 
# 642
struct __not_overloaded< _Tp, _Up, __void_t< __decltype((operator< (std::declval< _Tp> (), std::declval< _Up> ())))> >  : public false_type { 
# 644
}; 
# 646
template< class _Tp, class _Up> using __ptr_cmp = __and_< __not_overloaded< _Tp, _Up> , is_convertible< _Tp, const volatile void *> , is_convertible< _Up, const volatile void *> > ; 
# 650
}; 
# 654
template<> struct greater_equal< void>  { 
# 656
template< class _Tp, class _Up> constexpr auto 
# 658
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) >= std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) >= std::forward< _Up> (__u))) 
# 661
{ 
# 662
return _S_cmp(std::forward< _Tp> (__t), std::forward< _Up> (__u), __ptr_cmp< _Tp, _Up> {}); 
# 664
} 
# 666
template< class _Tp, class _Up> constexpr bool 
# 668
operator()(_Tp *__t, _Up *__u) const noexcept 
# 669
{ return std::greater_equal< common_type_t< _Tp *, _Up *> > {}(__t, __u); } 
# 671
typedef __is_transparent is_transparent; 
# 676
private: 
# 674
template< class _Tp, class _Up> static constexpr decltype(auto) 
# 676
_S_cmp(_Tp &&__t, _Up &&__u, false_type) 
# 677
{ return std::forward< _Tp> (__t) >= std::forward< _Up> (__u); } 
# 679
template< class _Tp, class _Up> static constexpr bool 
# 681
_S_cmp(_Tp &&__t, _Up &&__u, true_type) noexcept 
# 682
{ 
# 683
return std::greater_equal< const volatile void *> {}(static_cast< const volatile void *>(std::forward< _Tp> (__t)), static_cast< const volatile void *>(std::forward< _Up> (__u))); 
# 686
} 
# 689
template< class _Tp, class _Up, class  = void> 
# 690
struct __not_overloaded2 : public true_type { }; 
# 693
template< class _Tp, class _Up> 
# 694
struct __not_overloaded2< _Tp, _Up, __void_t< __decltype((std::declval< _Tp> ().operator>=(std::declval< _Up> ())))> >  : public false_type { 
# 696
}; 
# 699
template< class _Tp, class _Up, class  = void> 
# 700
struct __not_overloaded : public __not_overloaded2< _Tp, _Up>  { }; 
# 703
template< class _Tp, class _Up> 
# 704
struct __not_overloaded< _Tp, _Up, __void_t< __decltype((operator>=(std::declval< _Tp> (), std::declval< _Up> ())))> >  : public false_type { 
# 706
}; 
# 708
template< class _Tp, class _Up> using __ptr_cmp = __and_< __not_overloaded< _Tp, _Up> , is_convertible< _Tp, const volatile void *> , is_convertible< _Up, const volatile void *> > ; 
# 712
}; 
# 716
template<> struct less_equal< void>  { 
# 718
template< class _Tp, class _Up> constexpr auto 
# 720
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) <= std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) <= std::forward< _Up> (__u))) 
# 723
{ 
# 724
return _S_cmp(std::forward< _Tp> (__t), std::forward< _Up> (__u), __ptr_cmp< _Tp, _Up> {}); 
# 726
} 
# 728
template< class _Tp, class _Up> constexpr bool 
# 730
operator()(_Tp *__t, _Up *__u) const noexcept 
# 731
{ return std::less_equal< common_type_t< _Tp *, _Up *> > {}(__t, __u); } 
# 733
typedef __is_transparent is_transparent; 
# 738
private: 
# 736
template< class _Tp, class _Up> static constexpr decltype(auto) 
# 738
_S_cmp(_Tp &&__t, _Up &&__u, false_type) 
# 739
{ return std::forward< _Tp> (__t) <= std::forward< _Up> (__u); } 
# 741
template< class _Tp, class _Up> static constexpr bool 
# 743
_S_cmp(_Tp &&__t, _Up &&__u, true_type) noexcept 
# 744
{ 
# 745
return std::less_equal< const volatile void *> {}(static_cast< const volatile void *>(std::forward< _Tp> (__t)), static_cast< const volatile void *>(std::forward< _Up> (__u))); 
# 748
} 
# 751
template< class _Tp, class _Up, class  = void> 
# 752
struct __not_overloaded2 : public true_type { }; 
# 755
template< class _Tp, class _Up> 
# 756
struct __not_overloaded2< _Tp, _Up, __void_t< __decltype((std::declval< _Tp> ().operator<=(std::declval< _Up> ())))> >  : public false_type { 
# 758
}; 
# 761
template< class _Tp, class _Up, class  = void> 
# 762
struct __not_overloaded : public __not_overloaded2< _Tp, _Up>  { }; 
# 765
template< class _Tp, class _Up> 
# 766
struct __not_overloaded< _Tp, _Up, __void_t< __decltype((operator<=(std::declval< _Tp> (), std::declval< _Up> ())))> >  : public false_type { 
# 768
}; 
# 770
template< class _Tp, class _Up> using __ptr_cmp = __and_< __not_overloaded< _Tp, _Up> , is_convertible< _Tp, const volatile void *> , is_convertible< _Up, const volatile void *> > ; 
# 774
}; 
# 788 "/usr/include/c++/11/bits/stl_function.h" 3
template< class _Tp = void> struct logical_and; 
# 791
template< class _Tp = void> struct logical_or; 
# 794
template< class _Tp = void> struct logical_not; 
# 799
template< class _Tp> 
# 800
struct logical_and : public binary_function< _Tp, _Tp, bool>  { 
# 804
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 805
{ return __x && __y; } 
# 806
}; 
# 809
template< class _Tp> 
# 810
struct logical_or : public binary_function< _Tp, _Tp, bool>  { 
# 814
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 815
{ return __x || __y; } 
# 816
}; 
# 819
template< class _Tp> 
# 820
struct logical_not : public unary_function< _Tp, bool>  { 
# 824
constexpr bool operator()(const _Tp &__x) const 
# 825
{ return !__x; } 
# 826
}; 
# 831
template<> struct logical_and< void>  { 
# 833
template< class _Tp, class _Up> constexpr auto 
# 836
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) && std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) && std::forward< _Up> (__u))) 
# 839
{ return std::forward< _Tp> (__t) && std::forward< _Up> (__u); } 
# 841
typedef __is_transparent is_transparent; 
# 842
}; 
# 846
template<> struct logical_or< void>  { 
# 848
template< class _Tp, class _Up> constexpr auto 
# 851
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) || std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) || std::forward< _Up> (__u))) 
# 854
{ return std::forward< _Tp> (__t) || std::forward< _Up> (__u); } 
# 856
typedef __is_transparent is_transparent; 
# 857
}; 
# 861
template<> struct logical_not< void>  { 
# 863
template< class _Tp> constexpr auto 
# 866
operator()(_Tp &&__t) const noexcept(noexcept((!std::forward< _Tp> (__t))))->__decltype((!std::forward< _Tp> (__t))) 
# 869
{ return !std::forward< _Tp> (__t); } 
# 871
typedef __is_transparent is_transparent; 
# 872
}; 
# 877
template< class _Tp = void> struct bit_and; 
# 880
template< class _Tp = void> struct bit_or; 
# 883
template< class _Tp = void> struct bit_xor; 
# 886
template< class _Tp = void> struct bit_not; 
# 892
template< class _Tp> 
# 893
struct bit_and : public binary_function< _Tp, _Tp, _Tp>  { 
# 897
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 898
{ return __x & __y; } 
# 899
}; 
# 901
template< class _Tp> 
# 902
struct bit_or : public binary_function< _Tp, _Tp, _Tp>  { 
# 906
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 907
{ return __x | __y; } 
# 908
}; 
# 910
template< class _Tp> 
# 911
struct bit_xor : public binary_function< _Tp, _Tp, _Tp>  { 
# 915
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 916
{ return __x ^ __y; } 
# 917
}; 
# 919
template< class _Tp> 
# 920
struct bit_not : public unary_function< _Tp, _Tp>  { 
# 924
constexpr _Tp operator()(const _Tp &__x) const 
# 925
{ return ~__x; } 
# 926
}; 
# 930
template<> struct bit_and< void>  { 
# 932
template< class _Tp, class _Up> constexpr auto 
# 935
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) & std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) & std::forward< _Up> (__u))) 
# 938
{ return std::forward< _Tp> (__t) & std::forward< _Up> (__u); } 
# 940
typedef __is_transparent is_transparent; 
# 941
}; 
# 944
template<> struct bit_or< void>  { 
# 946
template< class _Tp, class _Up> constexpr auto 
# 949
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) | std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) | std::forward< _Up> (__u))) 
# 952
{ return std::forward< _Tp> (__t) | std::forward< _Up> (__u); } 
# 954
typedef __is_transparent is_transparent; 
# 955
}; 
# 958
template<> struct bit_xor< void>  { 
# 960
template< class _Tp, class _Up> constexpr auto 
# 963
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) ^ std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) ^ std::forward< _Up> (__u))) 
# 966
{ return std::forward< _Tp> (__t) ^ std::forward< _Up> (__u); } 
# 968
typedef __is_transparent is_transparent; 
# 969
}; 
# 972
template<> struct bit_not< void>  { 
# 974
template< class _Tp> constexpr auto 
# 977
operator()(_Tp &&__t) const noexcept(noexcept((~std::forward< _Tp> (__t))))->__decltype((~std::forward< _Tp> (__t))) 
# 980
{ return ~std::forward< _Tp> (__t); } 
# 982
typedef __is_transparent is_transparent; 
# 983
}; 
# 1019 "/usr/include/c++/11/bits/stl_function.h" 3
template< class _Predicate> 
# 1020
class unary_negate : public unary_function< typename _Predicate::argument_type, bool>  { 
# 1024
protected: _Predicate _M_pred; 
# 1029
public: constexpr explicit unary_negate(const _Predicate &__x) : _M_pred(__x) { } 
# 1033
constexpr bool operator()(const typename _Predicate::argument_type &__x) const 
# 1034
{ return !(_M_pred)(__x); } 
# 1035
}; 
# 1038
template< class _Predicate> constexpr unary_negate< _Predicate>  
# 1041
not1(const _Predicate &__pred) 
# 1042
{ return ((unary_negate< _Predicate> )(__pred)); } 
# 1045
template< class _Predicate> 
# 1046
class binary_negate : public binary_function< typename _Predicate::first_argument_type, typename _Predicate::second_argument_type, bool>  { 
# 1051
protected: _Predicate _M_pred; 
# 1056
public: constexpr explicit binary_negate(const _Predicate &__x) : _M_pred(__x) { } 
# 1060
constexpr bool operator()(const typename _Predicate::first_argument_type &__x, const typename _Predicate::second_argument_type &
# 1061
__y) const 
# 1062
{ return !(_M_pred)(__x, __y); } 
# 1063
}; 
# 1066
template< class _Predicate> constexpr binary_negate< _Predicate>  
# 1069
not2(const _Predicate &__pred) 
# 1070
{ return ((binary_negate< _Predicate> )(__pred)); } 
# 1098 "/usr/include/c++/11/bits/stl_function.h" 3
template< class _Arg, class _Result> 
# 1099
class pointer_to_unary_function : public unary_function< _Arg, _Result>  { 
# 1102
protected: _Result (*_M_ptr)(_Arg); 
# 1105
public: pointer_to_unary_function() { } 
# 1108
explicit pointer_to_unary_function(_Result (*__x)(_Arg)) : _M_ptr(__x) 
# 1109
{ } 
# 1112
_Result operator()(_Arg __x) const 
# 1113
{ return (_M_ptr)(__x); } 
# 1114
}; 
# 1117
template< class _Arg, class _Result> inline pointer_to_unary_function< _Arg, _Result>  
# 1119
ptr_fun(_Result (*__x)(_Arg)) 
# 1120
{ return ((pointer_to_unary_function< _Arg, _Result> )(__x)); } 
# 1123
template< class _Arg1, class _Arg2, class _Result> 
# 1124
class pointer_to_binary_function : public binary_function< _Arg1, _Arg2, _Result>  { 
# 1128
protected: _Result (*_M_ptr)(_Arg1, _Arg2); 
# 1131
public: pointer_to_binary_function() { } 
# 1134
explicit pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2)) : _M_ptr(__x) 
# 1135
{ } 
# 1138
_Result operator()(_Arg1 __x, _Arg2 __y) const 
# 1139
{ return (_M_ptr)(__x, __y); } 
# 1140
}; 
# 1143
template< class _Arg1, class _Arg2, class _Result> inline pointer_to_binary_function< _Arg1, _Arg2, _Result>  
# 1145
ptr_fun(_Result (*__x)(_Arg1, _Arg2)) 
# 1146
{ return ((pointer_to_binary_function< _Arg1, _Arg2, _Result> )(__x)); } 
# 1149
template< class _Tp> 
# 1150
struct _Identity : public unary_function< _Tp, _Tp>  { 
# 1154
_Tp &operator()(_Tp &__x) const 
# 1155
{ return __x; } 
# 1158
const _Tp &operator()(const _Tp &__x) const 
# 1159
{ return __x; } 
# 1160
}; 
# 1163
template< class _Tp> struct _Identity< const _Tp>  : public std::_Identity< _Tp>  { }; 
# 1165
template< class _Pair> 
# 1166
struct _Select1st : public unary_function< _Pair, typename _Pair::first_type>  { 
# 1170
typename _Pair::first_type &operator()(_Pair &__x) const 
# 1171
{ return __x.first; } 
# 1174
const typename _Pair::first_type &operator()(const _Pair &__x) const 
# 1175
{ return __x.first; } 
# 1178
template< class _Pair2> typename _Pair2::first_type &
# 1180
operator()(_Pair2 &__x) const 
# 1181
{ return __x.first; } 
# 1183
template< class _Pair2> const typename _Pair2::first_type &
# 1185
operator()(const _Pair2 &__x) const 
# 1186
{ return __x.first; } 
# 1188
}; 
# 1190
template< class _Pair> 
# 1191
struct _Select2nd : public unary_function< _Pair, typename _Pair::second_type>  { 
# 1195
typename _Pair::second_type &operator()(_Pair &__x) const 
# 1196
{ return __x.second; } 
# 1199
const typename _Pair::second_type &operator()(const _Pair &__x) const 
# 1200
{ return __x.second; } 
# 1201
}; 
# 1223 "/usr/include/c++/11/bits/stl_function.h" 3
template< class _Ret, class _Tp> 
# 1224
class mem_fun_t : public unary_function< _Tp *, _Ret>  { 
# 1228
public: explicit mem_fun_t(_Ret (_Tp::*__pf)(void)) : _M_f(__pf) 
# 1229
{ } 
# 1232
_Ret operator()(_Tp *__p) const 
# 1233
{ return (__p->*(_M_f))(); } 
# 1236
private: _Ret (_Tp::*_M_f)(void); 
# 1237
}; 
# 1240
template< class _Ret, class _Tp> 
# 1241
class const_mem_fun_t : public unary_function< const _Tp *, _Ret>  { 
# 1245
public: explicit const_mem_fun_t(_Ret (_Tp::*__pf)(void) const) : _M_f(__pf) 
# 1246
{ } 
# 1249
_Ret operator()(const _Tp *__p) const 
# 1250
{ return (__p->*(_M_f))(); } 
# 1253
private: _Ret (_Tp::*_M_f)(void) const; 
# 1254
}; 
# 1257
template< class _Ret, class _Tp> 
# 1258
class mem_fun_ref_t : public unary_function< _Tp, _Ret>  { 
# 1262
public: explicit mem_fun_ref_t(_Ret (_Tp::*__pf)(void)) : _M_f(__pf) 
# 1263
{ } 
# 1266
_Ret operator()(_Tp &__r) const 
# 1267
{ return (__r.*(_M_f))(); } 
# 1270
private: _Ret (_Tp::*_M_f)(void); 
# 1271
}; 
# 1274
template< class _Ret, class _Tp> 
# 1275
class const_mem_fun_ref_t : public unary_function< _Tp, _Ret>  { 
# 1279
public: explicit const_mem_fun_ref_t(_Ret (_Tp::*__pf)(void) const) : _M_f(__pf) 
# 1280
{ } 
# 1283
_Ret operator()(const _Tp &__r) const 
# 1284
{ return (__r.*(_M_f))(); } 
# 1287
private: _Ret (_Tp::*_M_f)(void) const; 
# 1288
}; 
# 1291
template< class _Ret, class _Tp, class _Arg> 
# 1292
class mem_fun1_t : public binary_function< _Tp *, _Arg, _Ret>  { 
# 1296
public: explicit mem_fun1_t(_Ret (_Tp::*__pf)(_Arg)) : _M_f(__pf) 
# 1297
{ } 
# 1300
_Ret operator()(_Tp *__p, _Arg __x) const 
# 1301
{ return (__p->*(_M_f))(__x); } 
# 1304
private: _Ret (_Tp::*_M_f)(_Arg); 
# 1305
}; 
# 1308
template< class _Ret, class _Tp, class _Arg> 
# 1309
class const_mem_fun1_t : public binary_function< const _Tp *, _Arg, _Ret>  { 
# 1313
public: explicit const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const) : _M_f(__pf) 
# 1314
{ } 
# 1317
_Ret operator()(const _Tp *__p, _Arg __x) const 
# 1318
{ return (__p->*(_M_f))(__x); } 
# 1321
private: _Ret (_Tp::*_M_f)(_Arg) const; 
# 1322
}; 
# 1325
template< class _Ret, class _Tp, class _Arg> 
# 1326
class mem_fun1_ref_t : public binary_function< _Tp, _Arg, _Ret>  { 
# 1330
public: explicit mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg)) : _M_f(__pf) 
# 1331
{ } 
# 1334
_Ret operator()(_Tp &__r, _Arg __x) const 
# 1335
{ return (__r.*(_M_f))(__x); } 
# 1338
private: _Ret (_Tp::*_M_f)(_Arg); 
# 1339
}; 
# 1342
template< class _Ret, class _Tp, class _Arg> 
# 1343
class const_mem_fun1_ref_t : public binary_function< _Tp, _Arg, _Ret>  { 
# 1347
public: explicit const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const) : _M_f(__pf) 
# 1348
{ } 
# 1351
_Ret operator()(const _Tp &__r, _Arg __x) const 
# 1352
{ return (__r.*(_M_f))(__x); } 
# 1355
private: _Ret (_Tp::*_M_f)(_Arg) const; 
# 1356
}; 
# 1360
template< class _Ret, class _Tp> inline mem_fun_t< _Ret, _Tp>  
# 1362
mem_fun(_Ret (_Tp::*__f)(void)) 
# 1363
{ return ((mem_fun_t< _Ret, _Tp> )(__f)); } 
# 1365
template< class _Ret, class _Tp> inline const_mem_fun_t< _Ret, _Tp>  
# 1367
mem_fun(_Ret (_Tp::*__f)(void) const) 
# 1368
{ return ((const_mem_fun_t< _Ret, _Tp> )(__f)); } 
# 1370
template< class _Ret, class _Tp> inline mem_fun_ref_t< _Ret, _Tp>  
# 1372
mem_fun_ref(_Ret (_Tp::*__f)(void)) 
# 1373
{ return ((mem_fun_ref_t< _Ret, _Tp> )(__f)); } 
# 1375
template< class _Ret, class _Tp> inline const_mem_fun_ref_t< _Ret, _Tp>  
# 1377
mem_fun_ref(_Ret (_Tp::*__f)(void) const) 
# 1378
{ return ((const_mem_fun_ref_t< _Ret, _Tp> )(__f)); } 
# 1380
template< class _Ret, class _Tp, class _Arg> inline mem_fun1_t< _Ret, _Tp, _Arg>  
# 1382
mem_fun(_Ret (_Tp::*__f)(_Arg)) 
# 1383
{ return ((mem_fun1_t< _Ret, _Tp, _Arg> )(__f)); } 
# 1385
template< class _Ret, class _Tp, class _Arg> inline const_mem_fun1_t< _Ret, _Tp, _Arg>  
# 1387
mem_fun(_Ret (_Tp::*__f)(_Arg) const) 
# 1388
{ return ((const_mem_fun1_t< _Ret, _Tp, _Arg> )(__f)); } 
# 1390
template< class _Ret, class _Tp, class _Arg> inline mem_fun1_ref_t< _Ret, _Tp, _Arg>  
# 1392
mem_fun_ref(_Ret (_Tp::*__f)(_Arg)) 
# 1393
{ return ((mem_fun1_ref_t< _Ret, _Tp, _Arg> )(__f)); } 
# 1395
template< class _Ret, class _Tp, class _Arg> inline const_mem_fun1_ref_t< _Ret, _Tp, _Arg>  
# 1397
mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const) 
# 1398
{ return ((const_mem_fun1_ref_t< _Ret, _Tp, _Arg> )(__f)); } 
# 1403
template< class _Func, class _SfinaeType, class  = __void_t< > > 
# 1404
struct __has_is_transparent { 
# 1405
}; 
# 1407
template< class _Func, class _SfinaeType> 
# 1408
struct __has_is_transparent< _Func, _SfinaeType, __void_t< typename _Func::is_transparent> >  { 
# 1410
typedef void type; }; 
# 1412
template< class _Func, class _SfinaeType> using __has_is_transparent_t = typename __has_is_transparent< _Func, _SfinaeType> ::type; 
# 1418
}
# 60 "/usr/include/c++/11/backward/binders.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 63
namespace std __attribute((__visibility__("default"))) { 
# 107 "/usr/include/c++/11/backward/binders.h" 3
template< class _Operation> 
# 108
class binder1st : public unary_function< typename _Operation::second_argument_type, typename _Operation::result_type>  { 
# 113
protected: _Operation op; 
# 114
typename _Operation::first_argument_type value; 
# 117
public: binder1st(const _Operation &__x, const typename _Operation::first_argument_type &
# 118
__y) : op(__x), value(__y) 
# 119
{ } 
# 122
typename _Operation::result_type operator()(const typename _Operation::second_argument_type &__x) const 
# 123
{ return (op)(value, __x); } 
# 128
typename _Operation::result_type operator()(typename _Operation::second_argument_type &__x) const 
# 129
{ return (op)(value, __x); } 
# 130
} __attribute((__deprecated__("use \'std::bind\' instead"))); 
# 133
template< class _Operation, class _Tp> inline binder1st< _Operation>  
# 135
bind1st(const _Operation &__fn, const _Tp &__x) 
# 136
{ 
# 137
typedef typename _Operation::first_argument_type _Arg1_type; 
# 138
return binder1st< _Operation> (__fn, (_Arg1_type)__x); 
# 139
} 
# 142
template< class _Operation> 
# 143
class binder2nd : public unary_function< typename _Operation::first_argument_type, typename _Operation::result_type>  { 
# 148
protected: _Operation op; 
# 149
typename _Operation::second_argument_type value; 
# 152
public: binder2nd(const _Operation &__x, const typename _Operation::second_argument_type &
# 153
__y) : op(__x), value(__y) 
# 154
{ } 
# 157
typename _Operation::result_type operator()(const typename _Operation::first_argument_type &__x) const 
# 158
{ return (op)(__x, value); } 
# 163
typename _Operation::result_type operator()(typename _Operation::first_argument_type &__x) const 
# 164
{ return (op)(__x, value); } 
# 165
} __attribute((__deprecated__("use \'std::bind\' instead"))); 
# 168
template< class _Operation, class _Tp> inline binder2nd< _Operation>  
# 170
bind2nd(const _Operation &__fn, const _Tp &__x) 
# 171
{ 
# 172
typedef typename _Operation::second_argument_type _Arg2_type; 
# 173
return binder2nd< _Operation> (__fn, (_Arg2_type)__x); 
# 174
} 
# 178
}
# 180
#pragma GCC diagnostic pop
# 36 "/usr/include/c++/11/bits/exception.h" 3
#pragma GCC visibility push ( default )
# 40
extern "C++" {
# 42
namespace std { 
# 61 "/usr/include/c++/11/bits/exception.h" 3
class exception { 
# 64
public: exception() noexcept { } 
# 65
virtual ~exception() noexcept; 
# 67
exception(const exception &) = default;
# 68
exception &operator=(const exception &) = default;
# 69
exception(exception &&) = default;
# 70
exception &operator=(exception &&) = default;
# 76
virtual const char *what() const noexcept; 
# 77
}; 
# 81
}
# 83
}
# 85
#pragma GCC visibility pop
# 43 "/usr/include/c++/11/new" 3
#pragma GCC visibility push ( default )
# 45
extern "C++" {
# 47
namespace std { 
# 55
class bad_alloc : public exception { 
# 58
public: bad_alloc() throw() { } 
# 61
bad_alloc(const bad_alloc &) = default;
# 62
bad_alloc &operator=(const bad_alloc &) = default;
# 67
virtual ~bad_alloc() throw(); 
# 70
virtual const char *what() const throw(); 
# 71
}; 
# 74
class bad_array_new_length : public bad_alloc { 
# 77
public: bad_array_new_length() throw() { } 
# 81
virtual ~bad_array_new_length() throw(); 
# 84
virtual const char *what() const throw(); 
# 85
}; 
# 89
enum class align_val_t: size_t { }; 
# 92
struct nothrow_t { 
# 95
explicit nothrow_t() = default;
# 97
}; 
# 99
extern const nothrow_t nothrow; 
# 103
typedef void (*new_handler)(void); 
# 107
new_handler set_new_handler(new_handler) throw(); 
# 111
new_handler get_new_handler() noexcept; 
# 113
}
# 126 "/usr/include/c++/11/new" 3
[[__nodiscard__]] void *operator new(std::size_t)
# 127
 __attribute((__externally_visible__)); 
# 128
[[__nodiscard__]] void *operator new[](std::size_t)
# 129
 __attribute((__externally_visible__)); 
# 130
void operator delete(void *) noexcept
# 131
 __attribute((__externally_visible__)); 
# 132
void operator delete[](void *) noexcept
# 133
 __attribute((__externally_visible__)); 
# 135
void operator delete(void *, std::size_t) noexcept
# 136
 __attribute((__externally_visible__)); 
# 137
void operator delete[](void *, std::size_t) noexcept
# 138
 __attribute((__externally_visible__)); 
# 140
[[__nodiscard__]] void *operator new(std::size_t, const std::nothrow_t &) noexcept
# 141
 __attribute((__externally_visible__, __alloc_size__(1), __malloc__)); 
# 142
[[__nodiscard__]] void *operator new[](std::size_t, const std::nothrow_t &) noexcept
# 143
 __attribute((__externally_visible__, __alloc_size__(1), __malloc__)); 
# 144
void operator delete(void *, const std::nothrow_t &) noexcept
# 145
 __attribute((__externally_visible__)); 
# 146
void operator delete[](void *, const std::nothrow_t &) noexcept
# 147
 __attribute((__externally_visible__)); 
# 149
[[__nodiscard__]] void *operator new(std::size_t, std::align_val_t)
# 150
 __attribute((__externally_visible__, __alloc_size__(1), __malloc__)); 
# 151
[[__nodiscard__]] void *operator new(std::size_t, std::align_val_t, const std::nothrow_t &) noexcept
# 152
 __attribute((__externally_visible__, __alloc_size__(1), __malloc__)); 
# 153
void operator delete(void *, std::align_val_t) noexcept
# 154
 __attribute((__externally_visible__)); 
# 155
void operator delete(void *, std::align_val_t, const std::nothrow_t &) noexcept
# 156
 __attribute((__externally_visible__)); 
# 157
[[__nodiscard__]] void *operator new[](std::size_t, std::align_val_t)
# 158
 __attribute((__externally_visible__, __alloc_size__(1), __malloc__)); 
# 159
[[__nodiscard__]] void *operator new[](std::size_t, std::align_val_t, const std::nothrow_t &) noexcept
# 160
 __attribute((__externally_visible__, __alloc_size__(1), __malloc__)); 
# 161
void operator delete[](void *, std::align_val_t) noexcept
# 162
 __attribute((__externally_visible__)); 
# 163
void operator delete[](void *, std::align_val_t, const std::nothrow_t &) noexcept
# 164
 __attribute((__externally_visible__)); 
# 166
void operator delete(void *, std::size_t, std::align_val_t) noexcept
# 167
 __attribute((__externally_visible__)); 
# 168
void operator delete[](void *, std::size_t, std::align_val_t) noexcept
# 169
 __attribute((__externally_visible__)); 
# 174
[[__nodiscard__]] inline void *operator new(std::size_t, void *__p) noexcept 
# 175
{ return __p; } 
# 176
[[__nodiscard__]] inline void *operator new[](std::size_t, void *__p) noexcept 
# 177
{ return __p; } 
# 180
inline void operator delete(void *, void *) noexcept { } 
# 181
inline void operator delete[](void *, void *) noexcept { } 
# 183
}
# 187
namespace std { 
# 191
template< class _Tp> 
# 192
[[nodiscard]] constexpr _Tp *
# 193
launder(_Tp *__p) noexcept 
# 194
{ return __builtin_launder(__p); } 
# 199
template < typename _Ret, typename ... _Args, bool _NE >
    void launder ( _Ret ( * ) ( _Args ... ) noexcept ( _NE ) ) = delete;
# 201
template < typename _Ret, typename ... _Args, bool _NE >
    void launder ( _Ret ( * ) ( _Args ... ... ) noexcept ( _NE ) ) = delete;
# 204
inline void launder(void *) = delete;
# 205
inline void launder(const void *) = delete;
# 206
inline void launder(volatile void *) = delete;
# 207
inline void launder(const volatile void *) = delete;
# 208
}
# 230 "/usr/include/c++/11/new" 3
#pragma GCC visibility pop
# 67 "/usr/include/c++/11/bits/stl_relops.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 71
namespace rel_ops { 
# 85 "/usr/include/c++/11/bits/stl_relops.h" 3
template< class _Tp> inline bool 
# 87
operator!=(const _Tp &__x, const _Tp &__y) 
# 88
{ return !(__x == __y); } 
# 98 "/usr/include/c++/11/bits/stl_relops.h" 3
template< class _Tp> inline bool 
# 100
operator>(const _Tp &__x, const _Tp &__y) 
# 101
{ return __y < __x; } 
# 111 "/usr/include/c++/11/bits/stl_relops.h" 3
template< class _Tp> inline bool 
# 113
operator<=(const _Tp &__x, const _Tp &__y) 
# 114
{ return !(__y < __x); } 
# 124 "/usr/include/c++/11/bits/stl_relops.h" 3
template< class _Tp> inline bool 
# 126
operator>=(const _Tp &__x, const _Tp &__y) 
# 127
{ return !(__x < __y); } 
# 128
}
# 131
}
# 39 "/usr/include/c++/11/initializer_list" 3
#pragma GCC visibility push ( default )
# 43
namespace std { 
# 46
template< class _E> 
# 47
class initializer_list { 
# 50
public: typedef _E value_type; 
# 51
typedef const _E &reference; 
# 52
typedef const _E &const_reference; 
# 53
typedef size_t size_type; 
# 54
typedef const _E *iterator; 
# 55
typedef const _E *const_iterator; 
# 58
private: iterator _M_array; 
# 59
size_type _M_len; 
# 62
constexpr initializer_list(const_iterator __a, size_type __l) : _M_array(__a), _M_len(__l) 
# 63
{ } 
# 66
public: constexpr initializer_list() noexcept : _M_array((0)), _M_len((0)) 
# 67
{ } 
# 71
constexpr size_type size() const noexcept { return _M_len; } 
# 75
constexpr const_iterator begin() const noexcept { return _M_array; } 
# 79
constexpr const_iterator end() const noexcept { return begin() + size(); } 
# 80
}; 
# 88
template< class _Tp> constexpr const _Tp *
# 90
begin(initializer_list< _Tp>  __ils) noexcept 
# 91
{ return __ils.begin(); } 
# 99
template< class _Tp> constexpr const _Tp *
# 101
end(initializer_list< _Tp>  __ils) noexcept 
# 102
{ return __ils.end(); } 
# 103
}
# 105
#pragma GCC visibility pop
# 82 "/usr/include/c++/11/utility" 3
namespace std __attribute((__visibility__("default"))) { 
# 87
template< class _Tp> struct tuple_size; 
# 94
template< class _Tp, class 
# 95
_Up = typename remove_cv< _Tp> ::type, class 
# 96
 = typename enable_if< is_same< _Tp, _Up> ::value> ::type, size_t 
# 97
 = tuple_size< _Tp> ::value> using __enable_if_has_tuple_size = _Tp; 
# 100
template< class _Tp> 
# 101
struct tuple_size< const __enable_if_has_tuple_size< _Tp> >  : public std::tuple_size< _Tp>  { 
# 102
}; 
# 104
template< class _Tp> 
# 105
struct tuple_size< volatile __enable_if_has_tuple_size< _Tp> >  : public std::tuple_size< _Tp>  { 
# 106
}; 
# 108
template< class _Tp> 
# 109
struct tuple_size< const volatile __enable_if_has_tuple_size< _Tp> >  : public std::tuple_size< _Tp>  { 
# 110
}; 
# 113
template< size_t __i, class _Tp> struct tuple_element; 
# 117
template< size_t __i, class _Tp> using __tuple_element_t = typename tuple_element< __i, _Tp> ::type; 
# 120
template< size_t __i, class _Tp> 
# 121
struct tuple_element< __i, const _Tp>  { 
# 123
typedef typename add_const< __tuple_element_t< __i, _Tp> > ::type type; 
# 124
}; 
# 126
template< size_t __i, class _Tp> 
# 127
struct tuple_element< __i, volatile _Tp>  { 
# 129
typedef typename add_volatile< __tuple_element_t< __i, _Tp> > ::type type; 
# 130
}; 
# 132
template< size_t __i, class _Tp> 
# 133
struct tuple_element< __i, const volatile _Tp>  { 
# 135
typedef typename add_cv< __tuple_element_t< __i, _Tp> > ::type type; 
# 136
}; 
# 144
template< size_t __i, class _Tp> using tuple_element_t = typename tuple_element< __i, _Tp> ::type; 
# 151
template< class _T1, class _T2> 
# 152
struct __is_tuple_like_impl< pair< _T1, _T2> >  : public true_type { 
# 153
}; 
# 156
template< class _Tp1, class _Tp2> 
# 157
struct tuple_size< pair< _Tp1, _Tp2> >  : public integral_constant< unsigned long, 2UL>  { 
# 158
}; 
# 161
template< class _Tp1, class _Tp2> 
# 162
struct tuple_element< 0, pair< _Tp1, _Tp2> >  { 
# 163
typedef _Tp1 type; }; 
# 166
template< class _Tp1, class _Tp2> 
# 167
struct tuple_element< 1, pair< _Tp1, _Tp2> >  { 
# 168
typedef _Tp2 type; }; 
# 170
template< size_t _Int> struct __pair_get; 
# 174
template<> struct __pair_get< 0UL>  { 
# 176
template< class _Tp1, class _Tp2> static constexpr _Tp1 &
# 178
__get(pair< _Tp1, _Tp2>  &__pair) noexcept 
# 179
{ return __pair.first; } 
# 181
template< class _Tp1, class _Tp2> static constexpr _Tp1 &&
# 183
__move_get(pair< _Tp1, _Tp2>  &&__pair) noexcept 
# 184
{ return std::forward< _Tp1> ((__pair.first)); } 
# 186
template< class _Tp1, class _Tp2> static constexpr const _Tp1 &
# 188
__const_get(const pair< _Tp1, _Tp2>  &__pair) noexcept 
# 189
{ return __pair.first; } 
# 191
template< class _Tp1, class _Tp2> static constexpr const _Tp1 &&
# 193
__const_move_get(const pair< _Tp1, _Tp2>  &&__pair) noexcept 
# 194
{ return std::forward< const _Tp1> ((__pair.first)); } 
# 195
}; 
# 198
template<> struct __pair_get< 1UL>  { 
# 200
template< class _Tp1, class _Tp2> static constexpr _Tp2 &
# 202
__get(pair< _Tp1, _Tp2>  &__pair) noexcept 
# 203
{ return __pair.second; } 
# 205
template< class _Tp1, class _Tp2> static constexpr _Tp2 &&
# 207
__move_get(pair< _Tp1, _Tp2>  &&__pair) noexcept 
# 208
{ return std::forward< _Tp2> ((__pair.second)); } 
# 210
template< class _Tp1, class _Tp2> static constexpr const _Tp2 &
# 212
__const_get(const pair< _Tp1, _Tp2>  &__pair) noexcept 
# 213
{ return __pair.second; } 
# 215
template< class _Tp1, class _Tp2> static constexpr const _Tp2 &&
# 217
__const_move_get(const pair< _Tp1, _Tp2>  &&__pair) noexcept 
# 218
{ return std::forward< const _Tp2> ((__pair.second)); } 
# 219
}; 
# 221
template< size_t _Int, class _Tp1, class _Tp2> constexpr typename tuple_element< _Int, pair< _Tp1, _Tp2> > ::type &
# 223
get(pair< _Tp1, _Tp2>  &__in) noexcept 
# 224
{ return __pair_get< _Int> ::__get(__in); } 
# 226
template< size_t _Int, class _Tp1, class _Tp2> constexpr typename tuple_element< _Int, pair< _Tp1, _Tp2> > ::type &&
# 228
get(pair< _Tp1, _Tp2>  &&__in) noexcept 
# 229
{ return __pair_get< _Int> ::__move_get(std::move(__in)); } 
# 231
template< size_t _Int, class _Tp1, class _Tp2> constexpr const typename tuple_element< _Int, pair< _Tp1, _Tp2> > ::type &
# 233
get(const pair< _Tp1, _Tp2>  &__in) noexcept 
# 234
{ return __pair_get< _Int> ::__const_get(__in); } 
# 236
template< size_t _Int, class _Tp1, class _Tp2> constexpr const typename tuple_element< _Int, pair< _Tp1, _Tp2> > ::type &&
# 238
get(const pair< _Tp1, _Tp2>  &&__in) noexcept 
# 239
{ return __pair_get< _Int> ::__const_move_get(std::move(__in)); } 
# 245
template< class _Tp, class _Up> constexpr _Tp &
# 247
get(pair< _Tp, _Up>  &__p) noexcept 
# 248
{ return __p.first; } 
# 250
template< class _Tp, class _Up> constexpr const _Tp &
# 252
get(const pair< _Tp, _Up>  &__p) noexcept 
# 253
{ return __p.first; } 
# 255
template< class _Tp, class _Up> constexpr _Tp &&
# 257
get(pair< _Tp, _Up>  &&__p) noexcept 
# 258
{ return std::move((__p.first)); } 
# 260
template< class _Tp, class _Up> constexpr const _Tp &&
# 262
get(const pair< _Tp, _Up>  &&__p) noexcept 
# 263
{ return std::move((__p.first)); } 
# 265
template< class _Tp, class _Up> constexpr _Tp &
# 267
get(pair< _Up, _Tp>  &__p) noexcept 
# 268
{ return __p.second; } 
# 270
template< class _Tp, class _Up> constexpr const _Tp &
# 272
get(const pair< _Up, _Tp>  &__p) noexcept 
# 273
{ return __p.second; } 
# 275
template< class _Tp, class _Up> constexpr _Tp &&
# 277
get(pair< _Up, _Tp>  &&__p) noexcept 
# 278
{ return std::move((__p.second)); } 
# 280
template< class _Tp, class _Up> constexpr const _Tp &&
# 282
get(const pair< _Up, _Tp>  &&__p) noexcept 
# 283
{ return std::move((__p.second)); } 
# 288
template< class _Tp, class _Up = _Tp> inline _Tp 
# 291
exchange(_Tp &__obj, _Up &&__new_val) 
# 292
{ return std::__exchange(__obj, std::forward< _Up> (__new_val)); } 
# 298
template< size_t ..._Indexes> struct _Index_tuple { }; 
# 301
template< size_t _Num> 
# 302
struct _Build_index_tuple { 
# 312 "/usr/include/c++/11/utility" 3
using __type = _Index_tuple< __integer_pack(_Num)...> ; 
# 314
}; 
# 321
template< class _Tp, _Tp ..._Idx> 
# 322
struct integer_sequence { 
# 324
typedef _Tp value_type; 
# 325
static constexpr size_t size() noexcept { return sizeof...(_Idx); } 
# 326
}; 
# 329
template< class _Tp, _Tp _Num> using make_integer_sequence = integer_sequence< _Tp, __integer_pack(_Num)...> ; 
# 338
template< size_t ..._Idx> using index_sequence = integer_sequence< unsigned long, _Idx...> ; 
# 342
template< size_t _Num> using make_index_sequence = make_integer_sequence< unsigned long, _Num> ; 
# 346
template< class ..._Types> using index_sequence_for = make_index_sequence< sizeof...(_Types)> ; 
# 352
struct in_place_t { 
# 353
explicit in_place_t() = default;
# 354
}; 
# 356
constexpr inline in_place_t in_place{}; 
# 358
template< class _Tp> struct in_place_type_t { 
# 360
explicit in_place_type_t() = default;
# 361
}; 
# 363
template< class _Tp> constexpr inline in_place_type_t< _Tp>  
# 364
in_place_type{}; 
# 366
template< size_t _Idx> struct in_place_index_t { 
# 368
explicit in_place_index_t() = default;
# 369
}; 
# 371
template< size_t _Idx> constexpr inline in_place_index_t< _Idx>  
# 372
in_place_index{}; 
# 374
template< class > constexpr inline bool 
# 375
__is_in_place_type_v = false; 
# 377
template< class _Tp> constexpr inline bool 
# 378
__is_in_place_type_v< in_place_type_t< _Tp> >  = true; 
# 380
template< class _Tp> using __is_in_place_type = bool_constant< __is_in_place_type_v< _Tp> > ; 
# 384
template< class _Tp> 
# 385
[[nodiscard]] constexpr add_const_t< _Tp>  &
# 387
as_const(_Tp &__t) noexcept 
# 388
{ return __t; } 
# 390
template < typename _Tp >
    void as_const ( const _Tp && ) = delete;
# 477 "/usr/include/c++/11/utility" 3
}
# 40 "/usr/include/c++/11/bits/range_access.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 49
template< class _Container> constexpr auto 
# 51
begin(_Container &__cont)->__decltype((__cont.begin())) 
# 52
{ return __cont.begin(); } 
# 59
template< class _Container> constexpr auto 
# 61
begin(const _Container &__cont)->__decltype((__cont.begin())) 
# 62
{ return __cont.begin(); } 
# 69
template< class _Container> constexpr auto 
# 71
end(_Container &__cont)->__decltype((__cont.end())) 
# 72
{ return __cont.end(); } 
# 79
template< class _Container> constexpr auto 
# 81
end(const _Container &__cont)->__decltype((__cont.end())) 
# 82
{ return __cont.end(); } 
# 88
template< class _Tp, size_t _Nm> constexpr _Tp *
# 90
begin(_Tp (&__arr)[_Nm]) noexcept 
# 91
{ return __arr; } 
# 98
template< class _Tp, size_t _Nm> constexpr _Tp *
# 100
end(_Tp (&__arr)[_Nm]) noexcept 
# 101
{ return __arr + _Nm; } 
# 105
template< class _Tp> class valarray; 
# 107
template< class _Tp> _Tp *begin(valarray< _Tp>  &) noexcept; 
# 108
template< class _Tp> const _Tp *begin(const valarray< _Tp>  &) noexcept; 
# 109
template< class _Tp> _Tp *end(valarray< _Tp>  &) noexcept; 
# 110
template< class _Tp> const _Tp *end(const valarray< _Tp>  &) noexcept; 
# 117
template< class _Container> constexpr auto 
# 119
cbegin(const _Container &__cont) noexcept(noexcept(std::begin(__cont)))->__decltype((std::begin(__cont))) 
# 121
{ return std::begin(__cont); } 
# 128
template< class _Container> constexpr auto 
# 130
cend(const _Container &__cont) noexcept(noexcept(std::end(__cont)))->__decltype((std::end(__cont))) 
# 132
{ return std::end(__cont); } 
# 139
template< class _Container> constexpr auto 
# 141
rbegin(_Container &__cont)->__decltype((__cont.rbegin())) 
# 142
{ return __cont.rbegin(); } 
# 149
template< class _Container> constexpr auto 
# 151
rbegin(const _Container &__cont)->__decltype((__cont.rbegin())) 
# 152
{ return __cont.rbegin(); } 
# 159
template< class _Container> constexpr auto 
# 161
rend(_Container &__cont)->__decltype((__cont.rend())) 
# 162
{ return __cont.rend(); } 
# 169
template< class _Container> constexpr auto 
# 171
rend(const _Container &__cont)->__decltype((__cont.rend())) 
# 172
{ return __cont.rend(); } 
# 179
template< class _Tp, size_t _Nm> constexpr reverse_iterator< _Tp *>  
# 181
rbegin(_Tp (&__arr)[_Nm]) noexcept 
# 182
{ return ((reverse_iterator< _Tp *> )(__arr + _Nm)); } 
# 189
template< class _Tp, size_t _Nm> constexpr reverse_iterator< _Tp *>  
# 191
rend(_Tp (&__arr)[_Nm]) noexcept 
# 192
{ return ((reverse_iterator< _Tp *> )(__arr)); } 
# 199
template< class _Tp> constexpr reverse_iterator< const _Tp *>  
# 201
rbegin(initializer_list< _Tp>  __il) noexcept 
# 202
{ return ((reverse_iterator< const _Tp *> )(__il.end())); } 
# 209
template< class _Tp> constexpr reverse_iterator< const _Tp *>  
# 211
rend(initializer_list< _Tp>  __il) noexcept 
# 212
{ return ((reverse_iterator< const _Tp *> )(__il.begin())); } 
# 219
template< class _Container> constexpr auto 
# 221
crbegin(const _Container &__cont)->__decltype((std::rbegin(__cont))) 
# 222
{ return std::rbegin(__cont); } 
# 229
template< class _Container> constexpr auto 
# 231
crend(const _Container &__cont)->__decltype((std::rend(__cont))) 
# 232
{ return std::rend(__cont); } 
# 243 "/usr/include/c++/11/bits/range_access.h" 3
template< class _Container> constexpr auto 
# 245
size(const _Container &__cont) noexcept(noexcept(__cont.size()))->__decltype((__cont.size())) 
# 247
{ return __cont.size(); } 
# 252
template< class _Tp, size_t _Nm> constexpr size_t 
# 254
size(const _Tp (&)[_Nm]) noexcept 
# 255
{ return _Nm; } 
# 261
template< class _Container> 
# 262
[[nodiscard]] constexpr auto 
# 263
empty(const _Container &__cont) noexcept(noexcept(__cont.empty()))->__decltype((__cont.empty())) 
# 265
{ return __cont.empty(); } 
# 270
template< class _Tp, size_t _Nm> 
# 271
[[nodiscard]] constexpr bool 
# 272
empty(const _Tp (&)[_Nm]) noexcept 
# 273
{ return false; } 
# 279
template< class _Tp> 
# 280
[[nodiscard]] constexpr bool 
# 281
empty(initializer_list< _Tp>  __il) noexcept 
# 282
{ return __il.size() == 0; } 
# 288
template< class _Container> constexpr auto 
# 290
data(_Container &__cont) noexcept(noexcept(__cont.data()))->__decltype((__cont.data())) 
# 292
{ return __cont.data(); } 
# 298
template< class _Container> constexpr auto 
# 300
data(const _Container &__cont) noexcept(noexcept(__cont.data()))->__decltype((__cont.data())) 
# 302
{ return __cont.data(); } 
# 308
template< class _Tp, size_t _Nm> constexpr _Tp *
# 310
data(_Tp (&__array)[_Nm]) noexcept 
# 311
{ return __array; } 
# 317
template< class _Tp> constexpr const _Tp *
# 319
data(initializer_list< _Tp>  __il) noexcept 
# 320
{ return __il.begin(); } 
# 342 "/usr/include/c++/11/bits/range_access.h" 3
}
# 44 "/usr/include/c++/11/array" 3
namespace std __attribute((__visibility__("default"))) { 
# 48
template< class _Tp, size_t _Nm> 
# 49
struct __array_traits { 
# 51
typedef _Tp _Type[_Nm]; 
# 52
typedef __is_swappable< _Tp>  _Is_swappable; 
# 53
typedef __is_nothrow_swappable< _Tp>  _Is_nothrow_swappable; 
# 56
static constexpr _Tp &_S_ref(const _Type &__t, size_t __n) noexcept 
# 57
{ return const_cast< _Tp &>(__t[__n]); } 
# 60
static constexpr _Tp *_S_ptr(const _Type &__t) noexcept 
# 61
{ return const_cast< _Tp *>(__t); } 
# 62
}; 
# 64
template< class _Tp> 
# 65
struct __array_traits< _Tp, 0>  { 
# 67
struct _Type { }; 
# 68
typedef true_type _Is_swappable; 
# 69
typedef true_type _Is_nothrow_swappable; 
# 72
static constexpr _Tp &_S_ref(const _Type &, size_t) noexcept 
# 73
{ return *(static_cast< _Tp *>(nullptr)); } 
# 76
static constexpr _Tp *_S_ptr(const _Type &) noexcept 
# 77
{ return nullptr; } 
# 78
}; 
# 94 "/usr/include/c++/11/array" 3
template< class _Tp, size_t _Nm> 
# 95
struct array { 
# 97
typedef _Tp value_type; 
# 98
typedef value_type *pointer; 
# 99
typedef const value_type *const_pointer; 
# 100
typedef value_type &reference; 
# 101
typedef const value_type &const_reference; 
# 102
typedef value_type *iterator; 
# 103
typedef const value_type *const_iterator; 
# 104
typedef size_t size_type; 
# 105
typedef ptrdiff_t difference_type; 
# 106
typedef std::reverse_iterator< iterator>  reverse_iterator; 
# 107
typedef std::reverse_iterator< const_iterator>  const_reverse_iterator; 
# 110
typedef __array_traits< _Tp, _Nm>  _AT_Type; 
# 111
typename __array_traits< _Tp, _Nm> ::_Type _M_elems; 
# 117
void fill(const value_type &__u) 
# 118
{ std::fill_n(begin(), size(), __u); } 
# 121
void swap(array &__other) noexcept(_AT_Type::_Is_nothrow_swappable::value) 
# 123
{ std::swap_ranges(begin(), end(), __other.begin()); } 
# 127
constexpr iterator begin() noexcept 
# 128
{ return (iterator)data(); } 
# 131
constexpr const_iterator begin() const noexcept 
# 132
{ return (const_iterator)data(); } 
# 135
constexpr iterator end() noexcept 
# 136
{ return (iterator)(data() + _Nm); } 
# 139
constexpr const_iterator end() const noexcept 
# 140
{ return (const_iterator)(data() + _Nm); } 
# 143
constexpr reverse_iterator rbegin() noexcept 
# 144
{ return ((std::reverse_iterator< iterator> )(end())); } 
# 147
constexpr const_reverse_iterator rbegin() const noexcept 
# 148
{ return ((std::reverse_iterator< const_iterator> )(end())); } 
# 151
constexpr reverse_iterator rend() noexcept 
# 152
{ return ((std::reverse_iterator< iterator> )(begin())); } 
# 155
constexpr const_reverse_iterator rend() const noexcept 
# 156
{ return ((std::reverse_iterator< const_iterator> )(begin())); } 
# 159
constexpr const_iterator cbegin() const noexcept 
# 160
{ return (const_iterator)data(); } 
# 163
constexpr const_iterator cend() const noexcept 
# 164
{ return (const_iterator)(data() + _Nm); } 
# 167
constexpr const_reverse_iterator crbegin() const noexcept 
# 168
{ return ((std::reverse_iterator< const_iterator> )(end())); } 
# 171
constexpr const_reverse_iterator crend() const noexcept 
# 172
{ return ((std::reverse_iterator< const_iterator> )(begin())); } 
# 176
constexpr size_type size() const noexcept { return _Nm; } 
# 179
constexpr size_type max_size() const noexcept { return _Nm; } 
# 181
[[__nodiscard__]] constexpr bool 
# 182
empty() const noexcept { return size() == 0; } 
# 186
constexpr reference operator[](size_type __n) noexcept 
# 187
{ 
# 188
; 
# 189
return _AT_Type::_S_ref(_M_elems, __n); 
# 190
} 
# 193
constexpr const_reference operator[](size_type __n) const noexcept 
# 194
{ 
# 196
; 
# 198
return _AT_Type::_S_ref(_M_elems, __n); 
# 199
} 
# 202
constexpr reference at(size_type __n) 
# 203
{ 
# 204
if (__n >= _Nm) { 
# 205
std::__throw_out_of_range_fmt("array::at: __n (which is %zu) >= _Nm (which is %zu)", __n, _Nm); }  
# 208
return _AT_Type::_S_ref(_M_elems, __n); 
# 209
} 
# 212
constexpr const_reference at(size_type __n) const 
# 213
{ 
# 216
return (__n < _Nm) ? _AT_Type::_S_ref(_M_elems, __n) : (std::__throw_out_of_range_fmt("array::at: __n (which is %zu) >= _Nm (which is %zu)", __n, _Nm), _AT_Type::_S_ref(_M_elems, 0)); 
# 221
} 
# 224
constexpr reference front() noexcept 
# 225
{ 
# 226
; 
# 227
return *begin(); 
# 228
} 
# 231
constexpr const_reference front() const noexcept 
# 232
{ 
# 234
; 
# 236
return _AT_Type::_S_ref(_M_elems, 0); 
# 237
} 
# 240
constexpr reference back() noexcept 
# 241
{ 
# 242
; 
# 243
return (_Nm) ? *(end() - 1) : (*end()); 
# 244
} 
# 247
constexpr const_reference back() const noexcept 
# 248
{ 
# 250
; 
# 252
return (_Nm) ? _AT_Type::_S_ref(_M_elems, _Nm - (1)) : _AT_Type::_S_ref(_M_elems, 0); 
# 254
} 
# 257
constexpr pointer data() noexcept 
# 258
{ return _AT_Type::_S_ptr(_M_elems); } 
# 261
constexpr const_pointer data() const noexcept 
# 262
{ return _AT_Type::_S_ptr(_M_elems); } 
# 263
}; 
# 266
template< class _Tp, class ..._Up> 
# 267
array(_Tp, _Up ...)->array< enable_if_t< (is_same_v< _Tp, _Up>  && ... ), _Tp> , (1) + sizeof...(_Up)> ; 
# 273
template< class _Tp, size_t _Nm> inline bool 
# 276
operator==(const array< _Tp, _Nm>  &__one, const array< _Tp, _Nm>  &__two) 
# 277
{ return std::equal(__one.begin(), __one.end(), __two.begin()); } 
# 302 "/usr/include/c++/11/array" 3
template< class _Tp, size_t _Nm> inline bool 
# 305
operator!=(const array< _Tp, _Nm>  &__one, const array< _Tp, _Nm>  &__two) 
# 306
{ return !(__one == __two); } 
# 308
template< class _Tp, size_t _Nm> inline bool 
# 311
operator<(const array< _Tp, _Nm>  &__a, const array< _Tp, _Nm>  &__b) 
# 312
{ 
# 313
return std::lexicographical_compare(__a.begin(), __a.end(), __b.begin(), __b.end()); 
# 315
} 
# 317
template< class _Tp, size_t _Nm> inline bool 
# 320
operator>(const array< _Tp, _Nm>  &__one, const array< _Tp, _Nm>  &__two) 
# 321
{ return __two < __one; } 
# 323
template< class _Tp, size_t _Nm> inline bool 
# 326
operator<=(const array< _Tp, _Nm>  &__one, const array< _Tp, _Nm>  &__two) 
# 327
{ return !(__one > __two); } 
# 329
template< class _Tp, size_t _Nm> inline bool 
# 332
operator>=(const array< _Tp, _Nm>  &__one, const array< _Tp, _Nm>  &__two) 
# 333
{ return !(__one < __two); } 
# 337
template< class _Tp, size_t _Nm> inline typename enable_if< __array_traits< _Tp, _Nm> ::_Is_swappable::value> ::type 
# 348
swap(array< _Tp, _Nm>  &__one, array< _Tp, _Nm>  &__two) noexcept(noexcept(__one.swap(__two))) 
# 350
{ __one.swap(__two); } 
# 353
template < typename _Tp, std :: size_t _Nm >
    typename enable_if <
      ! __array_traits < _Tp, _Nm > :: _Is_swappable :: value > :: type
    swap ( array < _Tp, _Nm > &, array < _Tp, _Nm > & ) = delete;
# 359
template< size_t _Int, class _Tp, size_t _Nm> constexpr _Tp &
# 361
get(array< _Tp, _Nm>  &__arr) noexcept 
# 362
{ 
# 363
static_assert((_Int < _Nm), "array index is within bounds");
# 364
return __array_traits< _Tp, _Nm> ::_S_ref((__arr._M_elems), _Int); 
# 365
} 
# 367
template< size_t _Int, class _Tp, size_t _Nm> constexpr _Tp &&
# 369
get(array< _Tp, _Nm>  &&__arr) noexcept 
# 370
{ 
# 371
static_assert((_Int < _Nm), "array index is within bounds");
# 372
return std::move(std::get< _Int> (__arr)); 
# 373
} 
# 375
template< size_t _Int, class _Tp, size_t _Nm> constexpr const _Tp &
# 377
get(const array< _Tp, _Nm>  &__arr) noexcept 
# 378
{ 
# 379
static_assert((_Int < _Nm), "array index is within bounds");
# 380
return __array_traits< _Tp, _Nm> ::_S_ref((__arr._M_elems), _Int); 
# 381
} 
# 383
template< size_t _Int, class _Tp, size_t _Nm> constexpr const _Tp &&
# 385
get(const array< _Tp, _Nm>  &&__arr) noexcept 
# 386
{ 
# 387
static_assert((_Int < _Nm), "array index is within bounds");
# 388
return std::move(std::get< _Int> (__arr)); 
# 389
} 
# 432 "/usr/include/c++/11/array" 3
template< class _Tp> struct tuple_size; 
# 436
template< class _Tp, size_t _Nm> 
# 437
struct tuple_size< array< _Tp, _Nm> >  : public integral_constant< unsigned long, _Nm>  { 
# 438
}; 
# 441
template< size_t _Int, class _Tp> struct tuple_element; 
# 445
template< size_t _Int, class _Tp, size_t _Nm> 
# 446
struct tuple_element< _Int, array< _Tp, _Nm> >  { 
# 448
static_assert((_Int < _Nm), "index is out of bounds");
# 449
typedef _Tp type; 
# 450
}; 
# 452
template< class _Tp, size_t _Nm> 
# 453
struct __is_tuple_like_impl< array< _Tp, _Nm> >  : public true_type { 
# 454
}; 
# 457
}
# 35 "/usr/include/c++/11/bits/uses_allocator.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 41
struct __erased_type { }; 
# 46
template< class _Alloc, class _Tp> using __is_erased_or_convertible = __or_< is_convertible< _Alloc, _Tp> , is_same< _Tp, __erased_type> > ; 
# 51
struct allocator_arg_t { explicit allocator_arg_t() = default;}; 
# 53
constexpr inline allocator_arg_t allocator_arg = allocator_arg_t(); 
# 56
template< class _Tp, class _Alloc, class  = __void_t< > > 
# 57
struct __uses_allocator_helper : public false_type { 
# 58
}; 
# 60
template< class _Tp, class _Alloc> 
# 61
struct __uses_allocator_helper< _Tp, _Alloc, __void_t< typename _Tp::allocator_type> >  : public __is_erased_or_convertible< _Alloc, typename _Tp::allocator_type> ::type { 
# 64
}; 
# 67
template< class _Tp, class _Alloc> 
# 68
struct uses_allocator : public __uses_allocator_helper< _Tp, _Alloc> ::type { 
# 70
}; 
# 72
struct __uses_alloc_base { }; 
# 74
struct __uses_alloc0 : public __uses_alloc_base { 
# 76
struct _Sink { void operator=(const void *) { } } _M_a; 
# 77
}; 
# 79
template< class _Alloc> 
# 80
struct __uses_alloc1 : public __uses_alloc_base { const _Alloc *_M_a; }; 
# 82
template< class _Alloc> 
# 83
struct __uses_alloc2 : public __uses_alloc_base { const _Alloc *_M_a; }; 
# 85
template< bool , class _Tp, class _Alloc, class ..._Args> struct __uses_alloc; 
# 88
template< class _Tp, class _Alloc, class ..._Args> 
# 89
struct __uses_alloc< true, _Tp, _Alloc, _Args...>  : public conditional< is_constructible< _Tp, allocator_arg_t, const _Alloc &, _Args...> ::value, __uses_alloc1< _Alloc> , __uses_alloc2< _Alloc> > ::type { 
# 97
static_assert((__or_< is_constructible< _Tp, std::allocator_arg_t, const _Alloc &, _Args...> , is_constructible< _Tp, _Args..., const _Alloc &> > ::value), "construction with an allocator must be possible if uses_allocator is true");
# 102
}; 
# 104
template< class _Tp, class _Alloc, class ..._Args> 
# 105
struct __uses_alloc< false, _Tp, _Alloc, _Args...>  : public __uses_alloc0 { 
# 106
}; 
# 108
template< class _Tp, class _Alloc, class ..._Args> using __uses_alloc_t = __uses_alloc< uses_allocator< _Tp, _Alloc> ::value, _Tp, _Alloc, _Args...> ; 
# 112
template< class _Tp, class _Alloc, class ..._Args> inline __uses_alloc_t< _Tp, _Alloc, _Args...>  
# 115
__use_alloc(const _Alloc &__a) 
# 116
{ 
# 117
__uses_alloc_t< _Tp, _Alloc, _Args...>  __ret; 
# 118
(__ret._M_a) = std::__addressof(__a); 
# 119
return __ret; 
# 120
} 
# 122
template < typename _Tp, typename _Alloc, typename ... _Args >
    void
    __use_alloc ( const _Alloc && ) = delete;
# 127
template< class _Tp, class _Alloc> constexpr inline bool 
# 128
uses_allocator_v = (uses_allocator< _Tp, _Alloc> ::value); 
# 132
template< template< class ...>  class _Predicate, class 
# 133
_Tp, class _Alloc, class ..._Args> 
# 134
struct __is_uses_allocator_predicate : public conditional< uses_allocator< _Tp, _Alloc> ::value, __or_< _Predicate< _Tp, allocator_arg_t, _Alloc, _Args...> , _Predicate< _Tp, _Args..., _Alloc> > , _Predicate< _Tp, _Args...> > ::type { 
# 138
}; 
# 140
template< class _Tp, class _Alloc, class ..._Args> 
# 141
struct __is_uses_allocator_constructible : public __is_uses_allocator_predicate< is_constructible, _Tp, _Alloc, _Args...>  { 
# 143
}; 
# 146
template< class _Tp, class _Alloc, class ..._Args> constexpr inline bool 
# 147
__is_uses_allocator_constructible_v = (__is_uses_allocator_constructible< _Tp, _Alloc, _Args...> ::value); 
# 151
template< class _Tp, class _Alloc, class ..._Args> 
# 152
struct __is_nothrow_uses_allocator_constructible : public __is_uses_allocator_predicate< is_nothrow_constructible, _Tp, _Alloc, _Args...>  { 
# 155
}; 
# 159
template< class _Tp, class _Alloc, class ..._Args> constexpr inline bool 
# 161
__is_nothrow_uses_allocator_constructible_v = (__is_nothrow_uses_allocator_constructible< _Tp, _Alloc, _Args...> ::value); 
# 165
template< class _Tp, class ..._Args> void 
# 166
__uses_allocator_construct_impl(__uses_alloc0 __a, _Tp *__ptr, _Args &&...
# 167
__args) 
# 168
{ ::new ((void *)__ptr) _Tp(std::forward< _Args> (__args)...); } 
# 170
template< class _Tp, class _Alloc, class ..._Args> void 
# 171
__uses_allocator_construct_impl(__uses_alloc1< _Alloc>  __a, _Tp *__ptr, _Args &&...
# 172
__args) 
# 173
{ 
# 174
::new ((void *)__ptr) _Tp(allocator_arg, *(__a._M_a), std::forward< _Args> (__args)...); 
# 176
} 
# 178
template< class _Tp, class _Alloc, class ..._Args> void 
# 179
__uses_allocator_construct_impl(__uses_alloc2< _Alloc>  __a, _Tp *__ptr, _Args &&...
# 180
__args) 
# 181
{ ::new ((void *)__ptr) _Tp(std::forward< _Args> (__args)..., *(__a._M_a)); } 
# 183
template< class _Tp, class _Alloc, class ..._Args> void 
# 184
__uses_allocator_construct(const _Alloc &__a, _Tp *__ptr, _Args &&...
# 185
__args) 
# 186
{ 
# 187
std::__uses_allocator_construct_impl(std::__use_alloc< _Tp, _Alloc, _Args...> (__a), __ptr, std::forward< _Args> (__args)...); 
# 190
} 
# 194
}
# 42 "/usr/include/c++/11/bits/invoke.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 53 "/usr/include/c++/11/bits/invoke.h" 3
template< class _Tp, class _Up = typename __inv_unwrap< _Tp> ::type> constexpr _Up &&
# 55
__invfwd(typename remove_reference< _Tp> ::type &__t) noexcept 
# 56
{ return static_cast< _Up &&>(__t); } 
# 58
template< class _Res, class _Fn, class ..._Args> constexpr _Res 
# 60
__invoke_impl(__invoke_other, _Fn &&__f, _Args &&...__args) 
# 61
{ return std::forward< _Fn> (__f)(std::forward< _Args> (__args)...); } 
# 63
template< class _Res, class _MemFun, class _Tp, class ..._Args> constexpr _Res 
# 65
__invoke_impl(__invoke_memfun_ref, _MemFun &&__f, _Tp &&__t, _Args &&...
# 66
__args) 
# 67
{ return (__invfwd< _Tp> (__t).*__f)(std::forward< _Args> (__args)...); } 
# 69
template< class _Res, class _MemFun, class _Tp, class ..._Args> constexpr _Res 
# 71
__invoke_impl(__invoke_memfun_deref, _MemFun &&__f, _Tp &&__t, _Args &&...
# 72
__args) 
# 73
{ 
# 74
return ((*std::forward< _Tp> (__t)).*__f)(std::forward< _Args> (__args)...); 
# 75
} 
# 77
template< class _Res, class _MemPtr, class _Tp> constexpr _Res 
# 79
__invoke_impl(__invoke_memobj_ref, _MemPtr &&__f, _Tp &&__t) 
# 80
{ return __invfwd< _Tp> (__t).*__f; } 
# 82
template< class _Res, class _MemPtr, class _Tp> constexpr _Res 
# 84
__invoke_impl(__invoke_memobj_deref, _MemPtr &&__f, _Tp &&__t) 
# 85
{ return (*std::forward< _Tp> (__t)).*__f; } 
# 88
template< class _Callable, class ..._Args> constexpr typename __invoke_result< _Callable, _Args...> ::type 
# 90
__invoke(_Callable &&__fn, _Args &&...__args) noexcept(__is_nothrow_invocable< _Callable, _Args...> ::value) 
# 92
{ 
# 93
using __result = __invoke_result< _Callable, _Args...> ; 
# 94
using __type = typename __invoke_result< _Callable, _Args...> ::type; 
# 95
using __tag = typename __invoke_result< _Callable, _Args...> ::__invoke_type; 
# 96
return std::__invoke_impl< typename __invoke_result< _Callable, _Args...> ::type> (__tag{}, std::forward< _Callable> (__fn), std::forward< _Args> (__args)...); 
# 98
} 
# 102
template< class _Res, class _Callable, class ..._Args> constexpr enable_if_t< is_invocable_r_v< _Res, _Callable, _Args...> , _Res>  
# 104
__invoke_r(_Callable &&__fn, _Args &&...__args) noexcept(is_nothrow_invocable_r_v< _Res, _Callable, _Args...> ) 
# 106
{ 
# 107
using __result = __invoke_result< _Callable, _Args...> ; 
# 108
using __type = typename __invoke_result< _Callable, _Args...> ::type; 
# 109
using __tag = typename __invoke_result< _Callable, _Args...> ::__invoke_type; 
# 110
if constexpr (is_void_v< _Res> ) { 
# 111
std::__invoke_impl< typename __invoke_result< _Callable, _Args...> ::type> (__tag{}, std::forward< _Callable> (__fn), std::forward< _Args> (__args)...); } else { 
# 114
return std::__invoke_impl< typename __invoke_result< _Callable, _Args...> ::type> (__tag{}, std::forward< _Callable> (__fn), std::forward< _Args> (__args)...); }  
# 117
} 
# 160 "/usr/include/c++/11/bits/invoke.h" 3
}
# 47 "/usr/include/c++/11/tuple" 3
namespace std __attribute((__visibility__("default"))) { 
# 56
template< class ..._Elements> class tuple; 
# 59
template< class _Tp> 
# 60
struct __is_empty_non_tuple : public is_empty< _Tp>  { }; 
# 63
template< class _El0, class ..._El> 
# 64
struct __is_empty_non_tuple< tuple< _El0, _El...> >  : public false_type { }; 
# 67
template< class _Tp> using __empty_not_final = typename conditional< __is_final(_Tp), integral_constant< bool, false> , __is_empty_non_tuple< _Tp> > ::type; 
# 72
template< size_t _Idx, class _Head, bool 
# 73
 = __empty_not_final< _Head> ::value> struct _Head_base; 
# 77
template< size_t _Idx, class _Head> 
# 78
struct _Head_base< _Idx, _Head, true>  { 
# 80
constexpr _Head_base() : _M_head_impl() 
# 81
{ } 
# 83
constexpr _Head_base(const _Head &__h) : _M_head_impl(__h) 
# 84
{ } 
# 86
constexpr _Head_base(const _Head_base &) = default;
# 87
constexpr _Head_base(_Head_base &&) = default;
# 89
template< class _UHead> constexpr 
# 90
_Head_base(_UHead &&__h) : _M_head_impl(std::forward< _UHead> (__h)) 
# 91
{ } 
# 94
_Head_base(allocator_arg_t, __uses_alloc0) : _M_head_impl() 
# 95
{ } 
# 97
template< class _Alloc> 
# 99
_Head_base(allocator_arg_t, __uses_alloc1< _Alloc>  __a) : _M_head_impl(allocator_arg, *(__a._M_a)) 
# 100
{ } 
# 102
template< class _Alloc> 
# 104
_Head_base(allocator_arg_t, __uses_alloc2< _Alloc>  __a) : _M_head_impl(*(__a._M_a)) 
# 105
{ } 
# 107
template< class _UHead> 
# 109
_Head_base(__uses_alloc0, _UHead &&__uhead) : _M_head_impl(std::forward< _UHead> (__uhead)) 
# 110
{ } 
# 112
template< class _Alloc, class _UHead> 
# 114
_Head_base(__uses_alloc1< _Alloc>  __a, _UHead &&__uhead) : _M_head_impl(allocator_arg, *(__a._M_a), std::forward< _UHead> (__uhead)) 
# 116
{ } 
# 118
template< class _Alloc, class _UHead> 
# 120
_Head_base(__uses_alloc2< _Alloc>  __a, _UHead &&__uhead) : _M_head_impl(std::forward< _UHead> (__uhead), *(__a._M_a)) 
# 121
{ } 
# 124
static constexpr _Head &_M_head(_Head_base &__b) noexcept { return __b._M_head_impl; } 
# 127
static constexpr const _Head &_M_head(const _Head_base &__b) noexcept { return __b._M_head_impl; } 
# 129
[[__no_unique_address__]] _Head _M_head_impl; 
# 130
}; 
# 186 "/usr/include/c++/11/tuple" 3
template< size_t _Idx, class _Head> 
# 187
struct _Head_base< _Idx, _Head, false>  { 
# 189
constexpr _Head_base() : _M_head_impl() 
# 190
{ } 
# 192
constexpr _Head_base(const _Head &__h) : _M_head_impl(__h) 
# 193
{ } 
# 195
constexpr _Head_base(const _Head_base &) = default;
# 196
constexpr _Head_base(_Head_base &&) = default;
# 198
template< class _UHead> constexpr 
# 199
_Head_base(_UHead &&__h) : _M_head_impl(std::forward< _UHead> (__h)) 
# 200
{ } 
# 203
_Head_base(allocator_arg_t, __uses_alloc0) : _M_head_impl() 
# 204
{ } 
# 206
template< class _Alloc> 
# 208
_Head_base(allocator_arg_t, __uses_alloc1< _Alloc>  __a) : _M_head_impl(allocator_arg, *(__a._M_a)) 
# 209
{ } 
# 211
template< class _Alloc> 
# 213
_Head_base(allocator_arg_t, __uses_alloc2< _Alloc>  __a) : _M_head_impl(*(__a._M_a)) 
# 214
{ } 
# 216
template< class _UHead> 
# 218
_Head_base(__uses_alloc0, _UHead &&__uhead) : _M_head_impl(std::forward< _UHead> (__uhead)) 
# 219
{ } 
# 221
template< class _Alloc, class _UHead> 
# 223
_Head_base(__uses_alloc1< _Alloc>  __a, _UHead &&__uhead) : _M_head_impl(allocator_arg, *(__a._M_a), std::forward< _UHead> (__uhead)) 
# 225
{ } 
# 227
template< class _Alloc, class _UHead> 
# 229
_Head_base(__uses_alloc2< _Alloc>  __a, _UHead &&__uhead) : _M_head_impl(std::forward< _UHead> (__uhead), *(__a._M_a)) 
# 230
{ } 
# 233
static constexpr _Head &_M_head(_Head_base &__b) noexcept { return __b._M_head_impl; } 
# 236
static constexpr const _Head &_M_head(const _Head_base &__b) noexcept { return __b._M_head_impl; } 
# 238
_Head _M_head_impl; 
# 239
}; 
# 249 "/usr/include/c++/11/tuple" 3
template< size_t _Idx, class ..._Elements> struct _Tuple_impl; 
# 257
template< size_t _Idx, class _Head, class ..._Tail> 
# 258
struct _Tuple_impl< _Idx, _Head, _Tail...>  : public std::_Tuple_impl< _Idx + (1), _Tail...> , private _Head_base< _Idx, _Head>  { 
# 262
template< std::size_t , class ...> friend struct _Tuple_impl; 
# 264
typedef std::_Tuple_impl< _Idx + (1), _Tail...>  _Inherited; 
# 265
typedef _Head_base< _Idx, _Head>  _Base; 
# 268
static constexpr _Head &_M_head(_Tuple_impl &__t) noexcept { return _Base::_M_head(__t); } 
# 271
static constexpr const _Head &_M_head(const _Tuple_impl &__t) noexcept { return _Base::_M_head(__t); } 
# 274
static constexpr _Inherited &_M_tail(_Tuple_impl &__t) noexcept { return __t; } 
# 277
static constexpr const _Inherited &_M_tail(const _Tuple_impl &__t) noexcept { return __t; } 
# 279
constexpr _Tuple_impl() : _Inherited(), _Base() 
# 280
{ } 
# 283
constexpr explicit _Tuple_impl(const _Head &__head, const _Tail &...__tail) : _Inherited(__tail...), _Base(__head) 
# 285
{ } 
# 287
template< class _UHead, class ..._UTail, class 
# 288
 = std::__enable_if_t< sizeof...(_Tail) == sizeof...(_UTail)> > constexpr explicit 
# 290
_Tuple_impl(_UHead &&__head, _UTail &&...__tail) : _Inherited(std::forward< _UTail> (__tail)...), _Base(std::forward< _UHead> (__head)) 
# 293
{ } 
# 295
constexpr _Tuple_impl(const _Tuple_impl &) = default;
# 299
_Tuple_impl &operator=(const _Tuple_impl &) = delete;
# 301
_Tuple_impl(_Tuple_impl &&) = default;
# 303
template< class ..._UElements> constexpr 
# 305
_Tuple_impl(const std::_Tuple_impl< _Idx, _UElements...>  &__in) : _Inherited(_Tuple_impl< _Idx, _UElements...> ::_M_tail(__in)), _Base(_Tuple_impl< _Idx, _UElements...> ::_M_head(__in)) 
# 308
{ } 
# 310
template< class _UHead, class ..._UTails> constexpr 
# 312
_Tuple_impl(std::_Tuple_impl< _Idx, _UHead, _UTails...>  &&__in) : _Inherited(std::move(_Tuple_impl< _Idx, _UHead, _UTails...> ::_M_tail(__in))), _Base(std::forward< _UHead> (_Tuple_impl< _Idx, _UHead, _UTails...> ::_M_head(__in))) 
# 317
{ } 
# 319
template< class _Alloc> 
# 321
_Tuple_impl(std::allocator_arg_t __tag, const _Alloc &__a) : _Inherited(__tag, __a), _Base(__tag, __use_alloc< _Head> (__a)) 
# 324
{ } 
# 326
template< class _Alloc> 
# 328
_Tuple_impl(std::allocator_arg_t __tag, const _Alloc &__a, const _Head &
# 329
__head, const _Tail &...__tail) : _Inherited(__tag, __a, __tail...), _Base(__use_alloc< _Head, _Alloc, _Head> (__a), __head) 
# 332
{ } 
# 334
template< class _Alloc, class _UHead, class ..._UTail, class 
# 335
 = std::__enable_if_t< sizeof...(_Tail) == sizeof...(_UTail)> > 
# 337
_Tuple_impl(std::allocator_arg_t __tag, const _Alloc &__a, _UHead &&
# 338
__head, _UTail &&...__tail) : _Inherited(__tag, __a, std::forward< _UTail> (__tail)...), _Base(__use_alloc< _Head, _Alloc, _UHead> (__a), std::forward< _UHead> (__head)) 
# 342
{ } 
# 344
template< class _Alloc> 
# 346
_Tuple_impl(std::allocator_arg_t __tag, const _Alloc &__a, const _Tuple_impl &
# 347
__in) : _Inherited(__tag, __a, _M_tail(__in)), _Base(__use_alloc< _Head, _Alloc, _Head> (__a), _M_head(__in)) 
# 350
{ } 
# 352
template< class _Alloc> 
# 354
_Tuple_impl(std::allocator_arg_t __tag, const _Alloc &__a, _Tuple_impl &&
# 355
__in) : _Inherited(__tag, __a, std::move(_M_tail(__in))), _Base(__use_alloc< _Head, _Alloc, _Head> (__a), std::forward< _Head> (_M_head(__in))) 
# 359
{ } 
# 361
template< class _Alloc, class _UHead, class ..._UTails> 
# 363
_Tuple_impl(std::allocator_arg_t __tag, const _Alloc &__a, const std::_Tuple_impl< _Idx, _UHead, _UTails...>  &
# 364
__in) : _Inherited(__tag, __a, _Tuple_impl< _Idx, _UHead, _UTails...> ::_M_tail(__in)), _Base(__use_alloc< _Head, _Alloc, const _UHead &> (__a), _Tuple_impl< _Idx, _UHead, _UTails...> ::_M_head(__in)) 
# 369
{ } 
# 371
template< class _Alloc, class _UHead, class ..._UTails> 
# 373
_Tuple_impl(std::allocator_arg_t __tag, const _Alloc &__a, std::_Tuple_impl< _Idx, _UHead, _UTails...>  &&
# 374
__in) : _Inherited(__tag, __a, std::move(_Tuple_impl< _Idx, _UHead, _UTails...> ::_M_tail(__in))), _Base(__use_alloc< _Head, _Alloc, _UHead> (__a), std::forward< _UHead> (_Tuple_impl< _Idx, _UHead, _UTails...> ::_M_head(__in))) 
# 380
{ } 
# 382
template< class ..._UElements> void 
# 385
_M_assign(const std::_Tuple_impl< _Idx, _UElements...>  &__in) 
# 386
{ 
# 387
_M_head(*this) = _Tuple_impl< _Idx, _UElements...> ::_M_head(__in); 
# 388
_M_tail(*this)._M_assign(_Tuple_impl< _Idx, _UElements...> ::_M_tail(__in)); 
# 390
} 
# 392
template< class _UHead, class ..._UTails> void 
# 395
_M_assign(std::_Tuple_impl< _Idx, _UHead, _UTails...>  &&__in) 
# 396
{ 
# 397
_M_head(*this) = std::forward< _UHead> (_Tuple_impl< _Idx, _UHead, _UTails...> ::_M_head(__in)); 
# 399
_M_tail(*this)._M_assign(std::move(_Tuple_impl< _Idx, _UHead, _UTails...> ::_M_tail(__in))); 
# 401
} 
# 406
protected: void _M_swap(_Tuple_impl &__in) 
# 407
{ 
# 408
using std::swap;
# 409
swap(_M_head(*this), _M_head(__in)); 
# 410
_Inherited::_M_swap(_M_tail(__in)); 
# 411
} 
# 412
}; 
# 415
template< size_t _Idx, class _Head> 
# 416
struct _Tuple_impl< _Idx, _Head>  : private _Head_base< _Idx, _Head>  { 
# 419
template< std::size_t , class ...> friend struct _Tuple_impl; 
# 421
typedef _Head_base< _Idx, _Head>  _Base; 
# 424
static constexpr _Head &_M_head(_Tuple_impl &__t) noexcept { return _Base::_M_head(__t); } 
# 427
static constexpr const _Head &_M_head(const _Tuple_impl &__t) noexcept { return _Base::_M_head(__t); } 
# 430
constexpr _Tuple_impl() : _Base() 
# 431
{ } 
# 434
constexpr explicit _Tuple_impl(const _Head &__head) : _Base(__head) 
# 436
{ } 
# 438
template< class _UHead> constexpr explicit 
# 440
_Tuple_impl(_UHead &&__head) : _Base(std::forward< _UHead> (__head)) 
# 442
{ } 
# 444
constexpr _Tuple_impl(const _Tuple_impl &) = default;
# 448
_Tuple_impl &operator=(const _Tuple_impl &) = delete;
# 454
constexpr _Tuple_impl(_Tuple_impl &&__in) noexcept(is_nothrow_move_constructible< _Head> ::value) : _Base(static_cast< _Base &&>(__in)) 
# 457
{ } 
# 460
template< class _UHead> constexpr 
# 462
_Tuple_impl(const std::_Tuple_impl< _Idx, _UHead>  &__in) : _Base(_Tuple_impl< _Idx, _UHead> ::_M_head(__in)) 
# 464
{ } 
# 466
template< class _UHead> constexpr 
# 468
_Tuple_impl(std::_Tuple_impl< _Idx, _UHead>  &&__in) : _Base(std::forward< _UHead> (_Tuple_impl< _Idx, _UHead> ::_M_head(__in))) 
# 470
{ } 
# 472
template< class _Alloc> 
# 474
_Tuple_impl(std::allocator_arg_t __tag, const _Alloc &__a) : _Base(__tag, __use_alloc< _Head> (__a)) 
# 476
{ } 
# 478
template< class _Alloc> 
# 480
_Tuple_impl(std::allocator_arg_t __tag, const _Alloc &__a, const _Head &
# 481
__head) : _Base(__use_alloc< _Head, _Alloc, const _Head &> (__a), __head) 
# 483
{ } 
# 485
template< class _Alloc, class _UHead> 
# 487
_Tuple_impl(std::allocator_arg_t __tag, const _Alloc &__a, _UHead &&
# 488
__head) : _Base(__use_alloc< _Head, _Alloc, _UHead> (__a), std::forward< _UHead> (__head)) 
# 491
{ } 
# 493
template< class _Alloc> 
# 495
_Tuple_impl(std::allocator_arg_t __tag, const _Alloc &__a, const _Tuple_impl &
# 496
__in) : _Base(__use_alloc< _Head, _Alloc, const _Head &> (__a), _M_head(__in)) 
# 498
{ } 
# 500
template< class _Alloc> 
# 502
_Tuple_impl(std::allocator_arg_t __tag, const _Alloc &__a, _Tuple_impl &&
# 503
__in) : _Base(__use_alloc< _Head, _Alloc, _Head> (__a), std::forward< _Head> (_M_head(__in))) 
# 506
{ } 
# 508
template< class _Alloc, class _UHead> 
# 510
_Tuple_impl(std::allocator_arg_t __tag, const _Alloc &__a, const std::_Tuple_impl< _Idx, _UHead>  &
# 511
__in) : _Base(__use_alloc< _Head, _Alloc, const _UHead &> (__a), _Tuple_impl< _Idx, _UHead> ::_M_head(__in)) 
# 514
{ } 
# 516
template< class _Alloc, class _UHead> 
# 518
_Tuple_impl(std::allocator_arg_t __tag, const _Alloc &__a, std::_Tuple_impl< _Idx, _UHead>  &&
# 519
__in) : _Base(__use_alloc< _Head, _Alloc, _UHead> (__a), std::forward< _UHead> (_Tuple_impl< _Idx, _UHead> ::_M_head(__in))) 
# 522
{ } 
# 524
template< class _UHead> void 
# 527
_M_assign(const std::_Tuple_impl< _Idx, _UHead>  &__in) 
# 528
{ 
# 529
_M_head(*this) = _Tuple_impl< _Idx, _UHead> ::_M_head(__in); 
# 530
} 
# 532
template< class _UHead> void 
# 535
_M_assign(std::_Tuple_impl< _Idx, _UHead>  &&__in) 
# 536
{ 
# 537
_M_head(*this) = std::forward< _UHead> (_Tuple_impl< _Idx, _UHead> ::_M_head(__in)); 
# 539
} 
# 544
protected: void _M_swap(_Tuple_impl &__in) 
# 545
{ 
# 546
using std::swap;
# 547
swap(_M_head(*this), _M_head(__in)); 
# 548
} 
# 549
}; 
# 553
template< bool , class ..._Types> 
# 554
struct _TupleConstraints { 
# 559
template< class ..._UTypes> static constexpr bool 
# 560
__is_implicitly_constructible() 
# 561
{ 
# 562
return __and_< is_constructible< _Types, _UTypes> ..., is_convertible< _UTypes, _Types> ...> ::value; 
# 565
} 
# 570
template< class ..._UTypes> static constexpr bool 
# 571
__is_explicitly_constructible() 
# 572
{ 
# 573
return __and_< is_constructible< _Types, _UTypes> ..., __not_< __and_< is_convertible< _UTypes, _Types> ...> > > ::value; 
# 576
} 
# 578
static constexpr bool __is_implicitly_default_constructible() 
# 579
{ 
# 580
return __and_< std::__is_implicitly_default_constructible< _Types> ...> ::value; 
# 582
} 
# 584
static constexpr bool __is_explicitly_default_constructible() 
# 585
{ 
# 586
return __and_< is_default_constructible< _Types> ..., __not_< __and_< std::__is_implicitly_default_constructible< _Types> ...> > > ::value; 
# 590
} 
# 591
}; 
# 595
template< class ..._Types> 
# 596
struct _TupleConstraints< false, _Types...>  { 
# 598
template< class ..._UTypes> static constexpr bool 
# 599
__is_implicitly_constructible() 
# 600
{ return false; } 
# 602
template< class ..._UTypes> static constexpr bool 
# 603
__is_explicitly_constructible() 
# 604
{ return false; } 
# 605
}; 
# 608
template< class ..._Elements> 
# 609
class tuple : public _Tuple_impl< 0UL, _Elements...>  { 
# 611
typedef _Tuple_impl< 0UL, _Elements...>  _Inherited; 
# 613
template< bool _Cond> using _TCC = _TupleConstraints< _Cond, _Elements...> ; 
# 617
template< bool _Dummy> using _ImplicitDefaultCtor = std::__enable_if_t< _TCC< _Dummy> ::__is_implicitly_default_constructible(), bool> ; 
# 623
template< bool _Dummy> using _ExplicitDefaultCtor = std::__enable_if_t< _TCC< _Dummy> ::__is_explicitly_default_constructible(), bool> ; 
# 629
template< bool _Cond, class ..._Args> using _ImplicitCtor = std::__enable_if_t< _TupleConstraints< _Cond, _Elements...> ::template __is_implicitly_constructible< _Args...> (), bool> ; 
# 635
template< bool _Cond, class ..._Args> using _ExplicitCtor = std::__enable_if_t< _TupleConstraints< _Cond, _Elements...> ::template __is_explicitly_constructible< _Args...> (), bool> ; 
# 640
template< class ..._UElements> static constexpr std::__enable_if_t< sizeof...(_UElements) == sizeof...(_Elements), bool>  
# 643
__assignable() 
# 644
{ return __and_< is_assignable< _Elements &, _UElements> ...> ::value; } 
# 647
template< class ..._UElements> static constexpr bool 
# 648
__nothrow_assignable() 
# 649
{ 
# 650
return __and_< is_nothrow_assignable< _Elements &, _UElements> ...> ::value; 
# 652
} 
# 655
template< class ..._UElements> static constexpr bool 
# 656
__nothrow_constructible() 
# 657
{ 
# 658
return __and_< is_nothrow_constructible< _Elements, _UElements> ...> ::value; 
# 660
} 
# 663
template< class _Up> static constexpr bool 
# 664
__valid_args() 
# 665
{ 
# 666
return (sizeof...(_Elements) == (1)) && (!is_same< tuple, std::__remove_cvref_t< _Up> > ::value); 
# 668
} 
# 671
template< class , class , class ..._Tail> static constexpr bool 
# 672
__valid_args() 
# 673
{ return (sizeof...(_Tail) + (2)) == sizeof...(_Elements); } 
# 684 "/usr/include/c++/11/tuple" 3
template< class _Tuple, class  = tuple, class 
# 685
 = std::__remove_cvref_t< _Tuple> > 
# 686
struct _UseOtherCtor : public std::false_type { 
# 688
}; 
# 691
template< class _Tuple, class _Tp, class _Up> 
# 692
struct _UseOtherCtor< _Tuple, tuple< _Tp> , tuple< _Up> >  : public __or_< is_convertible< _Tuple, _Tp> , is_constructible< _Tp, _Tuple> >  { 
# 694
}; 
# 697
template< class _Tuple, class _Tp> 
# 698
struct _UseOtherCtor< _Tuple, tuple< _Tp> , tuple< _Tp> >  : public std::true_type { 
# 700
}; 
# 705
template< class _Tuple> static constexpr bool 
# 706
__use_other_ctor() 
# 707
{ return _UseOtherCtor< _Tuple> ::value; } 
# 713
public: 
# 710
template< class _Dummy = void, _ImplicitDefaultCtor< is_void< _Dummy> ::value>  
# 711
 = true> constexpr 
# 713
tuple() noexcept(__and_< is_nothrow_default_constructible< _Elements> ...> ::value) : _Inherited() 
# 715
{ } 
# 717
template< class _Dummy = void, _ExplicitDefaultCtor< is_void< _Dummy> ::value>  
# 718
 = false> constexpr explicit 
# 720
tuple() noexcept(__and_< is_nothrow_default_constructible< _Elements> ...> ::value) : _Inherited() 
# 722
{ } 
# 724
template< bool _NotEmpty = sizeof...(_Elements) >= (1), _ImplicitCtor< _NotEmpty, const _Elements &...>  
# 725
 = true> constexpr 
# 727
tuple(const _Elements &...__elements) noexcept(__nothrow_constructible< const _Elements &...> ()) : _Inherited(__elements...) 
# 729
{ } 
# 731
template< bool _NotEmpty = sizeof...(_Elements) >= (1), _ExplicitCtor< _NotEmpty, const _Elements &...>  
# 732
 = false> constexpr explicit 
# 734
tuple(const _Elements &...__elements) noexcept(__nothrow_constructible< const _Elements &...> ()) : _Inherited(__elements...) 
# 736
{ } 
# 738
template< class ..._UElements, bool 
# 739
_Valid = __valid_args< _UElements...> (), _ImplicitCtor< _Valid, _UElements...>  
# 740
 = true> constexpr 
# 742
tuple(_UElements &&...__elements) noexcept(__nothrow_constructible< _UElements...> ()) : _Inherited(std::forward< _UElements> (__elements)...) 
# 744
{ } 
# 746
template< class ..._UElements, bool 
# 747
_Valid = __valid_args< _UElements...> (), _ExplicitCtor< _Valid, _UElements...>  
# 748
 = false> constexpr explicit 
# 750
tuple(_UElements &&...__elements) noexcept(__nothrow_constructible< _UElements...> ()) : _Inherited(std::forward< _UElements> (__elements)...) 
# 752
{ } 
# 754
constexpr tuple(const tuple &) = default;
# 756
constexpr tuple(tuple &&) = default;
# 758
template< class ..._UElements, bool 
# 759
_Valid = (sizeof...(_Elements) == sizeof...(_UElements)) && (!__use_other_ctor< const tuple< _UElements...>  &> ()), _ImplicitCtor< _Valid, const _UElements &...>  
# 761
 = true> constexpr 
# 763
tuple(const tuple< _UElements...>  &__in) noexcept(__nothrow_constructible< const _UElements &...> ()) : _Inherited(static_cast< const _Tuple_impl< 0, _UElements...>  &>(__in)) 
# 766
{ } 
# 768
template< class ..._UElements, bool 
# 769
_Valid = (sizeof...(_Elements) == sizeof...(_UElements)) && (!__use_other_ctor< const tuple< _UElements...>  &> ()), _ExplicitCtor< _Valid, const _UElements &...>  
# 771
 = false> constexpr explicit 
# 773
tuple(const tuple< _UElements...>  &__in) noexcept(__nothrow_constructible< const _UElements &...> ()) : _Inherited(static_cast< const _Tuple_impl< 0, _UElements...>  &>(__in)) 
# 776
{ } 
# 778
template< class ..._UElements, bool 
# 779
_Valid = (sizeof...(_Elements) == sizeof...(_UElements)) && (!__use_other_ctor< tuple< _UElements...>  &&> ()), _ImplicitCtor< _Valid, _UElements...>  
# 781
 = true> constexpr 
# 783
tuple(tuple< _UElements...>  &&__in) noexcept(__nothrow_constructible< _UElements...> ()) : _Inherited(static_cast< _Tuple_impl< 0, _UElements...>  &&>(__in)) 
# 785
{ } 
# 787
template< class ..._UElements, bool 
# 788
_Valid = (sizeof...(_Elements) == sizeof...(_UElements)) && (!__use_other_ctor< tuple< _UElements...>  &&> ()), _ExplicitCtor< _Valid, _UElements...>  
# 790
 = false> constexpr explicit 
# 792
tuple(tuple< _UElements...>  &&__in) noexcept(__nothrow_constructible< _UElements...> ()) : _Inherited(static_cast< _Tuple_impl< 0, _UElements...>  &&>(__in)) 
# 794
{ } 
# 798
template< class _Alloc, _ImplicitDefaultCtor< is_object< _Alloc> ::value>  
# 799
 = true> 
# 801
tuple(std::allocator_arg_t __tag, const _Alloc &__a) : _Inherited(__tag, __a) 
# 802
{ } 
# 804
template< class _Alloc, bool _NotEmpty = sizeof...(_Elements) >= (1), _ImplicitCtor< _NotEmpty, const _Elements &...>  
# 805
 = true> 
# 807
tuple(std::allocator_arg_t __tag, const _Alloc &__a, const _Elements &...
# 808
__elements) : _Inherited(__tag, __a, __elements...) 
# 809
{ } 
# 811
template< class _Alloc, bool _NotEmpty = sizeof...(_Elements) >= (1), _ExplicitCtor< _NotEmpty, const _Elements &...>  
# 812
 = false> explicit 
# 815
tuple(std::allocator_arg_t __tag, const _Alloc &__a, const _Elements &...
# 816
__elements) : _Inherited(__tag, __a, __elements...) 
# 817
{ } 
# 819
template< class _Alloc, class ..._UElements, bool 
# 820
_Valid = __valid_args< _UElements...> (), _ImplicitCtor< _Valid, _UElements...>  
# 821
 = true> 
# 823
tuple(std::allocator_arg_t __tag, const _Alloc &__a, _UElements &&...
# 824
__elements) : _Inherited(__tag, __a, std::forward< _UElements> (__elements)...) 
# 826
{ } 
# 828
template< class _Alloc, class ..._UElements, bool 
# 829
_Valid = __valid_args< _UElements...> (), _ExplicitCtor< _Valid, _UElements...>  
# 830
 = false> explicit 
# 833
tuple(std::allocator_arg_t __tag, const _Alloc &__a, _UElements &&...
# 834
__elements) : _Inherited(__tag, __a, std::forward< _UElements> (__elements)...) 
# 836
{ } 
# 838
template< class _Alloc> 
# 840
tuple(std::allocator_arg_t __tag, const _Alloc &__a, const tuple &__in) : _Inherited(__tag, __a, static_cast< const _Inherited &>(__in)) 
# 841
{ } 
# 843
template< class _Alloc> 
# 845
tuple(std::allocator_arg_t __tag, const _Alloc &__a, tuple &&__in) : _Inherited(__tag, __a, static_cast< _Inherited &&>(__in)) 
# 846
{ } 
# 848
template< class _Alloc, class ..._UElements, bool 
# 849
_Valid = (sizeof...(_Elements) == sizeof...(_UElements)) && (!__use_other_ctor< const tuple< _UElements...>  &> ()), _ImplicitCtor< _Valid, const _UElements &...>  
# 851
 = true> 
# 853
tuple(std::allocator_arg_t __tag, const _Alloc &__a, const tuple< _UElements...>  &
# 854
__in) : _Inherited(__tag, __a, static_cast< const _Tuple_impl< 0, _UElements...>  &>(__in)) 
# 857
{ } 
# 859
template< class _Alloc, class ..._UElements, bool 
# 860
_Valid = (sizeof...(_Elements) == sizeof...(_UElements)) && (!__use_other_ctor< const tuple< _UElements...>  &> ()), _ExplicitCtor< _Valid, const _UElements &...>  
# 862
 = false> explicit 
# 865
tuple(std::allocator_arg_t __tag, const _Alloc &__a, const tuple< _UElements...>  &
# 866
__in) : _Inherited(__tag, __a, static_cast< const _Tuple_impl< 0, _UElements...>  &>(__in)) 
# 869
{ } 
# 871
template< class _Alloc, class ..._UElements, bool 
# 872
_Valid = (sizeof...(_Elements) == sizeof...(_UElements)) && (!__use_other_ctor< tuple< _UElements...>  &&> ()), _ImplicitCtor< _Valid, _UElements...>  
# 874
 = true> 
# 876
tuple(std::allocator_arg_t __tag, const _Alloc &__a, tuple< _UElements...>  &&
# 877
__in) : _Inherited(__tag, __a, static_cast< _Tuple_impl< 0, _UElements...>  &&>(__in)) 
# 880
{ } 
# 882
template< class _Alloc, class ..._UElements, bool 
# 883
_Valid = (sizeof...(_Elements) == sizeof...(_UElements)) && (!__use_other_ctor< tuple< _UElements...>  &&> ()), _ExplicitCtor< _Valid, _UElements...>  
# 885
 = false> explicit 
# 888
tuple(std::allocator_arg_t __tag, const _Alloc &__a, tuple< _UElements...>  &&
# 889
__in) : _Inherited(__tag, __a, static_cast< _Tuple_impl< 0, _UElements...>  &&>(__in)) 
# 892
{ } 
# 898
tuple &operator=(typename conditional< __assignable< const _Elements &...> (), const tuple &, const std::__nonesuch &> ::type 
# 900
__in) noexcept(__nothrow_assignable< const _Elements &...> ()) 
# 902
{ 
# 903
this->_M_assign(__in); 
# 904
return *this; 
# 905
} 
# 909
tuple &operator=(typename conditional< __assignable< _Elements...> (), tuple &&, std::__nonesuch &&> ::type 
# 911
__in) noexcept(__nothrow_assignable< _Elements...> ()) 
# 913
{ 
# 914
this->_M_assign(std::move(__in)); 
# 915
return *this; 
# 916
} 
# 918
template< class ..._UElements> std::__enable_if_t< __assignable< const _UElements &...> (), tuple &>  
# 921
operator=(const tuple< _UElements...>  &__in) noexcept(__nothrow_assignable< const _UElements &...> ()) 
# 923
{ 
# 924
this->_M_assign(__in); 
# 925
return *this; 
# 926
} 
# 928
template< class ..._UElements> std::__enable_if_t< __assignable< _UElements...> (), tuple &>  
# 931
operator=(tuple< _UElements...>  &&__in) noexcept(__nothrow_assignable< _UElements...> ()) 
# 933
{ 
# 934
this->_M_assign(std::move(__in)); 
# 935
return *this; 
# 936
} 
# 941
void swap(tuple &__in) noexcept(__and_< __is_nothrow_swappable< _Elements> ...> ::value) 
# 943
{ _Inherited::_M_swap(__in); } 
# 944
}; 
# 947
template< class ..._UTypes> 
# 948
tuple(_UTypes ...)->tuple< _UTypes...> ; 
# 949
template< class _T1, class _T2> 
# 950
tuple(pair< _T1, _T2> )->tuple< _T1, _T2> ; 
# 951
template< class _Alloc, class ..._UTypes> 
# 952
tuple(allocator_arg_t, _Alloc, _UTypes ...)->tuple< _UTypes...> ; 
# 953
template< class _Alloc, class _T1, class _T2> 
# 954
tuple(allocator_arg_t, _Alloc, pair< _T1, _T2> )->tuple< _T1, _T2> ; 
# 955
template< class _Alloc, class ..._UTypes> 
# 956
tuple(allocator_arg_t, _Alloc, tuple< _UTypes...> )->tuple< _UTypes...> ; 
# 961
template<> class tuple< >  { 
# 965
public: void swap(std::tuple< >  &) noexcept { } 
# 968
tuple() = default;
# 970
template< class _Alloc> 
# 972
tuple(allocator_arg_t, const _Alloc &) noexcept { } 
# 973
template< class _Alloc> 
# 975
tuple(allocator_arg_t, const _Alloc &, const std::tuple< >  &) noexcept { } 
# 976
}; 
# 980
template< class _T1, class _T2> 
# 981
class tuple< _T1, _T2>  : public _Tuple_impl< 0UL, _T1, _T2>  { 
# 983
typedef _Tuple_impl< 0UL, _T1, _T2>  _Inherited; 
# 986
template< bool _Dummy, class _U1, class _U2> using _ImplicitDefaultCtor = std::__enable_if_t< _TupleConstraints< _Dummy, _U1, _U2> ::__is_implicitly_default_constructible(), bool> ; 
# 993
template< bool _Dummy, class _U1, class _U2> using _ExplicitDefaultCtor = std::__enable_if_t< _TupleConstraints< _Dummy, _U1, _U2> ::__is_explicitly_default_constructible(), bool> ; 
# 999
template< bool _Dummy> using _TCC = _TupleConstraints< _Dummy, _T1, _T2> ; 
# 1003
template< bool _Cond, class _U1, class _U2> using _ImplicitCtor = std::__enable_if_t< _TupleConstraints< _Cond, _T1, _T2> ::template __is_implicitly_constructible< _U1, _U2> (), bool> ; 
# 1009
template< bool _Cond, class _U1, class _U2> using _ExplicitCtor = std::__enable_if_t< _TupleConstraints< _Cond, _T1, _T2> ::template __is_explicitly_constructible< _U1, _U2> (), bool> ; 
# 1014
template< class _U1, class _U2> static constexpr bool 
# 1015
__assignable() 
# 1016
{ 
# 1017
return __and_< is_assignable< _T1 &, _U1> , is_assignable< _T2 &, _U2> > ::value; 
# 1019
} 
# 1021
template< class _U1, class _U2> static constexpr bool 
# 1022
__nothrow_assignable() 
# 1023
{ 
# 1024
return __and_< is_nothrow_assignable< _T1 &, _U1> , is_nothrow_assignable< _T2 &, _U2> > ::value; 
# 1026
} 
# 1028
template< class _U1, class _U2> static constexpr bool 
# 1029
__nothrow_constructible() 
# 1030
{ 
# 1031
return __and_< is_nothrow_constructible< _T1, _U1> , is_nothrow_constructible< _T2, _U2> > ::value; 
# 1033
} 
# 1035
static constexpr bool __nothrow_default_constructible() 
# 1036
{ 
# 1037
return __and_< is_nothrow_default_constructible< _T1> , is_nothrow_default_constructible< _T2> > ::value; 
# 1039
} 
# 1041
template< class _U1> static constexpr bool 
# 1042
__is_alloc_arg() 
# 1043
{ return is_same< std::__remove_cvref_t< _U1> , std::allocator_arg_t> ::value; } 
# 1049
public: 
# 1046
template< bool _Dummy = true, _ImplicitDefaultCtor< _Dummy, _T1, _T2>  
# 1047
 = true> constexpr 
# 1049
tuple() noexcept((__nothrow_default_constructible)()) : _Inherited() 
# 1051
{ } 
# 1053
template< bool _Dummy = true, _ExplicitDefaultCtor< _Dummy, _T1, _T2>  
# 1054
 = false> constexpr explicit 
# 1056
tuple() noexcept((__nothrow_default_constructible)()) : _Inherited() 
# 1058
{ } 
# 1060
template< bool _Dummy = true, _ImplicitCtor< _Dummy, const _T1 &, const _T2 &>  
# 1061
 = true> constexpr 
# 1063
tuple(const _T1 &__a1, const _T2 &__a2) noexcept(__nothrow_constructible< const _T1 &, const _T2 &> ()) : _Inherited(__a1, __a2) 
# 1065
{ } 
# 1067
template< bool _Dummy = true, _ExplicitCtor< _Dummy, const _T1 &, const _T2 &>  
# 1068
 = false> constexpr explicit 
# 1070
tuple(const _T1 &__a1, const _T2 &__a2) noexcept(__nothrow_constructible< const _T1 &, const _T2 &> ()) : _Inherited(__a1, __a2) 
# 1072
{ } 
# 1074
template< class _U1, class _U2, _ImplicitCtor< !__is_alloc_arg< _U1> (), _U1, _U2>  
# 1075
 = true> constexpr 
# 1077
tuple(_U1 &&__a1, _U2 &&__a2) noexcept(__nothrow_constructible< _U1, _U2> ()) : _Inherited(std::forward< _U1> (__a1), std::forward< _U2> (__a2)) 
# 1079
{ } 
# 1081
template< class _U1, class _U2, _ExplicitCtor< !__is_alloc_arg< _U1> (), _U1, _U2>  
# 1082
 = false> constexpr explicit 
# 1084
tuple(_U1 &&__a1, _U2 &&__a2) noexcept(__nothrow_constructible< _U1, _U2> ()) : _Inherited(std::forward< _U1> (__a1), std::forward< _U2> (__a2)) 
# 1086
{ } 
# 1088
constexpr tuple(const tuple &) = default;
# 1090
constexpr tuple(tuple &&) = default;
# 1092
template< class _U1, class _U2, _ImplicitCtor< true, const _U1 &, const _U2 &>  
# 1093
 = true> constexpr 
# 1095
tuple(const std::tuple< _U1, _U2>  &__in) noexcept(__nothrow_constructible< const _U1 &, const _U2 &> ()) : _Inherited(static_cast< const _Tuple_impl< 0, _U1, _U2>  &>(__in)) 
# 1097
{ } 
# 1099
template< class _U1, class _U2, _ExplicitCtor< true, const _U1 &, const _U2 &>  
# 1100
 = false> constexpr explicit 
# 1102
tuple(const std::tuple< _U1, _U2>  &__in) noexcept(__nothrow_constructible< const _U1 &, const _U2 &> ()) : _Inherited(static_cast< const _Tuple_impl< 0, _U1, _U2>  &>(__in)) 
# 1104
{ } 
# 1106
template< class _U1, class _U2, _ImplicitCtor< true, _U1, _U2>  
# 1107
 = true> constexpr 
# 1109
tuple(std::tuple< _U1, _U2>  &&__in) noexcept(__nothrow_constructible< _U1, _U2> ()) : _Inherited(static_cast< _Tuple_impl< 0, _U1, _U2>  &&>(__in)) 
# 1111
{ } 
# 1113
template< class _U1, class _U2, _ExplicitCtor< true, _U1, _U2>  
# 1114
 = false> constexpr explicit 
# 1116
tuple(std::tuple< _U1, _U2>  &&__in) noexcept(__nothrow_constructible< _U1, _U2> ()) : _Inherited(static_cast< _Tuple_impl< 0, _U1, _U2>  &&>(__in)) 
# 1118
{ } 
# 1120
template< class _U1, class _U2, _ImplicitCtor< true, const _U1 &, const _U2 &>  
# 1121
 = true> constexpr 
# 1123
tuple(const pair< _U1, _U2>  &__in) noexcept(__nothrow_constructible< const _U1 &, const _U2 &> ()) : _Inherited((__in.first), (__in.second)) 
# 1125
{ } 
# 1127
template< class _U1, class _U2, _ExplicitCtor< true, const _U1 &, const _U2 &>  
# 1128
 = false> constexpr explicit 
# 1130
tuple(const pair< _U1, _U2>  &__in) noexcept(__nothrow_constructible< const _U1 &, const _U2 &> ()) : _Inherited((__in.first), (__in.second)) 
# 1132
{ } 
# 1134
template< class _U1, class _U2, _ImplicitCtor< true, _U1, _U2>  
# 1135
 = true> constexpr 
# 1137
tuple(pair< _U1, _U2>  &&__in) noexcept(__nothrow_constructible< _U1, _U2> ()) : _Inherited(std::forward< _U1> ((__in.first)), std::forward< _U2> ((__in.second))) 
# 1140
{ } 
# 1142
template< class _U1, class _U2, _ExplicitCtor< true, _U1, _U2>  
# 1143
 = false> constexpr explicit 
# 1145
tuple(pair< _U1, _U2>  &&__in) noexcept(__nothrow_constructible< _U1, _U2> ()) : _Inherited(std::forward< _U1> ((__in.first)), std::forward< _U2> ((__in.second))) 
# 1148
{ } 
# 1152
template< class _Alloc, _ImplicitDefaultCtor< is_object< _Alloc> ::value, _T1, _T2>  
# 1153
 = true> 
# 1155
tuple(std::allocator_arg_t __tag, const _Alloc &__a) : _Inherited(__tag, __a) 
# 1156
{ } 
# 1158
template< class _Alloc, bool _Dummy = true, _ImplicitCtor< _Dummy, const _T1 &, const _T2 &>  
# 1159
 = true> 
# 1161
tuple(std::allocator_arg_t __tag, const _Alloc &__a, const _T1 &
# 1162
__a1, const _T2 &__a2) : _Inherited(__tag, __a, __a1, __a2) 
# 1163
{ } 
# 1165
template< class _Alloc, bool _Dummy = true, _ExplicitCtor< _Dummy, const _T1 &, const _T2 &>  
# 1166
 = false> explicit 
# 1169
tuple(std::allocator_arg_t __tag, const _Alloc &__a, const _T1 &
# 1170
__a1, const _T2 &__a2) : _Inherited(__tag, __a, __a1, __a2) 
# 1171
{ } 
# 1173
template< class _Alloc, class _U1, class _U2, _ImplicitCtor< true, _U1, _U2>  
# 1174
 = true> 
# 1176
tuple(std::allocator_arg_t __tag, const _Alloc &__a, _U1 &&__a1, _U2 &&__a2) : _Inherited(__tag, __a, std::forward< _U1> (__a1), std::forward< _U2> (__a2)) 
# 1178
{ } 
# 1180
template< class _Alloc, class _U1, class _U2, _ExplicitCtor< true, _U1, _U2>  
# 1181
 = false> explicit 
# 1184
tuple(std::allocator_arg_t __tag, const _Alloc &__a, _U1 &&
# 1185
__a1, _U2 &&__a2) : _Inherited(__tag, __a, std::forward< _U1> (__a1), std::forward< _U2> (__a2)) 
# 1187
{ } 
# 1189
template< class _Alloc> 
# 1191
tuple(std::allocator_arg_t __tag, const _Alloc &__a, const tuple &__in) : _Inherited(__tag, __a, static_cast< const _Inherited &>(__in)) 
# 1192
{ } 
# 1194
template< class _Alloc> 
# 1196
tuple(std::allocator_arg_t __tag, const _Alloc &__a, tuple &&__in) : _Inherited(__tag, __a, static_cast< _Inherited &&>(__in)) 
# 1197
{ } 
# 1199
template< class _Alloc, class _U1, class _U2, _ImplicitCtor< true, const _U1 &, const _U2 &>  
# 1200
 = true> 
# 1202
tuple(std::allocator_arg_t __tag, const _Alloc &__a, const std::tuple< _U1, _U2>  &
# 1203
__in) : _Inherited(__tag, __a, static_cast< const _Tuple_impl< 0, _U1, _U2>  &>(__in)) 
# 1206
{ } 
# 1208
template< class _Alloc, class _U1, class _U2, _ExplicitCtor< true, const _U1 &, const _U2 &>  
# 1209
 = false> explicit 
# 1212
tuple(std::allocator_arg_t __tag, const _Alloc &__a, const std::tuple< _U1, _U2>  &
# 1213
__in) : _Inherited(__tag, __a, static_cast< const _Tuple_impl< 0, _U1, _U2>  &>(__in)) 
# 1216
{ } 
# 1218
template< class _Alloc, class _U1, class _U2, _ImplicitCtor< true, _U1, _U2>  
# 1219
 = true> 
# 1221
tuple(std::allocator_arg_t __tag, const _Alloc &__a, std::tuple< _U1, _U2>  &&__in) : _Inherited(__tag, __a, static_cast< _Tuple_impl< 0, _U1, _U2>  &&>(__in)) 
# 1223
{ } 
# 1225
template< class _Alloc, class _U1, class _U2, _ExplicitCtor< true, _U1, _U2>  
# 1226
 = false> explicit 
# 1229
tuple(std::allocator_arg_t __tag, const _Alloc &__a, std::tuple< _U1, _U2>  &&__in) : _Inherited(__tag, __a, static_cast< _Tuple_impl< 0, _U1, _U2>  &&>(__in)) 
# 1231
{ } 
# 1233
template< class _Alloc, class _U1, class _U2, _ImplicitCtor< true, const _U1 &, const _U2 &>  
# 1234
 = true> 
# 1236
tuple(std::allocator_arg_t __tag, const _Alloc &__a, const pair< _U1, _U2>  &
# 1237
__in) : _Inherited(__tag, __a, (__in.first), (__in.second)) 
# 1238
{ } 
# 1240
template< class _Alloc, class _U1, class _U2, _ExplicitCtor< true, const _U1 &, const _U2 &>  
# 1241
 = false> explicit 
# 1244
tuple(std::allocator_arg_t __tag, const _Alloc &__a, const pair< _U1, _U2>  &
# 1245
__in) : _Inherited(__tag, __a, (__in.first), (__in.second)) 
# 1246
{ } 
# 1248
template< class _Alloc, class _U1, class _U2, _ImplicitCtor< true, _U1, _U2>  
# 1249
 = true> 
# 1251
tuple(std::allocator_arg_t __tag, const _Alloc &__a, pair< _U1, _U2>  &&__in) : _Inherited(__tag, __a, std::forward< _U1> ((__in.first)), std::forward< _U2> ((__in.second))) 
# 1253
{ } 
# 1255
template< class _Alloc, class _U1, class _U2, _ExplicitCtor< true, _U1, _U2>  
# 1256
 = false> explicit 
# 1259
tuple(std::allocator_arg_t __tag, const _Alloc &__a, pair< _U1, _U2>  &&__in) : _Inherited(__tag, __a, std::forward< _U1> ((__in.first)), std::forward< _U2> ((__in.second))) 
# 1261
{ } 
# 1267
tuple &operator=(typename conditional< __assignable< const _T1 &, const _T2 &> (), const tuple &, const std::__nonesuch &> ::type 
# 1269
__in) noexcept(__nothrow_assignable< const _T1 &, const _T2 &> ()) 
# 1271
{ 
# 1272
this->_M_assign(__in); 
# 1273
return *this; 
# 1274
} 
# 1278
tuple &operator=(typename conditional< __assignable< _T1, _T2> (), tuple &&, std::__nonesuch &&> ::type 
# 1280
__in) noexcept(__nothrow_assignable< _T1, _T2> ()) 
# 1282
{ 
# 1283
this->_M_assign(std::move(__in)); 
# 1284
return *this; 
# 1285
} 
# 1287
template< class _U1, class _U2> std::__enable_if_t< __assignable< const _U1 &, const _U2 &> (), tuple &>  
# 1290
operator=(const std::tuple< _U1, _U2>  &__in) noexcept(__nothrow_assignable< const _U1 &, const _U2 &> ()) 
# 1292
{ 
# 1293
this->_M_assign(__in); 
# 1294
return *this; 
# 1295
} 
# 1297
template< class _U1, class _U2> std::__enable_if_t< __assignable< _U1, _U2> (), tuple &>  
# 1300
operator=(std::tuple< _U1, _U2>  &&__in) noexcept(__nothrow_assignable< _U1, _U2> ()) 
# 1302
{ 
# 1303
this->_M_assign(std::move(__in)); 
# 1304
return *this; 
# 1305
} 
# 1307
template< class _U1, class _U2> std::__enable_if_t< __assignable< const _U1 &, const _U2 &> (), tuple &>  
# 1310
operator=(const pair< _U1, _U2>  &__in) noexcept(__nothrow_assignable< const _U1 &, const _U2 &> ()) 
# 1312
{ 
# 1313
this->_M_head(*this) = (__in.first); 
# 1314
this->_M_tail(*this)._M_head(*this) = (__in.second); 
# 1315
return *this; 
# 1316
} 
# 1318
template< class _U1, class _U2> std::__enable_if_t< __assignable< _U1, _U2> (), tuple &>  
# 1321
operator=(pair< _U1, _U2>  &&__in) noexcept(__nothrow_assignable< _U1, _U2> ()) 
# 1323
{ 
# 1324
this->_M_head(*this) = std::forward< _U1> ((__in.first)); 
# 1325
this->_M_tail(*this)._M_head(*this) = std::forward< _U2> ((__in.second)); 
# 1326
return *this; 
# 1327
} 
# 1331
void swap(tuple &__in) noexcept(__and_< __is_nothrow_swappable< _T1> , __is_nothrow_swappable< _T2> > ::value) 
# 1334
{ _Inherited::_M_swap(__in); } 
# 1335
}; 
# 1339
template< class ..._Elements> 
# 1340
struct tuple_size< tuple< _Elements...> >  : public integral_constant< unsigned long, sizeof...(_Elements)>  { 
# 1341
}; 
# 1344
template< class _Tp> constexpr inline size_t 
# 1345
tuple_size_v = (tuple_size< _Tp> ::value); 
# 1352
template< size_t __i, class _Head, class ..._Tail> 
# 1353
struct tuple_element< __i, tuple< _Head, _Tail...> >  : public std::tuple_element< __i - (1), tuple< _Tail...> >  { 
# 1354
}; 
# 1359
template< class _Head, class ..._Tail> 
# 1360
struct tuple_element< 0, tuple< _Head, _Tail...> >  { 
# 1362
typedef _Head type; 
# 1363
}; 
# 1368
template< size_t __i> 
# 1369
struct tuple_element< __i, tuple< > >  { 
# 1371
static_assert((__i < tuple_size< tuple< > > ::value), "tuple index must be in range");
# 1373
}; 
# 1375
template< size_t __i, class _Head, class ..._Tail> constexpr _Head &
# 1377
__get_helper(_Tuple_impl< __i, _Head, _Tail...>  &__t) noexcept 
# 1378
{ return _Tuple_impl< __i, _Head, _Tail...> ::_M_head(__t); } 
# 1380
template< size_t __i, class _Head, class ..._Tail> constexpr const _Head &
# 1382
__get_helper(const _Tuple_impl< __i, _Head, _Tail...>  &__t) noexcept 
# 1383
{ return _Tuple_impl< __i, _Head, _Tail...> ::_M_head(__t); } 
# 1386
template < size_t __i, typename ... _Types >
    __enable_if_t < ( __i >= sizeof ... ( _Types ) ) >
    __get_helper ( const tuple < _Types ... > & ) = delete;
# 1391
template< size_t __i, class ..._Elements> constexpr __tuple_element_t< __i, tuple< _Elements...> >  &
# 1393
get(tuple< _Elements...>  &__t) noexcept 
# 1394
{ return std::__get_helper< __i> (__t); } 
# 1397
template< size_t __i, class ..._Elements> constexpr const __tuple_element_t< __i, tuple< _Elements...> >  &
# 1399
get(const tuple< _Elements...>  &__t) noexcept 
# 1400
{ return std::__get_helper< __i> (__t); } 
# 1403
template< size_t __i, class ..._Elements> constexpr __tuple_element_t< __i, tuple< _Elements...> >  &&
# 1405
get(tuple< _Elements...>  &&__t) noexcept 
# 1406
{ 
# 1407
typedef __tuple_element_t< __i, tuple< _Elements...> >  __element_type; 
# 1408
return std::forward< __tuple_element_t< __i, tuple< _Elements...> > > (std::__get_helper< __i> (__t)); 
# 1409
} 
# 1412
template< size_t __i, class ..._Elements> constexpr const __tuple_element_t< __i, tuple< _Elements...> >  &&
# 1414
get(const tuple< _Elements...>  &&__t) noexcept 
# 1415
{ 
# 1416
typedef __tuple_element_t< __i, tuple< _Elements...> >  __element_type; 
# 1417
return std::forward< const __tuple_element_t< __i, tuple< _Elements...> > > (std::__get_helper< __i> (__t)); 
# 1418
} 
# 1427 "/usr/include/c++/11/tuple" 3
template< class _Tp, class ..._Types> constexpr size_t 
# 1429
__find_uniq_type_in_pack() 
# 1430
{ 
# 1431
constexpr size_t __sz = sizeof...(_Types); 
# 1432
constexpr bool __found[__sz] = {__is_same(_Tp, _Types)...}; 
# 1433
size_t __n = __sz; 
# 1434
for (size_t __i = (0); __i < __sz; ++__i) 
# 1435
{ 
# 1436
if (__found[__i]) 
# 1437
{ 
# 1438
if (__n < __sz) { 
# 1439
return __sz; }  
# 1440
__n = __i; 
# 1441
}  
# 1442
}  
# 1443
return __n; 
# 1444
} 
# 1447
template< class _Tp, class ..._Types> constexpr _Tp &
# 1449
get(tuple< _Types...>  &__t) noexcept 
# 1450
{ 
# 1451
constexpr size_t __idx = __find_uniq_type_in_pack< _Tp, _Types...> (); 
# 1452
static_assert((__idx < sizeof...(_Types)), "the type T in std::get<T> must occur exactly once in the tuple");
# 1454
return std::__get_helper< __idx> (__t); 
# 1455
} 
# 1458
template< class _Tp, class ..._Types> constexpr _Tp &&
# 1460
get(tuple< _Types...>  &&__t) noexcept 
# 1461
{ 
# 1462
constexpr size_t __idx = __find_uniq_type_in_pack< _Tp, _Types...> (); 
# 1463
static_assert((__idx < sizeof...(_Types)), "the type T in std::get<T> must occur exactly once in the tuple");
# 1465
return std::forward< _Tp> (std::__get_helper< __idx> (__t)); 
# 1466
} 
# 1469
template< class _Tp, class ..._Types> constexpr const _Tp &
# 1471
get(const tuple< _Types...>  &__t) noexcept 
# 1472
{ 
# 1473
constexpr size_t __idx = __find_uniq_type_in_pack< _Tp, _Types...> (); 
# 1474
static_assert((__idx < sizeof...(_Types)), "the type T in std::get<T> must occur exactly once in the tuple");
# 1476
return std::__get_helper< __idx> (__t); 
# 1477
} 
# 1481
template< class _Tp, class ..._Types> constexpr const _Tp &&
# 1483
get(const tuple< _Types...>  &&__t) noexcept 
# 1484
{ 
# 1485
constexpr size_t __idx = __find_uniq_type_in_pack< _Tp, _Types...> (); 
# 1486
static_assert((__idx < sizeof...(_Types)), "the type T in std::get<T> must occur exactly once in the tuple");
# 1488
return std::forward< const _Tp> (std::__get_helper< __idx> (__t)); 
# 1489
} 
# 1493
template< class _Tp, class _Up, size_t __i, size_t __size> 
# 1494
struct __tuple_compare { 
# 1497
static constexpr bool __eq(const _Tp &__t, const _Up &__u) 
# 1498
{ 
# 1499
return ((bool)(std::get< __i> (__t) == std::get< __i> (__u))) && __tuple_compare< _Tp, _Up, __i + (1), __size> ::__eq(__t, __u); 
# 1501
} 
# 1504
static constexpr bool __less(const _Tp &__t, const _Up &__u) 
# 1505
{ 
# 1506
return ((bool)(std::get< __i> (__t) < std::get< __i> (__u))) || ((!((bool)(std::get< __i> (__u) < std::get< __i> (__t)))) && __tuple_compare< _Tp, _Up, __i + (1), __size> ::__less(__t, __u)); 
# 1509
} 
# 1510
}; 
# 1512
template< class _Tp, class _Up, size_t __size> 
# 1513
struct __tuple_compare< _Tp, _Up, __size, __size>  { 
# 1516
static constexpr bool __eq(const _Tp &, const _Up &) { return true; } 
# 1519
static constexpr bool __less(const _Tp &, const _Up &) { return false; } 
# 1520
}; 
# 1522
template< class ..._TElements, class ..._UElements> constexpr bool 
# 1524
operator==(const tuple< _TElements...>  &__t, const tuple< _UElements...>  &
# 1525
__u) 
# 1526
{ 
# 1527
static_assert((sizeof...(_TElements) == sizeof...(_UElements)), "tuple objects can only be compared if they have equal sizes.");
# 1529
using __compare = __tuple_compare< tuple< _TElements...> , tuple< _UElements...> , 0, sizeof...(_TElements)> ; 
# 1532
return __compare::__eq(__t, __u); 
# 1533
} 
# 1564 "/usr/include/c++/11/tuple" 3
template< class ..._TElements, class ..._UElements> constexpr bool 
# 1566
operator<(const tuple< _TElements...>  &__t, const tuple< _UElements...>  &
# 1567
__u) 
# 1568
{ 
# 1569
static_assert((sizeof...(_TElements) == sizeof...(_UElements)), "tuple objects can only be compared if they have equal sizes.");
# 1571
using __compare = __tuple_compare< tuple< _TElements...> , tuple< _UElements...> , 0, sizeof...(_TElements)> ; 
# 1574
return __compare::__less(__t, __u); 
# 1575
} 
# 1577
template< class ..._TElements, class ..._UElements> constexpr bool 
# 1579
operator!=(const tuple< _TElements...>  &__t, const tuple< _UElements...>  &
# 1580
__u) 
# 1581
{ return !(__t == __u); } 
# 1583
template< class ..._TElements, class ..._UElements> constexpr bool 
# 1585
operator>(const tuple< _TElements...>  &__t, const tuple< _UElements...>  &
# 1586
__u) 
# 1587
{ return __u < __t; } 
# 1589
template< class ..._TElements, class ..._UElements> constexpr bool 
# 1591
operator<=(const tuple< _TElements...>  &__t, const tuple< _UElements...>  &
# 1592
__u) 
# 1593
{ return !(__u < __t); } 
# 1595
template< class ..._TElements, class ..._UElements> constexpr bool 
# 1597
operator>=(const tuple< _TElements...>  &__t, const tuple< _UElements...>  &
# 1598
__u) 
# 1599
{ return !(__t < __u); } 
# 1603
template< class ..._Elements> constexpr tuple< typename __decay_and_strip< _Elements> ::__type...>  
# 1605
make_tuple(_Elements &&...__args) 
# 1606
{ 
# 1608
typedef tuple< typename __strip_reference_wrapper< __decay_t< _Elements> > ::__type...>  __result_type; 
# 1609
return __result_type(std::forward< _Elements> (__args)...); 
# 1610
} 
# 1615
template< class ..._Elements> constexpr tuple< _Elements &&...>  
# 1617
forward_as_tuple(_Elements &&...__args) noexcept 
# 1618
{ return tuple< _Elements &&...> (std::forward< _Elements> (__args)...); } 
# 1620
template< size_t , class , class , size_t > struct __make_tuple_impl; 
# 1623
template< size_t _Idx, class _Tuple, class ..._Tp, size_t _Nm> 
# 1624
struct __make_tuple_impl< _Idx, tuple< _Tp...> , _Tuple, _Nm>  : public std::__make_tuple_impl< _Idx + (1), tuple< _Tp..., __tuple_element_t< _Idx, _Tuple> > , _Tuple, _Nm>  { 
# 1628
}; 
# 1630
template< size_t _Nm, class _Tuple, class ..._Tp> 
# 1631
struct __make_tuple_impl< _Nm, tuple< _Tp...> , _Tuple, _Nm>  { 
# 1633
typedef tuple< _Tp...>  __type; 
# 1634
}; 
# 1636
template< class _Tuple> 
# 1637
struct __do_make_tuple : public __make_tuple_impl< 0UL, tuple< > , _Tuple, tuple_size< _Tuple> ::value>  { 
# 1639
}; 
# 1642
template< class _Tuple> 
# 1643
struct __make_tuple : public __do_make_tuple< __remove_cvref_t< _Tuple> >  { 
# 1645
}; 
# 1648
template< class ...> struct __combine_tuples; 
# 1652
template<> struct __combine_tuples< >  { 
# 1654
typedef tuple< >  __type; 
# 1655
}; 
# 1657
template< class ..._Ts> 
# 1658
struct __combine_tuples< tuple< _Ts...> >  { 
# 1660
typedef tuple< _Ts...>  __type; 
# 1661
}; 
# 1663
template< class ..._T1s, class ..._T2s, class ..._Rem> 
# 1664
struct __combine_tuples< tuple< _T1s...> , tuple< _T2s...> , _Rem...>  { 
# 1667
typedef typename std::__combine_tuples< tuple< _T1s..., _T2s...> , _Rem...> ::__type __type; 
# 1668
}; 
# 1671
template< class ..._Tpls> 
# 1672
struct __tuple_cat_result { 
# 1675
typedef typename __combine_tuples< typename __make_tuple< _Tpls> ::__type...> ::__type __type; 
# 1676
}; 
# 1680
template< class ...> struct __make_1st_indices; 
# 1684
template<> struct __make_1st_indices< >  { 
# 1686
typedef _Index_tuple< >  __type; 
# 1687
}; 
# 1689
template< class _Tp, class ..._Tpls> 
# 1690
struct __make_1st_indices< _Tp, _Tpls...>  { 
# 1693
typedef typename _Build_index_tuple< tuple_size< typename remove_reference< _Tp> ::type> ::value> ::__type __type; 
# 1694
}; 
# 1699
template< class _Ret, class _Indices, class ..._Tpls> struct __tuple_concater; 
# 1702
template< class _Ret, size_t ..._Is, class _Tp, class ..._Tpls> 
# 1703
struct __tuple_concater< _Ret, _Index_tuple< _Is...> , _Tp, _Tpls...>  { 
# 1705
template< class ..._Us> static constexpr _Ret 
# 1707
_S_do(_Tp &&__tp, _Tpls &&...__tps, _Us &&...__us) 
# 1708
{ 
# 1709
typedef typename __make_1st_indices< _Tpls...> ::__type __idx; 
# 1710
typedef std::__tuple_concater< _Ret, typename __make_1st_indices< _Tpls...> ::__type, _Tpls...>  __next; 
# 1711
return __next::_S_do(std::forward< _Tpls> (__tps)..., std::forward< _Us> (__us)..., std::get< _Is> (std::forward< _Tp> (__tp))...); 
# 1714
} 
# 1715
}; 
# 1717
template< class _Ret> 
# 1718
struct __tuple_concater< _Ret, _Index_tuple< > >  { 
# 1720
template< class ..._Us> static constexpr _Ret 
# 1722
_S_do(_Us &&...__us) 
# 1723
{ 
# 1724
return _Ret(std::forward< _Us> (__us)...); 
# 1725
} 
# 1726
}; 
# 1729
template< class ..._Tpls, class  = typename enable_if< __and_< __is_tuple_like< _Tpls> ...> ::value> ::type> constexpr auto 
# 1732
tuple_cat(_Tpls &&...__tpls)->typename __tuple_cat_result< _Tpls...> ::__type 
# 1734
{ 
# 1735
typedef typename __tuple_cat_result< _Tpls...> ::__type __ret; 
# 1736
typedef typename __make_1st_indices< _Tpls...> ::__type __idx; 
# 1737
typedef __tuple_concater< typename __tuple_cat_result< _Tpls...> ::__type, typename __make_1st_indices< _Tpls...> ::__type, _Tpls...>  __concater; 
# 1738
return __concater::_S_do(std::forward< _Tpls> (__tpls)...); 
# 1739
} 
# 1744
template< class ..._Elements> constexpr tuple< _Elements &...>  
# 1746
tie(_Elements &...__args) noexcept 
# 1747
{ return tuple< _Elements &...> (__args...); } 
# 1750
template< class ..._Elements> inline typename enable_if< __and_< __is_swappable< _Elements> ...> ::value> ::type 
# 1760
swap(tuple< _Elements...>  &__x, tuple< _Elements...>  &__y) noexcept(noexcept(__x.swap(__y))) 
# 1762
{ __x.swap(__y); } 
# 1765
template < typename ... _Elements >

    typename enable_if < ! __and_ < __is_swappable < _Elements > ... > :: value > :: type
    swap ( tuple < _Elements ... > &, tuple < _Elements ... > & ) = delete;
# 1775
struct _Swallow_assign { 
# 1777
template< class _Tp> constexpr const _Swallow_assign &
# 1779
operator=(const _Tp &) const 
# 1780
{ return *this; } 
# 1781
}; 
# 1785
constexpr inline _Swallow_assign ignore{}; 
# 1788
template< class ..._Types, class _Alloc> 
# 1789
struct uses_allocator< tuple< _Types...> , _Alloc>  : public true_type { }; 
# 1800 "/usr/include/c++/11/tuple" 3
template< class _T1, class _T2> 
# 1801
template< class ..._Args1, class ..._Args2> inline 
# 1805
pair< _T1, _T2> ::pair(std::piecewise_construct_t, tuple< _Args1...>  
# 1806
__first, tuple< _Args2...>  __second) : pair(__first, __second, typename _Build_index_tuple< sizeof...(_Args1)> ::__type(), typename _Build_index_tuple< sizeof...(_Args2)> ::__type()) 
# 1810
{ } 
# 1812
template< class _T1, class _T2> 
# 1813
template< class ..._Args1, size_t ..._Indexes1, class ...
# 1814
_Args2, size_t ..._Indexes2> inline 
# 1817
pair< _T1, _T2> ::pair(tuple< _Args1...>  &__tuple1, tuple< _Args2...>  &__tuple2, _Index_tuple< _Indexes1...> , _Index_tuple< _Indexes2...> ) : first(std::forward< _Args1> (std::get< _Indexes1> (__tuple1))...), second(std::forward< _Args2> (std::get< _Indexes2> (__tuple2))...) 
# 1821
{ } 
# 1829
template< template< class ...>  class _Trait, class _Tp, class _Tuple> constexpr inline bool 
# 1830
__unpack_std_tuple = false; 
# 1832
template< template< class ...>  class _Trait, class _Tp, class ..._Up> constexpr inline bool 
# 1833
__unpack_std_tuple< _Trait, _Tp, tuple< _Up...> >  = (_Trait< _Tp, _Up...> ::value); 
# 1836
template< template< class ...>  class _Trait, class _Tp, class ..._Up> constexpr inline bool 
# 1837
__unpack_std_tuple< _Trait, _Tp, tuple< _Up...>  &>  = (_Trait< _Tp, _Up &...> ::value); 
# 1840
template< template< class ...>  class _Trait, class _Tp, class ..._Up> constexpr inline bool 
# 1841
__unpack_std_tuple< _Trait, _Tp, const tuple< _Up...> >  = (_Trait< _Tp, const _Up...> ::value); 
# 1844
template< template< class ...>  class _Trait, class _Tp, class ..._Up> constexpr inline bool 
# 1845
__unpack_std_tuple< _Trait, _Tp, const tuple< _Up...>  &>  = (_Trait< _Tp, const _Up &...> ::value); 
# 1850
template< class _Fn, class _Tuple, size_t ..._Idx> constexpr decltype(auto) 
# 1852
__apply_impl(_Fn &&__f, _Tuple &&__t, index_sequence< _Idx...> ) 
# 1853
{ 
# 1854
return std::__invoke(std::forward< _Fn> (__f), std::get< _Idx> (std::forward< _Tuple> (__t))...); 
# 1856
} 
# 1858
template< class _Fn, class _Tuple> constexpr decltype(auto) 
# 1860
apply(_Fn &&__f, _Tuple &&__t) noexcept(__unpack_std_tuple< is_nothrow_invocable, _Fn, _Tuple> ) 
# 1862
{ 
# 1863
using _Indices = make_index_sequence< tuple_size_v< remove_reference_t< _Tuple> > > ; 
# 1865
return std::__apply_impl(std::forward< _Fn> (__f), std::forward< _Tuple> (__t), _Indices{}); 
# 1868
} 
# 1872
template< class _Tp, class _Tuple, size_t ..._Idx> constexpr _Tp 
# 1874
__make_from_tuple_impl(_Tuple &&__t, index_sequence< _Idx...> ) 
# 1875
{ return _Tp(std::get< _Idx> (std::forward< _Tuple> (__t))...); } 
# 1877
template< class _Tp, class _Tuple> constexpr _Tp 
# 1879
make_from_tuple(_Tuple &&__t) noexcept(__unpack_std_tuple< is_nothrow_constructible, _Tp, _Tuple> ) 
# 1881
{ 
# 1882
return __make_from_tuple_impl< _Tp> (std::forward< _Tuple> (__t), make_index_sequence< tuple_size_v< remove_reference_t< _Tuple> > > {}); 
# 1885
} 
# 1891
}
# 37 "/usr/include/c++/11/bits/hash_bytes.h" 3
namespace std { 
# 47
size_t _Hash_bytes(const void * __ptr, size_t __len, size_t __seed); 
# 54
size_t _Fnv_hash_bytes(const void * __ptr, size_t __len, size_t __seed); 
# 57
}
# 38 "/usr/include/c++/11/bits/functional_hash.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 50 "/usr/include/c++/11/bits/functional_hash.h" 3
template< class _Result, class _Arg> 
# 51
struct __hash_base { 
# 53
typedef _Result result_type [[__deprecated__]]; 
# 54
typedef _Arg argument_type [[__deprecated__]]; 
# 55
}; 
# 58
template< class _Tp> struct hash; 
# 61
template< class _Tp, class  = void> 
# 62
struct __poison_hash { 
# 64
static constexpr inline bool __enable_hash_call = false; 
# 67
private: __poison_hash(__poison_hash &&); 
# 68
~__poison_hash(); 
# 69
}; 
# 71
template< class _Tp> 
# 72
struct __poison_hash< _Tp, __void_t< __decltype((hash< _Tp> ()(declval< _Tp> ())))> >  { 
# 74
static constexpr inline bool __enable_hash_call = true; 
# 75
}; 
# 78
template< class _Tp, bool  = is_enum< _Tp> ::value> 
# 79
struct __hash_enum { 
# 83
private: __hash_enum(__hash_enum &&); 
# 84
~__hash_enum(); 
# 85
}; 
# 88
template< class _Tp> 
# 89
struct __hash_enum< _Tp, true>  : public __hash_base< unsigned long, _Tp>  { 
# 92
std::size_t operator()(_Tp __val) const noexcept 
# 93
{ 
# 94
using __type = typename underlying_type< _Tp> ::type; 
# 95
return hash< typename underlying_type< _Tp> ::type> {}(static_cast< __type>(__val)); 
# 96
} 
# 97
}; 
# 101
template< class _Tp> 
# 102
struct hash : public __hash_enum< _Tp>  { 
# 103
}; 
# 106
template< class _Tp> 
# 107
struct hash< _Tp *>  : public __hash_base< unsigned long, _Tp *>  { 
# 110
std::size_t operator()(_Tp *__p) const noexcept 
# 111
{ return reinterpret_cast< std::size_t>(__p); } 
# 112
}; 
# 125 "/usr/include/c++/11/bits/functional_hash.h" 3
template<> struct hash< bool>  : public __hash_base< unsigned long, bool>  { size_t operator()(bool __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 128
template<> struct hash< char>  : public __hash_base< unsigned long, char>  { size_t operator()(char __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 131
template<> struct hash< signed char>  : public __hash_base< unsigned long, signed char>  { size_t operator()(signed char __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 134
template<> struct hash< unsigned char>  : public __hash_base< unsigned long, unsigned char>  { size_t operator()(unsigned char __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 137
template<> struct hash< wchar_t>  : public __hash_base< unsigned long, wchar_t>  { size_t operator()(wchar_t __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 145
template<> struct hash< char16_t>  : public __hash_base< unsigned long, char16_t>  { size_t operator()(char16_t __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 148
template<> struct hash< char32_t>  : public __hash_base< unsigned long, char32_t>  { size_t operator()(char32_t __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 151
template<> struct hash< short>  : public __hash_base< unsigned long, short>  { size_t operator()(short __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 154
template<> struct hash< int>  : public __hash_base< unsigned long, int>  { size_t operator()(int __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 157
template<> struct hash< long>  : public __hash_base< unsigned long, long>  { size_t operator()(long __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 160
template<> struct hash< long long>  : public __hash_base< unsigned long, long long>  { size_t operator()(long long __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 163
template<> struct hash< unsigned short>  : public __hash_base< unsigned long, unsigned short>  { size_t operator()(unsigned short __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 166
template<> struct hash< unsigned>  : public __hash_base< unsigned long, unsigned>  { size_t operator()(unsigned __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 169
template<> struct hash< unsigned long>  : public __hash_base< unsigned long, unsigned long>  { size_t operator()(unsigned long __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 172
template<> struct hash< unsigned long long>  : public __hash_base< unsigned long, unsigned long long>  { size_t operator()(unsigned long long __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 193 "/usr/include/c++/11/bits/functional_hash.h" 3
struct _Hash_impl { 
# 196
static size_t hash(const void *__ptr, size_t __clength, size_t 
# 197
__seed = static_cast< size_t>(3339675911UL)) 
# 198
{ return _Hash_bytes(__ptr, __clength, __seed); } 
# 200
template< class _Tp> static size_t 
# 202
hash(const _Tp &__val) 
# 203
{ return hash(&__val, sizeof(__val)); } 
# 205
template< class _Tp> static size_t 
# 207
__hash_combine(const _Tp &__val, size_t __hash) 
# 208
{ return hash(&__val, sizeof(__val), __hash); } 
# 209
}; 
# 212
struct _Fnv_hash_impl { 
# 215
static size_t hash(const void *__ptr, size_t __clength, size_t 
# 216
__seed = static_cast< size_t>(2166136261UL)) 
# 217
{ return _Fnv_hash_bytes(__ptr, __clength, __seed); } 
# 219
template< class _Tp> static size_t 
# 221
hash(const _Tp &__val) 
# 222
{ return hash(&__val, sizeof(__val)); } 
# 224
template< class _Tp> static size_t 
# 226
__hash_combine(const _Tp &__val, size_t __hash) 
# 227
{ return hash(&__val, sizeof(__val), __hash); } 
# 228
}; 
# 232
template<> struct hash< float>  : public __hash_base< unsigned long, float>  { 
# 235
size_t operator()(float __val) const noexcept 
# 236
{ 
# 238
return (__val != (0.0F)) ? std::_Hash_impl::hash(__val) : (0); 
# 239
} 
# 240
}; 
# 244
template<> struct hash< double>  : public __hash_base< unsigned long, double>  { 
# 247
size_t operator()(double __val) const noexcept 
# 248
{ 
# 250
return (__val != (0.0)) ? std::_Hash_impl::hash(__val) : (0); 
# 251
} 
# 252
}; 
# 256
template<> struct hash< long double>  : public __hash_base< unsigned long, long double>  { 
# 259
__attribute((__pure__)) size_t 
# 260
operator()(long double __val) const noexcept; 
# 261
}; 
# 265
template<> struct hash< __decltype((nullptr))>  : public __hash_base< unsigned long, __decltype((nullptr))>  { 
# 268
size_t operator()(nullptr_t) const noexcept 
# 269
{ return 0; } 
# 270
}; 
# 279 "/usr/include/c++/11/bits/functional_hash.h" 3
template< class _Hash> 
# 280
struct __is_fast_hash : public true_type { 
# 281
}; 
# 284
template<> struct __is_fast_hash< hash< long double> >  : public false_type { 
# 285
}; 
# 288
}
# 43 "/usr/include/c++/11/bits/refwrap.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 54 "/usr/include/c++/11/bits/refwrap.h" 3
template< class _Res, class ..._ArgTypes> 
# 55
struct _Maybe_unary_or_binary_function { }; 
# 58
template< class _Res, class _T1> 
# 59
struct _Maybe_unary_or_binary_function< _Res, _T1>  : public unary_function< _T1, _Res>  { 
# 60
}; 
# 63
template< class _Res, class _T1, class _T2> 
# 64
struct _Maybe_unary_or_binary_function< _Res, _T1, _T2>  : public binary_function< _T1, _T2, _Res>  { 
# 65
}; 
# 67
template< class _Signature> struct _Mem_fn_traits; 
# 70
template< class _Res, class _Class, class ..._ArgTypes> 
# 71
struct _Mem_fn_traits_base { 
# 73
using __result_type = _Res; 
# 74
using __maybe_type = _Maybe_unary_or_binary_function< _Res, _Class *, _ArgTypes...> ; 
# 76
using __arity = integral_constant< size_t, sizeof...(_ArgTypes)> ; 
# 77
}; 
# 99 "/usr/include/c++/11/bits/refwrap.h" 3
template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...)>  : public _Mem_fn_traits_base< _Res, _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...)>  : public _Mem_fn_traits_base< _Res, _Class, _ArgTypes...>  { using __vararg = std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) const>  : public _Mem_fn_traits_base< _Res, const _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) const>  : public _Mem_fn_traits_base< _Res, const _Class, _ArgTypes...>  { using __vararg = std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) volatile>  : public _Mem_fn_traits_base< _Res, volatile _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) volatile>  : public _Mem_fn_traits_base< _Res, volatile _Class, _ArgTypes...>  { using __vararg = std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) const volatile>  : public _Mem_fn_traits_base< _Res, const volatile _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) const volatile>  : public _Mem_fn_traits_base< _Res, const volatile _Class, _ArgTypes...>  { using __vararg = std::true_type; }; 
# 100
template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) &>  : public _Mem_fn_traits_base< _Res, _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) &>  : public _Mem_fn_traits_base< _Res, _Class, _ArgTypes...>  { using __vararg = std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) const &>  : public _Mem_fn_traits_base< _Res, const _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) const &>  : public _Mem_fn_traits_base< _Res, const _Class, _ArgTypes...>  { using __vararg = std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) volatile &>  : public _Mem_fn_traits_base< _Res, volatile _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) volatile &>  : public _Mem_fn_traits_base< _Res, volatile _Class, _ArgTypes...>  { using __vararg = std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) const volatile &>  : public _Mem_fn_traits_base< _Res, const volatile _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) const volatile &>  : public _Mem_fn_traits_base< _Res, const volatile _Class, _ArgTypes...>  { using __vararg = std::true_type; }; 
# 101
template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) &&>  : public _Mem_fn_traits_base< _Res, _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) &&>  : public _Mem_fn_traits_base< _Res, _Class, _ArgTypes...>  { using __vararg = std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) const &&>  : public _Mem_fn_traits_base< _Res, const _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) const &&>  : public _Mem_fn_traits_base< _Res, const _Class, _ArgTypes...>  { using __vararg = std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) volatile &&>  : public _Mem_fn_traits_base< _Res, volatile _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) volatile &&>  : public _Mem_fn_traits_base< _Res, volatile _Class, _ArgTypes...>  { using __vararg = std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) const volatile &&>  : public _Mem_fn_traits_base< _Res, const volatile _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) const volatile &&>  : public _Mem_fn_traits_base< _Res, const volatile _Class, _ArgTypes...>  { using __vararg = std::true_type; }; 
# 104
template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) noexcept>  : public _Mem_fn_traits_base< _Res, _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) noexcept>  : public _Mem_fn_traits_base< _Res, _Class, _ArgTypes...>  { using __vararg = std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) const noexcept>  : public _Mem_fn_traits_base< _Res, const _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) const noexcept>  : public _Mem_fn_traits_base< _Res, const _Class, _ArgTypes...>  { using __vararg = std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) volatile noexcept>  : public _Mem_fn_traits_base< _Res, volatile _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) volatile noexcept>  : public _Mem_fn_traits_base< _Res, volatile _Class, _ArgTypes...>  { using __vararg = std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) const volatile noexcept>  : public _Mem_fn_traits_base< _Res, const volatile _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) const volatile noexcept>  : public _Mem_fn_traits_base< _Res, const volatile _Class, _ArgTypes...>  { using __vararg = std::true_type; }; 
# 105
template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) & noexcept>  : public _Mem_fn_traits_base< _Res, _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) & noexcept>  : public _Mem_fn_traits_base< _Res, _Class, _ArgTypes...>  { using __vararg = std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) const & noexcept>  : public _Mem_fn_traits_base< _Res, const _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) const & noexcept>  : public _Mem_fn_traits_base< _Res, const _Class, _ArgTypes...>  { using __vararg = std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) volatile & noexcept>  : public _Mem_fn_traits_base< _Res, volatile _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) volatile & noexcept>  : public _Mem_fn_traits_base< _Res, volatile _Class, _ArgTypes...>  { using __vararg = std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) const volatile & noexcept>  : public _Mem_fn_traits_base< _Res, const volatile _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) const volatile & noexcept>  : public _Mem_fn_traits_base< _Res, const volatile _Class, _ArgTypes...>  { using __vararg = std::true_type; }; 
# 106
template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) && noexcept>  : public _Mem_fn_traits_base< _Res, _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) && noexcept>  : public _Mem_fn_traits_base< _Res, _Class, _ArgTypes...>  { using __vararg = std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) const && noexcept>  : public _Mem_fn_traits_base< _Res, const _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) const && noexcept>  : public _Mem_fn_traits_base< _Res, const _Class, _ArgTypes...>  { using __vararg = std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) volatile && noexcept>  : public _Mem_fn_traits_base< _Res, volatile _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) volatile && noexcept>  : public _Mem_fn_traits_base< _Res, volatile _Class, _ArgTypes...>  { using __vararg = std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) const volatile && noexcept>  : public _Mem_fn_traits_base< _Res, const volatile _Class, _ArgTypes...>  { using __vararg = std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) const volatile && noexcept>  : public _Mem_fn_traits_base< _Res, const volatile _Class, _ArgTypes...>  { using __vararg = std::true_type; }; 
# 113
template< class _Functor, class  = __void_t< > > 
# 114
struct _Maybe_get_result_type { 
# 115
}; 
# 117
template< class _Functor> 
# 118
struct _Maybe_get_result_type< _Functor, __void_t< typename _Functor::result_type> >  { 
# 120
typedef typename _Functor::result_type result_type; }; 
# 126
template< class _Functor> 
# 127
struct _Weak_result_type_impl : public _Maybe_get_result_type< _Functor>  { 
# 129
}; 
# 132
template< class _Res, class ..._ArgTypes, bool _NE> 
# 133
struct _Weak_result_type_impl< _Res (_ArgTypes ...) noexcept(_NE)>  { 
# 134
typedef _Res result_type; }; 
# 137
template< class _Res, class ..._ArgTypes, bool _NE> 
# 138
struct _Weak_result_type_impl< _Res (_ArgTypes ..., ...) noexcept(_NE)>  { 
# 139
typedef _Res result_type; }; 
# 142
template< class _Res, class ..._ArgTypes, bool _NE> 
# 143
struct _Weak_result_type_impl< _Res (*)(_ArgTypes ...) noexcept(_NE)>  { 
# 144
typedef _Res result_type; }; 
# 147
template< class _Res, class ..._ArgTypes, bool _NE> 
# 149
struct _Weak_result_type_impl< _Res (*)(_ArgTypes ..., ...) noexcept(_NE)>  { 
# 150
typedef _Res result_type; }; 
# 153
template< class _Functor, bool 
# 154
 = is_member_function_pointer< _Functor> ::value> 
# 155
struct _Weak_result_type_memfun : public _Weak_result_type_impl< _Functor>  { 
# 157
}; 
# 160
template< class _MemFunPtr> 
# 161
struct _Weak_result_type_memfun< _MemFunPtr, true>  { 
# 163
using result_type = typename _Mem_fn_traits< _MemFunPtr> ::__result_type; 
# 164
}; 
# 167
template< class _Func, class _Class> 
# 168
struct _Weak_result_type_memfun< _Func (_Class::*), false>  { 
# 169
}; 
# 175
template< class _Functor> 
# 176
struct _Weak_result_type : public _Weak_result_type_memfun< typename remove_cv< _Functor> ::type>  { 
# 178
}; 
# 182
template< class _Tp, class  = __void_t< > > 
# 183
struct _Refwrap_base_arg1 { 
# 184
}; 
# 187
template< class _Tp> 
# 188
struct _Refwrap_base_arg1< _Tp, __void_t< typename _Tp::argument_type> >  { 
# 191
typedef typename _Tp::argument_type argument_type; 
# 192
}; 
# 195
template< class _Tp, class  = __void_t< > > 
# 196
struct _Refwrap_base_arg2 { 
# 197
}; 
# 200
template< class _Tp> 
# 201
struct _Refwrap_base_arg2< _Tp, __void_t< typename _Tp::first_argument_type, typename _Tp::second_argument_type> >  { 
# 205
typedef typename _Tp::first_argument_type first_argument_type; 
# 206
typedef typename _Tp::second_argument_type second_argument_type; 
# 207
}; 
# 215
template< class _Tp> 
# 216
struct _Reference_wrapper_base : public _Weak_result_type< _Tp> , public _Refwrap_base_arg1< _Tp> , public _Refwrap_base_arg2< _Tp>  { 
# 218
}; 
# 221
template< class _Res, class _T1, bool _NE> 
# 222
struct _Reference_wrapper_base< _Res (_T1) noexcept(_NE)>  : public unary_function< _T1, _Res>  { 
# 224
}; 
# 226
template< class _Res, class _T1> 
# 227
struct _Reference_wrapper_base< _Res (_T1) const>  : public unary_function< _T1, _Res>  { 
# 229
}; 
# 231
template< class _Res, class _T1> 
# 232
struct _Reference_wrapper_base< _Res (_T1) volatile>  : public unary_function< _T1, _Res>  { 
# 234
}; 
# 236
template< class _Res, class _T1> 
# 237
struct _Reference_wrapper_base< _Res (_T1) const volatile>  : public unary_function< _T1, _Res>  { 
# 239
}; 
# 242
template< class _Res, class _T1, class _T2, bool _NE> 
# 243
struct _Reference_wrapper_base< _Res (_T1, _T2) noexcept(_NE)>  : public binary_function< _T1, _T2, _Res>  { 
# 245
}; 
# 247
template< class _Res, class _T1, class _T2> 
# 248
struct _Reference_wrapper_base< _Res (_T1, _T2) const>  : public binary_function< _T1, _T2, _Res>  { 
# 250
}; 
# 252
template< class _Res, class _T1, class _T2> 
# 253
struct _Reference_wrapper_base< _Res (_T1, _T2) volatile>  : public binary_function< _T1, _T2, _Res>  { 
# 255
}; 
# 257
template< class _Res, class _T1, class _T2> 
# 258
struct _Reference_wrapper_base< _Res (_T1, _T2) const volatile>  : public binary_function< _T1, _T2, _Res>  { 
# 260
}; 
# 263
template< class _Res, class _T1, bool _NE> 
# 264
struct _Reference_wrapper_base< _Res (*)(_T1) noexcept(_NE)>  : public unary_function< _T1, _Res>  { 
# 266
}; 
# 269
template< class _Res, class _T1, class _T2, bool _NE> 
# 270
struct _Reference_wrapper_base< _Res (*)(_T1, _T2) noexcept(_NE)>  : public binary_function< _T1, _T2, _Res>  { 
# 272
}; 
# 274
template< class _Tp, bool  = is_member_function_pointer< _Tp> ::value> 
# 275
struct _Reference_wrapper_base_memfun : public _Reference_wrapper_base< _Tp>  { 
# 277
}; 
# 279
template< class _MemFunPtr> 
# 280
struct _Reference_wrapper_base_memfun< _MemFunPtr, true>  : public _Mem_fn_traits< _MemFunPtr> ::__maybe_type { 
# 283
using result_type = typename _Mem_fn_traits< _MemFunPtr> ::__result_type; 
# 284
}; 
# 293 "/usr/include/c++/11/bits/refwrap.h" 3
template< class _Tp> 
# 294
class reference_wrapper : public _Reference_wrapper_base_memfun< typename remove_cv< _Tp> ::type>  { 
# 301
_Tp *_M_data; 
# 304
static _Tp *_S_fun(_Tp &__r) noexcept { return std::__addressof(__r); } 
# 306
static void _S_fun(_Tp &&) = delete;
# 308
template< class _Up, class _Up2 = std::__remove_cvref_t< _Up> > using __not_same = typename enable_if< !is_same< reference_wrapper, _Up2> ::value> ::type; 
# 313
public: typedef _Tp type; 
# 318
template< class _Up, class  = __not_same< _Up> , class 
# 319
 = __decltype((reference_wrapper< _Tp> ::_S_fun(std::declval< _Up> ())))> 
# 321
reference_wrapper(_Up &&__uref) noexcept(noexcept(reference_wrapper< _Tp> ::_S_fun(std::declval< _Up> ()))) : _M_data(reference_wrapper< _Tp> ::_S_fun(std::forward< _Up> (__uref))) 
# 324
{ } 
# 326
reference_wrapper(const reference_wrapper &) = default;
# 329
reference_wrapper &operator=(const reference_wrapper &) = default;
# 332
operator _Tp &() const noexcept 
# 333
{ return get(); } 
# 337
_Tp &get() const noexcept 
# 338
{ return *(_M_data); } 
# 340
template< class ..._Args> typename result_of< _Tp &(_Args && ...)> ::type 
# 343
operator()(_Args &&...__args) const 
# 344
{ 
# 349
return std::__invoke(get(), std::forward< _Args> (__args)...); 
# 350
} 
# 351
}; 
# 354
template< class _Tp> 
# 355
reference_wrapper(_Tp &)->reference_wrapper< _Tp> ; 
# 361
template< class _Tp> inline reference_wrapper< _Tp>  
# 364
ref(_Tp &__t) noexcept 
# 365
{ return ((reference_wrapper< _Tp> )(__t)); } 
# 368
template< class _Tp> inline reference_wrapper< const _Tp>  
# 371
cref(const _Tp &__t) noexcept 
# 372
{ return ((reference_wrapper< const _Tp> )(__t)); } 
# 374
template < typename _Tp >
    void ref ( const _Tp && ) = delete;
# 377
template < typename _Tp >
    void cref ( const _Tp && ) = delete;
# 381
template< class _Tp> inline reference_wrapper< _Tp>  
# 384
ref(reference_wrapper< _Tp>  __t) noexcept 
# 385
{ return __t; } 
# 388
template< class _Tp> inline reference_wrapper< const _Tp>  
# 391
cref(reference_wrapper< _Tp>  __t) noexcept 
# 392
{ return {__t.get()}; } 
# 397
}
# 39 "/usr/include/c++/11/typeinfo" 3
#pragma GCC visibility push ( default )
# 41
extern "C++" {
# 43
namespace __cxxabiv1 { 
# 45
class __class_type_info; 
# 46
}
# 80 "/usr/include/c++/11/typeinfo" 3
namespace std { 
# 88
class type_info { 
# 95
public: virtual ~type_info(); 
# 99
const char *name() const noexcept 
# 100
{ return (((__name)[0]) == ('*')) ? (__name) + 1 : (__name); } 
# 115 "/usr/include/c++/11/typeinfo" 3
bool before(const type_info &__arg) const noexcept 
# 116
{ return ((((__name)[0]) == ('*')) && (((__arg.__name)[0]) == ('*'))) ? (__name) < (__arg.__name) : (__builtin_strcmp(__name, __arg.__name) < 0); 
# 118
} 
# 120
bool operator==(const type_info &__arg) const noexcept 
# 121
{ 
# 122
return (((__name) == (__arg.__name)) || ((((__name)[0]) != ('*')) && (__builtin_strcmp(__name, __arg.__name) == 0))); 
# 125
} 
# 138 "/usr/include/c++/11/typeinfo" 3
bool operator!=(const type_info &__arg) const noexcept 
# 139
{ return !this->operator==(__arg); } 
# 143
size_t hash_code() const noexcept 
# 144
{ 
# 146
return _Hash_bytes(this->name(), __builtin_strlen(this->name()), static_cast< size_t>(3339675911UL)); 
# 151
} 
# 155
virtual bool __is_pointer_p() const; 
# 158
virtual bool __is_function_p() const; 
# 166
virtual bool __do_catch(const type_info * __thr_type, void ** __thr_obj, unsigned __outer) const; 
# 170
virtual bool __do_upcast(const __cxxabiv1::__class_type_info * __target, void ** __obj_ptr) const; 
# 174
protected: const char *__name; 
# 176
explicit type_info(const char *__n) : __name(__n) { } 
# 180
private: type_info &operator=(const type_info &); 
# 181
type_info(const type_info &); 
# 182
}; 
# 190
class bad_cast : public exception { 
# 193
public: bad_cast() noexcept { } 
# 197
virtual ~bad_cast() noexcept; 
# 200
virtual const char *what() const noexcept; 
# 201
}; 
# 207
class bad_typeid : public exception { 
# 210
public: bad_typeid() noexcept { } 
# 214
virtual ~bad_typeid() noexcept; 
# 217
virtual const char *what() const noexcept; 
# 218
}; 
# 219
}
# 221
}
# 223
#pragma GCC visibility pop
# 45 "/usr/include/c++/11/bits/std_function.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 54
class bad_function_call : public exception { 
# 57
public: virtual ~bad_function_call() noexcept; 
# 59
virtual const char *what() const noexcept; 
# 60
}; 
# 68
template< class _Tp> 
# 69
struct __is_location_invariant : public is_trivially_copyable< _Tp> ::type { 
# 71
}; 
# 73
class _Undefined_class; 
# 75
union _Nocopy_types { 
# 77
void *_M_object; 
# 78
const void *_M_const_object; 
# 79
void (*_M_function_pointer)(void); 
# 80
void (_Undefined_class::*_M_member_pointer)(void); 
# 81
}; 
# 83
union [[gnu::may_alias]] _Any_data { 
# 85
void *_M_access() { return &((_M_pod_data)[0]); } 
# 86
const void *_M_access() const { return &((_M_pod_data)[0]); } 
# 88
template< class _Tp> _Tp &
# 90
_M_access() 
# 91
{ return *(static_cast< _Tp *>(this->_M_access())); } 
# 93
template< class _Tp> const _Tp &
# 95
_M_access() const 
# 96
{ return *(static_cast< const _Tp *>(this->_M_access())); } 
# 98
_Nocopy_types _M_unused; 
# 99
char _M_pod_data[sizeof(_Nocopy_types)]; 
# 100
}; 
# 102
enum _Manager_operation { 
# 104
__get_type_info, 
# 105
__get_functor_ptr, 
# 106
__clone_functor, 
# 107
__destroy_functor
# 108
}; 
# 110
template< class _Signature> class function; 
# 114
class _Function_base { 
# 117
public: static const size_t _M_max_size = sizeof(_Nocopy_types); 
# 118
static const size_t _M_max_align = __alignof__(_Nocopy_types); 
# 120
template< class _Functor> 
# 121
class _Base_manager { 
# 124
protected: static const bool __stored_locally = (__is_location_invariant< _Functor> ::value && (sizeof(_Functor) <= _M_max_size) && (__alignof__(_Functor) <= _M_max_align) && ((_M_max_align % __alignof__(_Functor)) == (0))); 
# 130
using _Local_storage = integral_constant< bool, __stored_locally> ; 
# 134
static _Functor *_M_get_pointer(const _Any_data &__source) 
# 135
{ 
# 136
if constexpr (__stored_locally) 
# 137
{ 
# 138
const _Functor &__f = __source.template _M_access< _Functor> (); 
# 139
return const_cast< _Functor *>(std::__addressof(__f)); 
# 140
} else { 
# 142
return __source.template _M_access< _Functor *> (); }  
# 143
} 
# 150
private: 
# 148
template< class _Fn> static void 
# 150
_M_create(_Any_data &__dest, _Fn &&__f, true_type) 
# 151
{ 
# 152
::new (__dest._M_access()) _Functor(std::forward< _Fn> (__f)); 
# 153
} 
# 156
template< class _Fn> static void 
# 158
_M_create(_Any_data &__dest, _Fn &&__f, false_type) 
# 159
{ 
# 160
__dest.template _M_access< _Functor *> () = (new _Functor(std::forward< _Fn> (__f))); 
# 162
} 
# 166
static void _M_destroy(_Any_data &__victim, true_type) 
# 167
{ 
# 168
__victim.template _M_access< _Functor> ().~_Functor(); 
# 169
} 
# 173
static void _M_destroy(_Any_data &__victim, false_type) 
# 174
{ 
# 175
delete __victim.template _M_access< _Functor *> (); 
# 176
} 
# 180
public: static bool _M_manager(_Any_data &__dest, const _Any_data &__source, _Manager_operation 
# 181
__op) 
# 182
{ 
# 183
switch (__op) 
# 184
{ 
# 185
case __get_type_info:  
# 187
__dest.template _M_access< const type_info *> () = (&typeid(_Functor)); 
# 191
break; 
# 193
case __get_functor_ptr:  
# 194
__dest.template _M_access< _Functor *> () = (_M_get_pointer)(__source); 
# 195
break; 
# 197
case __clone_functor:  
# 198
_M_init_functor(__dest, *(const_cast< const _Functor *>((_M_get_pointer)(__source)))); 
# 200
break; 
# 202
case __destroy_functor:  
# 203
_M_destroy(__dest, _Local_storage()); 
# 204
break; 
# 205
}  
# 206
return false; 
# 207
} 
# 209
template< class _Fn> static void 
# 211
_M_init_functor(_Any_data &__functor, _Fn &&__f) noexcept(__and_< _Local_storage, is_nothrow_constructible< _Functor, _Fn> > ::value) 
# 214
{ 
# 215
_M_create(__functor, std::forward< _Fn> (__f), _Local_storage()); 
# 216
} 
# 218
template< class _Signature> static bool 
# 220
_M_not_empty_function(const function< _Signature>  &__f) 
# 221
{ return static_cast< bool>(__f); } 
# 223
template< class _Tp> static bool 
# 225
_M_not_empty_function(_Tp *__fp) 
# 226
{ return __fp != nullptr; } 
# 228
template< class _Class, class _Tp> static bool 
# 230
_M_not_empty_function(_Tp (_Class::*__mp)) 
# 231
{ return __mp != nullptr; } 
# 233
template< class _Tp> static bool 
# 235
_M_not_empty_function(const _Tp &) 
# 236
{ return true; } 
# 237
}; 
# 239
_Function_base() = default;
# 241
~_Function_base() 
# 242
{ 
# 243
if (_M_manager) { 
# 244
(_M_manager)(_M_functor, _M_functor, __destroy_functor); }  
# 245
} 
# 247
bool _M_empty() const { return !(_M_manager); } 
# 249
using _Manager_type = bool (*)(_Any_data &, const _Any_data &, _Manager_operation); 
# 252
_Any_data _M_functor{}; 
# 253
_Manager_type _M_manager{((bool (*)(_Any_data &, const _Any_data &, _Manager_operation))0LL)}; 
# 254
}; 
# 256
template< class _Signature, class _Functor> class _Function_handler; 
# 259
template< class _Res, class _Functor, class ..._ArgTypes> 
# 260
class _Function_handler< _Res (_ArgTypes ...), _Functor>  : public _Function_base::template _Base_manager< _Functor>  { 
# 263
using _Base = typename std::_Function_base::template _Base_manager< _Functor> ; 
# 267
public: static bool _M_manager(std::_Any_data &__dest, const std::_Any_data &__source, std::_Manager_operation 
# 268
__op) 
# 269
{ 
# 270
switch (__op) 
# 271
{ 
# 273
case __get_type_info:  
# 274
__dest.template _M_access< const std::type_info *> () = (&typeid(_Functor)); 
# 275
break; 
# 277
case __get_functor_ptr:  
# 278
__dest.template _M_access< _Functor *> () = _Base::_M_get_pointer(__source); 
# 279
break; 
# 281
default:  
# 282
_Base::_M_manager(__dest, __source, __op); 
# 283
}  
# 284
return false; 
# 285
} 
# 288
static _Res _M_invoke(const std::_Any_data &__functor, _ArgTypes &&...__args) 
# 289
{ 
# 290
return std::__invoke_r< _Res> (*_Base::_M_get_pointer(__functor), std::forward< _ArgTypes> (__args)...); 
# 292
} 
# 294
template< class _Fn> static constexpr bool 
# 296
_S_nothrow_init() noexcept 
# 297
{ 
# 298
return __and_< typename std::_Function_base::template _Base_manager< _Functor> ::_Local_storage, is_nothrow_constructible< _Functor, _Fn> > ::value; 
# 300
} 
# 301
}; 
# 305
template<> class _Function_handler< void, void>  { 
# 309
public: static bool _M_manager(_Any_data &, const _Any_data &, _Manager_operation) 
# 310
{ return false; } 
# 311
}; 
# 317
template< class _Signature, class _Functor, bool 
# 318
__valid = is_object< _Functor> ::value> 
# 319
struct _Target_handler : public _Function_handler< _Signature, typename remove_cv< _Functor> ::type>  { 
# 321
}; 
# 323
template< class _Signature, class _Functor> 
# 324
struct _Target_handler< _Signature, _Functor, false>  : public _Function_handler< void, void>  { 
# 326
}; 
# 333
template< class _Res, class ..._ArgTypes> 
# 334
class function< _Res (_ArgTypes ...)>  : public _Maybe_unary_or_binary_function< _Res, _ArgTypes...> , private _Function_base { 
# 340
template< class _Func, bool 
# 341
_Self = is_same< std::__remove_cvref_t< _Func> , function> ::value> using _Decay_t = typename std::__enable_if_t< !_Self, decay< _Func> > ::type; 
# 345
template< class _Func, class 
# 346
_DFunc = _Decay_t< _Func> , class 
# 347
_Res2 = __invoke_result< _DFunc &, _ArgTypes...> > 
# 348
struct _Callable : public __is_invocable_impl< _Res2, _Res> ::type { 
# 350
}; 
# 352
template< class _Cond, class _Tp = void> using _Requires = std::__enable_if_t< _Cond::value, _Tp> ; 
# 355
template< class _Functor> using _Handler = _Function_handler< _Res (_ArgTypes ...), std::__decay_t< _Functor> > ; 
# 360
public: typedef _Res result_type; 
# 368
function() noexcept : std::_Function_base() 
# 369
{ } 
# 375
function(std::nullptr_t) noexcept : std::_Function_base() 
# 376
{ } 
# 386 "/usr/include/c++/11/bits/std_function.h" 3
function(const function &__x) : std::_Function_base() 
# 388
{ 
# 389
if (static_cast< bool>(__x)) 
# 390
{ 
# 391
(__x._M_manager)(_M_functor, __x._M_functor, __clone_functor); 
# 392
(_M_invoker) = (__x._M_invoker); 
# 393
(_M_manager) = (__x._M_manager); 
# 394
}  
# 395
} 
# 404 "/usr/include/c++/11/bits/std_function.h" 3
function(function &&__x) noexcept : std::_Function_base(), _M_invoker(__x._M_invoker) 
# 406
{ 
# 407
if (static_cast< bool>(__x)) 
# 408
{ 
# 409
(_M_functor) = (__x._M_functor); 
# 410
(_M_manager) = (__x._M_manager); 
# 411
(__x._M_manager) = (nullptr); 
# 412
(__x._M_invoker) = nullptr; 
# 413
}  
# 414
} 
# 433 "/usr/include/c++/11/bits/std_function.h" 3
template< class _Functor, class 
# 434
_Constraints = _Requires< _Callable< _Functor> > > 
# 435
function(_Functor &&__f) noexcept(_Function_handler< _Res (_ArgTypes ...), std::__decay_t< _Functor> > ::template _S_nothrow_init< _Functor> ()) : std::_Function_base() 
# 438
{ 
# 439
static_assert((is_copy_constructible< std::__decay_t< _Functor> > ::value), "std::function target must be copy-constructible");
# 441
static_assert((is_constructible< std::__decay_t< _Functor> , _Functor> ::value), "std::function target must be constructible from the constructor argument");
# 445
using _My_handler = _Handler< _Functor> ; 
# 447
if (_My_handler::_M_not_empty_function(__f)) 
# 448
{ 
# 449
_My_handler::_M_init_functor(_M_functor, std::forward< _Functor> (__f)); 
# 451
(_M_invoker) = (&_My_handler::_M_invoke); 
# 452
(_M_manager) = (&_My_handler::_M_manager); 
# 453
}  
# 454
} 
# 469 "/usr/include/c++/11/bits/std_function.h" 3
function &operator=(const function &__x) 
# 470
{ 
# 471
((function)(__x)).swap(*this); 
# 472
return *this; 
# 473
} 
# 487 "/usr/include/c++/11/bits/std_function.h" 3
function &operator=(function &&__x) noexcept 
# 488
{ 
# 489
((function)(std::move(__x))).swap(*this); 
# 490
return *this; 
# 491
} 
# 501 "/usr/include/c++/11/bits/std_function.h" 3
function &operator=(std::nullptr_t) noexcept 
# 502
{ 
# 503
if (_M_manager) 
# 504
{ 
# 505
(_M_manager)(_M_functor, _M_functor, __destroy_functor); 
# 506
(_M_manager) = (nullptr); 
# 507
(_M_invoker) = nullptr; 
# 508
}  
# 509
return *this; 
# 510
} 
# 528 "/usr/include/c++/11/bits/std_function.h" 3
template< class _Functor> _Requires< _Callable< _Functor> , function &>  
# 530
operator=(_Functor &&__f) noexcept(_Function_handler< _Res (_ArgTypes ...), std::__decay_t< _Functor> > ::template _S_nothrow_init< _Functor> ()) 
# 532
{ 
# 533
((function)(std::forward< _Functor> (__f))).swap(*this); 
# 534
return *this; 
# 535
} 
# 538
template< class _Functor> function &
# 540
operator=(reference_wrapper< _Functor>  __f) noexcept 
# 541
{ 
# 542
((function)(__f)).swap(*this); 
# 543
return *this; 
# 544
} 
# 555 "/usr/include/c++/11/bits/std_function.h" 3
void swap(function &__x) noexcept 
# 556
{ 
# 557
std::swap(_M_functor, __x._M_functor); 
# 558
std::swap(_M_manager, __x._M_manager); 
# 559
std::swap(_M_invoker, __x._M_invoker); 
# 560
} 
# 572 "/usr/include/c++/11/bits/std_function.h" 3
explicit operator bool() const noexcept 
# 573
{ return !this->std::_Function_base::_M_empty(); } 
# 586 "/usr/include/c++/11/bits/std_function.h" 3
_Res operator()(_ArgTypes ...__args) const 
# 587
{ 
# 588
if (this->std::_Function_base::_M_empty()) { 
# 589
__throw_bad_function_call(); }  
# 590
return (_M_invoker)(_M_functor, std::forward< _ArgTypes> (__args)...); 
# 591
} 
# 605 "/usr/include/c++/11/bits/std_function.h" 3
const std::type_info &target_type() const noexcept 
# 606
{ 
# 607
if (_M_manager) 
# 608
{ 
# 609
std::_Any_data __typeinfo_result; 
# 610
(_M_manager)(__typeinfo_result, _M_functor, __get_type_info); 
# 611
if (auto __ti = __typeinfo_result.template _M_access< const std::type_info *> ()) { 
# 612
return *__ti; }  
# 613
}  
# 614
return typeid(void); 
# 615
} 
# 629 "/usr/include/c++/11/bits/std_function.h" 3
template< class _Functor> _Functor *
# 631
target() noexcept 
# 632
{ 
# 633
const function *__const_this = this; 
# 634
const _Functor *__func = __const_this->template target< _Functor> (); 
# 637
return *(const_cast< _Functor **>(&__func)); 
# 638
} 
# 640
template< class _Functor> const _Functor *
# 642
target() const noexcept 
# 643
{ 
# 644
if constexpr (is_object< _Functor> ::value) 
# 645
{ 
# 648
using _Handler = _Target_handler< _Res (_ArgTypes ...), _Functor> ; 
# 650
if (((_M_manager) == (&_Handler::_M_manager)) || ((_M_manager) && (typeid(_Functor) == target_type()))) 
# 655
{ 
# 656
std::_Any_data __ptr; 
# 657
(_M_manager)(__ptr, _M_functor, __get_functor_ptr); 
# 658
return __ptr.template _M_access< const _Functor *> (); 
# 659
}  
# 660
}  
# 661
return nullptr; 
# 662
} 
# 666
private: using _Invoker_type = _Res (*)(const std::_Any_data &, _ArgTypes && ...); 
# 667
_Invoker_type _M_invoker = (nullptr); 
# 668
}; 
# 671
template< class > 
# 672
struct __function_guide_helper { 
# 673
}; 
# 675
template< class _Res, class _Tp, bool _Nx, class ..._Args> 
# 676
struct __function_guide_helper< _Res (_Tp::*)(_Args ...) noexcept(_Nx)>  { 
# 679
using type = _Res (_Args ...); }; 
# 681
template< class _Res, class _Tp, bool _Nx, class ..._Args> 
# 682
struct __function_guide_helper< _Res (_Tp::*)(_Args ...) & noexcept(_Nx)>  { 
# 685
using type = _Res (_Args ...); }; 
# 687
template< class _Res, class _Tp, bool _Nx, class ..._Args> 
# 688
struct __function_guide_helper< _Res (_Tp::*)(_Args ...) const noexcept(_Nx)>  { 
# 691
using type = _Res (_Args ...); }; 
# 693
template< class _Res, class _Tp, bool _Nx, class ..._Args> 
# 694
struct __function_guide_helper< _Res (_Tp::*)(_Args ...) const & noexcept(_Nx)>  { 
# 697
using type = _Res (_Args ...); }; 
# 699
template< class _Res, class ..._ArgTypes> 
# 700
function(_Res (*)(_ArgTypes ...))->function< _Res (_ArgTypes ...)> ; 
# 702
template< class _Functor, class _Signature = typename __function_guide_helper< __decltype((&_Functor::operator()))> ::type> 
# 704
function(_Functor)->function< _Signature> ; 
# 716 "/usr/include/c++/11/bits/std_function.h" 3
template< class _Res, class ..._Args> inline bool 
# 718
operator==(const function< _Res (_Args ...)>  &__f, nullptr_t) noexcept 
# 719
{ return !(static_cast< bool>(__f)); } 
# 723
template< class _Res, class ..._Args> inline bool 
# 725
operator==(nullptr_t, const function< _Res (_Args ...)>  &__f) noexcept 
# 726
{ return !(static_cast< bool>(__f)); } 
# 735 "/usr/include/c++/11/bits/std_function.h" 3
template< class _Res, class ..._Args> inline bool 
# 737
operator!=(const function< _Res (_Args ...)>  &__f, nullptr_t) noexcept 
# 738
{ return static_cast< bool>(__f); } 
# 741
template< class _Res, class ..._Args> inline bool 
# 743
operator!=(nullptr_t, const function< _Res (_Args ...)>  &__f) noexcept 
# 744
{ return static_cast< bool>(__f); } 
# 756 "/usr/include/c++/11/bits/std_function.h" 3
template< class _Res, class ..._Args> inline void 
# 758
swap(function< _Res (_Args ...)>  &__x, function< _Res (_Args ...)>  &__y) noexcept 
# 759
{ __x.swap(__y); } 
# 762
namespace __detail { namespace __variant { 
# 764
template< class > struct _Never_valueless_alt; 
# 768
template< class _Signature> 
# 769
struct _Never_valueless_alt< function< _Signature> >  : public true_type { 
# 771
}; 
# 772
}}
# 776
}
# 40 "/usr/include/c++/11/ext/new_allocator.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 54 "/usr/include/c++/11/ext/new_allocator.h" 3
template< class _Tp> 
# 55
class new_allocator { 
# 58
public: typedef _Tp value_type; 
# 59
typedef std::size_t size_type; 
# 60
typedef std::ptrdiff_t difference_type; 
# 62
typedef _Tp *pointer; 
# 63
typedef const _Tp *const_pointer; 
# 64
typedef _Tp &reference; 
# 65
typedef const _Tp &const_reference; 
# 67
template< class _Tp1> 
# 68
struct rebind { 
# 69
typedef new_allocator< _Tp1>  other; }; 
# 75
typedef std::true_type propagate_on_container_move_assignment; 
# 79
new_allocator() noexcept { } 
# 82
new_allocator(const new_allocator &) noexcept { } 
# 84
template< class _Tp1> 
# 86
new_allocator(const new_allocator< _Tp1>  &) noexcept { } 
# 89
~new_allocator() noexcept { } 
# 92
pointer address(reference __x) const noexcept 
# 93
{ return std::__addressof(__x); } 
# 96
const_pointer address(const_reference __x) const noexcept 
# 97
{ return std::__addressof(__x); } 
# 102
[[__nodiscard__]] _Tp *
# 103
allocate(size_type __n, const void * = 0) 
# 104
{ 
# 108
static_assert((sizeof(_Tp) != (0)), "cannot allocate incomplete types");
# 111
if (__builtin_expect(__n > _M_max_size(), false)) 
# 112
{ 
# 115
if (__n > (((std::size_t)(-1)) / sizeof(_Tp))) { 
# 116
std::__throw_bad_array_new_length(); }  
# 117
std::__throw_bad_alloc(); 
# 118
}  
# 121
if (__alignof__(_Tp) > (16)) 
# 122
{ 
# 123
std::align_val_t __al = ((std::align_val_t)__alignof__(_Tp)); 
# 124
return static_cast< _Tp *>(::operator new(__n * sizeof(_Tp), __al)); 
# 125
}  
# 127
return static_cast< _Tp *>(::operator new(__n * sizeof(_Tp))); 
# 128
} 
# 132
void deallocate(_Tp *__p, size_type __t __attribute((__unused__))) 
# 133
{ 
# 135
if (__alignof__(_Tp) > (16)) 
# 136
{ 
# 137
::operator delete(__p, __t * sizeof(_Tp), (std::align_val_t)__alignof__(_Tp)); 
# 142
return; 
# 143
}  
# 145
::operator delete(__p, __t * sizeof(_Tp)); 
# 150
} 
# 154
size_type max_size() const noexcept 
# 155
{ return _M_max_size(); } 
# 158
template< class _Up, class ..._Args> void 
# 160
construct(_Up *__p, _Args &&...__args) noexcept(std::template is_nothrow_constructible< _Up, _Args...> ::value) 
# 162
{ ::new ((void *)__p) _Up(std::forward< _Args> (__args)...); } 
# 164
template< class _Up> void 
# 166
destroy(_Up *__p) noexcept(std::template is_nothrow_destructible< _Up> ::value) 
# 168
{ __p->~_Up(); } 
# 181 "/usr/include/c++/11/ext/new_allocator.h" 3
template< class _Up> friend inline bool 
# 183
operator==(const new_allocator< _Tp>  &, const __gnu_cxx::new_allocator< _Up>  &) noexcept 
# 185
{ return true; } 
# 188
template< class _Up> friend inline bool 
# 190
operator!=(const new_allocator< _Tp>  &, const __gnu_cxx::new_allocator< _Up>  &) noexcept 
# 192
{ return false; } 
# 197
private: constexpr size_type _M_max_size() const noexcept 
# 198
{ 
# 200
return ((std::size_t)9223372036854775807L) / sizeof(_Tp); 
# 204
} 
# 205
}; 
# 208
}
# 36 "/usr/include/x86_64-linux-gnu/c++/11/bits/c++allocator.h" 3
namespace std { 
# 47 "/usr/include/x86_64-linux-gnu/c++/11/bits/c++allocator.h" 3
template< class _Tp> using __allocator_base = __gnu_cxx::new_allocator< _Tp> ; 
# 49
}
# 50 "/usr/include/c++/11/bits/memoryfwd.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 63 "/usr/include/c++/11/bits/memoryfwd.h" 3
template< class > class allocator; 
# 67
template<> class allocator< void> ; 
# 71
template< class , class > struct uses_allocator; 
# 74
template< class > struct allocator_traits; 
# 81
}
# 54 "/usr/include/c++/11/bits/allocator.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 72 "/usr/include/c++/11/bits/allocator.h" 3
template<> class allocator< void>  { 
# 75
public: typedef void value_type; 
# 76
typedef size_t size_type; 
# 77
typedef ptrdiff_t difference_type; 
# 81
typedef void *pointer; 
# 82
typedef const void *const_pointer; 
# 84
template< class _Tp1> 
# 85
struct rebind { 
# 86
typedef std::allocator< _Tp1>  other; }; 
# 92
using propagate_on_container_move_assignment = true_type; 
# 94
using is_always_equal = true_type; 
# 113 "/usr/include/c++/11/bits/allocator.h" 3
}; 
# 123 "/usr/include/c++/11/bits/allocator.h" 3
template< class _Tp> 
# 124
class allocator : public __allocator_base< _Tp>  { 
# 127
public: typedef _Tp value_type; 
# 128
typedef std::size_t size_type; 
# 129
typedef std::ptrdiff_t difference_type; 
# 133
typedef _Tp *pointer; 
# 134
typedef const _Tp *const_pointer; 
# 135
typedef _Tp &reference; 
# 136
typedef const _Tp &const_reference; 
# 138
template< class _Tp1> 
# 139
struct rebind { 
# 140
typedef allocator< _Tp1>  other; }; 
# 146
using propagate_on_container_move_assignment = std::true_type; 
# 148
using is_always_equal = std::true_type; 
# 156
allocator() noexcept { } 
# 159
allocator(const allocator &__a) noexcept : std::__allocator_base< _Tp> (__a) 
# 160
{ } 
# 164
allocator &operator=(const allocator &) = default;
# 167
template< class _Tp1> 
# 169
allocator(const allocator< _Tp1>  &) noexcept { } 
# 174
~allocator() noexcept { } 
# 204 "/usr/include/c++/11/bits/allocator.h" 3
friend inline bool operator==(const allocator< _Tp>  &, const allocator< _Tp>  &) noexcept 
# 205
{ return true; } 
# 209
friend inline bool operator!=(const allocator< _Tp>  &, const allocator< _Tp>  &) noexcept 
# 210
{ return false; } 
# 214
}; 
# 216
template< class _T1, class _T2> inline bool 
# 218
operator==(const allocator< _T1>  &, const allocator< _T2>  &) noexcept 
# 220
{ return true; } 
# 223
template< class _T1, class _T2> inline bool 
# 225
operator!=(const allocator< _T1>  &, const allocator< _T2>  &) noexcept 
# 227
{ return false; } 
# 232
template< class _Tp> 
# 233
class allocator< const _Tp>  { 
# 236
public: typedef _Tp value_type; 
# 237
template< class _Up> allocator(const std::allocator< _Up>  &) { } 
# 238
}; 
# 240
template< class _Tp> 
# 241
class allocator< volatile _Tp>  { 
# 244
public: typedef _Tp value_type; 
# 245
template< class _Up> allocator(const std::allocator< _Up>  &) { } 
# 246
}; 
# 248
template< class _Tp> 
# 249
class allocator< const volatile _Tp>  { 
# 252
public: typedef _Tp value_type; 
# 253
template< class _Up> allocator(const std::allocator< _Up>  &) { } 
# 254
}; 
# 261
extern template class allocator< char> ;
# 262
extern template class allocator< wchar_t> ;
# 269
template< class _Alloc, bool  = __is_empty(_Alloc)> 
# 270
struct __alloc_swap { 
# 271
static void _S_do_it(_Alloc &, _Alloc &) noexcept { } }; 
# 273
template< class _Alloc> 
# 274
struct __alloc_swap< _Alloc, false>  { 
# 277
static void _S_do_it(_Alloc &__one, _Alloc &__two) noexcept 
# 278
{ 
# 280
if (__one != __two) { 
# 281
swap(__one, __two); }  
# 282
} 
# 283
}; 
# 286
template< class _Alloc, bool  = __is_empty(_Alloc)> 
# 287
struct __alloc_neq { 
# 290
static bool _S_do_it(const _Alloc &, const _Alloc &) 
# 291
{ return false; } 
# 292
}; 
# 294
template< class _Alloc> 
# 295
struct __alloc_neq< _Alloc, false>  { 
# 298
static bool _S_do_it(const _Alloc &__one, const _Alloc &__two) 
# 299
{ return __one != __two; } 
# 300
}; 
# 303
template< class _Tp, bool 
# 304
 = __or_< is_copy_constructible< typename _Tp::value_type> , is_nothrow_move_constructible< typename _Tp::value_type> > ::value> 
# 306
struct __shrink_to_fit_aux { 
# 307
static bool _S_do_it(_Tp &) noexcept { return false; } }; 
# 309
template< class _Tp> 
# 310
struct __shrink_to_fit_aux< _Tp, true>  { 
# 313
static bool _S_do_it(_Tp &__c) noexcept 
# 314
{ 
# 316
try 
# 317
{ 
# 318
_Tp(__make_move_if_noexcept_iterator(__c.begin()), __make_move_if_noexcept_iterator(__c.end()), __c.get_allocator()).swap(__c); 
# 321
return true; 
# 322
} 
# 323
catch (...) 
# 324
{ return false; }  
# 328
} 
# 329
}; 
# 333
}
# 73 "/usr/include/c++/11/bits/stl_construct.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 78
template< class _Tp> inline void 
# 80
destroy_at(_Tp *__location) 
# 81
{ 
# 82
if constexpr ((201703L > 201703L) && is_array_v< _Tp> ) 
# 83
{ 
# 84
for (auto &__x : *__location) { 
# 85
std::destroy_at(std::__addressof(__x)); }  
# 86
} else { 
# 88
__location->~_Tp(); }  
# 89
} 
# 106 "/usr/include/c++/11/bits/stl_construct.h" 3
template< class _Tp, class ..._Args> inline void 
# 109
_Construct(_Tp *__p, _Args &&...__args) 
# 110
{ 
# 119 "/usr/include/c++/11/bits/stl_construct.h" 3
::new ((void *)__p) _Tp(std::forward< _Args> (__args)...); 
# 120
} 
# 132 "/usr/include/c++/11/bits/stl_construct.h" 3
template< class _T1> inline void 
# 134
_Construct_novalue(_T1 *__p) 
# 135
{ ::new ((void *)__p) _T1; } 
# 137
template< class _ForwardIterator> inline void _Destroy(_ForwardIterator __first, _ForwardIterator __last); 
# 144
template< class _Tp> constexpr void 
# 146
_Destroy(_Tp *__pointer) 
# 147
{ 
# 151
__pointer->~_Tp(); 
# 153
} 
# 155
template< bool > 
# 156
struct _Destroy_aux { 
# 158
template< class _ForwardIterator> static void 
# 160
__destroy(_ForwardIterator __first, _ForwardIterator __last) 
# 161
{ 
# 162
for (; __first != __last; ++__first) { 
# 163
std::_Destroy(std::__addressof(*__first)); }  
# 164
} 
# 165
}; 
# 168
template<> struct _Destroy_aux< true>  { 
# 170
template< class _ForwardIterator> static void 
# 172
__destroy(_ForwardIterator, _ForwardIterator) { } 
# 173
}; 
# 180
template< class _ForwardIterator> inline void 
# 182
_Destroy(_ForwardIterator __first, _ForwardIterator __last) 
# 183
{ 
# 185
typedef typename iterator_traits< _ForwardIterator> ::value_type _Value_type; 
# 188
static_assert((is_destructible< typename iterator_traits< _ForwardIterator> ::value_type> ::value), "value type is destructible");
# 195
std::template _Destroy_aux< __has_trivial_destructor(_Value_type)> ::__destroy(__first, __last); 
# 197
} 
# 199
template< bool > 
# 200
struct _Destroy_n_aux { 
# 202
template< class _ForwardIterator, class _Size> static _ForwardIterator 
# 204
__destroy_n(_ForwardIterator __first, _Size __count) 
# 205
{ 
# 206
for (; __count > 0; ((void)(++__first)), (--__count)) { 
# 207
std::_Destroy(std::__addressof(*__first)); }  
# 208
return __first; 
# 209
} 
# 210
}; 
# 213
template<> struct _Destroy_n_aux< true>  { 
# 215
template< class _ForwardIterator, class _Size> static _ForwardIterator 
# 217
__destroy_n(_ForwardIterator __first, _Size __count) 
# 218
{ 
# 219
std::advance(__first, __count); 
# 220
return __first; 
# 221
} 
# 222
}; 
# 229
template< class _ForwardIterator, class _Size> inline _ForwardIterator 
# 231
_Destroy_n(_ForwardIterator __first, _Size __count) 
# 232
{ 
# 234
typedef typename iterator_traits< _ForwardIterator> ::value_type _Value_type; 
# 237
static_assert((is_destructible< typename iterator_traits< _ForwardIterator> ::value_type> ::value), "value type is destructible");
# 244
return std::template _Destroy_n_aux< __has_trivial_destructor(_Value_type)> ::__destroy_n(__first, __count); 
# 246
} 
# 249
template< class _ForwardIterator> inline void 
# 251
destroy(_ForwardIterator __first, _ForwardIterator __last) 
# 252
{ 
# 253
std::_Destroy(__first, __last); 
# 254
} 
# 256
template< class _ForwardIterator, class _Size> inline _ForwardIterator 
# 258
destroy_n(_ForwardIterator __first, _Size __count) 
# 259
{ 
# 260
return std::_Destroy_n(__first, __count); 
# 261
} 
# 265
}
# 41 "/usr/include/c++/11/bits/alloc_traits.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 49
struct __allocator_traits_base { 
# 51
template< class _Tp, class _Up, class  = void> 
# 52
struct __rebind : public __replace_first_arg< _Tp, _Up>  { }; 
# 54
template< class _Tp, class _Up> 
# 55
struct __rebind< _Tp, _Up, __void_t< typename _Tp::template rebind< _Up> ::other> >  { 
# 57
using type = typename _Tp::template rebind< _Up> ::other; }; 
# 61
protected: 
# 60
template< class _Tp> using __pointer = typename _Tp::pointer; 
# 62
template< class _Tp> using __c_pointer = typename _Tp::const_pointer; 
# 64
template< class _Tp> using __v_pointer = typename _Tp::void_pointer; 
# 66
template< class _Tp> using __cv_pointer = typename _Tp::const_void_pointer; 
# 68
template< class _Tp> using __pocca = typename _Tp::propagate_on_container_copy_assignment; 
# 70
template< class _Tp> using __pocma = typename _Tp::propagate_on_container_move_assignment; 
# 72
template< class _Tp> using __pocs = typename _Tp::propagate_on_container_swap; 
# 74
template< class _Tp> using __equal = typename _Tp::is_always_equal; 
# 76
}; 
# 78
template< class _Alloc, class _Up> using __alloc_rebind = typename __allocator_traits_base::template __rebind< _Alloc, _Up> ::type; 
# 89 "/usr/include/c++/11/bits/alloc_traits.h" 3
template< class _Alloc> 
# 90
struct allocator_traits : public __allocator_traits_base { 
# 93
typedef _Alloc allocator_type; 
# 95
typedef typename _Alloc::value_type value_type; 
# 102
using pointer = __detected_or_t< value_type *, __pointer, _Alloc> ; 
# 107
private: 
# 106
template< template< class >  class _Func, class _Tp, class  = void> 
# 107
struct _Ptr { 
# 109
using type = typename pointer_traits< pointer> ::template rebind< _Tp> ; 
# 110
}; 
# 112
template< template< class >  class _Func, class _Tp> 
# 113
struct _Ptr< _Func, _Tp, __void_t< _Func< _Alloc> > >  { 
# 115
using type = _Func< _Alloc> ; 
# 116
}; 
# 119
template< class _A2, class _PtrT, class  = void> 
# 120
struct _Diff { 
# 121
using type = typename pointer_traits< _PtrT> ::difference_type; }; 
# 123
template< class _A2, class _PtrT> 
# 124
struct _Diff< _A2, _PtrT, __void_t< typename _A2::difference_type> >  { 
# 125
using type = typename _A2::difference_type; }; 
# 128
template< class _A2, class _DiffT, class  = void> 
# 129
struct _Size : public make_unsigned< _DiffT>  { }; 
# 131
template< class _A2, class _DiffT> 
# 132
struct _Size< _A2, _DiffT, __void_t< typename _A2::size_type> >  { 
# 133
using type = typename _A2::size_type; }; 
# 142
public: using const_pointer = typename _Ptr< __c_pointer, const value_type> ::type; 
# 150
using void_pointer = typename _Ptr< __v_pointer, void> ::type; 
# 158
using const_void_pointer = typename _Ptr< __cv_pointer, const void> ::type; 
# 166
using difference_type = typename _Diff< _Alloc, pointer> ::type; 
# 174
using size_type = typename _Size< _Alloc, difference_type> ::type; 
# 182
using propagate_on_container_copy_assignment = __detected_or_t< false_type, __pocca, _Alloc> ; 
# 191
using propagate_on_container_move_assignment = __detected_or_t< false_type, __pocma, _Alloc> ; 
# 200
using propagate_on_container_swap = __detected_or_t< false_type, __pocs, _Alloc> ; 
# 209
using is_always_equal = __detected_or_t< typename is_empty< _Alloc> ::type, __equal, _Alloc> ; 
# 212
template< class _Tp> using rebind_alloc = __alloc_rebind< _Alloc, _Tp> ; 
# 214
template< class _Tp> using rebind_traits = allocator_traits< rebind_alloc< _Tp> > ; 
# 220
private: 
# 218
template< class _Alloc2> static constexpr auto 
# 220
_S_allocate(_Alloc2 &__a, size_type __n, const_void_pointer __hint, int)->__decltype((__a.allocate(__n, __hint))) 
# 222
{ return __a.allocate(__n, __hint); } 
# 224
template< class _Alloc2> static constexpr pointer 
# 226
_S_allocate(_Alloc2 &__a, size_type __n, const_void_pointer, ...) 
# 227
{ return __a.allocate(__n); } 
# 229
template< class _Tp, class ..._Args> 
# 230
struct __construct_helper { 
# 232
template< class _Alloc2, class 
# 233
 = __decltype((std::declval< _Alloc2 *> ()->construct(std::declval< _Tp *> (), std::declval< _Args> ()...)))> static true_type 
# 232
__test(int); 
# 237
template< class > static false_type __test(...); 
# 240
using type = __decltype((__test< _Alloc> (0))); 
# 241
}; 
# 243
template< class _Tp, class ..._Args> using __has_construct = typename __construct_helper< _Tp, _Args...> ::type; 
# 247
template< class _Tp, class ..._Args> static constexpr _Require< __has_construct< _Tp, _Args...> >  
# 249
_S_construct(_Alloc &__a, _Tp *__p, _Args &&...__args) noexcept(noexcept(__a.construct(__p, std::forward< _Args> (__args)...))) 
# 251
{ __a.construct(__p, std::forward< _Args> (__args)...); } 
# 253
template< class _Tp, class ..._Args> static constexpr _Require< __and_< __not_< __has_construct< _Tp, _Args...> > , is_constructible< _Tp, _Args...> > >  
# 257
_S_construct(_Alloc &, _Tp *__p, _Args &&...__args) noexcept(std::template is_nothrow_constructible< _Tp, _Args...> ::value) 
# 259
{ 
# 261
::new ((void *)__p) _Tp(std::forward< _Args> (__args)...); 
# 265
} 
# 267
template< class _Alloc2, class _Tp> static constexpr auto 
# 269
_S_destroy(_Alloc2 &__a, _Tp *__p, int) noexcept(noexcept(__a.destroy(__p)))->__decltype((__a.destroy(__p))) 
# 272
{ __a.destroy(__p); } 
# 274
template< class _Alloc2, class _Tp> static constexpr void 
# 276
_S_destroy(_Alloc2 &, _Tp *__p, ...) noexcept(std::template is_nothrow_destructible< _Tp> ::value) 
# 278
{ std::_Destroy(__p); } 
# 280
template< class _Alloc2> static constexpr auto 
# 282
_S_max_size(_Alloc2 &__a, int)->__decltype((__a.max_size())) 
# 284
{ return __a.max_size(); } 
# 286
template< class _Alloc2> static constexpr size_type 
# 288
_S_max_size(_Alloc2 &, ...) 
# 289
{ 
# 292
return __gnu_cxx::template __numeric_traits< size_type> ::__max / sizeof(value_type); 
# 294
} 
# 296
template< class _Alloc2> static constexpr auto 
# 298
_S_select(_Alloc2 &__a, int)->__decltype((__a.select_on_container_copy_construction())) 
# 300
{ return __a.select_on_container_copy_construction(); } 
# 302
template< class _Alloc2> static constexpr _Alloc2 
# 304
_S_select(_Alloc2 &__a, ...) 
# 305
{ return __a; } 
# 317 "/usr/include/c++/11/bits/alloc_traits.h" 3
public: 
# 316
[[__nodiscard__]] static pointer 
# 317
allocate(_Alloc &__a, size_type __n) 
# 318
{ return __a.allocate(__n); } 
# 331 "/usr/include/c++/11/bits/alloc_traits.h" 3
[[__nodiscard__]] static pointer 
# 332
allocate(_Alloc &__a, size_type __n, const_void_pointer __hint) 
# 333
{ return _S_allocate(__a, __n, __hint, 0); } 
# 344 "/usr/include/c++/11/bits/alloc_traits.h" 3
static void deallocate(_Alloc &__a, pointer __p, size_type __n) 
# 345
{ __a.deallocate(__p, __n); } 
# 358 "/usr/include/c++/11/bits/alloc_traits.h" 3
template< class _Tp, class ..._Args> static auto 
# 360
construct(_Alloc &__a, _Tp *__p, _Args &&...__args) noexcept(noexcept(_S_construct(__a, __p, std::forward< _Args> (__args)...)))->__decltype((_S_construct(__a, __p, std::forward< _Args> (__args)...))) 
# 364
{ _S_construct(__a, __p, std::forward< _Args> (__args)...); } 
# 374 "/usr/include/c++/11/bits/alloc_traits.h" 3
template< class _Tp> static void 
# 376
destroy(_Alloc &__a, _Tp *__p) noexcept(noexcept(_S_destroy(__a, __p, 0))) 
# 378
{ _S_destroy(__a, __p, 0); } 
# 389 "/usr/include/c++/11/bits/alloc_traits.h" 3
static size_type max_size(const _Alloc &__a) noexcept 
# 390
{ return _S_max_size(__a, 0); } 
# 401 "/usr/include/c++/11/bits/alloc_traits.h" 3
static _Alloc select_on_container_copy_construction(const _Alloc &__rhs) 
# 402
{ return _S_select(__rhs, 0); } 
# 403
}; 
# 410
template< class _Tp> 
# 411
struct allocator_traits< allocator< _Tp> >  { 
# 414
using allocator_type = allocator< _Tp> ; 
# 417
using value_type = _Tp; 
# 420
using pointer = _Tp *; 
# 423
using const_pointer = const _Tp *; 
# 426
using void_pointer = void *; 
# 429
using const_void_pointer = const void *; 
# 432
using difference_type = ptrdiff_t; 
# 435
using size_type = size_t; 
# 438
using propagate_on_container_copy_assignment = false_type; 
# 441
using propagate_on_container_move_assignment = true_type; 
# 444
using propagate_on_container_swap = false_type; 
# 447
using is_always_equal = true_type; 
# 449
template< class _Up> using rebind_alloc = allocator< _Up> ; 
# 452
template< class _Up> using rebind_traits = std::allocator_traits< allocator< _Up> > ; 
# 462 "/usr/include/c++/11/bits/alloc_traits.h" 3
[[__nodiscard__]] static pointer 
# 463
allocate(allocator_type &__a, size_type __n) 
# 464
{ return __a.allocate(__n); } 
# 476 "/usr/include/c++/11/bits/alloc_traits.h" 3
[[__nodiscard__]] static pointer 
# 477
allocate(allocator_type &__a, size_type __n, const_void_pointer __hint) 
# 478
{ 
# 480
return __a.allocate(__n, __hint); 
# 484
} 
# 495 "/usr/include/c++/11/bits/alloc_traits.h" 3
static void deallocate(allocator_type &__a, pointer __p, size_type __n) 
# 496
{ __a.deallocate(__p, __n); } 
# 509 "/usr/include/c++/11/bits/alloc_traits.h" 3
template< class _Up, class ..._Args> static void 
# 511
construct(allocator_type &__a __attribute((__unused__)), _Up *__p, _Args &&...
# 512
__args) noexcept(std::template is_nothrow_constructible< _Up, _Args...> ::value) 
# 514
{ 
# 516
__a.construct(__p, std::forward< _Args> (__args)...); 
# 520
} 
# 529 "/usr/include/c++/11/bits/alloc_traits.h" 3
template< class _Up> static void 
# 531
destroy(allocator_type &__a __attribute((__unused__)), _Up *__p) noexcept(is_nothrow_destructible< _Up> ::value) 
# 533
{ 
# 535
__a.destroy(__p); 
# 539
} 
# 547
static size_type max_size(const allocator_type &__a __attribute((__unused__))) noexcept 
# 548
{ 
# 550
return __a.max_size(); 
# 554
} 
# 562
static allocator_type select_on_container_copy_construction(const allocator_type &__rhs) 
# 563
{ return __rhs; } 
# 564
}; 
# 568
template<> struct allocator_traits< allocator< void> >  { 
# 571
using allocator_type = allocator< void> ; 
# 574
using value_type = void; 
# 577
using pointer = void *; 
# 580
using const_pointer = const void *; 
# 583
using void_pointer = void *; 
# 586
using const_void_pointer = const void *; 
# 589
using difference_type = ptrdiff_t; 
# 592
using size_type = size_t; 
# 595
using propagate_on_container_copy_assignment = false_type; 
# 598
using propagate_on_container_move_assignment = true_type; 
# 601
using propagate_on_container_swap = false_type; 
# 604
using is_always_equal = true_type; 
# 606
template< class _Up> using rebind_alloc = allocator< _Up> ; 
# 609
template< class _Up> using rebind_traits = std::allocator_traits< allocator< _Up> > ; 
# 614
static void *allocate(allocator_type &, size_type, const void * = 0) = delete;
# 618
static void deallocate(allocator_type &, void *, size_type) = delete;
# 631 "/usr/include/c++/11/bits/alloc_traits.h" 3
template< class _Up, class ..._Args> static void 
# 633
construct(allocator_type &, _Up *__p, _Args &&...__args) noexcept(std::template is_nothrow_constructible< _Up, _Args...> ::value) 
# 635
{ std::_Construct(__p, std::forward< _Args> (__args)...); } 
# 644 "/usr/include/c++/11/bits/alloc_traits.h" 3
template< class _Up> static void 
# 646
destroy(allocator_type &, _Up *__p) noexcept(is_nothrow_destructible< _Up> ::value) 
# 648
{ std::_Destroy(__p); } 
# 652
static size_type max_size(const allocator_type &) = delete;
# 660
static allocator_type select_on_container_copy_construction(const allocator_type &__rhs) 
# 661
{ return __rhs; } 
# 662
}; 
# 676 "/usr/include/c++/11/bits/alloc_traits.h" 3
template< class _Alloc> constexpr void 
# 678
__alloc_on_copy(_Alloc &__one, const _Alloc &__two) 
# 679
{ 
# 680
typedef allocator_traits< _Alloc>  __traits; 
# 681
typedef typename allocator_traits< _Alloc> ::propagate_on_container_copy_assignment __pocca; 
# 683
if constexpr (__pocca::value) { 
# 684
__one = __two; }  
# 688
} 
# 690
template< class _Alloc> constexpr _Alloc 
# 692
__alloc_on_copy(const _Alloc &__a) 
# 693
{ 
# 694
typedef allocator_traits< _Alloc>  __traits; 
# 695
return __traits::select_on_container_copy_construction(__a); 
# 696
} 
# 708 "/usr/include/c++/11/bits/alloc_traits.h" 3
template< class _Alloc> constexpr void 
# 710
__alloc_on_move(_Alloc &__one, _Alloc &__two) 
# 711
{ 
# 712
typedef allocator_traits< _Alloc>  __traits; 
# 713
typedef typename allocator_traits< _Alloc> ::propagate_on_container_move_assignment __pocma; 
# 715
if constexpr (__pocma::value) { 
# 716
__one = std::move(__two); }  
# 720
} 
# 735 "/usr/include/c++/11/bits/alloc_traits.h" 3
template< class _Alloc> constexpr void 
# 737
__alloc_on_swap(_Alloc &__one, _Alloc &__two) 
# 738
{ 
# 739
typedef allocator_traits< _Alloc>  __traits; 
# 740
typedef typename allocator_traits< _Alloc> ::propagate_on_container_swap __pocs; 
# 742
if constexpr (__pocs::value) 
# 743
{ 
# 744
using std::swap;
# 745
swap(__one, __two); 
# 746
}  
# 750
} 
# 752
template< class _Alloc, class _Tp, class 
# 753
_ValueT = __remove_cvref_t< typename _Alloc::value_type> , class 
# 754
 = void> 
# 755
struct __is_alloc_insertable_impl : public false_type { 
# 757
}; 
# 759
template< class _Alloc, class _Tp, class _ValueT> 
# 760
struct __is_alloc_insertable_impl< _Alloc, _Tp, _ValueT, __void_t< __decltype((allocator_traits< _Alloc> ::construct(std::declval< _Alloc &> (), std::declval< _ValueT *> (), std::declval< _Tp> ())))> >  : public true_type { 
# 765
}; 
# 770
template< class _Alloc> 
# 771
struct __is_copy_insertable : public __is_alloc_insertable_impl< _Alloc, const typename _Alloc::value_type &> ::type { 
# 774
}; 
# 777
template< class _Tp> 
# 778
struct __is_copy_insertable< allocator< _Tp> >  : public is_copy_constructible< _Tp>  { 
# 780
}; 
# 785
template< class _Alloc> 
# 786
struct __is_move_insertable : public __is_alloc_insertable_impl< _Alloc, typename _Alloc::value_type> ::type { 
# 788
}; 
# 791
template< class _Tp> 
# 792
struct __is_move_insertable< allocator< _Tp> >  : public is_move_constructible< _Tp>  { 
# 794
}; 
# 797
template< class _Alloc, class  = void> 
# 798
struct __is_allocator : public false_type { }; 
# 800
template< class _Alloc> 
# 801
struct __is_allocator< _Alloc, __void_t< typename _Alloc::value_type, __decltype((std::declval< _Alloc &> ().allocate((unsigned long)0UL)))> >  : public true_type { 
# 804
}; 
# 806
template< class _Alloc> using _RequireAllocator = typename enable_if< __is_allocator< _Alloc> ::value, _Alloc> ::type; 
# 810
template< class _Alloc> using _RequireNotAllocator = typename enable_if< !__is_allocator< _Alloc> ::value, _Alloc> ::type; 
# 829 "/usr/include/c++/11/bits/alloc_traits.h" 3
template< class _ForwardIterator, class _Allocator> void 
# 831
_Destroy(_ForwardIterator __first, _ForwardIterator __last, _Allocator &
# 832
__alloc) 
# 833
{ 
# 834
for (; __first != __last; ++__first) { 
# 838
allocator_traits< _Allocator> ::destroy(__alloc, std::__addressof(*__first)); }  
# 841
} 
# 843
template< class _ForwardIterator, class _Tp> inline void 
# 845
_Destroy(_ForwardIterator __first, _ForwardIterator __last, allocator< _Tp>  &) 
# 847
{ 
# 848
_Destroy(__first, __last); 
# 849
} 
# 852
}
# 39 "/usr/include/c++/11/ext/alloc_traits.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 47
template< class _Alloc, class  = typename _Alloc::value_type> 
# 48
struct __alloc_traits : public std::allocator_traits< _Alloc>  { 
# 53
typedef _Alloc allocator_type; 
# 55
typedef std::allocator_traits< _Alloc>  _Base_type; 
# 56
typedef typename std::allocator_traits< _Alloc> ::value_type value_type; 
# 57
typedef typename std::allocator_traits< _Alloc> ::pointer pointer; 
# 58
typedef typename std::allocator_traits< _Alloc> ::const_pointer const_pointer; 
# 59
typedef typename std::allocator_traits< _Alloc> ::size_type size_type; 
# 60
typedef typename std::allocator_traits< _Alloc> ::difference_type difference_type; 
# 62
typedef value_type &reference; 
# 63
typedef const value_type &const_reference; 
# 64
using std::allocator_traits< _Alloc> ::allocate;
# 65
using std::allocator_traits< _Alloc> ::deallocate;
# 66
using std::allocator_traits< _Alloc> ::construct;
# 67
using std::allocator_traits< _Alloc> ::destroy;
# 68
using std::allocator_traits< _Alloc> ::max_size;
# 72
private: 
# 71
template< class _Ptr> using __is_custom_pointer = std::__and_< std::is_same< pointer, _Ptr> , std::__not_< std::is_pointer< _Ptr> > > ; 
# 81
public: 
# 78
template< class _Ptr, class ..._Args> static constexpr std::__enable_if_t< __is_custom_pointer< _Ptr> ::value>  
# 81
construct(_Alloc &__a, _Ptr __p, _Args &&...__args) noexcept(noexcept(_Base_type::construct(__a, std::__to_address(__p), std::forward< _Args> (__args)...))) 
# 84
{ 
# 85
_Base_type::construct(__a, std::__to_address(__p), std::forward< _Args> (__args)...); 
# 87
} 
# 90
template< class _Ptr> static constexpr std::__enable_if_t< __is_custom_pointer< _Ptr> ::value>  
# 93
destroy(_Alloc &__a, _Ptr __p) noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p)))) 
# 95
{ _Base_type::destroy(__a, std::__to_address(__p)); } 
# 97
static constexpr _Alloc _S_select_on_copy(const _Alloc &__a) 
# 98
{ return _Base_type::select_on_container_copy_construction(__a); } 
# 100
static constexpr void _S_on_swap(_Alloc &__a, _Alloc &__b) 
# 101
{ std::__alloc_on_swap(__a, __b); } 
# 103
static constexpr bool _S_propagate_on_copy_assign() 
# 104
{ return _Base_type::propagate_on_container_copy_assignment::value; } 
# 106
static constexpr bool _S_propagate_on_move_assign() 
# 107
{ return _Base_type::propagate_on_container_move_assignment::value; } 
# 109
static constexpr bool _S_propagate_on_swap() 
# 110
{ return _Base_type::propagate_on_container_swap::value; } 
# 112
static constexpr bool _S_always_equal() 
# 113
{ return _Base_type::is_always_equal::value; } 
# 115
static constexpr bool _S_nothrow_move() 
# 116
{ return (_S_propagate_on_move_assign)() || (_S_always_equal)(); } 
# 118
template< class _Tp> 
# 119
struct rebind { 
# 120
typedef typename std::allocator_traits< _Alloc> ::template rebind_alloc< _Tp>  other; }; 
# 166 "/usr/include/c++/11/ext/alloc_traits.h" 3
}; 
# 169
}
# 40 "/usr/include/c++/11/ext/aligned_buffer.h" 3
namespace __gnu_cxx { 
# 46
template< class _Tp> 
# 47
struct __aligned_membuf { 
# 54
struct _Tp2 { _Tp _M_t; }; 
# 56
alignas(__alignof__(_Tp2::_M_t)) unsigned char _M_storage[sizeof(_Tp)]; 
# 58
__aligned_membuf() = default;
# 61
__aligned_membuf(std::nullptr_t) { } 
# 64
void *_M_addr() noexcept 
# 65
{ return static_cast< void *>(&(_M_storage)); } 
# 68
const void *_M_addr() const noexcept 
# 69
{ return static_cast< const void *>(&(_M_storage)); } 
# 72
_Tp *_M_ptr() noexcept 
# 73
{ return static_cast< _Tp *>(_M_addr()); } 
# 76
const _Tp *_M_ptr() const noexcept 
# 77
{ return static_cast< const _Tp *>(_M_addr()); } 
# 78
}; 
# 89 "/usr/include/c++/11/ext/aligned_buffer.h" 3
template< class _Tp> 
# 90
struct __aligned_buffer : public std::aligned_storage< sizeof(_Tp), __alignof__(_Tp)>  { 
# 94
typename std::aligned_storage< sizeof(_Tp), __alignof__(_Tp)> ::type _M_storage; 
# 96
__aligned_buffer() = default;
# 99
__aligned_buffer(std::nullptr_t) { } 
# 102
void *_M_addr() noexcept 
# 103
{ 
# 104
return static_cast< void *>(&(_M_storage)); 
# 105
} 
# 108
const void *_M_addr() const noexcept 
# 109
{ 
# 110
return static_cast< const void *>(&(_M_storage)); 
# 111
} 
# 114
_Tp *_M_ptr() noexcept 
# 115
{ return static_cast< _Tp *>(_M_addr()); } 
# 118
const _Tp *_M_ptr() const noexcept 
# 119
{ return static_cast< const _Tp *>(_M_addr()); } 
# 120
}; 
# 123
}
# 38 "/usr/include/c++/11/bits/hashtable_policy.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 43
template< class _Key, class _Value, class _Alloc, class 
# 44
_ExtractKey, class _Equal, class 
# 45
_Hash, class _RangeHash, class _Unused, class 
# 46
_RehashPolicy, class _Traits> class _Hashtable; 
# 49
namespace __detail { 
# 56
template< class _Key, class _Value, class _ExtractKey, class 
# 57
_Equal, class _Hash, class _RangeHash, class 
# 58
_Unused, class _Traits> struct _Hashtable_base; 
# 63
template< class _Iterator> inline typename iterator_traits< _Iterator> ::difference_type 
# 65
__distance_fw(_Iterator __first, _Iterator __last, input_iterator_tag) 
# 67
{ return (__first != __last) ? 1 : 0; } 
# 69
template< class _Iterator> inline typename iterator_traits< _Iterator> ::difference_type 
# 71
__distance_fw(_Iterator __first, _Iterator __last, forward_iterator_tag) 
# 73
{ return std::distance(__first, __last); } 
# 75
template< class _Iterator> inline typename iterator_traits< _Iterator> ::difference_type 
# 77
__distance_fw(_Iterator __first, _Iterator __last) 
# 78
{ return __distance_fw(__first, __last, std::__iterator_category(__first)); 
# 79
} 
# 81
struct _Identity { 
# 83
template< class _Tp> _Tp &&
# 85
operator()(_Tp &&__x) const noexcept 
# 86
{ return std::forward< _Tp> (__x); } 
# 87
}; 
# 89
struct _Select1st { 
# 91
template< class _Tp> auto 
# 93
operator()(_Tp &&__x) const noexcept->__decltype((std::get< 0> (std::forward< _Tp> (__x)))) 
# 95
{ return std::get< 0> (std::forward< _Tp> (__x)); } 
# 96
}; 
# 98
template< class _NodeAlloc> struct _Hashtable_alloc; 
# 103
template< class _NodeAlloc> 
# 104
struct _ReuseOrAllocNode { 
# 107
private: using __node_alloc_type = _NodeAlloc; 
# 108
using __hashtable_alloc = _Hashtable_alloc< __node_alloc_type> ; 
# 109
using __node_alloc_traits = typename _Hashtable_alloc< __node_alloc_type> ::__node_alloc_traits; 
# 111
using __node_type = typename _Hashtable_alloc< __node_alloc_type> ::__node_type; 
# 114
public: _ReuseOrAllocNode(__node_type *__nodes, __hashtable_alloc &__h) : _M_nodes(__nodes), _M_h(__h) 
# 115
{ } 
# 116
_ReuseOrAllocNode(const _ReuseOrAllocNode &) = delete;
# 118
~_ReuseOrAllocNode() 
# 119
{ (_M_h)._M_deallocate_nodes(_M_nodes); } 
# 121
template< class _Arg> __node_type *
# 123
operator()(_Arg &&__arg) const 
# 124
{ 
# 125
if (_M_nodes) 
# 126
{ 
# 127
__node_type *__node = _M_nodes; 
# 128
(_M_nodes) = (_M_nodes)->_M_next(); 
# 129
(__node->_M_nxt) = nullptr; 
# 130
auto &__a = (_M_h)._M_node_allocator(); 
# 131
__node_alloc_traits::destroy(__a, __node->_M_valptr()); 
# 132
try 
# 133
{ 
# 134
__node_alloc_traits::construct(__a, __node->_M_valptr(), std::forward< _Arg> (__arg)); 
# 136
} 
# 137
catch (...) 
# 138
{ 
# 139
(_M_h)._M_deallocate_node_ptr(__node); 
# 140
throw; 
# 141
}  
# 142
return __node; 
# 143
}  
# 144
return (_M_h)._M_allocate_node(std::forward< _Arg> (__arg)); 
# 145
} 
# 148
private: mutable __node_type *_M_nodes; 
# 149
__hashtable_alloc &_M_h; 
# 150
}; 
# 154
template< class _NodeAlloc> 
# 155
struct _AllocNode { 
# 158
private: using __hashtable_alloc = _Hashtable_alloc< _NodeAlloc> ; 
# 159
using __node_type = typename _Hashtable_alloc< _NodeAlloc> ::__node_type; 
# 162
public: _AllocNode(__hashtable_alloc &__h) : _M_h(__h) 
# 163
{ } 
# 165
template< class _Arg> __node_type *
# 167
operator()(_Arg &&__arg) const 
# 168
{ return (_M_h)._M_allocate_node(std::forward< _Arg> (__arg)); } 
# 171
private: __hashtable_alloc &_M_h; 
# 172
}; 
# 199 "/usr/include/c++/11/bits/hashtable_policy.h" 3
template< bool _Cache_hash_code, bool _Constant_iterators, bool _Unique_keys> 
# 200
struct _Hashtable_traits { 
# 202
using __hash_cached = __bool_constant< _Cache_hash_code> ; 
# 203
using __constant_iterators = __bool_constant< _Constant_iterators> ; 
# 204
using __unique_keys = __bool_constant< _Unique_keys> ; 
# 205
}; 
# 215 "/usr/include/c++/11/bits/hashtable_policy.h" 3
struct _Hash_node_base { 
# 217
_Hash_node_base *_M_nxt; 
# 219
_Hash_node_base() noexcept : _M_nxt() { } 
# 221
_Hash_node_base(_Hash_node_base *__next) noexcept : _M_nxt(__next) { } 
# 222
}; 
# 229
template< class _Value> 
# 230
struct _Hash_node_value_base { 
# 232
typedef _Value value_type; 
# 234
__gnu_cxx::__aligned_buffer< _Value>  _M_storage; 
# 237
_Value *_M_valptr() noexcept 
# 238
{ return (_M_storage)._M_ptr(); } 
# 241
const _Value *_M_valptr() const noexcept 
# 242
{ return (_M_storage)._M_ptr(); } 
# 245
_Value &_M_v() noexcept 
# 246
{ return *_M_valptr(); } 
# 249
const _Value &_M_v() const noexcept 
# 250
{ return *_M_valptr(); } 
# 251
}; 
# 256
template< bool _Cache_hash_code> 
# 257
struct _Hash_node_code_cache { 
# 258
}; 
# 264
template<> struct _Hash_node_code_cache< true>  { 
# 265
size_t _M_hash_code; }; 
# 267
template< class _Value, bool _Cache_hash_code> 
# 268
struct _Hash_node_value : public _Hash_node_value_base< _Value> , public _Hash_node_code_cache< _Cache_hash_code>  { 
# 271
}; 
# 276
template< class _Value, bool _Cache_hash_code> 
# 277
struct _Hash_node : public _Hash_node_base, public _Hash_node_value< _Value, _Cache_hash_code>  { 
# 282
_Hash_node *_M_next() const noexcept 
# 283
{ return static_cast< _Hash_node *>(this->_M_nxt); } 
# 284
}; 
# 287
template< class _Value, bool _Cache_hash_code> 
# 288
struct _Node_iterator_base { 
# 290
using __node_type = _Hash_node< _Value, _Cache_hash_code> ; 
# 292
__node_type *_M_cur; 
# 294
_Node_iterator_base() : _M_cur((nullptr)) { } 
# 295
_Node_iterator_base(__node_type *__p) noexcept : _M_cur(__p) 
# 296
{ } 
# 299
void _M_incr() noexcept 
# 300
{ (_M_cur) = (_M_cur)->_M_next(); } 
# 303
friend inline bool operator==(const _Node_iterator_base< _Value, _Cache_hash_code>  &__x, const _Node_iterator_base< _Value, _Cache_hash_code>  &__y) noexcept 
# 305
{ return (__x._M_cur) == (__y._M_cur); } 
# 309
friend inline bool operator!=(const _Node_iterator_base< _Value, _Cache_hash_code>  &__x, const _Node_iterator_base< _Value, _Cache_hash_code>  &__y) noexcept 
# 311
{ return (__x._M_cur) != (__y._M_cur); } 
# 313
}; 
# 316
template< class _Value, bool __constant_iterators, bool __cache> 
# 317
struct _Node_iterator : public _Node_iterator_base< _Value, __cache>  { 
# 321
private: using __base_type = _Node_iterator_base< _Value, __cache> ; 
# 322
using __node_type = typename _Node_iterator_base< _Value, __cache> ::__node_type; 
# 325
public: typedef _Value value_type; 
# 326
typedef std::ptrdiff_t difference_type; 
# 327
typedef std::forward_iterator_tag iterator_category; 
# 329
using pointer = typename conditional< __constant_iterators, const value_type *, value_type *> ::type; 
# 332
using reference = typename conditional< __constant_iterators, const value_type &, value_type &> ::type; 
# 335
_Node_iterator() = default;
# 338
explicit _Node_iterator(__node_type *__p) noexcept : __base_type(__p) 
# 339
{ } 
# 342
reference operator*() const noexcept 
# 343
{ return (this->_M_cur)->_M_v(); } 
# 346
pointer operator->() const noexcept 
# 347
{ return (this->_M_cur)->_M_valptr(); } 
# 350
_Node_iterator &operator++() noexcept 
# 351
{ 
# 352
this->_M_incr(); 
# 353
return *this; 
# 354
} 
# 357
_Node_iterator operator++(int) noexcept 
# 358
{ 
# 359
_Node_iterator __tmp(*this); 
# 360
this->_M_incr(); 
# 361
return __tmp; 
# 362
} 
# 363
}; 
# 366
template< class _Value, bool __constant_iterators, bool __cache> 
# 367
struct _Node_const_iterator : public _Node_iterator_base< _Value, __cache>  { 
# 371
private: using __base_type = _Node_iterator_base< _Value, __cache> ; 
# 372
using __node_type = typename _Node_iterator_base< _Value, __cache> ::__node_type; 
# 375
public: typedef _Value value_type; 
# 376
typedef std::ptrdiff_t difference_type; 
# 377
typedef std::forward_iterator_tag iterator_category; 
# 379
typedef const value_type *pointer; 
# 380
typedef const value_type &reference; 
# 382
_Node_const_iterator() = default;
# 385
explicit _Node_const_iterator(__node_type *__p) noexcept : __base_type(__p) 
# 386
{ } 
# 388
_Node_const_iterator(const _Node_iterator< _Value, __constant_iterators, __cache>  &
# 389
__x) noexcept : __base_type((__x._M_cur)) 
# 390
{ } 
# 393
reference operator*() const noexcept 
# 394
{ return (this->_M_cur)->_M_v(); } 
# 397
pointer operator->() const noexcept 
# 398
{ return (this->_M_cur)->_M_valptr(); } 
# 401
_Node_const_iterator &operator++() noexcept 
# 402
{ 
# 403
this->_M_incr(); 
# 404
return *this; 
# 405
} 
# 408
_Node_const_iterator operator++(int) noexcept 
# 409
{ 
# 410
_Node_const_iterator __tmp(*this); 
# 411
this->_M_incr(); 
# 412
return __tmp; 
# 413
} 
# 414
}; 
# 421
struct _Mod_range_hashing { 
# 423
typedef size_t first_argument_type; 
# 424
typedef size_t second_argument_type; 
# 425
typedef size_t result_type; 
# 428
result_type operator()(first_argument_type __num, second_argument_type 
# 429
__den) const noexcept 
# 430
{ return __num % __den; } 
# 431
}; 
# 438
struct _Default_ranged_hash { }; 
# 442
struct _Prime_rehash_policy { 
# 444
using __has_load_factor = true_type; 
# 446
_Prime_rehash_policy(float __z = (1.0)) noexcept : _M_max_load_factor(__z), _M_next_resize((0)) 
# 447
{ } 
# 450
float max_load_factor() const noexcept 
# 451
{ return _M_max_load_factor; } 
# 455
size_t _M_next_bkt(size_t __n) const; 
# 459
size_t _M_bkt_for_elements(size_t __n) const 
# 460
{ return __builtin_ceil(__n / ((double)(_M_max_load_factor))); } 
# 467
pair< bool, unsigned long>  _M_need_rehash(size_t __n_bkt, size_t __n_elt, size_t __n_ins) const; 
# 470
typedef size_t _State; 
# 473
_State _M_state() const 
# 474
{ return _M_next_resize; } 
# 477
void _M_reset() noexcept 
# 478
{ (_M_next_resize) = (0); } 
# 481
void _M_reset(_State __state) 
# 482
{ (_M_next_resize) = __state; } 
# 484
static const size_t _S_growth_factor = (2); 
# 486
float _M_max_load_factor; 
# 487
mutable size_t _M_next_resize; 
# 488
}; 
# 491
struct _Mask_range_hashing { 
# 493
typedef size_t first_argument_type; 
# 494
typedef size_t second_argument_type; 
# 495
typedef size_t result_type; 
# 498
result_type operator()(first_argument_type __num, second_argument_type 
# 499
__den) const noexcept 
# 500
{ return __num & (__den - (1)); } 
# 501
}; 
# 505
inline size_t __clp2(size_t __n) noexcept 
# 506
{ 
# 507
using __gnu_cxx::__int_traits;
# 509
if (__n < (2)) { 
# 510
return __n; }  
# 511
const unsigned __lz = (sizeof(size_t) > sizeof(long)) ? __builtin_clzll(__n - 1ULL) : __builtin_clzl(__n - 1UL); 
# 515
return (((size_t)1) << ((__int_traits< unsigned long> ::__digits - __lz) - (1))) << 1; 
# 516
} 
# 520
struct _Power2_rehash_policy { 
# 522
using __has_load_factor = true_type; 
# 524
_Power2_rehash_policy(float __z = (1.0)) noexcept : _M_max_load_factor(__z), _M_next_resize((0)) 
# 525
{ } 
# 528
float max_load_factor() const noexcept 
# 529
{ return _M_max_load_factor; } 
# 534
size_t _M_next_bkt(size_t __n) noexcept 
# 535
{ 
# 536
if (__n == (0)) { 
# 540
return 1; }  
# 542
const auto __max_width = (std::min< unsigned long> (sizeof(size_t), 8)); 
# 543
const auto __max_bkt = (((size_t)1) << ((__max_width * (8)) - (1))); 
# 544
size_t __res = __clp2(__n); 
# 546
if (__res == (0)) { 
# 547
__res = __max_bkt; } else { 
# 548
if (__res == (1)) { 
# 552
__res = (2); }  }  
# 554
if (__res == __max_bkt) { 
# 558
(_M_next_resize) = ((size_t)(-1)); } else { 
# 560
(_M_next_resize) = (__builtin_floor(__res * ((double)(_M_max_load_factor)))); }  
# 563
return __res; 
# 564
} 
# 568
size_t _M_bkt_for_elements(size_t __n) const noexcept 
# 569
{ return __builtin_ceil(__n / ((double)(_M_max_load_factor))); } 
# 576
pair< bool, unsigned long>  _M_need_rehash(size_t __n_bkt, size_t __n_elt, size_t 
# 577
__n_ins) noexcept 
# 578
{ 
# 579
if ((__n_elt + __n_ins) > (_M_next_resize)) 
# 580
{ 
# 584
double __min_bkts = (std::max< unsigned long> (__n_elt + __n_ins, (_M_next_resize) ? 0 : 11)) / ((double)(_M_max_load_factor)); 
# 587
if (__min_bkts >= __n_bkt) { 
# 588
return {true, this->_M_next_bkt(std::max< unsigned long> (__builtin_floor(__min_bkts) + (1), __n_bkt * _S_growth_factor))}; }  
# 592
(_M_next_resize) = (__builtin_floor(__n_bkt * ((double)(_M_max_load_factor)))); 
# 594
return {false, 0}; 
# 595
} else { 
# 597
return {false, 0}; }  
# 598
} 
# 600
typedef size_t _State; 
# 603
_State _M_state() const noexcept 
# 604
{ return _M_next_resize; } 
# 607
void _M_reset() noexcept 
# 608
{ (_M_next_resize) = (0); } 
# 611
void _M_reset(_State __state) noexcept 
# 612
{ (_M_next_resize) = __state; } 
# 614
static const size_t _S_growth_factor = (2); 
# 616
float _M_max_load_factor; 
# 617
size_t _M_next_resize; 
# 618
}; 
# 638 "/usr/include/c++/11/bits/hashtable_policy.h" 3
template< class _Key, class _Value, class _Alloc, class 
# 639
_ExtractKey, class _Equal, class 
# 640
_Hash, class _RangeHash, class _Unused, class 
# 641
_RehashPolicy, class _Traits, bool 
# 642
_Unique_keys = _Traits::__unique_keys::value> 
# 643
struct _Map_base { }; 
# 646
template< class _Key, class _Pair, class _Alloc, class _Equal, class 
# 647
_Hash, class _RangeHash, class _Unused, class 
# 648
_RehashPolicy, class _Traits> 
# 649
struct _Map_base< _Key, _Pair, _Alloc, _Select1st, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits, false>  { 
# 652
using mapped_type = typename tuple_element< 1UL, _Pair> ::type; 
# 653
}; 
# 656
template< class _Key, class _Pair, class _Alloc, class _Equal, class 
# 657
_Hash, class _RangeHash, class _Unused, class 
# 658
_RehashPolicy, class _Traits> 
# 659
struct _Map_base< _Key, _Pair, _Alloc, _Select1st, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits, true>  { 
# 663
private: using __hashtable_base = _Hashtable_base< _Key, _Pair, _Select1st, _Equal, _Hash, _RangeHash, _Unused, _Traits> ; 
# 667
using __hashtable = _Hashtable< _Key, _Pair, _Alloc, _Select1st, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ; 
# 671
using __hash_code = typename _Hashtable_base< _Key, _Pair, _Select1st, _Equal, _Hash, _RangeHash, _Unused, _Traits> ::__hash_code; 
# 674
public: using key_type = typename _Hashtable_base< _Key, _Pair, _Select1st, _Equal, _Hash, _RangeHash, _Unused, _Traits> ::key_type; 
# 675
using mapped_type = typename tuple_element< 1UL, _Pair> ::type; 
# 678
mapped_type &operator[](const key_type & __k); 
# 681
mapped_type &operator[](key_type && __k); 
# 686
mapped_type &at(const key_type & __k); 
# 689
const mapped_type &at(const key_type & __k) const; 
# 690
}; 
# 692
template< class _Key, class _Pair, class _Alloc, class _Equal, class 
# 693
_Hash, class _RangeHash, class _Unused, class 
# 694
_RehashPolicy, class _Traits> auto 
# 698
_Map_base< _Key, _Pair, _Alloc, _Select1st, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits, true> ::operator[](const key_type &__k)->mapped_type & 
# 700
{ 
# 701
__hashtable *__h = static_cast< __hashtable *>(this); 
# 702
__hash_code __code = __h->_M_hash_code(__k); 
# 703
size_t __bkt = __h->_M_bucket_index(__code); 
# 704
if (auto __node = __h->_M_find_node(__bkt, __k, __code)) { 
# 705
return (__node->_M_v)().second; }  
# 707
typename _Hashtable< _Key, _Pair, _Alloc, _Select1st, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::_Scoped_node __node{__h, std::piecewise_construct, ((tuple< const key_type &> )(__k)), tuple< > ()}; 
# 713
auto __pos = __h->_M_insert_unique_node(__bkt, __code, (__node._M_node)); 
# 715
(__node._M_node) = nullptr; 
# 716
return __pos->second; 
# 717
} 
# 719
template< class _Key, class _Pair, class _Alloc, class _Equal, class 
# 720
_Hash, class _RangeHash, class _Unused, class 
# 721
_RehashPolicy, class _Traits> auto 
# 725
_Map_base< _Key, _Pair, _Alloc, _Select1st, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits, true> ::operator[](key_type &&__k)->mapped_type & 
# 727
{ 
# 728
__hashtable *__h = static_cast< __hashtable *>(this); 
# 729
__hash_code __code = __h->_M_hash_code(__k); 
# 730
size_t __bkt = __h->_M_bucket_index(__code); 
# 731
if (auto __node = __h->_M_find_node(__bkt, __k, __code)) { 
# 732
return (__node->_M_v)().second; }  
# 734
typename _Hashtable< _Key, _Pair, _Alloc, _Select1st, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::_Scoped_node __node{__h, std::piecewise_construct, std::forward_as_tuple(std::move(__k)), tuple< > ()}; 
# 740
auto __pos = __h->_M_insert_unique_node(__bkt, __code, (__node._M_node)); 
# 742
(__node._M_node) = nullptr; 
# 743
return __pos->second; 
# 744
} 
# 746
template< class _Key, class _Pair, class _Alloc, class _Equal, class 
# 747
_Hash, class _RangeHash, class _Unused, class 
# 748
_RehashPolicy, class _Traits> auto 
# 752
_Map_base< _Key, _Pair, _Alloc, _Select1st, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits, true> ::at(const key_type &__k)->mapped_type & 
# 754
{ 
# 755
__hashtable *__h = static_cast< __hashtable *>(this); 
# 756
auto __ite = __h->find(__k); 
# 758
if (!(__ite._M_cur)) { 
# 759
__throw_out_of_range("_Map_base::at"); }  
# 760
return __ite->second; 
# 761
} 
# 763
template< class _Key, class _Pair, class _Alloc, class _Equal, class 
# 764
_Hash, class _RangeHash, class _Unused, class 
# 765
_RehashPolicy, class _Traits> auto 
# 769
_Map_base< _Key, _Pair, _Alloc, _Select1st, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits, true> ::at(const key_type &__k) const->const mapped_type & 
# 771
{ 
# 772
const __hashtable *__h = static_cast< const __hashtable *>(this); 
# 773
auto __ite = __h->find(__k); 
# 775
if (!(__ite._M_cur)) { 
# 776
__throw_out_of_range("_Map_base::at"); }  
# 777
return __ite->second; 
# 778
} 
# 785
template< class _Key, class _Value, class _Alloc, class 
# 786
_ExtractKey, class _Equal, class 
# 787
_Hash, class _RangeHash, class _Unused, class 
# 788
_RehashPolicy, class _Traits> 
# 789
struct _Insert_base { 
# 792
protected: using __hashtable_base = _Hashtable_base< _Key, _Value, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _Traits> ; 
# 796
using __hashtable = _Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ; 
# 800
using __hash_cached = typename _Traits::__hash_cached; 
# 801
using __constant_iterators = typename _Traits::__constant_iterators; 
# 803
using __hashtable_alloc = _Hashtable_alloc< __alloc_rebind< _Alloc, _Hash_node< _Value, _Traits::__hash_cached::value> > > ; 
# 807
using value_type = typename _Hashtable_base< _Key, _Value, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _Traits> ::value_type; 
# 808
using size_type = typename _Hashtable_base< _Key, _Value, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _Traits> ::size_type; 
# 810
using __unique_keys = typename _Traits::__unique_keys; 
# 811
using __node_alloc_type = typename _Hashtable_alloc< __alloc_rebind< _Alloc, _Hash_node< _Value, _Traits::__hash_cached::value> > > ::__node_alloc_type; 
# 812
using __node_gen_type = _AllocNode< __node_alloc_type> ; 
# 815
__hashtable &_M_conjure_hashtable() 
# 816
{ return *(static_cast< __hashtable *>(this)); } 
# 818
template< class _InputIterator, class _NodeGetter> void _M_insert_range(_InputIterator __first, _InputIterator __last, const _NodeGetter &, true_type __uks); 
# 823
template< class _InputIterator, class _NodeGetter> void _M_insert_range(_InputIterator __first, _InputIterator __last, const _NodeGetter &, false_type __uks); 
# 829
public: using iterator = _Node_iterator< _Value, _Traits::__constant_iterators::value, _Traits::__hash_cached::value> ; 
# 832
using const_iterator = _Node_const_iterator< _Value, _Traits::__constant_iterators::value, _Traits::__hash_cached::value> ; 
# 835
using __ireturn_type = typename conditional< _Traits::__unique_keys::value, pair< iterator, bool> , iterator> ::type; 
# 840
__ireturn_type insert(const value_type &__v) 
# 841
{ 
# 842
__hashtable &__h = _M_conjure_hashtable(); 
# 843
__node_gen_type __node_gen(__h); 
# 844
return __h._M_insert(__v, __node_gen, __unique_keys{}); 
# 845
} 
# 848
iterator insert(const_iterator __hint, const value_type &__v) 
# 849
{ 
# 850
__hashtable &__h = _M_conjure_hashtable(); 
# 851
__node_gen_type __node_gen(__h); 
# 852
return __h._M_insert(__hint, __v, __node_gen, __unique_keys{}); 
# 853
} 
# 855
template< class _KType, class ..._Args> pair< iterator, bool>  
# 857
try_emplace(const_iterator, _KType &&__k, _Args &&...__args) 
# 858
{ 
# 859
__hashtable &__h = _M_conjure_hashtable(); 
# 860
auto __code = __h._M_hash_code(__k); 
# 861
size_t __bkt = __h._M_bucket_index(__code); 
# 862
if (auto __node = __h._M_find_node(__bkt, __k, __code)) { 
# 863
return {((_Node_iterator< _Value, _Traits::__constant_iterators::value, _Traits::__hash_cached::value> )(__node)), false}; }  
# 865
typename _Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::_Scoped_node __node{(&__h), std::piecewise_construct, std::forward_as_tuple(std::forward< _KType> (__k)), std::forward_as_tuple(std::forward< _Args> (__args)...)}; 
# 871
auto __it = __h._M_insert_unique_node(__bkt, __code, (__node._M_node)); 
# 873
(__node._M_node) = nullptr; 
# 874
return {__it, true}; 
# 875
} 
# 878
void insert(initializer_list< value_type>  __l) 
# 879
{ this->insert(__l.begin(), __l.end()); } 
# 881
template< class _InputIterator> void 
# 883
insert(_InputIterator __first, _InputIterator __last) 
# 884
{ 
# 885
__hashtable &__h = _M_conjure_hashtable(); 
# 886
__node_gen_type __node_gen(__h); 
# 887
return _M_insert_range(__first, __last, __node_gen, __unique_keys{}); 
# 888
} 
# 889
}; 
# 891
template< class _Key, class _Value, class _Alloc, class 
# 892
_ExtractKey, class _Equal, class 
# 893
_Hash, class _RangeHash, class _Unused, class 
# 894
_RehashPolicy, class _Traits> 
# 895
template< class _InputIterator, class _NodeGetter> void 
# 900
_Insert_base< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::_M_insert_range(_InputIterator __first, _InputIterator __last, const _NodeGetter &
# 901
__node_gen, true_type __uks) 
# 902
{ 
# 903
__hashtable &__h = _M_conjure_hashtable(); 
# 904
for (; __first != __last; ++__first) { 
# 905
__h._M_insert(*__first, __node_gen, __uks); }  
# 906
} 
# 908
template< class _Key, class _Value, class _Alloc, class 
# 909
_ExtractKey, class _Equal, class 
# 910
_Hash, class _RangeHash, class _Unused, class 
# 911
_RehashPolicy, class _Traits> 
# 912
template< class _InputIterator, class _NodeGetter> void 
# 917
_Insert_base< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::_M_insert_range(_InputIterator __first, _InputIterator __last, const _NodeGetter &
# 918
__node_gen, false_type __uks) 
# 919
{ 
# 920
using __rehash_type = typename _Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::__rehash_type; 
# 921
using __rehash_state = typename _Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::__rehash_state; 
# 922
using pair_type = pair< bool, size_t> ; 
# 924
size_type __n_elt = __detail::__distance_fw(__first, __last); 
# 925
if (__n_elt == 0) { 
# 926
return; }  
# 928
__hashtable &__h = _M_conjure_hashtable(); 
# 929
__rehash_type &__rehash = ((__h._M_rehash_policy)); 
# 930
const __rehash_state &__saved_state = __rehash._M_state(); 
# 931
pair_type __do_rehash = __rehash._M_need_rehash((__h._M_bucket_count), (__h._M_element_count), __n_elt); 
# 935
if (__do_rehash.first) { 
# 936
__h._M_rehash(__do_rehash.second, __saved_state); }  
# 938
for (; __first != __last; ++__first) { 
# 939
__h._M_insert(*__first, __node_gen, __uks); }  
# 940
} 
# 948
template< class _Key, class _Value, class _Alloc, class 
# 949
_ExtractKey, class _Equal, class 
# 950
_Hash, class _RangeHash, class _Unused, class 
# 951
_RehashPolicy, class _Traits, bool 
# 952
_Constant_iterators = _Traits::__constant_iterators::value> struct _Insert; 
# 956
template< class _Key, class _Value, class _Alloc, class 
# 957
_ExtractKey, class _Equal, class 
# 958
_Hash, class _RangeHash, class _Unused, class 
# 959
_RehashPolicy, class _Traits> 
# 960
struct _Insert< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits, true>  : public _Insert_base< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>  { 
# 966
using __base_type = _Insert_base< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ; 
# 970
using value_type = typename _Insert_base< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::value_type; 
# 971
using iterator = typename _Insert_base< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::iterator; 
# 972
using const_iterator = typename _Insert_base< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::const_iterator; 
# 973
using __ireturn_type = typename _Insert_base< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::__ireturn_type; 
# 975
using __unique_keys = typename _Insert_base< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::__unique_keys; 
# 976
using __hashtable = typename _Insert_base< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::__hashtable; 
# 977
using __node_gen_type = typename _Insert_base< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::__node_gen_type; 
# 979
using _Insert_base< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::insert;
# 982
__ireturn_type insert(value_type &&__v) 
# 983
{ 
# 984
__hashtable &__h = this->_M_conjure_hashtable(); 
# 985
__node_gen_type __node_gen(__h); 
# 986
return __h._M_insert(std::move(__v), __node_gen, __unique_keys{}); 
# 987
} 
# 990
iterator insert(const_iterator __hint, value_type &&__v) 
# 991
{ 
# 992
__hashtable &__h = this->_M_conjure_hashtable(); 
# 993
__node_gen_type __node_gen(__h); 
# 994
return __h._M_insert(__hint, std::move(__v), __node_gen, __unique_keys{}); 
# 996
} 
# 997
}; 
# 1000
template< class _Key, class _Value, class _Alloc, class 
# 1001
_ExtractKey, class _Equal, class 
# 1002
_Hash, class _RangeHash, class _Unused, class 
# 1003
_RehashPolicy, class _Traits> 
# 1004
struct _Insert< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits, false>  : public _Insert_base< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>  { 
# 1009
using __base_type = _Insert_base< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ; 
# 1012
using value_type = typename _Insert_base< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::value_type; 
# 1013
using iterator = typename _Insert_base< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::iterator; 
# 1014
using const_iterator = typename _Insert_base< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::const_iterator; 
# 1016
using __unique_keys = typename _Insert_base< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::__unique_keys; 
# 1017
using __hashtable = typename _Insert_base< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::__hashtable; 
# 1018
using __ireturn_type = typename _Insert_base< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::__ireturn_type; 
# 1020
using _Insert_base< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::insert;
# 1022
template< class _Pair> using __is_cons = is_constructible< value_type, _Pair &&> ; 
# 1025
template< class _Pair> using _IFcons = enable_if< __is_cons< _Pair> ::value> ; 
# 1028
template< class _Pair> using _IFconsp = typename _IFcons< _Pair> ::type; 
# 1031
template< class _Pair, class  = _IFconsp< _Pair> > __ireturn_type 
# 1033
insert(_Pair &&__v) 
# 1034
{ 
# 1035
__hashtable &__h = this->_M_conjure_hashtable(); 
# 1036
return __h._M_emplace(__unique_keys{}, std::forward< _Pair> (__v)); 
# 1037
} 
# 1039
template< class _Pair, class  = _IFconsp< _Pair> > iterator 
# 1041
insert(const_iterator __hint, _Pair &&__v) 
# 1042
{ 
# 1043
__hashtable &__h = this->_M_conjure_hashtable(); 
# 1044
return __h._M_emplace(__hint, __unique_keys{}, std::forward< _Pair> (__v)); 
# 1046
} 
# 1047
}; 
# 1049
template< class _Policy> using __has_load_factor = typename _Policy::__has_load_factor; 
# 1058
template< class _Key, class _Value, class _Alloc, class 
# 1059
_ExtractKey, class _Equal, class 
# 1060
_Hash, class _RangeHash, class _Unused, class 
# 1061
_RehashPolicy, class _Traits, class 
# 1062
 = __detected_or_t< integral_constant< bool, false> , __has_load_factor, _RehashPolicy> > struct _Rehash_base; 
# 1067
template< class _Key, class _Value, class _Alloc, class 
# 1068
_ExtractKey, class _Equal, class 
# 1069
_Hash, class _RangeHash, class _Unused, class 
# 1070
_RehashPolicy, class _Traits> 
# 1071
struct _Rehash_base< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits, integral_constant< bool, false> >  { 
# 1075
}; 
# 1078
template< class _Key, class _Value, class _Alloc, class 
# 1079
_ExtractKey, class _Equal, class 
# 1080
_Hash, class _RangeHash, class _Unused, class 
# 1081
_RehashPolicy, class _Traits> 
# 1082
struct _Rehash_base< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits, integral_constant< bool, true> >  { 
# 1086
using __hashtable = _Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ; 
# 1091
float max_load_factor() const noexcept 
# 1092
{ 
# 1093
const __hashtable *__this = static_cast< const __hashtable *>(this); 
# 1094
return __this->__rehash_policy().max_load_factor(); 
# 1095
} 
# 1098
void max_load_factor(float __z) 
# 1099
{ 
# 1100
__hashtable *__this = static_cast< __hashtable *>(this); 
# 1101
__this->__rehash_policy((_RehashPolicy)__z); 
# 1102
} 
# 1105
void reserve(size_t __n) 
# 1106
{ 
# 1107
__hashtable *__this = static_cast< __hashtable *>(this); 
# 1108
__this->rehash(__this->__rehash_policy()._M_bkt_for_elements(__n)); 
# 1109
} 
# 1110
}; 
# 1118
template< int _Nm, class _Tp, bool 
# 1119
__use_ebo = (!__is_final(_Tp)) && __is_empty(_Tp)> struct _Hashtable_ebo_helper; 
# 1123
template< int _Nm, class _Tp> 
# 1124
struct _Hashtable_ebo_helper< _Nm, _Tp, true>  : private _Tp { 
# 1127
_Hashtable_ebo_helper() noexcept(noexcept((_Tp()))) : _Tp() { } 
# 1129
template< class _OtherTp> 
# 1130
_Hashtable_ebo_helper(_OtherTp &&__tp) : _Tp(std::forward< _OtherTp> (__tp)) 
# 1132
{ } 
# 1134
const _Tp &_M_cget() const { return static_cast< const _Tp &>(*this); } 
# 1135
_Tp &_M_get() { return static_cast< _Tp &>(*this); } 
# 1136
}; 
# 1139
template< int _Nm, class _Tp> 
# 1140
struct _Hashtable_ebo_helper< _Nm, _Tp, false>  { 
# 1142
_Hashtable_ebo_helper() = default;
# 1144
template< class _OtherTp> 
# 1145
_Hashtable_ebo_helper(_OtherTp &&__tp) : _M_tp(std::forward< _OtherTp> (__tp)) 
# 1147
{ } 
# 1149
const _Tp &_M_cget() const { return _M_tp; } 
# 1150
_Tp &_M_get() { return _M_tp; } 
# 1153
private: _Tp _M_tp{}; 
# 1154
}; 
# 1162
template< class _Key, class _Value, class _ExtractKey, class 
# 1163
_Hash, class _RangeHash, class _Unused, bool 
# 1164
__cache_hash_code> struct _Local_iterator_base; 
# 1185 "/usr/include/c++/11/bits/hashtable_policy.h" 3
template< class _Key, class _Value, class _ExtractKey, class 
# 1186
_Hash, class _RangeHash, class _Unused, bool 
# 1187
__cache_hash_code> 
# 1188
struct _Hash_code_base : private _Hashtable_ebo_helper< 1, _Hash>  { 
# 1192
private: using __ebo_hash = _Hashtable_ebo_helper< 1, _Hash> ; 
# 1195
friend struct _Local_iterator_base< _Key, _Value, _ExtractKey, _Hash, _RangeHash, _Unused, false> ; 
# 1199
public: typedef _Hash hasher; 
# 1202
hasher hash_function() const 
# 1203
{ return _M_hash(); } 
# 1206
protected: typedef std::size_t __hash_code; 
# 1210
_Hash_code_base() = default;
# 1212
_Hash_code_base(const _Hash &__hash) : __ebo_hash(__hash) { } 
# 1215
__hash_code _M_hash_code(const _Key &__k) const 
# 1216
{ 
# 1217
static_assert((__is_invocable< const _Hash &, const _Key &> {}), "hash function must be invocable with an argument of key type");
# 1219
return _M_hash()(__k); 
# 1220
} 
# 1222
template< class _Kt> __hash_code 
# 1224
_M_hash_code_tr(const _Kt &__k) const 
# 1225
{ 
# 1226
static_assert((__is_invocable< const _Hash &, const _Kt &> {}), "hash function must be invocable with an argument of key type");
# 1228
return _M_hash()(__k); 
# 1229
} 
# 1232
std::size_t _M_bucket_index(__hash_code __c, std::size_t __bkt_count) const 
# 1233
{ return _RangeHash{}(__c, __bkt_count); } 
# 1236
std::size_t _M_bucket_index(const _Hash_node_value< _Value, false>  &__n, std::size_t 
# 1237
__bkt_count) const noexcept(noexcept(declval< const _Hash &> ()(declval< const _Key &> ())) && noexcept(declval< const _RangeHash &> ()((__hash_code)0, (std::size_t)0))) 
# 1241
{ 
# 1242
return _RangeHash{}(_M_hash_code(_ExtractKey{}(__n._M_v())), __bkt_count); 
# 1244
} 
# 1247
std::size_t _M_bucket_index(const _Hash_node_value< _Value, true>  &__n, std::size_t 
# 1248
__bkt_count) const noexcept(noexcept(declval< const _RangeHash &> ()((__hash_code)0, (std::size_t)0))) 
# 1251
{ return _RangeHash{}((__n._M_hash_code), __bkt_count); } 
# 1254
void _M_store_code(__detail::_Hash_node_code_cache< false>  &, __hash_code) const 
# 1255
{ } 
# 1258
void _M_copy_code(__detail::_Hash_node_code_cache< false>  &, const __detail::_Hash_node_code_cache< false>  &) const 
# 1260
{ } 
# 1263
void _M_store_code(__detail::_Hash_node_code_cache< true>  &__n, __hash_code __c) const 
# 1264
{ (__n._M_hash_code) = __c; } 
# 1267
void _M_copy_code(__detail::_Hash_node_code_cache< true>  &__to, const __detail::_Hash_node_code_cache< true>  &
# 1268
__from) const 
# 1269
{ (__to._M_hash_code) = (__from._M_hash_code); } 
# 1272
void _M_swap(_Hash_code_base &__x) 
# 1273
{ std::swap(__ebo_hash::_M_get(), __x.__ebo_hash::_M_get()); } 
# 1276
const _Hash &_M_hash() const { return __ebo_hash::_M_cget(); } 
# 1277
}; 
# 1280
template< class _Key, class _Value, class _ExtractKey, class 
# 1281
_Hash, class _RangeHash, class _Unused> 
# 1282
struct _Local_iterator_base< _Key, _Value, _ExtractKey, _Hash, _RangeHash, _Unused, true>  : public _Node_iterator_base< _Value, true>  { 
# 1287
protected: using __base_node_iter = _Node_iterator_base< _Value, true> ; 
# 1288
using __hash_code_base = _Hash_code_base< _Key, _Value, _ExtractKey, _Hash, _RangeHash, _Unused, true> ; 
# 1291
_Local_iterator_base() = default;
# 1292
_Local_iterator_base(const __hash_code_base &, _Hash_node< _Value, true>  *
# 1293
__p, std::size_t 
# 1294
__bkt, std::size_t __bkt_count) : __base_node_iter(__p), _M_bucket(__bkt), _M_bucket_count(__bkt_count) 
# 1296
{ } 
# 1299
void _M_incr() 
# 1300
{ 
# 1301
__base_node_iter::_M_incr(); 
# 1302
if (this->_M_cur) 
# 1303
{ 
# 1304
std::size_t __bkt = _RangeHash{}(((this->_M_cur)->_M_hash_code), _M_bucket_count); 
# 1306
if (__bkt != (_M_bucket)) { 
# 1307
(this->_M_cur) = nullptr; }  
# 1308
}  
# 1309
} 
# 1311
std::size_t _M_bucket; 
# 1312
std::size_t _M_bucket_count; 
# 1316
public: std::size_t _M_get_bucket() const { return _M_bucket; } 
# 1317
}; 
# 1323
template< class _Tp, bool _IsEmpty = std::template is_empty< _Tp> ::value> 
# 1324
struct _Hash_code_storage { 
# 1326
__gnu_cxx::__aligned_buffer< _Tp>  _M_storage; 
# 1329
_Tp *_M_h() { return (_M_storage)._M_ptr(); } 
# 1332
const _Tp *_M_h() const { return (_M_storage)._M_ptr(); } 
# 1333
}; 
# 1336
template< class _Tp> 
# 1337
struct _Hash_code_storage< _Tp, true>  { 
# 1339
static_assert((std::template is_empty< _Tp> ::value), "Type must be empty");
# 1344
_Tp *_M_h() { return reinterpret_cast< _Tp *>(this); } 
# 1347
const _Tp *_M_h() const { return reinterpret_cast< const _Tp *>(this); } 
# 1348
}; 
# 1350
template< class _Key, class _Value, class _ExtractKey, class 
# 1351
_Hash, class _RangeHash, class _Unused> using __hash_code_for_local_iter = _Hash_code_storage< _Hash_code_base< _Key, _Value, _ExtractKey, _Hash, _RangeHash, _Unused, false> > ; 
# 1357
template< class _Key, class _Value, class _ExtractKey, class 
# 1358
_Hash, class _RangeHash, class _Unused> 
# 1359
struct _Local_iterator_base< _Key, _Value, _ExtractKey, _Hash, _RangeHash, _Unused, false>  : public __hash_code_for_local_iter< _Key, _Value, _ExtractKey, _Hash, _RangeHash, _Unused> , public _Node_iterator_base< _Value, false>  { 
# 1366
protected: using __hash_code_base = _Hash_code_base< _Key, _Value, _ExtractKey, _Hash, _RangeHash, _Unused, false> ; 
# 1368
using __node_iter_base = _Node_iterator_base< _Value, false> ; 
# 1370
_Local_iterator_base() : _M_bucket_count((-1)) { } 
# 1372
_Local_iterator_base(const __hash_code_base &__base, _Hash_node< _Value, false>  *
# 1373
__p, std::size_t 
# 1374
__bkt, std::size_t __bkt_count) : __node_iter_base(__p), _M_bucket(__bkt), _M_bucket_count(__bkt_count) 
# 1376
{ _M_init(__base); } 
# 1378
~_Local_iterator_base() 
# 1379
{ 
# 1380
if ((_M_bucket_count) != ((std::size_t)(-1))) { 
# 1381
_M_destroy(); }  
# 1382
} 
# 1384
_Local_iterator_base(const _Local_iterator_base &__iter) : __node_iter_base((__iter._M_cur)), _M_bucket(__iter._M_bucket), _M_bucket_count(__iter._M_bucket_count) 
# 1387
{ 
# 1388
if ((_M_bucket_count) != ((std::size_t)(-1))) { 
# 1389
_M_init(*__iter._M_h()); }  
# 1390
} 
# 1393
_Local_iterator_base &operator=(const _Local_iterator_base &__iter) 
# 1394
{ 
# 1395
if ((_M_bucket_count) != (-1)) { 
# 1396
_M_destroy(); }  
# 1397
(this->_M_cur) = (__iter._M_cur); 
# 1398
(_M_bucket) = (__iter._M_bucket); 
# 1399
(_M_bucket_count) = (__iter._M_bucket_count); 
# 1400
if ((_M_bucket_count) != (-1)) { 
# 1401
_M_init(*__iter._M_h()); }  
# 1402
return *this; 
# 1403
} 
# 1406
void _M_incr() 
# 1407
{ 
# 1408
__node_iter_base::_M_incr(); 
# 1409
if (this->_M_cur) 
# 1410
{ 
# 1411
std::size_t __bkt = this->_M_h()->_M_bucket_index(*(this->_M_cur), _M_bucket_count); 
# 1413
if (__bkt != (_M_bucket)) { 
# 1414
(this->_M_cur) = nullptr; }  
# 1415
}  
# 1416
} 
# 1418
std::size_t _M_bucket; 
# 1419
std::size_t _M_bucket_count; 
# 1422
void _M_init(const __hash_code_base &__base) 
# 1423
{ ::new (this->_M_h()) __hash_code_base(__base); } 
# 1426
void _M_destroy() { this->_M_h()->~__hash_code_base(); } 
# 1430
public: std::size_t _M_get_bucket() const { return _M_bucket; } 
# 1431
}; 
# 1434
template< class _Key, class _Value, class _ExtractKey, class 
# 1435
_Hash, class _RangeHash, class _Unused, bool 
# 1436
__constant_iterators, bool __cache> 
# 1437
struct _Local_iterator : public _Local_iterator_base< _Key, _Value, _ExtractKey, _Hash, _RangeHash, _Unused, __cache>  { 
# 1442
private: using __base_type = _Local_iterator_base< _Key, _Value, _ExtractKey, _Hash, _RangeHash, _Unused, __cache> ; 
# 1444
using __hash_code_base = typename _Local_iterator_base< _Key, _Value, _ExtractKey, _Hash, _RangeHash, _Unused, __cache> ::__hash_code_base; 
# 1447
public: typedef _Value value_type; 
# 1450
typedef typename conditional< __constant_iterators, const value_type *, value_type *> ::type pointer; 
# 1453
typedef typename conditional< __constant_iterators, const value_type &, value_type &> ::type reference; 
# 1454
typedef std::ptrdiff_t difference_type; 
# 1455
typedef std::forward_iterator_tag iterator_category; 
# 1457
_Local_iterator() = default;
# 1459
_Local_iterator(const __hash_code_base &__base, _Hash_node< _Value, __cache>  *
# 1460
__n, std::size_t 
# 1461
__bkt, std::size_t __bkt_count) : __base_type(__base, __n, __bkt, __bkt_count) 
# 1463
{ } 
# 1466
reference operator*() const 
# 1467
{ return (this->_M_cur)->_M_v(); } 
# 1470
pointer operator->() const 
# 1471
{ return (this->_M_cur)->_M_valptr(); } 
# 1474
_Local_iterator &operator++() 
# 1475
{ 
# 1476
this->_M_incr(); 
# 1477
return *this; 
# 1478
} 
# 1481
_Local_iterator operator++(int) 
# 1482
{ 
# 1483
_Local_iterator __tmp(*this); 
# 1484
this->_M_incr(); 
# 1485
return __tmp; 
# 1486
} 
# 1487
}; 
# 1490
template< class _Key, class _Value, class _ExtractKey, class 
# 1491
_Hash, class _RangeHash, class _Unused, bool 
# 1492
__constant_iterators, bool __cache> 
# 1493
struct _Local_const_iterator : public _Local_iterator_base< _Key, _Value, _ExtractKey, _Hash, _RangeHash, _Unused, __cache>  { 
# 1498
private: using __base_type = _Local_iterator_base< _Key, _Value, _ExtractKey, _Hash, _RangeHash, _Unused, __cache> ; 
# 1500
using __hash_code_base = typename _Local_iterator_base< _Key, _Value, _ExtractKey, _Hash, _RangeHash, _Unused, __cache> ::__hash_code_base; 
# 1503
public: typedef _Value value_type; 
# 1504
typedef const value_type *pointer; 
# 1505
typedef const value_type &reference; 
# 1506
typedef std::ptrdiff_t difference_type; 
# 1507
typedef std::forward_iterator_tag iterator_category; 
# 1509
_Local_const_iterator() = default;
# 1511
_Local_const_iterator(const __hash_code_base &__base, _Hash_node< _Value, __cache>  *
# 1512
__n, std::size_t 
# 1513
__bkt, std::size_t __bkt_count) : __base_type(__base, __n, __bkt, __bkt_count) 
# 1515
{ } 
# 1517
_Local_const_iterator(const _Local_iterator< _Key, _Value, _ExtractKey, _Hash, _RangeHash, _Unused, __constant_iterators, __cache>  &
# 1520
__x) : __base_type(__x) 
# 1522
{ } 
# 1525
reference operator*() const 
# 1526
{ return (this->_M_cur)->_M_v(); } 
# 1529
pointer operator->() const 
# 1530
{ return (this->_M_cur)->_M_valptr(); } 
# 1533
_Local_const_iterator &operator++() 
# 1534
{ 
# 1535
this->_M_incr(); 
# 1536
return *this; 
# 1537
} 
# 1540
_Local_const_iterator operator++(int) 
# 1541
{ 
# 1542
_Local_const_iterator __tmp(*this); 
# 1543
this->_M_incr(); 
# 1544
return __tmp; 
# 1545
} 
# 1546
}; 
# 1558 "/usr/include/c++/11/bits/hashtable_policy.h" 3
template< class _Key, class _Value, class _ExtractKey, class 
# 1559
_Equal, class _Hash, class _RangeHash, class 
# 1560
_Unused, class _Traits> 
# 1561
struct _Hashtable_base : public _Hash_code_base< _Key, _Value, _ExtractKey, _Hash, _RangeHash, _Unused, _Traits::__hash_cached::value> , private _Hashtable_ebo_helper< 0, _Equal>  { 
# 1567
typedef _Key key_type; 
# 1568
typedef _Value value_type; 
# 1569
typedef _Equal key_equal; 
# 1570
typedef std::size_t size_type; 
# 1571
typedef std::ptrdiff_t difference_type; 
# 1573
using __traits_type = _Traits; 
# 1574
using __hash_cached = typename _Traits::__hash_cached; 
# 1576
using __hash_code_base = _Hash_code_base< _Key, _Value, _ExtractKey, _Hash, _RangeHash, _Unused, _Traits::__hash_cached::value> ; 
# 1580
using __hash_code = typename _Hash_code_base< _Key, _Value, _ExtractKey, _Hash, _RangeHash, _Unused, _Traits::__hash_cached::value> ::__hash_code; 
# 1583
private: using _EqualEBO = _Hashtable_ebo_helper< 0, _Equal> ; 
# 1586
static bool _S_equals(__hash_code, const __detail::_Hash_node_code_cache< false>  &) 
# 1587
{ return true; } 
# 1590
static bool _S_node_equals(const __detail::_Hash_node_code_cache< false>  &, const __detail::_Hash_node_code_cache< false>  &) 
# 1592
{ return true; } 
# 1595
static bool _S_equals(__hash_code __c, const __detail::_Hash_node_code_cache< true>  &__n) 
# 1596
{ return __c == (__n._M_hash_code); } 
# 1599
static bool _S_node_equals(const __detail::_Hash_node_code_cache< true>  &__lhn, const __detail::_Hash_node_code_cache< true>  &
# 1600
__rhn) 
# 1601
{ return (__lhn._M_hash_code) == (__rhn._M_hash_code); } 
# 1604
protected: _Hashtable_base() = default;
# 1606
_Hashtable_base(const _Hash &__hash, const _Equal &__eq) : __hash_code_base(__hash), _EqualEBO(__eq) 
# 1608
{ } 
# 1611
bool _M_equals(const _Key &__k, __hash_code __c, const _Hash_node_value< _Value, _Traits::__hash_cached::value>  &
# 1612
__n) const 
# 1613
{ 
# 1614
static_assert((__is_invocable< const _Equal &, const _Key &, const _Key &> {}), "key equality predicate must be invocable with two arguments of key type");
# 1617
return _S_equals(__c, __n) && _M_eq()(__k, _ExtractKey{}(__n._M_v())); 
# 1618
} 
# 1620
template< class _Kt> bool 
# 1622
_M_equals_tr(const _Kt &__k, __hash_code __c, const _Hash_node_value< _Value, _Traits::__hash_cached::value>  &
# 1624
__n) const 
# 1625
{ 
# 1626
static_assert((__is_invocable< const _Equal &, const _Kt &, const _Key &> {}), "key equality predicate must be invocable with two arguments of key type");
# 1630
return _S_equals(__c, __n) && _M_eq()(__k, _ExtractKey{}(__n._M_v())); 
# 1631
} 
# 1634
bool _M_node_equals(const _Hash_node_value< _Value, _Traits::__hash_cached::value>  &
# 1635
__lhn, const _Hash_node_value< _Value, _Traits::__hash_cached::value>  &
# 1636
__rhn) const 
# 1637
{ 
# 1638
return _S_node_equals(__lhn, __rhn) && _M_eq()(_ExtractKey{}(__lhn._M_v()), _ExtractKey{}(__rhn._M_v())); 
# 1640
} 
# 1643
void _M_swap(_Hashtable_base &__x) 
# 1644
{ 
# 1645
__hash_code_base::_M_swap(__x); 
# 1646
std::swap(_EqualEBO::_M_get(), __x._EqualEBO::_M_get()); 
# 1647
} 
# 1650
const _Equal &_M_eq() const { return _EqualEBO::_M_cget(); } 
# 1651
}; 
# 1661 "/usr/include/c++/11/bits/hashtable_policy.h" 3
template< class _Key, class _Value, class _Alloc, class 
# 1662
_ExtractKey, class _Equal, class 
# 1663
_Hash, class _RangeHash, class _Unused, class 
# 1664
_RehashPolicy, class _Traits, bool 
# 1665
_Unique_keys = _Traits::__unique_keys::value> struct _Equality; 
# 1669
template< class _Key, class _Value, class _Alloc, class 
# 1670
_ExtractKey, class _Equal, class 
# 1671
_Hash, class _RangeHash, class _Unused, class 
# 1672
_RehashPolicy, class _Traits> 
# 1673
struct _Equality< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits, true>  { 
# 1676
using __hashtable = _Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ; 
# 1681
bool _M_equal(const __hashtable &) const; 
# 1682
}; 
# 1684
template< class _Key, class _Value, class _Alloc, class 
# 1685
_ExtractKey, class _Equal, class 
# 1686
_Hash, class _RangeHash, class _Unused, class 
# 1687
_RehashPolicy, class _Traits> bool 
# 1691
_Equality< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits, true> ::_M_equal(const __hashtable &__other) const 
# 1692
{ 
# 1693
using __node_type = typename _Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::__node_type; 
# 1694
const __hashtable *__this = static_cast< const __hashtable *>(this); 
# 1695
if (__this->size() != __other.size()) { 
# 1696
return false; }  
# 1698
for (auto __itx = __this->begin(); __itx != __this->end(); ++__itx) 
# 1699
{ 
# 1700
size_t __ybkt = __other._M_bucket_index(*(__itx._M_cur)); 
# 1701
auto __prev_n = (__other._M_buckets)[__ybkt]; 
# 1702
if (!__prev_n) { 
# 1703
return false; }  
# 1705
for (__node_type *__n = (static_cast< __node_type *>(__prev_n->_M_nxt)); ; __n = __n->_M_next()) 
# 1707
{ 
# 1708
if (__n->_M_v() == (*__itx)) { 
# 1709
break; }  
# 1711
if ((!(__n->_M_nxt)) || (__other._M_bucket_index(*__n->_M_next()) != __ybkt)) { 
# 1713
return false; }  
# 1714
}  
# 1715
}  
# 1717
return true; 
# 1718
} 
# 1721
template< class _Key, class _Value, class _Alloc, class 
# 1722
_ExtractKey, class _Equal, class 
# 1723
_Hash, class _RangeHash, class _Unused, class 
# 1724
_RehashPolicy, class _Traits> 
# 1725
struct _Equality< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits, false>  { 
# 1728
using __hashtable = _Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ; 
# 1733
bool _M_equal(const __hashtable &) const; 
# 1734
}; 
# 1736
template< class _Key, class _Value, class _Alloc, class 
# 1737
_ExtractKey, class _Equal, class 
# 1738
_Hash, class _RangeHash, class _Unused, class 
# 1739
_RehashPolicy, class _Traits> bool 
# 1743
_Equality< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits, false> ::_M_equal(const __hashtable &__other) const 
# 1744
{ 
# 1745
using __node_type = typename _Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::__node_type; 
# 1746
const __hashtable *__this = static_cast< const __hashtable *>(this); 
# 1747
if (__this->size() != __other.size()) { 
# 1748
return false; }  
# 1750
for (auto __itx = __this->begin(); __itx != __this->end();) 
# 1751
{ 
# 1752
size_t __x_count = (1); 
# 1753
auto __itx_end = __itx; 
# 1754
for (++__itx_end; (__itx_end != __this->end()) && __this->key_eq()(_ExtractKey{}(*__itx), _ExtractKey{}(*__itx_end)); ++__itx_end) { 
# 1758
++__x_count; }  
# 1760
size_t __ybkt = __other._M_bucket_index(*(__itx._M_cur)); 
# 1761
auto __y_prev_n = (__other._M_buckets)[__ybkt]; 
# 1762
if (!__y_prev_n) { 
# 1763
return false; }  
# 1765
__node_type *__y_n = (static_cast< __node_type *>(__y_prev_n->_M_nxt)); 
# 1766
for (; ;) 
# 1767
{ 
# 1768
if (__this->key_eq()(_ExtractKey{}(__y_n->_M_v()), _ExtractKey{}(*__itx))) { 
# 1770
break; }  
# 1772
auto __y_ref_n = __y_n; 
# 1773
for (__y_n = __y_n->_M_next(); __y_n; __y_n = __y_n->_M_next()) { 
# 1774
if (!__other._M_node_equals(*__y_ref_n, *__y_n)) { 
# 1775
break; }  }  
# 1777
if ((!__y_n) || (__other._M_bucket_index(*__y_n) != __ybkt)) { 
# 1778
return false; }  
# 1779
}  
# 1781
typename _Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::const_iterator __ity(__y_n); 
# 1782
for (auto __ity_end = __ity; __ity_end != __other.end(); ++__ity_end) { 
# 1783
if ((--__x_count) == (0)) { 
# 1784
break; }  }  
# 1786
if (__x_count != (0)) { 
# 1787
return false; }  
# 1789
if (!std::is_permutation(__itx, __itx_end, __ity)) { 
# 1790
return false; }  
# 1792
__itx = __itx_end; 
# 1793
}  
# 1794
return true; 
# 1795
} 
# 1801
template< class _NodeAlloc> 
# 1802
struct _Hashtable_alloc : private _Hashtable_ebo_helper< 0, _NodeAlloc>  { 
# 1805
private: using __ebo_node_alloc = _Hashtable_ebo_helper< 0, _NodeAlloc> ; 
# 1807
public: using __node_type = typename _NodeAlloc::value_type; 
# 1808
using __node_alloc_type = _NodeAlloc; 
# 1810
using __node_alloc_traits = __gnu_cxx::__alloc_traits< __node_alloc_type> ; 
# 1812
using __value_alloc_traits = typename __gnu_cxx::__alloc_traits< __node_alloc_type> ::template rebind_traits< typename _NodeAlloc::value_type::value_type> ; 
# 1815
using __node_ptr = __node_type *; 
# 1816
using __node_base = __detail::_Hash_node_base; 
# 1817
using __node_base_ptr = __node_base *; 
# 1818
using __buckets_alloc_type = std::__alloc_rebind< __node_alloc_type, __detail::_Hash_node_base *> ; 
# 1820
using __buckets_alloc_traits = allocator_traits< __buckets_alloc_type> ; 
# 1821
using __buckets_ptr = __node_base_ptr *; 
# 1823
_Hashtable_alloc() = default;
# 1824
_Hashtable_alloc(const _Hashtable_alloc &) = default;
# 1825
_Hashtable_alloc(_Hashtable_alloc &&) = default;
# 1827
template< class _Alloc> 
# 1828
_Hashtable_alloc(_Alloc &&__a) : __ebo_node_alloc(std::forward< _Alloc> (__a)) 
# 1830
{ } 
# 1833
__node_alloc_type &_M_node_allocator() 
# 1834
{ return __ebo_node_alloc::_M_get(); } 
# 1837
const __node_alloc_type &_M_node_allocator() const 
# 1838
{ return __ebo_node_alloc::_M_cget(); } 
# 1841
template< class ..._Args> __node_ptr _M_allocate_node(_Args && ...__args); 
# 1847
void _M_deallocate_node(__node_ptr __n); 
# 1851
void _M_deallocate_node_ptr(__node_ptr __n); 
# 1856
void _M_deallocate_nodes(__node_ptr __n); 
# 1859
__buckets_ptr _M_allocate_buckets(std::size_t __bkt_count); 
# 1862
void _M_deallocate_buckets(__buckets_ptr, std::size_t __bkt_count); 
# 1863
}; 
# 1867
template< class _NodeAlloc> 
# 1868
template< class ..._Args> auto 
# 1870
_Hashtable_alloc< _NodeAlloc> ::_M_allocate_node(_Args &&...__args)->__node_ptr 
# 1872
{ 
# 1873
auto __nptr = __node_alloc_traits::allocate(_M_node_allocator(), 1); 
# 1874
__node_ptr __n = std::__to_address(__nptr); 
# 1875
try 
# 1876
{ 
# 1877
::new ((void *)__n) __node_type; 
# 1878
__node_alloc_traits::construct(_M_node_allocator(), __n->_M_valptr(), std::forward< _Args> (__args)...); 
# 1881
return __n; 
# 1882
} 
# 1883
catch (...) 
# 1884
{ 
# 1885
__node_alloc_traits::deallocate(_M_node_allocator(), __nptr, 1); 
# 1886
throw; 
# 1887
}  
# 1888
} 
# 1890
template< class _NodeAlloc> void 
# 1892
_Hashtable_alloc< _NodeAlloc> ::_M_deallocate_node(__node_ptr __n) 
# 1893
{ 
# 1894
__node_alloc_traits::destroy(_M_node_allocator(), __n->_M_valptr()); 
# 1895
_M_deallocate_node_ptr(__n); 
# 1896
} 
# 1898
template< class _NodeAlloc> void 
# 1900
_Hashtable_alloc< _NodeAlloc> ::_M_deallocate_node_ptr(__node_ptr __n) 
# 1901
{ 
# 1902
typedef typename __gnu_cxx::__alloc_traits< __node_alloc_type> ::pointer _Ptr; 
# 1903
auto __ptr = std::template pointer_traits< typename __gnu_cxx::__alloc_traits< __node_alloc_type> ::pointer> ::pointer_to(*__n); 
# 1904
__n->~__node_type(); 
# 1905
__node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1); 
# 1906
} 
# 1908
template< class _NodeAlloc> void 
# 1910
_Hashtable_alloc< _NodeAlloc> ::_M_deallocate_nodes(__node_ptr __n) 
# 1911
{ 
# 1912
while (__n) 
# 1913
{ 
# 1914
__node_ptr __tmp = __n; 
# 1915
__n = __n->_M_next(); 
# 1916
_M_deallocate_node(__tmp); 
# 1917
}  
# 1918
} 
# 1920
template< class _NodeAlloc> auto 
# 1922
_Hashtable_alloc< _NodeAlloc> ::_M_allocate_buckets(std::size_t __bkt_count)->__buckets_ptr 
# 1924
{ 
# 1925
__buckets_alloc_type __alloc(_M_node_allocator()); 
# 1927
auto __ptr = __buckets_alloc_traits::allocate(__alloc, __bkt_count); 
# 1928
__buckets_ptr __p = std::__to_address(__ptr); 
# 1929
__builtin_memset(__p, 0, __bkt_count * sizeof(__node_base_ptr)); 
# 1930
return __p; 
# 1931
} 
# 1933
template< class _NodeAlloc> void 
# 1936
_Hashtable_alloc< _NodeAlloc> ::_M_deallocate_buckets(__buckets_ptr __bkts, std::size_t 
# 1937
__bkt_count) 
# 1938
{ 
# 1939
typedef typename allocator_traits< __buckets_alloc_type> ::pointer _Ptr; 
# 1940
auto __ptr = std::template pointer_traits< typename allocator_traits< __buckets_alloc_type> ::pointer> ::pointer_to(*__bkts); 
# 1941
__buckets_alloc_type __alloc(_M_node_allocator()); 
# 1942
__buckets_alloc_traits::deallocate(__alloc, __ptr, __bkt_count); 
# 1943
} 
# 1946
}
# 1949
}
# 37 "/usr/include/c++/11/bits/enable_special_members.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 42
struct _Enable_default_constructor_tag { 
# 44
constexpr explicit _Enable_default_constructor_tag() = default;
# 45
}; 
# 52
template< bool _Switch, class _Tag = void> 
# 53
struct _Enable_default_constructor { 
# 55
constexpr _Enable_default_constructor() noexcept = default;
# 56
constexpr _Enable_default_constructor(const _Enable_default_constructor &) noexcept = default;
# 58
constexpr _Enable_default_constructor(_Enable_default_constructor &&) noexcept = default;
# 61
_Enable_default_constructor &operator=(const _Enable_default_constructor &) noexcept = default;
# 63
_Enable_default_constructor &operator=(_Enable_default_constructor &&) noexcept = default;
# 67
constexpr explicit _Enable_default_constructor(_Enable_default_constructor_tag) { } 
# 68
}; 
# 76
template< bool _Switch, class _Tag = void> 
# 77
struct _Enable_destructor { }; 
# 84
template< bool _Copy, bool _CopyAssignment, bool 
# 85
_Move, bool _MoveAssignment, class 
# 86
_Tag = void> 
# 87
struct _Enable_copy_move { }; 
# 96 "/usr/include/c++/11/bits/enable_special_members.h" 3
template< bool _Default, bool _Destructor, bool 
# 97
_Copy, bool _CopyAssignment, bool 
# 98
_Move, bool _MoveAssignment, class 
# 99
_Tag = void> 
# 100
struct _Enable_special_members : private _Enable_default_constructor< _Default, _Tag> , private _Enable_destructor< _Destructor, _Tag> , private _Enable_copy_move< _Copy, _CopyAssignment, _Move, _MoveAssignment, _Tag>  { 
# 106
}; 
# 110
template< class _Tag> 
# 111
struct _Enable_default_constructor< false, _Tag>  { 
# 113
constexpr _Enable_default_constructor() noexcept = delete;
# 114
constexpr _Enable_default_constructor(const _Enable_default_constructor &) noexcept = default;
# 116
constexpr _Enable_default_constructor(_Enable_default_constructor &&) noexcept = default;
# 119
_Enable_default_constructor &operator=(const _Enable_default_constructor &) noexcept = default;
# 121
_Enable_default_constructor &operator=(_Enable_default_constructor &&) noexcept = default;
# 125
constexpr explicit _Enable_default_constructor(_Enable_default_constructor_tag) { } 
# 126
}; 
# 128
template< class _Tag> 
# 129
struct _Enable_destructor< false, _Tag>  { 
# 130
~_Enable_destructor() noexcept = delete;}; 
# 132
template< class _Tag> 
# 133
struct _Enable_copy_move< false, true, true, true, _Tag>  { 
# 135
constexpr _Enable_copy_move() noexcept = default;
# 136
constexpr _Enable_copy_move(const _Enable_copy_move &) noexcept = delete;
# 137
constexpr _Enable_copy_move(_Enable_copy_move &&) noexcept = default;
# 139
_Enable_copy_move &operator=(const _Enable_copy_move &) noexcept = default;
# 141
_Enable_copy_move &operator=(_Enable_copy_move &&) noexcept = default;
# 142
}; 
# 144
template< class _Tag> 
# 145
struct _Enable_copy_move< true, false, true, true, _Tag>  { 
# 147
constexpr _Enable_copy_move() noexcept = default;
# 148
constexpr _Enable_copy_move(const _Enable_copy_move &) noexcept = default;
# 149
constexpr _Enable_copy_move(_Enable_copy_move &&) noexcept = default;
# 151
_Enable_copy_move &operator=(const _Enable_copy_move &) noexcept = delete;
# 153
_Enable_copy_move &operator=(_Enable_copy_move &&) noexcept = default;
# 154
}; 
# 156
template< class _Tag> 
# 157
struct _Enable_copy_move< false, false, true, true, _Tag>  { 
# 159
constexpr _Enable_copy_move() noexcept = default;
# 160
constexpr _Enable_copy_move(const _Enable_copy_move &) noexcept = delete;
# 161
constexpr _Enable_copy_move(_Enable_copy_move &&) noexcept = default;
# 163
_Enable_copy_move &operator=(const _Enable_copy_move &) noexcept = delete;
# 165
_Enable_copy_move &operator=(_Enable_copy_move &&) noexcept = default;
# 166
}; 
# 168
template< class _Tag> 
# 169
struct _Enable_copy_move< true, true, false, true, _Tag>  { 
# 171
constexpr _Enable_copy_move() noexcept = default;
# 172
constexpr _Enable_copy_move(const _Enable_copy_move &) noexcept = default;
# 173
constexpr _Enable_copy_move(_Enable_copy_move &&) noexcept = delete;
# 175
_Enable_copy_move &operator=(const _Enable_copy_move &) noexcept = default;
# 177
_Enable_copy_move &operator=(_Enable_copy_move &&) noexcept = default;
# 178
}; 
# 180
template< class _Tag> 
# 181
struct _Enable_copy_move< false, true, false, true, _Tag>  { 
# 183
constexpr _Enable_copy_move() noexcept = default;
# 184
constexpr _Enable_copy_move(const _Enable_copy_move &) noexcept = delete;
# 185
constexpr _Enable_copy_move(_Enable_copy_move &&) noexcept = delete;
# 187
_Enable_copy_move &operator=(const _Enable_copy_move &) noexcept = default;
# 189
_Enable_copy_move &operator=(_Enable_copy_move &&) noexcept = default;
# 190
}; 
# 192
template< class _Tag> 
# 193
struct _Enable_copy_move< true, false, false, true, _Tag>  { 
# 195
constexpr _Enable_copy_move() noexcept = default;
# 196
constexpr _Enable_copy_move(const _Enable_copy_move &) noexcept = default;
# 197
constexpr _Enable_copy_move(_Enable_copy_move &&) noexcept = delete;
# 199
_Enable_copy_move &operator=(const _Enable_copy_move &) noexcept = delete;
# 201
_Enable_copy_move &operator=(_Enable_copy_move &&) noexcept = default;
# 202
}; 
# 204
template< class _Tag> 
# 205
struct _Enable_copy_move< false, false, false, true, _Tag>  { 
# 207
constexpr _Enable_copy_move() noexcept = default;
# 208
constexpr _Enable_copy_move(const _Enable_copy_move &) noexcept = delete;
# 209
constexpr _Enable_copy_move(_Enable_copy_move &&) noexcept = delete;
# 211
_Enable_copy_move &operator=(const _Enable_copy_move &) noexcept = delete;
# 213
_Enable_copy_move &operator=(_Enable_copy_move &&) noexcept = default;
# 214
}; 
# 216
template< class _Tag> 
# 217
struct _Enable_copy_move< true, true, true, false, _Tag>  { 
# 219
constexpr _Enable_copy_move() noexcept = default;
# 220
constexpr _Enable_copy_move(const _Enable_copy_move &) noexcept = default;
# 221
constexpr _Enable_copy_move(_Enable_copy_move &&) noexcept = default;
# 223
_Enable_copy_move &operator=(const _Enable_copy_move &) noexcept = default;
# 225
_Enable_copy_move &operator=(_Enable_copy_move &&) noexcept = delete;
# 226
}; 
# 228
template< class _Tag> 
# 229
struct _Enable_copy_move< false, true, true, false, _Tag>  { 
# 231
constexpr _Enable_copy_move() noexcept = default;
# 232
constexpr _Enable_copy_move(const _Enable_copy_move &) noexcept = delete;
# 233
constexpr _Enable_copy_move(_Enable_copy_move &&) noexcept = default;
# 235
_Enable_copy_move &operator=(const _Enable_copy_move &) noexcept = default;
# 237
_Enable_copy_move &operator=(_Enable_copy_move &&) noexcept = delete;
# 238
}; 
# 240
template< class _Tag> 
# 241
struct _Enable_copy_move< true, false, true, false, _Tag>  { 
# 243
constexpr _Enable_copy_move() noexcept = default;
# 244
constexpr _Enable_copy_move(const _Enable_copy_move &) noexcept = default;
# 245
constexpr _Enable_copy_move(_Enable_copy_move &&) noexcept = default;
# 247
_Enable_copy_move &operator=(const _Enable_copy_move &) noexcept = delete;
# 249
_Enable_copy_move &operator=(_Enable_copy_move &&) noexcept = delete;
# 250
}; 
# 252
template< class _Tag> 
# 253
struct _Enable_copy_move< false, false, true, false, _Tag>  { 
# 255
constexpr _Enable_copy_move() noexcept = default;
# 256
constexpr _Enable_copy_move(const _Enable_copy_move &) noexcept = delete;
# 257
constexpr _Enable_copy_move(_Enable_copy_move &&) noexcept = default;
# 259
_Enable_copy_move &operator=(const _Enable_copy_move &) noexcept = delete;
# 261
_Enable_copy_move &operator=(_Enable_copy_move &&) noexcept = delete;
# 262
}; 
# 264
template< class _Tag> 
# 265
struct _Enable_copy_move< true, true, false, false, _Tag>  { 
# 267
constexpr _Enable_copy_move() noexcept = default;
# 268
constexpr _Enable_copy_move(const _Enable_copy_move &) noexcept = default;
# 269
constexpr _Enable_copy_move(_Enable_copy_move &&) noexcept = delete;
# 271
_Enable_copy_move &operator=(const _Enable_copy_move &) noexcept = default;
# 273
_Enable_copy_move &operator=(_Enable_copy_move &&) noexcept = delete;
# 274
}; 
# 276
template< class _Tag> 
# 277
struct _Enable_copy_move< false, true, false, false, _Tag>  { 
# 279
constexpr _Enable_copy_move() noexcept = default;
# 280
constexpr _Enable_copy_move(const _Enable_copy_move &) noexcept = delete;
# 281
constexpr _Enable_copy_move(_Enable_copy_move &&) noexcept = delete;
# 283
_Enable_copy_move &operator=(const _Enable_copy_move &) noexcept = default;
# 285
_Enable_copy_move &operator=(_Enable_copy_move &&) noexcept = delete;
# 286
}; 
# 288
template< class _Tag> 
# 289
struct _Enable_copy_move< true, false, false, false, _Tag>  { 
# 291
constexpr _Enable_copy_move() noexcept = default;
# 292
constexpr _Enable_copy_move(const _Enable_copy_move &) noexcept = default;
# 293
constexpr _Enable_copy_move(_Enable_copy_move &&) noexcept = delete;
# 295
_Enable_copy_move &operator=(const _Enable_copy_move &) noexcept = delete;
# 297
_Enable_copy_move &operator=(_Enable_copy_move &&) noexcept = delete;
# 298
}; 
# 300
template< class _Tag> 
# 301
struct _Enable_copy_move< false, false, false, false, _Tag>  { 
# 303
constexpr _Enable_copy_move() noexcept = default;
# 304
constexpr _Enable_copy_move(const _Enable_copy_move &) noexcept = delete;
# 305
constexpr _Enable_copy_move(_Enable_copy_move &&) noexcept = delete;
# 307
_Enable_copy_move &operator=(const _Enable_copy_move &) noexcept = delete;
# 309
_Enable_copy_move &operator=(_Enable_copy_move &&) noexcept = delete;
# 310
}; 
# 314
}
# 43 "/usr/include/c++/11/bits/node_handle.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 63 "/usr/include/c++/11/bits/node_handle.h" 3
template< class _Val, class _NodeAlloc> 
# 64
class _Node_handle_common { 
# 66
using _AllocTraits = allocator_traits< _NodeAlloc> ; 
# 69
public: using allocator_type = __alloc_rebind< _NodeAlloc, _Val> ; 
# 72
allocator_type get_allocator() const noexcept 
# 73
{ 
# 74
do { if (__builtin_is_constant_evaluated() && (!((bool)(!empty())))) { __builtin_unreachable(); }  } while (false); 
# 75
return (allocator_type)((_M_alloc)._M_alloc); 
# 76
} 
# 78
explicit operator bool() const noexcept { return (_M_ptr) != nullptr; } 
# 80
[[nodiscard]] bool empty() const noexcept { return (_M_ptr) == nullptr; } 
# 84
protected: constexpr _Node_handle_common() noexcept : _M_ptr() { } 
# 86
~_Node_handle_common() 
# 87
{ 
# 88
if (!empty()) { 
# 89
_M_reset(); }  
# 90
} 
# 92
_Node_handle_common(_Node_handle_common &&__nh) noexcept : _M_ptr(__nh._M_ptr) 
# 94
{ 
# 95
if (_M_ptr) { 
# 96
_M_move(std::move(__nh)); }  
# 97
} 
# 100
_Node_handle_common &operator=(_Node_handle_common &&__nh) noexcept 
# 101
{ 
# 102
if (empty()) 
# 103
{ 
# 104
if (!__nh.empty()) { 
# 105
_M_move(std::move(__nh)); }  
# 106
} else { 
# 107
if (__nh.empty()) { 
# 108
_M_reset(); } else 
# 110
{ 
# 112
_AllocTraits::destroy(*(_M_alloc), (_M_ptr)->_M_valptr()); 
# 113
_AllocTraits::deallocate(*(_M_alloc), _M_ptr, 1); 
# 115
(_M_alloc) = (__nh._M_alloc).release(); 
# 116
(_M_ptr) = (__nh._M_ptr); 
# 117
(__nh._M_ptr) = nullptr; 
# 118
}  }  
# 119
return *this; 
# 120
} 
# 122
_Node_handle_common(typename allocator_traits< _NodeAlloc> ::pointer __ptr, const _NodeAlloc &
# 123
__alloc) : _M_ptr(__ptr), _M_alloc(__alloc) 
# 125
{ 
# 126
do { if (__builtin_is_constant_evaluated() && (!((bool)(__ptr != nullptr)))) { __builtin_unreachable(); }  } while (false); 
# 127
} 
# 130
void _M_swap(_Node_handle_common &__nh) noexcept 
# 131
{ 
# 132
if (empty()) 
# 133
{ 
# 134
if (!__nh.empty()) { 
# 135
_M_move(std::move(__nh)); }  
# 136
} else { 
# 137
if (__nh.empty()) { 
# 138
__nh._M_move(std::move(*this)); } else 
# 140
{ 
# 141
using std::swap;
# 142
swap(_M_ptr, __nh._M_ptr); 
# 143
(_M_alloc).swap(__nh._M_alloc); 
# 144
}  }  
# 145
} 
# 152
private: void _M_move(_Node_handle_common &&__nh) noexcept 
# 153
{ 
# 154
::new (std::__addressof(_M_alloc)) _NodeAlloc((__nh._M_alloc).release()); 
# 155
(_M_ptr) = (__nh._M_ptr); 
# 156
(__nh._M_ptr) = nullptr; 
# 157
} 
# 163
void _M_reset() noexcept 
# 164
{ 
# 165
_NodeAlloc __alloc = (_M_alloc).release(); 
# 166
_AllocTraits::destroy(__alloc, (_M_ptr)->_M_valptr()); 
# 167
_AllocTraits::deallocate(__alloc, _M_ptr, 1); 
# 168
(_M_ptr) = nullptr; 
# 169
} 
# 172
protected: typename allocator_traits< _NodeAlloc> ::pointer _M_ptr; 
# 177
private: union _Optional_alloc { 
# 179
_Optional_alloc() { } 
# 180
~_Optional_alloc() { } 
# 182
_Optional_alloc(_Optional_alloc &&) = delete;
# 183
_Optional_alloc &operator=(_Optional_alloc &&) = delete;
# 185
_Optional_alloc(const _NodeAlloc &__alloc) noexcept : _M_alloc(__alloc) 
# 187
{ } 
# 191
void operator=(_NodeAlloc &&__alloc) noexcept 
# 192
{ 
# 193
using _ATr = _AllocTraits; 
# 194
if constexpr (_ATr::propagate_on_container_move_assignment::value) { 
# 195
(_M_alloc) = std::move(__alloc); } else { 
# 196
if constexpr (!_AllocTraits::is_always_equal::value) { 
# 197
do { if (__builtin_is_constant_evaluated() && (!((bool)((_M_alloc) == __alloc)))) { __builtin_unreachable(); }  } while (false); }  }  
# 198
} 
# 202
void swap(_Optional_alloc &__other) noexcept 
# 203
{ 
# 204
using std::swap;
# 205
if constexpr (_AllocTraits::propagate_on_container_swap::value) { 
# 206
swap(_M_alloc, __other._M_alloc); } else { 
# 207
if constexpr (!_AllocTraits::is_always_equal::value) { 
# 208
do { if (__builtin_is_constant_evaluated() && (!((bool)((_M_alloc) == (__other._M_alloc))))) { __builtin_unreachable(); }  } while (false); }  }  
# 209
} 
# 212
_NodeAlloc &operator*() noexcept { return _M_alloc; } 
# 215
_NodeAlloc release() noexcept 
# 216
{ 
# 217
_NodeAlloc __tmp = std::move(_M_alloc); 
# 218
(_M_alloc).~_NodeAlloc(); 
# 219
return __tmp; 
# 220
} 
# 222
struct _Empty { }; 
# 224
[[__no_unique_address__]] _Empty _M_empty; 
# 225
[[__no_unique_address__]] _NodeAlloc _M_alloc; 
# 226
}; 
# 228
[[__no_unique_address__]] _Optional_alloc _M_alloc; 
# 230
template< class _Key2, class _Value2, class _KeyOfValue, class 
# 231
_Compare, class _ValueAlloc> friend class _Rb_tree; 
# 235
}; 
# 238
template< class _Key, class _Value, class _NodeAlloc> 
# 239
class _Node_handle : public _Node_handle_common< _Value, _NodeAlloc>  { 
# 242
public: constexpr _Node_handle() noexcept = default;
# 243
~_Node_handle() = default;
# 244
_Node_handle(_Node_handle &&) noexcept = default;
# 247
_Node_handle &operator=(_Node_handle &&) noexcept = default;
# 249
using key_type = _Key; 
# 250
using mapped_type = typename _Value::second_type; 
# 253
key_type &key() const noexcept 
# 254
{ 
# 255
do { if (__builtin_is_constant_evaluated() && (!((bool)(!this->empty())))) { __builtin_unreachable(); }  } while (false); 
# 256
return *(_M_pkey); 
# 257
} 
# 260
mapped_type &mapped() const noexcept 
# 261
{ 
# 262
do { if (__builtin_is_constant_evaluated() && (!((bool)(!this->empty())))) { __builtin_unreachable(); }  } while (false); 
# 263
return *(_M_pmapped); 
# 264
} 
# 267
void swap(_Node_handle &__nh) noexcept 
# 268
{ 
# 269
this->_M_swap(__nh); 
# 270
using std::swap;
# 271
swap(_M_pkey, __nh._M_pkey); 
# 272
swap(_M_pmapped, __nh._M_pmapped); 
# 273
} 
# 276
friend inline void swap(_Node_handle< _Key, _Value, _NodeAlloc>  &__x, _Node_handle< _Key, _Value, _NodeAlloc>  &__y) noexcept(noexcept(__x.swap(__y))) 
# 278
{ __x.swap(__y); } 
# 281
private: using _AllocTraits = allocator_traits< _NodeAlloc> ; 
# 283
_Node_handle(typename allocator_traits< _NodeAlloc> ::pointer __ptr, const _NodeAlloc &
# 284
__alloc) : _Node_handle_common< _Value, _NodeAlloc> (__ptr, __alloc) 
# 286
{ 
# 287
if (__ptr) 
# 288
{ 
# 289
auto &__key = const_cast< _Key &>(__ptr->_M_valptr()->first); 
# 290
(_M_pkey) = _S_pointer_to(__key); 
# 291
(_M_pmapped) = _S_pointer_to((__ptr->_M_valptr()->second)); 
# 292
} else 
# 294
{ 
# 295
(_M_pkey) = nullptr; 
# 296
(_M_pmapped) = nullptr; 
# 297
}  
# 298
} 
# 300
template< class _Tp> using __pointer = std::__ptr_rebind< typename allocator_traits< _NodeAlloc> ::pointer, std::remove_reference_t< _Tp> > ; 
# 305
__pointer< _Key>  _M_pkey = nullptr; 
# 306
__pointer< typename _Value::second_type>  _M_pmapped = nullptr; 
# 308
template< class _Tp> __pointer< _Tp>  
# 310
_S_pointer_to(_Tp &__obj) 
# 311
{ return pointer_traits< __pointer< _Tp> > ::pointer_to(__obj); } 
# 314
const key_type &_M_key() const noexcept { return key(); } 
# 316
template< class _Key2, class _Value2, class _KeyOfValue, class 
# 317
_Compare, class _ValueAlloc> friend class _Rb_tree; 
# 320
template< class _Key2, class _Value2, class _ValueAlloc, class 
# 321
_ExtractKey, class _Equal, class 
# 322
_Hash, class _RangeHash, class _Unused, class 
# 323
_RehashPolicy, class _Traits> friend class _Hashtable; 
# 325
}; 
# 328
template< class _Value, class _NodeAlloc> 
# 329
class _Node_handle< _Value, _Value, _NodeAlloc>  : public _Node_handle_common< _Value, _NodeAlloc>  { 
# 333
public: constexpr _Node_handle() noexcept = default;
# 334
~_Node_handle() = default;
# 335
_Node_handle(_Node_handle &&) noexcept = default;
# 338
_Node_handle &operator=(_Node_handle &&) noexcept = default;
# 340
using value_type = _Value; 
# 343
value_type &value() const noexcept 
# 344
{ 
# 345
do { if (__builtin_is_constant_evaluated() && (!((bool)(!this->empty())))) { __builtin_unreachable(); }  } while (false); 
# 346
return *(this->_M_ptr)->_M_valptr(); 
# 347
} 
# 350
void swap(_Node_handle &__nh) noexcept 
# 351
{ this->_M_swap(__nh); } 
# 354
friend inline void swap(std::_Node_handle< _Value, _Value, _NodeAlloc>  &__x, std::_Node_handle< _Value, _Value, _NodeAlloc>  &__y) noexcept(noexcept(__x.swap(__y))) 
# 356
{ __x.swap(__y); } 
# 359
private: using _AllocTraits = allocator_traits< _NodeAlloc> ; 
# 361
_Node_handle(typename allocator_traits< _NodeAlloc> ::pointer __ptr, const _NodeAlloc &
# 362
__alloc) : _Node_handle_common< _Value, _NodeAlloc> (__ptr, __alloc) 
# 363
{ } 
# 366
const value_type &_M_key() const noexcept { return value(); } 
# 368
template< class _Key, class _Val, class _KeyOfValue, class 
# 369
_Compare, class _Alloc> friend class _Rb_tree; 
# 372
template< class _Key2, class _Value2, class _ValueAlloc, class 
# 373
_ExtractKey, class _Equal, class 
# 374
_Hash, class _RangeHash, class _Unused, class 
# 375
_RehashPolicy, class _Traits> friend class _Hashtable; 
# 377
}; 
# 380
template< class _Iterator, class _NodeHandle> 
# 381
struct _Node_insert_return { 
# 383
_Iterator position = _Iterator(); 
# 384
bool inserted = false; 
# 385
_NodeHandle node; 
# 386
}; 
# 391
}
# 41 "/usr/include/c++/11/bits/hashtable.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 46
template< class _Tp, class _Hash> using __cache_default = __not_< __and_< __is_fast_hash< _Hash> , __is_nothrow_invocable< const _Hash &, const _Tp &> > > ; 
# 56
template< class _Equal, class _Hash, class _Allocator> using _Hashtable_enable_default_ctor = _Enable_default_constructor< __and_< is_default_constructible< _Equal> , is_default_constructible< _Hash> , is_default_constructible< _Allocator> > {}, __detail::_Hash_node_base> ; 
# 176 "/usr/include/c++/11/bits/hashtable.h" 3
template< class _Key, class _Value, class _Alloc, class 
# 177
_ExtractKey, class _Equal, class 
# 178
_Hash, class _RangeHash, class _Unused, class 
# 179
_RehashPolicy, class _Traits> 
# 180
class _Hashtable : public __detail::_Hashtable_base< _Key, _Value, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _Traits> , public __detail::_Map_base< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> , public __detail::_Insert< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> , public __detail::_Rehash_base< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> , public __detail::_Equality< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> , private __detail::_Hashtable_alloc< __alloc_rebind< _Alloc, __detail::_Hash_node< _Value, _Traits::__hash_cached::value> > > , private _Hashtable_enable_default_ctor< _Equal, _Hash, _Alloc>  { 
# 201
static_assert((is_same< typename remove_cv< _Value> ::type, _Value> ::value), "unordered container must have a non-const, non-volatile value_type");
# 204
static_assert((is_same< typename _Alloc::value_type, _Value> {}), "unordered container must have the same value_type as its allocator");
# 208
using __traits_type = _Traits; 
# 209
using __hash_cached = typename _Traits::__hash_cached; 
# 210
using __constant_iterators = typename _Traits::__constant_iterators; 
# 211
using __node_type = __detail::_Hash_node< _Value, _Traits::__hash_cached::value> ; 
# 212
using __node_alloc_type = std::__alloc_rebind< _Alloc, __node_type> ; 
# 214
using __hashtable_alloc = __detail::_Hashtable_alloc< __node_alloc_type> ; 
# 216
using __node_value_type = __detail::_Hash_node_value< _Value, _Traits::__hash_cached::value> ; 
# 218
using __node_ptr = typename __detail::_Hashtable_alloc< __node_alloc_type> ::__node_ptr; 
# 219
using __value_alloc_traits = typename __detail::_Hashtable_alloc< __node_alloc_type> ::__value_alloc_traits; 
# 221
using __node_alloc_traits = typename __detail::_Hashtable_alloc< __node_alloc_type> ::__node_alloc_traits; 
# 223
using __node_base = typename __detail::_Hashtable_alloc< __node_alloc_type> ::__node_base; 
# 224
using __node_base_ptr = typename __detail::_Hashtable_alloc< __node_alloc_type> ::__node_base_ptr; 
# 225
using __buckets_ptr = typename __detail::_Hashtable_alloc< __node_alloc_type> ::__buckets_ptr; 
# 227
using __insert_base = __detail::_Insert< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ; 
# 231
using __enable_default_ctor = std::_Hashtable_enable_default_ctor< _Equal, _Hash, _Alloc> ; 
# 235
public: typedef _Key key_type; 
# 236
typedef _Value value_type; 
# 237
typedef _Alloc allocator_type; 
# 238
typedef _Equal key_equal; 
# 242
typedef typename __detail::_Hashtable_alloc< __node_alloc_type> ::__value_alloc_traits::pointer pointer; 
# 243
typedef typename __detail::_Hashtable_alloc< __node_alloc_type> ::__value_alloc_traits::const_pointer const_pointer; 
# 244
typedef value_type &reference; 
# 245
typedef const value_type &const_reference; 
# 247
using iterator = typename __detail::_Insert< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::iterator; 
# 249
using const_iterator = typename __detail::_Insert< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::const_iterator; 
# 251
using local_iterator = __detail::_Local_iterator< key_type, _Value, _ExtractKey, _Hash, _RangeHash, _Unused, _Traits::__constant_iterators::value, _Traits::__hash_cached::value> ; 
# 256
using const_local_iterator = __detail::_Local_const_iterator< key_type, _Value, _ExtractKey, _Hash, _RangeHash, _Unused, _Traits::__constant_iterators::value, _Traits::__hash_cached::value> ; 
# 262
private: using __rehash_type = _RehashPolicy; 
# 263
using __rehash_state = typename _RehashPolicy::_State; 
# 265
using __unique_keys = typename _Traits::__unique_keys; 
# 267
using __hashtable_base = __detail::_Hashtable_base< _Key, _Value, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _Traits> ; 
# 271
using __hash_code_base = typename __detail::_Hashtable_base< _Key, _Value, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _Traits> ::__hash_code_base; 
# 272
using __hash_code = typename __detail::_Hashtable_base< _Key, _Value, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _Traits> ::__hash_code; 
# 273
using __ireturn_type = typename __detail::_Insert< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::__ireturn_type; 
# 275
using __map_base = __detail::_Map_base< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ; 
# 279
using __rehash_base = __detail::_Rehash_base< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ; 
# 284
using __eq_base = __detail::_Equality< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ; 
# 288
using __reuse_or_alloc_node_gen_t = __detail::_ReuseOrAllocNode< __node_alloc_type> ; 
# 290
using __alloc_node_gen_t = __detail::_AllocNode< __node_alloc_type> ; 
# 294
struct _Scoped_node { 
# 297
_Scoped_node(__node_ptr __n, __hashtable_alloc *__h) : _M_h(__h), _M_node(__n) 
# 298
{ } 
# 301
template< class ..._Args> 
# 302
_Scoped_node(__hashtable_alloc *__h, _Args &&...__args) : _M_h(__h), _M_node(__h->_M_allocate_node(std::forward< _Args> (__args)...)) 
# 305
{ } 
# 308
~_Scoped_node() { if (_M_node) { (_M_h)->_M_deallocate_node(_M_node); }  } 
# 310
_Scoped_node(const _Scoped_node &) = delete;
# 311
_Scoped_node &operator=(const _Scoped_node &) = delete;
# 313
__hashtable_alloc *_M_h; 
# 314
__node_ptr _M_node; 
# 315
}; 
# 317
template< class _Ht> static constexpr typename conditional< is_lvalue_reference< _Ht> ::value, const value_type &, value_type &&> ::type 
# 321
__fwd_value_for(value_type &__val) noexcept 
# 322
{ return std::move(__val); } 
# 328
struct __hash_code_base_access : public __hash_code_base { 
# 329
using __detail::_Hashtable_base< _Key, _Value, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _Traits> ::__hash_code_base::_M_bucket_index;}; 
# 333
static_assert(noexcept(declval< const __hash_code_base_access &> ()._M_bucket_index(declval< const __node_value_type &> (), (std::size_t)0)), "Cache the hash code or qualify your functors involved in hash code and bucket index computation with noexcept");
# 340
static_assert((is_nothrow_default_constructible< _RangeHash> ::value), "Functor used to map hash code to bucket index must be nothrow default constructible");
# 343
static_assert(noexcept(std::declval< const _RangeHash &> ()((std::size_t)0, (std::size_t)0)), "Functor used to map hash code to bucket index must be noexcept");
# 349
static_assert((is_nothrow_default_constructible< _ExtractKey> ::value), "_ExtractKey must be nothrow default constructible");
# 351
static_assert(noexcept(std::declval< const _ExtractKey &> ()(std::declval< _Value> ())), "_ExtractKey functor must be noexcept invocable");
# 355
template< class _Keya, class _Valuea, class _Alloca, class 
# 356
_ExtractKeya, class _Equala, class 
# 357
_Hasha, class _RangeHasha, class _Unuseda, class 
# 358
_RehashPolicya, class _Traitsa, bool 
# 359
_Unique_keysa> friend struct __detail::_Map_base; 
# 362
template< class _Keya, class _Valuea, class _Alloca, class 
# 363
_ExtractKeya, class _Equala, class 
# 364
_Hasha, class _RangeHasha, class _Unuseda, class 
# 365
_RehashPolicya, class _Traitsa> friend struct __detail::_Insert_base; 
# 368
template< class _Keya, class _Valuea, class _Alloca, class 
# 369
_ExtractKeya, class _Equala, class 
# 370
_Hasha, class _RangeHasha, class _Unuseda, class 
# 371
_RehashPolicya, class _Traitsa, bool 
# 372
_Constant_iteratorsa> friend struct __detail::_Insert; 
# 375
template< class _Keya, class _Valuea, class _Alloca, class 
# 376
_ExtractKeya, class _Equala, class 
# 377
_Hasha, class _RangeHasha, class _Unuseda, class 
# 378
_RehashPolicya, class _Traitsa, bool 
# 379
_Unique_keysa> friend struct __detail::_Equality; 
# 383
public: using size_type = typename __detail::_Hashtable_base< _Key, _Value, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _Traits> ::size_type; 
# 384
using difference_type = typename __detail::_Hashtable_base< _Key, _Value, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _Traits> ::difference_type; 
# 387
using node_type = _Node_handle< _Key, _Value, __node_alloc_type> ; 
# 388
using insert_return_type = _Node_insert_return< iterator, node_type> ; 
# 392
private: __buckets_ptr _M_buckets = (&(_M_single_bucket)); 
# 393
size_type _M_bucket_count = (1); 
# 394
__node_base _M_before_begin; 
# 395
size_type _M_element_count = (0); 
# 396
_RehashPolicy _M_rehash_policy; 
# 404
__node_base_ptr _M_single_bucket = (nullptr); 
# 407
void _M_update_bbegin() 
# 408
{ 
# 409
if (_M_begin()) { 
# 410
((_M_buckets)[_M_bucket_index(*_M_begin())]) = (&(_M_before_begin)); }  
# 411
} 
# 414
void _M_update_bbegin(__node_ptr __n) 
# 415
{ 
# 416
((_M_before_begin)._M_nxt) = __n; 
# 417
_M_update_bbegin(); 
# 418
} 
# 421
bool _M_uses_single_bucket(__buckets_ptr __bkts) const 
# 422
{ return __builtin_expect(__bkts == (&(_M_single_bucket)), false); } 
# 425
bool _M_uses_single_bucket() const 
# 426
{ return _M_uses_single_bucket(_M_buckets); } 
# 429
__hashtable_alloc &_M_base_alloc() { return *this; } 
# 432
__buckets_ptr _M_allocate_buckets(size_type __bkt_count) 
# 433
{ 
# 434
if (__builtin_expect(__bkt_count == 1, false)) 
# 435
{ 
# 436
(_M_single_bucket) = nullptr; 
# 437
return &(_M_single_bucket); 
# 438
}  
# 440
return __hashtable_alloc::_M_allocate_buckets(__bkt_count); 
# 441
} 
# 444
void _M_deallocate_buckets(__buckets_ptr __bkts, size_type __bkt_count) 
# 445
{ 
# 446
if (_M_uses_single_bucket(__bkts)) { 
# 447
return; }  
# 449
__hashtable_alloc::_M_deallocate_buckets(__bkts, __bkt_count); 
# 450
} 
# 453
void _M_deallocate_buckets() 
# 454
{ _M_deallocate_buckets(_M_buckets, _M_bucket_count); } 
# 459
__node_ptr _M_bucket_begin(size_type __bkt) const; 
# 462
__node_ptr _M_begin() const 
# 463
{ return static_cast< __node_ptr>((_M_before_begin)._M_nxt); } 
# 467
template< class _Ht> void _M_assign_elements(_Ht &&); 
# 471
template< class _Ht, class _NodeGenerator> void _M_assign(_Ht &&, const _NodeGenerator &); 
# 476
void _M_move_assign(_Hashtable &&, std::true_type); 
# 479
void _M_move_assign(_Hashtable &&, std::false_type); 
# 482
void _M_reset() noexcept; 
# 484
_Hashtable(const _Hash &__h, const _Equal &__eq, const allocator_type &
# 485
__a) : __hashtable_base(__h, __eq), __enable_default_ctor(std::_Enable_default_constructor_tag{}), __hashtable_alloc((__node_alloc_type)__a) 
# 489
{ } 
# 491
template< bool _No_realloc = true> static constexpr bool 
# 493
_S_nothrow_move() 
# 494
{ 
# 500
if constexpr (_No_realloc) { 
# 501
if constexpr (is_nothrow_copy_constructible< _Hash> ()) { 
# 502
return is_nothrow_copy_constructible< _Equal> (); }  }  
# 503
return false; 
# 505
} 
# 507
_Hashtable(_Hashtable && __ht, __node_alloc_type && __a, std::true_type) noexcept(_S_nothrow_move()); 
# 511
_Hashtable(_Hashtable &&, __node_alloc_type &&, std::false_type); 
# 514
template< class _InputIterator> _Hashtable(_InputIterator __first, _InputIterator __last, size_type __bkt_count_hint, const _Hash &, const _Equal &, const allocator_type &, std::true_type __uks); 
# 520
template< class _InputIterator> _Hashtable(_InputIterator __first, _InputIterator __last, size_type __bkt_count_hint, const _Hash &, const _Equal &, const allocator_type &, std::false_type __uks); 
# 528
public: _Hashtable() = default;
# 530
_Hashtable(const _Hashtable &); 
# 532
_Hashtable(const _Hashtable &, const allocator_type &); 
# 535
explicit _Hashtable(size_type __bkt_count_hint, const _Hash & __hf = _Hash(), const key_equal & __eql = key_equal(), const allocator_type & __a = allocator_type()); 
# 541
_Hashtable(_Hashtable &&__ht) noexcept(_S_nothrow_move()) : _Hashtable(std::move(__ht), std::move(__ht._M_node_allocator()), std::true_type{}) 
# 545
{ } 
# 547
_Hashtable(_Hashtable &&__ht, const allocator_type &__a) noexcept(_S_nothrow_move< __detail::_Hashtable_alloc< __node_alloc_type> ::__node_alloc_traits::_S_always_equal()> ()) : _Hashtable(std::move(__ht), (__node_alloc_type)__a, typename __detail::_Hashtable_alloc< __node_alloc_type> ::__node_alloc_traits::is_always_equal{}) 
# 551
{ } 
# 554
explicit _Hashtable(const allocator_type &__a) : __enable_default_ctor(std::_Enable_default_constructor_tag{}), __hashtable_alloc((__node_alloc_type)__a) 
# 557
{ } 
# 559
template< class _InputIterator> 
# 560
_Hashtable(_InputIterator __f, _InputIterator __l, size_type 
# 561
__bkt_count_hint = 0, const _Hash &
# 562
__hf = _Hash(), const key_equal &
# 563
__eql = key_equal(), const allocator_type &
# 564
__a = allocator_type()) : _Hashtable(__f, __l, __bkt_count_hint, __hf, __eql, __a, __unique_keys{}) 
# 567
{ } 
# 569
_Hashtable(initializer_list< value_type>  __l, size_type 
# 570
__bkt_count_hint = 0, const _Hash &
# 571
__hf = _Hash(), const key_equal &
# 572
__eql = key_equal(), const allocator_type &
# 573
__a = allocator_type()) : _Hashtable(__l.begin(), __l.end(), __bkt_count_hint, __hf, __eql, __a, __unique_keys{}) 
# 576
{ } 
# 579
_Hashtable &operator=(const _Hashtable & __ht); 
# 582
_Hashtable &operator=(_Hashtable &&__ht) noexcept(__node_alloc_traits::_S_nothrow_move() && is_nothrow_move_assignable< _Hash> ::value && is_nothrow_move_assignable< _Equal> ::value) 
# 586
{ 
# 587
constexpr bool __move_storage = (__node_alloc_traits::_S_propagate_on_move_assign() || __node_alloc_traits::_S_always_equal()); 
# 590
_M_move_assign(std::move(__ht), std::__bool_constant< __move_storage> ()); 
# 591
return *this; 
# 592
} 
# 595
_Hashtable &operator=(initializer_list< value_type>  __l) 
# 596
{ 
# 597
__reuse_or_alloc_node_gen_t __roan(_M_begin(), *this); 
# 598
((_M_before_begin)._M_nxt) = nullptr; 
# 599
clear(); 
# 602
auto __l_bkt_count = (_M_rehash_policy)._M_bkt_for_elements(__l.size()); 
# 605
if ((_M_bucket_count) < __l_bkt_count) { 
# 606
rehash(__l_bkt_count); }  
# 608
this->_M_insert_range(__l.begin(), __l.end(), __roan, __unique_keys{}); 
# 609
return *this; 
# 610
} 
# 612
~_Hashtable() noexcept; 
# 615
void swap(_Hashtable &) noexcept(__and_< __is_nothrow_swappable< _Hash> , __is_nothrow_swappable< _Equal> > ::value); 
# 621
iterator begin() noexcept 
# 622
{ return (iterator)_M_begin(); } 
# 625
const_iterator begin() const noexcept 
# 626
{ return (const_iterator)_M_begin(); } 
# 629
iterator end() noexcept 
# 630
{ return (iterator)nullptr; } 
# 633
const_iterator end() const noexcept 
# 634
{ return (const_iterator)nullptr; } 
# 637
const_iterator cbegin() const noexcept 
# 638
{ return (const_iterator)_M_begin(); } 
# 641
const_iterator cend() const noexcept 
# 642
{ return (const_iterator)nullptr; } 
# 645
size_type size() const noexcept 
# 646
{ return _M_element_count; } 
# 648
[[__nodiscard__]] bool 
# 649
empty() const noexcept 
# 650
{ return size() == 0; } 
# 653
allocator_type get_allocator() const noexcept 
# 654
{ return (allocator_type)this->_M_node_allocator(); } 
# 657
size_type max_size() const noexcept 
# 658
{ return __node_alloc_traits::max_size(this->_M_node_allocator()); } 
# 662
key_equal key_eq() const 
# 663
{ return this->_M_eq(); } 
# 669
size_type bucket_count() const noexcept 
# 670
{ return _M_bucket_count; } 
# 673
size_type max_bucket_count() const noexcept 
# 674
{ return max_size(); } 
# 677
size_type bucket_size(size_type __bkt) const 
# 678
{ return std::distance(begin(__bkt), end(__bkt)); } 
# 681
size_type bucket(const key_type &__k) const 
# 682
{ return _M_bucket_index(this->_M_hash_code(__k)); } 
# 685
local_iterator begin(size_type __bkt) 
# 686
{ 
# 687
return local_iterator(*this, _M_bucket_begin(__bkt), __bkt, _M_bucket_count); 
# 689
} 
# 692
local_iterator end(size_type __bkt) 
# 693
{ return local_iterator(*this, nullptr, __bkt, _M_bucket_count); } 
# 696
const_local_iterator begin(size_type __bkt) const 
# 697
{ 
# 698
return const_local_iterator(*this, _M_bucket_begin(__bkt), __bkt, _M_bucket_count); 
# 700
} 
# 703
const_local_iterator end(size_type __bkt) const 
# 704
{ return const_local_iterator(*this, nullptr, __bkt, _M_bucket_count); } 
# 708
const_local_iterator cbegin(size_type __bkt) const 
# 709
{ 
# 710
return const_local_iterator(*this, _M_bucket_begin(__bkt), __bkt, _M_bucket_count); 
# 712
} 
# 715
const_local_iterator cend(size_type __bkt) const 
# 716
{ return const_local_iterator(*this, nullptr, __bkt, _M_bucket_count); } 
# 719
float load_factor() const noexcept 
# 720
{ 
# 721
return (static_cast< float>(size())) / (static_cast< float>(bucket_count())); 
# 722
} 
# 730
const _RehashPolicy &__rehash_policy() const 
# 731
{ return _M_rehash_policy; } 
# 734
void __rehash_policy(const _RehashPolicy &__pol) 
# 735
{ (_M_rehash_policy) = __pol; } 
# 739
iterator find(const key_type & __k); 
# 742
const_iterator find(const key_type & __k) const; 
# 745
size_type count(const key_type & __k) const; 
# 748
pair< iterator, iterator>  equal_range(const key_type & __k); 
# 751
pair< const_iterator, const_iterator>  equal_range(const key_type & __k) const; 
# 790 "/usr/include/c++/11/bits/hashtable.h" 3
private: size_type _M_bucket_index(const __node_value_type &__n) const noexcept 
# 791
{ return __hash_code_base::_M_bucket_index(__n, _M_bucket_count); } 
# 794
size_type _M_bucket_index(__hash_code __c) const 
# 795
{ return __hash_code_base::_M_bucket_index(__c, _M_bucket_count); } 
# 800
__node_base_ptr _M_find_before_node(size_type, const key_type &, __hash_code) const; 
# 802
template< class _Kt> __node_base_ptr _M_find_before_node_tr(size_type, const _Kt &, __hash_code) const; 
# 807
__node_ptr _M_find_node(size_type __bkt, const key_type &__key, __hash_code 
# 808
__c) const 
# 809
{ 
# 810
__node_base_ptr __before_n = _M_find_before_node(__bkt, __key, __c); 
# 811
if (__before_n) { 
# 812
return static_cast< __node_ptr>(__before_n->_M_nxt); }  
# 813
return nullptr; 
# 814
} 
# 816
template< class _Kt> __node_ptr 
# 818
_M_find_node_tr(size_type __bkt, const _Kt &__key, __hash_code 
# 819
__c) const 
# 820
{ 
# 821
auto __before_n = _M_find_before_node_tr(__bkt, __key, __c); 
# 822
if (__before_n) { 
# 823
return static_cast< __node_ptr>(__before_n->_M_nxt); }  
# 824
return nullptr; 
# 825
} 
# 829
void _M_insert_bucket_begin(size_type, __node_ptr); 
# 833
void _M_remove_bucket_begin(size_type __bkt, __node_ptr __next_n, size_type __next_bkt); 
# 838
__node_base_ptr _M_get_previous_node(size_type __bkt, __node_ptr __n); 
# 844
iterator _M_insert_unique_node(size_type __bkt, __hash_code, __node_ptr __n, size_type __n_elt = 1); 
# 850
iterator _M_insert_multi_node(__node_ptr __hint, __hash_code __code, __node_ptr __n); 
# 853
template< class ..._Args> pair< iterator, bool>  _M_emplace(std::true_type __uks, _Args && ...__args); 
# 857
template< class ..._Args> iterator 
# 859
_M_emplace(std::false_type __uks, _Args &&...__args) 
# 860
{ return _M_emplace(cend(), __uks, std::forward< _Args> (__args)...); } 
# 863
template< class ..._Args> iterator 
# 865
_M_emplace(const_iterator, std::true_type __uks, _Args &&...__args) 
# 866
{ return _M_emplace(__uks, std::forward< _Args> (__args)...).first; } 
# 868
template< class ..._Args> iterator _M_emplace(const_iterator, std::false_type __uks, _Args && ...__args); 
# 872
template< class _Arg, class _NodeGenerator> pair< iterator, bool>  _M_insert(_Arg &&, const _NodeGenerator &, std::true_type __uks); 
# 876
template< class _Arg, class _NodeGenerator> iterator 
# 878
_M_insert(_Arg &&__arg, const _NodeGenerator &__node_gen, std::false_type 
# 879
__uks) 
# 880
{ 
# 881
return _M_insert(cend(), std::forward< _Arg> (__arg), __node_gen, __uks); 
# 883
} 
# 886
template< class _Arg, class _NodeGenerator> iterator 
# 888
_M_insert(const_iterator, _Arg &&__arg, const _NodeGenerator &
# 889
__node_gen, std::true_type __uks) 
# 890
{ 
# 891
return _M_insert(std::forward< _Arg> (__arg), __node_gen, __uks).first; 
# 893
} 
# 896
template< class _Arg, class _NodeGenerator> iterator _M_insert(const_iterator, _Arg &&, const _NodeGenerator &, std::false_type __uks); 
# 902
size_type _M_erase(std::true_type __uks, const key_type &); 
# 905
size_type _M_erase(std::false_type __uks, const key_type &); 
# 908
iterator _M_erase(size_type __bkt, __node_base_ptr __prev_n, __node_ptr __n); 
# 914
public: 
# 912
template< class ..._Args> __ireturn_type 
# 914
emplace(_Args &&...__args) 
# 915
{ return _M_emplace(__unique_keys{}, std::forward< _Args> (__args)...); } 
# 917
template< class ..._Args> iterator 
# 919
emplace_hint(const_iterator __hint, _Args &&...__args) 
# 920
{ 
# 921
return _M_emplace(__hint, __unique_keys{}, std::forward< _Args> (__args)...); 
# 923
} 
# 929
iterator erase(const_iterator); 
# 933
iterator erase(iterator __it) 
# 934
{ return erase((const_iterator)__it); } 
# 937
size_type erase(const key_type &__k) 
# 938
{ return _M_erase(__unique_keys{}, __k); } 
# 941
iterator erase(const_iterator, const_iterator); 
# 944
void clear() noexcept; 
# 948
void rehash(size_type __bkt_count); 
# 956
insert_return_type _M_reinsert_node(node_type &&__nh) 
# 957
{ 
# 958
insert_return_type __ret; 
# 959
if (__nh.empty()) { 
# 960
(__ret.position) = end(); } else 
# 962
{ 
# 963
do { if (__builtin_is_constant_evaluated() && (!((bool)(get_allocator() == __nh.get_allocator())))) { __builtin_unreachable(); }  } while (false); 
# 965
const key_type &__k = __nh._M_key(); 
# 966
__hash_code __code = this->_M_hash_code(__k); 
# 967
size_type __bkt = _M_bucket_index(__code); 
# 968
if (__node_ptr __n = _M_find_node(__bkt, __k, __code)) 
# 969
{ 
# 970
(__ret.node) = std::move(__nh); 
# 971
(__ret.position) = ((iterator)__n); 
# 972
(__ret.inserted) = false; 
# 973
} else 
# 975
{ 
# 976
(__ret.position) = _M_insert_unique_node(__bkt, __code, (__nh._M_ptr)); 
# 978
(__nh._M_ptr) = nullptr; 
# 979
(__ret.inserted) = true; 
# 980
}  
# 981
}  
# 982
return __ret; 
# 983
} 
# 987
iterator _M_reinsert_node_multi(const_iterator __hint, node_type &&__nh) 
# 988
{ 
# 989
if (__nh.empty()) { 
# 990
return end(); }  
# 992
do { if (__builtin_is_constant_evaluated() && (!((bool)(get_allocator() == __nh.get_allocator())))) { __builtin_unreachable(); }  } while (false); 
# 994
const key_type &__k = __nh._M_key(); 
# 995
auto __code = this->_M_hash_code(__k); 
# 996
auto __ret = _M_insert_multi_node((__hint._M_cur), __code, (__nh._M_ptr)); 
# 998
(__nh._M_ptr) = nullptr; 
# 999
return __ret; 
# 1000
} 
# 1004
private: node_type _M_extract_node(std::size_t __bkt, __node_base_ptr __prev_n) 
# 1005
{ 
# 1006
__node_ptr __n = static_cast< __node_ptr>(__prev_n->_M_nxt); 
# 1007
if (__prev_n == ((_M_buckets)[__bkt])) { 
# 1008
_M_remove_bucket_begin(__bkt, (__n->_M_next)(), (__n->_M_nxt) ? _M_bucket_index(*(__n->_M_next)()) : 0); } else { 
# 1010
if (__n->_M_nxt) 
# 1011
{ 
# 1012
size_type __next_bkt = _M_bucket_index(*(__n->_M_next)()); 
# 1013
if (__next_bkt != __bkt) { 
# 1014
((_M_buckets)[__next_bkt]) = __prev_n; }  
# 1015
}  }  
# 1017
(__prev_n->_M_nxt) = (__n->_M_nxt); 
# 1018
(__n->_M_nxt) = nullptr; 
# 1019
--(_M_element_count); 
# 1020
return {__n, this->_M_node_allocator()}; 
# 1021
} 
# 1026
public: node_type extract(const_iterator __pos) 
# 1027
{ 
# 1028
std::size_t __bkt = _M_bucket_index(*(__pos._M_cur)); 
# 1029
return _M_extract_node(__bkt, _M_get_previous_node(__bkt, (__pos._M_cur))); 
# 1031
} 
# 1035
node_type extract(const _Key &__k) 
# 1036
{ 
# 1037
node_type __nh; 
# 1038
__hash_code __code = this->_M_hash_code(__k); 
# 1039
std::size_t __bkt = _M_bucket_index(__code); 
# 1040
if (__node_base_ptr __prev_node = _M_find_before_node(__bkt, __k, __code)) { 
# 1041
__nh = _M_extract_node(__bkt, __prev_node); }  
# 1042
return __nh; 
# 1043
} 
# 1046
template< class _Compatible_Hashtable> void 
# 1048
_M_merge_unique(_Compatible_Hashtable &__src) noexcept 
# 1049
{ 
# 1050
static_assert((is_same_v< typename _Compatible_Hashtable::node_type, node_type> ), "Node types are compatible");
# 1052
do { if (__builtin_is_constant_evaluated() && (!((bool)(get_allocator() == __src.get_allocator())))) { __builtin_unreachable(); }  } while (false); 
# 1054
auto __n_elt = __src.size(); 
# 1055
for (auto __i = __src.begin(), __end = __src.end(); __i != __end;) 
# 1056
{ 
# 1057
auto __pos = (__i++); 
# 1058
const key_type &__k = _ExtractKey{}(*__pos); 
# 1059
__hash_code __code = this->_M_hash_code(__k); 
# 1060
size_type __bkt = _M_bucket_index(__code); 
# 1061
if (_M_find_node(__bkt, __k, __code) == nullptr) 
# 1062
{ 
# 1063
auto __nh = __src.extract(__pos); 
# 1064
_M_insert_unique_node(__bkt, __code, (__nh._M_ptr), __n_elt); 
# 1065
(__nh._M_ptr) = nullptr; 
# 1066
__n_elt = 1; 
# 1067
} else { 
# 1068
if (__n_elt != 1) { 
# 1069
--__n_elt; }  }  
# 1070
}  
# 1071
} 
# 1074
template< class _Compatible_Hashtable> void 
# 1076
_M_merge_multi(_Compatible_Hashtable &__src) noexcept 
# 1077
{ 
# 1078
static_assert((is_same_v< typename _Compatible_Hashtable::node_type, node_type> ), "Node types are compatible");
# 1080
do { if (__builtin_is_constant_evaluated() && (!((bool)(get_allocator() == __src.get_allocator())))) { __builtin_unreachable(); }  } while (false); 
# 1082
this->reserve(size() + __src.size()); 
# 1083
for (auto __i = __src.begin(), __end = __src.end(); __i != __end;) { 
# 1084
_M_reinsert_node_multi(cend(), __src.extract(__i++)); }  
# 1085
} 
# 1090
private: void _M_rehash_aux(size_type __bkt_count, std::true_type __uks); 
# 1093
void _M_rehash_aux(size_type __bkt_count, std::false_type __uks); 
# 1097
void _M_rehash(size_type __bkt_count, const __rehash_state & __state); 
# 1098
}; 
# 1102
template< class _Key, class _Value, class _Alloc, class 
# 1103
_ExtractKey, class _Equal, class 
# 1104
_Hash, class _RangeHash, class _Unused, class 
# 1105
_RehashPolicy, class _Traits> auto 
# 1109
_Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::_M_bucket_begin(size_type __bkt) const->__node_ptr 
# 1111
{ 
# 1112
__node_base_ptr __n = (_M_buckets)[__bkt]; 
# 1113
return (__n) ? static_cast< __node_ptr>(__n->_M_nxt) : nullptr; 
# 1114
} 
# 1116
template< class _Key, class _Value, class _Alloc, class 
# 1117
_ExtractKey, class _Equal, class 
# 1118
_Hash, class _RangeHash, class _Unused, class 
# 1119
_RehashPolicy, class _Traits> 
# 1122
_Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::_Hashtable(size_type __bkt_count_hint, const _Hash &
# 1123
__h, const _Equal &__eq, const allocator_type &__a) : _Hashtable(__h, __eq, __a) 
# 1125
{ 
# 1126
auto __bkt_count = (_M_rehash_policy)._M_next_bkt(__bkt_count_hint); 
# 1127
if (__bkt_count > (_M_bucket_count)) 
# 1128
{ 
# 1129
(_M_buckets) = _M_allocate_buckets(__bkt_count); 
# 1130
(_M_bucket_count) = __bkt_count; 
# 1131
}  
# 1132
} 
# 1134
template< class _Key, class _Value, class _Alloc, class 
# 1135
_ExtractKey, class _Equal, class 
# 1136
_Hash, class _RangeHash, class _Unused, class 
# 1137
_RehashPolicy, class _Traits> 
# 1138
template< class _InputIterator> 
# 1141
_Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::_Hashtable(_InputIterator __f, _InputIterator __l, size_type 
# 1142
__bkt_count_hint, const _Hash &
# 1143
__h, const _Equal &__eq, const allocator_type &
# 1144
__a, std::true_type) : _Hashtable(__bkt_count_hint, __h, __eq, __a) 
# 1146
{ 
# 1147
for (; __f != __l; ++__f) { 
# 1148
this->insert(*__f); }  
# 1149
} 
# 1151
template< class _Key, class _Value, class _Alloc, class 
# 1152
_ExtractKey, class _Equal, class 
# 1153
_Hash, class _RangeHash, class _Unused, class 
# 1154
_RehashPolicy, class _Traits> 
# 1155
template< class _InputIterator> 
# 1158
_Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::_Hashtable(_InputIterator __f, _InputIterator __l, size_type 
# 1159
__bkt_count_hint, const _Hash &
# 1160
__h, const _Equal &__eq, const allocator_type &
# 1161
__a, std::false_type) : _Hashtable(__h, __eq, __a) 
# 1163
{ 
# 1164
auto __nb_elems = __detail::__distance_fw(__f, __l); 
# 1165
auto __bkt_count = (_M_rehash_policy)._M_next_bkt(std::max((_M_rehash_policy)._M_bkt_for_elements(__nb_elems), __bkt_count_hint)); 
# 1170
if (__bkt_count > (_M_bucket_count)) 
# 1171
{ 
# 1172
(_M_buckets) = _M_allocate_buckets(__bkt_count); 
# 1173
(_M_bucket_count) = __bkt_count; 
# 1174
}  
# 1176
for (; __f != __l; ++__f) { 
# 1177
this->insert(*__f); }  
# 1178
} 
# 1180
template< class _Key, class _Value, class _Alloc, class 
# 1181
_ExtractKey, class _Equal, class 
# 1182
_Hash, class _RangeHash, class _Unused, class 
# 1183
_RehashPolicy, class _Traits> auto 
# 1187
_Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::operator=(const _Hashtable &__ht)->_Hashtable & 
# 1189
{ 
# 1190
if ((&__ht) == this) { 
# 1191
return *this; }  
# 1193
if (__node_alloc_traits::_S_propagate_on_copy_assign()) 
# 1194
{ 
# 1195
auto &__this_alloc = this->_M_node_allocator(); 
# 1196
auto &__that_alloc = __ht._M_node_allocator(); 
# 1197
if ((!__node_alloc_traits::_S_always_equal()) && (__this_alloc != __that_alloc)) 
# 1199
{ 
# 1201
this->_M_deallocate_nodes(_M_begin()); 
# 1202
((_M_before_begin)._M_nxt) = nullptr; 
# 1203
_M_deallocate_buckets(); 
# 1204
(_M_buckets) = nullptr; 
# 1205
std::__alloc_on_copy(__this_alloc, __that_alloc); 
# 1206
__detail::_Hashtable_base< _Key, _Value, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _Traits> ::operator=(__ht); 
# 1207
(_M_bucket_count) = (__ht._M_bucket_count); 
# 1208
(_M_element_count) = (__ht._M_element_count); 
# 1209
(_M_rehash_policy) = (__ht._M_rehash_policy); 
# 1210
__alloc_node_gen_t __alloc_node_gen(*this); 
# 1211
try 
# 1212
{ 
# 1213
_M_assign(__ht, __alloc_node_gen); 
# 1214
} 
# 1215
catch (...) 
# 1216
{ 
# 1219
_M_reset(); 
# 1220
throw; 
# 1221
}  
# 1222
return *this; 
# 1223
}  
# 1224
std::__alloc_on_copy(__this_alloc, __that_alloc); 
# 1225
}  
# 1228
_M_assign_elements(__ht); 
# 1229
return *this; 
# 1230
} 
# 1232
template< class _Key, class _Value, class _Alloc, class 
# 1233
_ExtractKey, class _Equal, class 
# 1234
_Hash, class _RangeHash, class _Unused, class 
# 1235
_RehashPolicy, class _Traits> 
# 1236
template< class _Ht> void 
# 1240
_Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::_M_assign_elements(_Ht &&__ht) 
# 1241
{ 
# 1242
__buckets_ptr __former_buckets = (nullptr); 
# 1243
std::size_t __former_bucket_count = _M_bucket_count; 
# 1244
const __rehash_state &__former_state = (_M_rehash_policy)._M_state(); 
# 1246
if ((_M_bucket_count) != (__ht._M_bucket_count)) 
# 1247
{ 
# 1248
__former_buckets = (_M_buckets); 
# 1249
(_M_buckets) = _M_allocate_buckets((__ht._M_bucket_count)); 
# 1250
(_M_bucket_count) = (__ht._M_bucket_count); 
# 1251
} else { 
# 1253
__builtin_memset(_M_buckets, 0, (_M_bucket_count) * sizeof(__node_base_ptr)); }  
# 1256
try 
# 1257
{ 
# 1258
__detail::_Hashtable_base< _Key, _Value, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _Traits> ::operator=(std::forward< _Ht> (__ht)); 
# 1259
(_M_element_count) = (__ht._M_element_count); 
# 1260
(_M_rehash_policy) = (__ht._M_rehash_policy); 
# 1261
__reuse_or_alloc_node_gen_t __roan(_M_begin(), *this); 
# 1262
((_M_before_begin)._M_nxt) = nullptr; 
# 1263
_M_assign(std::forward< _Ht> (__ht), __roan); 
# 1264
if (__former_buckets) { 
# 1265
_M_deallocate_buckets(__former_buckets, __former_bucket_count); }  
# 1266
} 
# 1267
catch (...) 
# 1268
{ 
# 1269
if (__former_buckets) 
# 1270
{ 
# 1272
_M_deallocate_buckets(); 
# 1273
(_M_rehash_policy)._M_reset(__former_state); 
# 1274
(_M_buckets) = __former_buckets; 
# 1275
(_M_bucket_count) = __former_bucket_count; 
# 1276
}  
# 1277
__builtin_memset(_M_buckets, 0, (_M_bucket_count) * sizeof(__node_base_ptr)); 
# 1279
throw; 
# 1280
}  
# 1281
} 
# 1283
template< class _Key, class _Value, class _Alloc, class 
# 1284
_ExtractKey, class _Equal, class 
# 1285
_Hash, class _RangeHash, class _Unused, class 
# 1286
_RehashPolicy, class _Traits> 
# 1287
template< class _Ht, class _NodeGenerator> void 
# 1291
_Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::_M_assign(_Ht &&__ht, const _NodeGenerator &__node_gen) 
# 1292
{ 
# 1293
__buckets_ptr __buckets = (nullptr); 
# 1294
if (!(_M_buckets)) { 
# 1295
(_M_buckets) = (__buckets = _M_allocate_buckets(_M_bucket_count)); }  
# 1297
try 
# 1298
{ 
# 1299
if (!((__ht._M_before_begin)._M_nxt)) { 
# 1300
return; }  
# 1304
__node_ptr __ht_n = __ht._M_begin(); 
# 1305
__node_ptr __this_n = __node_gen(__fwd_value_for< _Ht> ((__ht_n->_M_v)())); 
# 1307
this->_M_copy_code(*__this_n, *__ht_n); 
# 1308
_M_update_bbegin(__this_n); 
# 1311
__node_ptr __prev_n = __this_n; 
# 1312
for (__ht_n = (__ht_n->_M_next)(); __ht_n; __ht_n = (__ht_n->_M_next)()) 
# 1313
{ 
# 1314
__this_n = __node_gen(__fwd_value_for< _Ht> ((__ht_n->_M_v)())); 
# 1315
(__prev_n->_M_nxt) = __this_n; 
# 1316
this->_M_copy_code(*__this_n, *__ht_n); 
# 1317
size_type __bkt = _M_bucket_index(*__this_n); 
# 1318
if (!((_M_buckets)[__bkt])) { 
# 1319
((_M_buckets)[__bkt]) = __prev_n; }  
# 1320
__prev_n = __this_n; 
# 1321
}  
# 1322
} 
# 1323
catch (...) 
# 1324
{ 
# 1325
clear(); 
# 1326
if (__buckets) { 
# 1327
_M_deallocate_buckets(); }  
# 1328
throw; 
# 1329
}  
# 1330
} 
# 1332
template< class _Key, class _Value, class _Alloc, class 
# 1333
_ExtractKey, class _Equal, class 
# 1334
_Hash, class _RangeHash, class _Unused, class 
# 1335
_RehashPolicy, class _Traits> void 
# 1339
_Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::_M_reset() noexcept 
# 1340
{ 
# 1341
(_M_rehash_policy)._M_reset(); 
# 1342
(_M_bucket_count) = 1; 
# 1343
(_M_single_bucket) = nullptr; 
# 1344
(_M_buckets) = (&(_M_single_bucket)); 
# 1345
((_M_before_begin)._M_nxt) = nullptr; 
# 1346
(_M_element_count) = 0; 
# 1347
} 
# 1349
template< class _Key, class _Value, class _Alloc, class 
# 1350
_ExtractKey, class _Equal, class 
# 1351
_Hash, class _RangeHash, class _Unused, class 
# 1352
_RehashPolicy, class _Traits> void 
# 1356
_Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::_M_move_assign(_Hashtable &&__ht, std::true_type) 
# 1357
{ 
# 1358
if (__builtin_expect(std::__addressof(__ht) == this, false)) { 
# 1359
return; }  
# 1361
this->_M_deallocate_nodes(_M_begin()); 
# 1362
_M_deallocate_buckets(); 
# 1363
__detail::_Hashtable_base< _Key, _Value, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _Traits> ::operator=(std::move(__ht)); 
# 1364
(_M_rehash_policy) = (__ht._M_rehash_policy); 
# 1365
if (!__ht._M_uses_single_bucket()) { 
# 1366
(_M_buckets) = (__ht._M_buckets); } else 
# 1368
{ 
# 1369
(_M_buckets) = (&(_M_single_bucket)); 
# 1370
(_M_single_bucket) = (__ht._M_single_bucket); 
# 1371
}  
# 1373
(_M_bucket_count) = (__ht._M_bucket_count); 
# 1374
((_M_before_begin)._M_nxt) = ((__ht._M_before_begin)._M_nxt); 
# 1375
(_M_element_count) = (__ht._M_element_count); 
# 1376
std::__alloc_on_move(this->_M_node_allocator(), __ht._M_node_allocator()); 
# 1379
_M_update_bbegin(); 
# 1380
__ht._M_reset(); 
# 1381
} 
# 1383
template< class _Key, class _Value, class _Alloc, class 
# 1384
_ExtractKey, class _Equal, class 
# 1385
_Hash, class _RangeHash, class _Unused, class 
# 1386
_RehashPolicy, class _Traits> void 
# 1390
_Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::_M_move_assign(_Hashtable &&__ht, std::false_type) 
# 1391
{ 
# 1392
if (__ht._M_node_allocator() == this->_M_node_allocator()) { 
# 1393
_M_move_assign(std::move(__ht), std::true_type{}); } else 
# 1395
{ 
# 1397
_M_assign_elements(std::move(__ht)); 
# 1398
__ht.clear(); 
# 1399
}  
# 1400
} 
# 1402
template< class _Key, class _Value, class _Alloc, class 
# 1403
_ExtractKey, class _Equal, class 
# 1404
_Hash, class _RangeHash, class _Unused, class 
# 1405
_RehashPolicy, class _Traits> 
# 1408
_Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::_Hashtable(const _Hashtable &__ht) : __hashtable_base(__ht), __rehash_base(__ht), __enable_default_ctor(__ht), __map_base(__ht), __hashtable_alloc(__node_alloc_traits::_S_select_on_copy(__ht._M_node_allocator())), _M_buckets(nullptr), _M_bucket_count(__ht._M_bucket_count), _M_element_count(__ht._M_element_count), _M_rehash_policy(__ht._M_rehash_policy) 
# 1419
{ 
# 1420
__alloc_node_gen_t __alloc_node_gen(*this); 
# 1421
_M_assign(__ht, __alloc_node_gen); 
# 1422
} 
# 1424
template< class _Key, class _Value, class _Alloc, class 
# 1425
_ExtractKey, class _Equal, class 
# 1426
_Hash, class _RangeHash, class _Unused, class 
# 1427
_RehashPolicy, class _Traits> 
# 1430
_Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::_Hashtable(_Hashtable &&__ht, __node_alloc_type &&__a, std::true_type) noexcept(_S_nothrow_move()) : __hashtable_base(__ht), __rehash_base(__ht), __enable_default_ctor(__ht), __map_base(__ht), __hashtable_alloc(std::move(__a)), _M_buckets(__ht._M_buckets), _M_bucket_count(__ht._M_bucket_count), _M_before_begin(((__ht._M_before_begin)._M_nxt)), _M_element_count(__ht._M_element_count), _M_rehash_policy(__ht._M_rehash_policy) 
# 1443
{ 
# 1445
if (__ht._M_uses_single_bucket()) 
# 1446
{ 
# 1447
(_M_buckets) = (&(_M_single_bucket)); 
# 1448
(_M_single_bucket) = (__ht._M_single_bucket); 
# 1449
}  
# 1452
_M_update_bbegin(); 
# 1454
__ht._M_reset(); 
# 1455
} 
# 1457
template< class _Key, class _Value, class _Alloc, class 
# 1458
_ExtractKey, class _Equal, class 
# 1459
_Hash, class _RangeHash, class _Unused, class 
# 1460
_RehashPolicy, class _Traits> 
# 1463
_Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::_Hashtable(const _Hashtable &__ht, const allocator_type &__a) : __hashtable_base(__ht), __rehash_base(__ht), __enable_default_ctor(__ht), __map_base(__ht), __hashtable_alloc((__node_alloc_type)__a), _M_buckets(), _M_bucket_count(__ht._M_bucket_count), _M_element_count(__ht._M_element_count), _M_rehash_policy(__ht._M_rehash_policy) 
# 1473
{ 
# 1474
__alloc_node_gen_t __alloc_node_gen(*this); 
# 1475
_M_assign(__ht, __alloc_node_gen); 
# 1476
} 
# 1478
template< class _Key, class _Value, class _Alloc, class 
# 1479
_ExtractKey, class _Equal, class 
# 1480
_Hash, class _RangeHash, class _Unused, class 
# 1481
_RehashPolicy, class _Traits> 
# 1484
_Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::_Hashtable(_Hashtable &&__ht, __node_alloc_type &&__a, std::false_type) : __hashtable_base(__ht), __rehash_base(__ht), __enable_default_ctor(__ht), __map_base(__ht), __hashtable_alloc(std::move(__a)), _M_buckets(nullptr), _M_bucket_count(__ht._M_bucket_count), _M_element_count(__ht._M_element_count), _M_rehash_policy(__ht._M_rehash_policy) 
# 1495
{ 
# 1496
if (__ht._M_node_allocator() == this->_M_node_allocator()) 
# 1497
{ 
# 1498
if (__ht._M_uses_single_bucket()) 
# 1499
{ 
# 1500
(_M_buckets) = (&(_M_single_bucket)); 
# 1501
(_M_single_bucket) = (__ht._M_single_bucket); 
# 1502
} else { 
# 1504
(_M_buckets) = (__ht._M_buckets); }  
# 1508
_M_update_bbegin(__ht._M_begin()); 
# 1510
__ht._M_reset(); 
# 1511
} else 
# 1513
{ 
# 1514
__alloc_node_gen_t __alloc_gen(*this); 
# 1516
using _Fwd_Ht = typename conditional< __move_if_noexcept_cond< _Value> ::value, const _Hashtable &, _Hashtable &&> ::type; 
# 1519
_M_assign(std::forward< typename conditional< __move_if_noexcept_cond< _Value> ::value, const _Hashtable &, _Hashtable &&> ::type> (__ht), __alloc_gen); 
# 1520
__ht.clear(); 
# 1521
}  
# 1522
} 
# 1524
template< class _Key, class _Value, class _Alloc, class 
# 1525
_ExtractKey, class _Equal, class 
# 1526
_Hash, class _RangeHash, class _Unused, class 
# 1527
_RehashPolicy, class _Traits> 
# 1530
_Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::~_Hashtable() noexcept 
# 1531
{ 
# 1532
clear(); 
# 1533
_M_deallocate_buckets(); 
# 1534
} 
# 1536
template< class _Key, class _Value, class _Alloc, class 
# 1537
_ExtractKey, class _Equal, class 
# 1538
_Hash, class _RangeHash, class _Unused, class 
# 1539
_RehashPolicy, class _Traits> void 
# 1543
_Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::swap(_Hashtable &__x) noexcept(__and_< __is_nothrow_swappable< _Hash> , __is_nothrow_swappable< _Equal> > ::value) 
# 1546
{ 
# 1550
this->_M_swap(__x); 
# 1552
std::__alloc_on_swap(this->_M_node_allocator(), __x._M_node_allocator()); 
# 1553
std::swap(_M_rehash_policy, __x._M_rehash_policy); 
# 1556
if (this->_M_uses_single_bucket()) 
# 1557
{ 
# 1558
if (!__x._M_uses_single_bucket()) 
# 1559
{ 
# 1560
(_M_buckets) = (__x._M_buckets); 
# 1561
(__x._M_buckets) = (&(__x._M_single_bucket)); 
# 1562
}  
# 1563
} else { 
# 1564
if (__x._M_uses_single_bucket()) 
# 1565
{ 
# 1566
(__x._M_buckets) = (_M_buckets); 
# 1567
(_M_buckets) = (&(_M_single_bucket)); 
# 1568
} else { 
# 1570
std::swap(_M_buckets, __x._M_buckets); }  }  
# 1572
std::swap(_M_bucket_count, __x._M_bucket_count); 
# 1573
std::swap(((_M_before_begin)._M_nxt), ((__x._M_before_begin)._M_nxt)); 
# 1574
std::swap(_M_element_count, __x._M_element_count); 
# 1575
std::swap(_M_single_bucket, __x._M_single_bucket); 
# 1579
_M_update_bbegin(); 
# 1580
__x._M_update_bbegin(); 
# 1581
} 
# 1583
template< class _Key, class _Value, class _Alloc, class 
# 1584
_ExtractKey, class _Equal, class 
# 1585
_Hash, class _RangeHash, class _Unused, class 
# 1586
_RehashPolicy, class _Traits> auto 
# 1590
_Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::find(const key_type &__k)->iterator 
# 1592
{ 
# 1593
__hash_code __code = this->_M_hash_code(__k); 
# 1594
std::size_t __bkt = _M_bucket_index(__code); 
# 1595
return (iterator)_M_find_node(__bkt, __k, __code); 
# 1596
} 
# 1598
template< class _Key, class _Value, class _Alloc, class 
# 1599
_ExtractKey, class _Equal, class 
# 1600
_Hash, class _RangeHash, class _Unused, class 
# 1601
_RehashPolicy, class _Traits> auto 
# 1605
_Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::find(const key_type &__k) const->const_iterator 
# 1607
{ 
# 1608
__hash_code __code = this->_M_hash_code(__k); 
# 1609
std::size_t __bkt = _M_bucket_index(__code); 
# 1610
return (const_iterator)_M_find_node(__bkt, __k, __code); 
# 1611
} 
# 1647 "/usr/include/c++/11/bits/hashtable.h" 3
template< class _Key, class _Value, class _Alloc, class 
# 1648
_ExtractKey, class _Equal, class 
# 1649
_Hash, class _RangeHash, class _Unused, class 
# 1650
_RehashPolicy, class _Traits> auto 
# 1654
_Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::count(const key_type &__k) const->size_type 
# 1656
{ 
# 1657
auto __it = find(__k); 
# 1658
if (!(__it._M_cur)) { 
# 1659
return 0; }  
# 1661
if (__unique_keys::value) { 
# 1662
return 1; }  
# 1667
size_type __result = (1); 
# 1668
for (auto __ref = (__it++); (__it._M_cur) && this->_M_node_equals(*(__ref._M_cur), *(__it._M_cur)); ++__it) { 
# 1671
++__result; }  
# 1673
return __result; 
# 1674
} 
# 1708 "/usr/include/c++/11/bits/hashtable.h" 3
template< class _Key, class _Value, class _Alloc, class 
# 1709
_ExtractKey, class _Equal, class 
# 1710
_Hash, class _RangeHash, class _Unused, class 
# 1711
_RehashPolicy, class _Traits> auto 
# 1715
_Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::equal_range(const key_type &__k)->pair< iterator, iterator>  
# 1717
{ 
# 1718
auto __ite = find(__k); 
# 1719
if (!(__ite._M_cur)) { 
# 1720
return {__ite, __ite}; }  
# 1722
auto __beg = (__ite++); 
# 1723
if (__unique_keys::value) { 
# 1724
return {__beg, __ite}; }  
# 1729
while ((__ite._M_cur) && this->_M_node_equals(*(__beg._M_cur), *(__ite._M_cur))) { 
# 1730
++__ite; }  
# 1732
return {__beg, __ite}; 
# 1733
} 
# 1735
template< class _Key, class _Value, class _Alloc, class 
# 1736
_ExtractKey, class _Equal, class 
# 1737
_Hash, class _RangeHash, class _Unused, class 
# 1738
_RehashPolicy, class _Traits> auto 
# 1742
_Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::equal_range(const key_type &__k) const->pair< const_iterator, const_iterator>  
# 1744
{ 
# 1745
auto __ite = find(__k); 
# 1746
if (!(__ite._M_cur)) { 
# 1747
return {__ite, __ite}; }  
# 1749
auto __beg = (__ite++); 
# 1750
if (__unique_keys::value) { 
# 1751
return {__beg, __ite}; }  
# 1756
while ((__ite._M_cur) && this->_M_node_equals(*(__beg._M_cur), *(__ite._M_cur))) { 
# 1757
++__ite; }  
# 1759
return {__beg, __ite}; 
# 1760
} 
# 1822 "/usr/include/c++/11/bits/hashtable.h" 3
template< class _Key, class _Value, class _Alloc, class 
# 1823
_ExtractKey, class _Equal, class 
# 1824
_Hash, class _RangeHash, class _Unused, class 
# 1825
_RehashPolicy, class _Traits> auto 
# 1829
_Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::_M_find_before_node(size_type __bkt, const key_type &__k, __hash_code 
# 1830
__code) const->__node_base_ptr 
# 1832
{ 
# 1833
__node_base_ptr __prev_p = (_M_buckets)[__bkt]; 
# 1834
if (!__prev_p) { 
# 1835
return nullptr; }  
# 1837
for (__node_ptr __p = (static_cast< __node_ptr>(__prev_p->_M_nxt)); ; __p = (__p->_M_next)()) 
# 1839
{ 
# 1840
if (this->_M_equals(__k, __code, *__p)) { 
# 1841
return __prev_p; }  
# 1843
if ((!(__p->_M_nxt)) || (_M_bucket_index(*(__p->_M_next)()) != __bkt)) { 
# 1844
break; }  
# 1845
__prev_p = __p; 
# 1846
}  
# 1848
return nullptr; 
# 1849
} 
# 1851
template< class _Key, class _Value, class _Alloc, class 
# 1852
_ExtractKey, class _Equal, class 
# 1853
_Hash, class _RangeHash, class _Unused, class 
# 1854
_RehashPolicy, class _Traits> 
# 1855
template< class _Kt> auto 
# 1859
_Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::_M_find_before_node_tr(size_type __bkt, const _Kt &__k, __hash_code 
# 1860
__code) const->__node_base_ptr 
# 1862
{ 
# 1863
__node_base_ptr __prev_p = (_M_buckets)[__bkt]; 
# 1864
if (!__prev_p) { 
# 1865
return nullptr; }  
# 1867
for (__node_ptr __p = (static_cast< __node_ptr>(__prev_p->_M_nxt)); ; __p = (__p->_M_next)()) 
# 1869
{ 
# 1870
if (this->_M_equals_tr(__k, __code, *__p)) { 
# 1871
return __prev_p; }  
# 1873
if ((!(__p->_M_nxt)) || (_M_bucket_index(*(__p->_M_next)()) != __bkt)) { 
# 1874
break; }  
# 1875
__prev_p = __p; 
# 1876
}  
# 1878
return nullptr; 
# 1879
} 
# 1881
template< class _Key, class _Value, class _Alloc, class 
# 1882
_ExtractKey, class _Equal, class 
# 1883
_Hash, class _RangeHash, class _Unused, class 
# 1884
_RehashPolicy, class _Traits> void 
# 1888
_Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::_M_insert_bucket_begin(size_type __bkt, __node_ptr __node) 
# 1889
{ 
# 1890
if ((_M_buckets)[__bkt]) 
# 1891
{ 
# 1894
(__node->_M_nxt) = (((_M_buckets)[__bkt])->_M_nxt); 
# 1895
(((_M_buckets)[__bkt])->_M_nxt) = __node; 
# 1896
} else 
# 1898
{ 
# 1902
(__node->_M_nxt) = ((_M_before_begin)._M_nxt); 
# 1903
((_M_before_begin)._M_nxt) = __node; 
# 1905
if (__node->_M_nxt) { 
# 1908
((_M_buckets)[_M_bucket_index(*__node->_M_next())]) = __node; }  
# 1910
((_M_buckets)[__bkt]) = (&(_M_before_begin)); 
# 1911
}  
# 1912
} 
# 1914
template< class _Key, class _Value, class _Alloc, class 
# 1915
_ExtractKey, class _Equal, class 
# 1916
_Hash, class _RangeHash, class _Unused, class 
# 1917
_RehashPolicy, class _Traits> void 
# 1921
_Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::_M_remove_bucket_begin(size_type __bkt, __node_ptr __next, size_type 
# 1922
__next_bkt) 
# 1923
{ 
# 1924
if ((!__next) || (__next_bkt != __bkt)) 
# 1925
{ 
# 1928
if (__next) { 
# 1929
((_M_buckets)[__next_bkt]) = ((_M_buckets)[__bkt]); }  
# 1932
if ((&(_M_before_begin)) == ((_M_buckets)[__bkt])) { 
# 1933
((_M_before_begin)._M_nxt) = __next; }  
# 1934
((_M_buckets)[__bkt]) = nullptr; 
# 1935
}  
# 1936
} 
# 1938
template< class _Key, class _Value, class _Alloc, class 
# 1939
_ExtractKey, class _Equal, class 
# 1940
_Hash, class _RangeHash, class _Unused, class 
# 1941
_RehashPolicy, class _Traits> auto 
# 1945
_Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::_M_get_previous_node(size_type __bkt, __node_ptr __n)->__node_base_ptr 
# 1947
{ 
# 1948
__node_base_ptr __prev_n = (_M_buckets)[__bkt]; 
# 1949
while ((__prev_n->_M_nxt) != __n) { 
# 1950
__prev_n = (__prev_n->_M_nxt); }  
# 1951
return __prev_n; 
# 1952
} 
# 1954
template< class _Key, class _Value, class _Alloc, class 
# 1955
_ExtractKey, class _Equal, class 
# 1956
_Hash, class _RangeHash, class _Unused, class 
# 1957
_RehashPolicy, class _Traits> 
# 1958
template< class ..._Args> auto 
# 1962
_Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::_M_emplace(std::true_type, _Args &&...__args)->pair< iterator, bool>  
# 1964
{ 
# 1966
_Scoped_node __node{this, (std::forward< _Args> (__args))...}; 
# 1967
const key_type &__k = _ExtractKey{}((__node._M_node)->_M_v()); 
# 1968
__hash_code __code = this->_M_hash_code(__k); 
# 1969
size_type __bkt = _M_bucket_index(__code); 
# 1970
if (__node_ptr __p = _M_find_node(__bkt, __k, __code)) { 
# 1972
return std::make_pair((iterator)__p, false); }  
# 1975
auto __pos = _M_insert_unique_node(__bkt, __code, (__node._M_node)); 
# 1976
(__node._M_node) = nullptr; 
# 1977
return {__pos, true}; 
# 1978
} 
# 1980
template< class _Key, class _Value, class _Alloc, class 
# 1981
_ExtractKey, class _Equal, class 
# 1982
_Hash, class _RangeHash, class _Unused, class 
# 1983
_RehashPolicy, class _Traits> 
# 1984
template< class ..._Args> auto 
# 1988
_Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::_M_emplace(const_iterator __hint, std::false_type, _Args &&...
# 1989
__args)->iterator 
# 1991
{ 
# 1993
_Scoped_node __node{this, (std::forward< _Args> (__args))...}; 
# 1994
const key_type &__k = _ExtractKey{}((__node._M_node)->_M_v()); 
# 1996
__hash_code __code = this->_M_hash_code(__k); 
# 1997
auto __pos = _M_insert_multi_node((__hint._M_cur), __code, (__node._M_node)); 
# 1999
(__node._M_node) = nullptr; 
# 2000
return __pos; 
# 2001
} 
# 2003
template< class _Key, class _Value, class _Alloc, class 
# 2004
_ExtractKey, class _Equal, class 
# 2005
_Hash, class _RangeHash, class _Unused, class 
# 2006
_RehashPolicy, class _Traits> auto 
# 2010
_Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::_M_insert_unique_node(size_type __bkt, __hash_code __code, __node_ptr 
# 2011
__node, size_type __n_elt)->iterator 
# 2013
{ 
# 2014
const __rehash_state &__saved_state = (_M_rehash_policy)._M_state(); 
# 2015
std::pair< bool, std::size_t>  __do_rehash = (_M_rehash_policy)._M_need_rehash(_M_bucket_count, _M_element_count, __n_elt); 
# 2019
if (__do_rehash.first) 
# 2020
{ 
# 2021
_M_rehash(__do_rehash.second, __saved_state); 
# 2022
__bkt = _M_bucket_index(__code); 
# 2023
}  
# 2025
this->_M_store_code(*__node, __code); 
# 2028
_M_insert_bucket_begin(__bkt, __node); 
# 2029
++(_M_element_count); 
# 2030
return (iterator)__node; 
# 2031
} 
# 2033
template< class _Key, class _Value, class _Alloc, class 
# 2034
_ExtractKey, class _Equal, class 
# 2035
_Hash, class _RangeHash, class _Unused, class 
# 2036
_RehashPolicy, class _Traits> auto 
# 2040
_Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::_M_insert_multi_node(__node_ptr __hint, __hash_code 
# 2041
__code, __node_ptr __node)->iterator 
# 2043
{ 
# 2044
const __rehash_state &__saved_state = (_M_rehash_policy)._M_state(); 
# 2045
std::pair< bool, std::size_t>  __do_rehash = (_M_rehash_policy)._M_need_rehash(_M_bucket_count, _M_element_count, 1); 
# 2048
if (__do_rehash.first) { 
# 2049
_M_rehash(__do_rehash.second, __saved_state); }  
# 2051
this->_M_store_code(*__node, __code); 
# 2052
const key_type &__k = _ExtractKey{}(__node->_M_v()); 
# 2053
size_type __bkt = _M_bucket_index(__code); 
# 2057
__node_base_ptr __prev = (__builtin_expect(__hint != nullptr, false) && this->_M_equals(__k, __code, *__hint)) ? __hint : _M_find_before_node(__bkt, __k, __code); 
# 2063
if (__prev) 
# 2064
{ 
# 2066
(__node->_M_nxt) = (__prev->_M_nxt); 
# 2067
(__prev->_M_nxt) = __node; 
# 2068
if (__builtin_expect(__prev == __hint, false)) { 
# 2071
if ((__node->_M_nxt) && (!this->_M_equals(__k, __code, *__node->_M_next()))) 
# 2073
{ 
# 2074
size_type __next_bkt = _M_bucket_index(*__node->_M_next()); 
# 2075
if (__next_bkt != __bkt) { 
# 2076
((_M_buckets)[__next_bkt]) = __node; }  
# 2077
}  }  
# 2078
} else { 
# 2083
_M_insert_bucket_begin(__bkt, __node); }  
# 2084
++(_M_element_count); 
# 2085
return (iterator)__node; 
# 2086
} 
# 2089
template< class _Key, class _Value, class _Alloc, class 
# 2090
_ExtractKey, class _Equal, class 
# 2091
_Hash, class _RangeHash, class _Unused, class 
# 2092
_RehashPolicy, class _Traits> 
# 2093
template< class _Arg, class _NodeGenerator> auto 
# 2097
_Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::_M_insert(_Arg &&__v, const _NodeGenerator &__node_gen, std::true_type)->pair< iterator, bool>  
# 2100
{ 
# 2101
const key_type &__k = _ExtractKey{}(__v); 
# 2102
__hash_code __code = this->_M_hash_code(__k); 
# 2103
size_type __bkt = _M_bucket_index(__code); 
# 2105
if (__node_ptr __node = _M_find_node(__bkt, __k, __code)) { 
# 2106
return {(iterator)__node, false}; }  
# 2108
_Scoped_node __node{__node_gen(std::forward< _Arg> (__v)), this}; 
# 2109
auto __pos = _M_insert_unique_node(__bkt, __code, (__node._M_node)); 
# 2111
(__node._M_node) = nullptr; 
# 2112
return {__pos, true}; 
# 2113
} 
# 2116
template< class _Key, class _Value, class _Alloc, class 
# 2117
_ExtractKey, class _Equal, class 
# 2118
_Hash, class _RangeHash, class _Unused, class 
# 2119
_RehashPolicy, class _Traits> 
# 2120
template< class _Arg, class _NodeGenerator> auto 
# 2124
_Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::_M_insert(const_iterator __hint, _Arg &&__v, const _NodeGenerator &
# 2125
__node_gen, std::false_type)->iterator 
# 2128
{ 
# 2131
__hash_code __code = this->_M_hash_code(_ExtractKey{}(__v)); 
# 2134
_Scoped_node __node{__node_gen(std::forward< _Arg> (__v)), this}; 
# 2135
auto __pos = _M_insert_multi_node((__hint._M_cur), __code, (__node._M_node)); 
# 2137
(__node._M_node) = nullptr; 
# 2138
return __pos; 
# 2139
} 
# 2141
template< class _Key, class _Value, class _Alloc, class 
# 2142
_ExtractKey, class _Equal, class 
# 2143
_Hash, class _RangeHash, class _Unused, class 
# 2144
_RehashPolicy, class _Traits> auto 
# 2148
_Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::erase(const_iterator __it)->iterator 
# 2150
{ 
# 2151
__node_ptr __n = ((__it._M_cur)); 
# 2152
std::size_t __bkt = _M_bucket_index(*__n); 
# 2157
__node_base_ptr __prev_n = _M_get_previous_node(__bkt, __n); 
# 2158
return _M_erase(__bkt, __prev_n, __n); 
# 2159
} 
# 2161
template< class _Key, class _Value, class _Alloc, class 
# 2162
_ExtractKey, class _Equal, class 
# 2163
_Hash, class _RangeHash, class _Unused, class 
# 2164
_RehashPolicy, class _Traits> auto 
# 2168
_Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::_M_erase(size_type __bkt, __node_base_ptr __prev_n, __node_ptr __n)->iterator 
# 2170
{ 
# 2171
if (__prev_n == ((_M_buckets)[__bkt])) { 
# 2172
_M_remove_bucket_begin(__bkt, __n->_M_next(), (__n->_M_nxt) ? _M_bucket_index(*__n->_M_next()) : 0); } else { 
# 2174
if (__n->_M_nxt) 
# 2175
{ 
# 2176
size_type __next_bkt = _M_bucket_index(*__n->_M_next()); 
# 2177
if (__next_bkt != __bkt) { 
# 2178
((_M_buckets)[__next_bkt]) = __prev_n; }  
# 2179
}  }  
# 2181
(__prev_n->_M_nxt) = (__n->_M_nxt); 
# 2182
iterator __result(__n->_M_next()); 
# 2183
this->_M_deallocate_node(__n); 
# 2184
--(_M_element_count); 
# 2186
return __result; 
# 2187
} 
# 2189
template< class _Key, class _Value, class _Alloc, class 
# 2190
_ExtractKey, class _Equal, class 
# 2191
_Hash, class _RangeHash, class _Unused, class 
# 2192
_RehashPolicy, class _Traits> auto 
# 2196
_Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::_M_erase(std::true_type, const key_type &__k)->size_type 
# 2198
{ 
# 2199
__hash_code __code = this->_M_hash_code(__k); 
# 2200
std::size_t __bkt = _M_bucket_index(__code); 
# 2203
__node_base_ptr __prev_n = _M_find_before_node(__bkt, __k, __code); 
# 2204
if (!__prev_n) { 
# 2205
return 0; }  
# 2208
__node_ptr __n = (static_cast< __node_ptr>(__prev_n->_M_nxt)); 
# 2209
_M_erase(__bkt, __prev_n, __n); 
# 2210
return 1; 
# 2211
} 
# 2213
template< class _Key, class _Value, class _Alloc, class 
# 2214
_ExtractKey, class _Equal, class 
# 2215
_Hash, class _RangeHash, class _Unused, class 
# 2216
_RehashPolicy, class _Traits> auto 
# 2220
_Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::_M_erase(std::false_type, const key_type &__k)->size_type 
# 2222
{ 
# 2223
__hash_code __code = this->_M_hash_code(__k); 
# 2224
std::size_t __bkt = _M_bucket_index(__code); 
# 2227
__node_base_ptr __prev_n = _M_find_before_node(__bkt, __k, __code); 
# 2228
if (!__prev_n) { 
# 2229
return 0; }  
# 2237
__node_ptr __n = (static_cast< __node_ptr>(__prev_n->_M_nxt)); 
# 2238
__node_ptr __n_last = (__n->_M_next)(); 
# 2239
while (__n_last && this->_M_node_equals(*__n, *__n_last)) { 
# 2240
__n_last = (__n_last->_M_next)(); }  
# 2242
std::size_t __n_last_bkt = (__n_last) ? _M_bucket_index(*__n_last) : __bkt; 
# 2245
size_type __result = (0); 
# 2246
do 
# 2247
{ 
# 2248
__node_ptr __p = (__n->_M_next)(); 
# 2249
this->_M_deallocate_node(__n); 
# 2250
__n = __p; 
# 2251
++__result; 
# 2252
} 
# 2253
while (__n != __n_last); 
# 2255
(_M_element_count) -= __result; 
# 2256
if (__prev_n == ((_M_buckets)[__bkt])) { 
# 2257
_M_remove_bucket_begin(__bkt, __n_last, __n_last_bkt); } else { 
# 2258
if (__n_last_bkt != __bkt) { 
# 2259
((_M_buckets)[__n_last_bkt]) = __prev_n; }  }  
# 2260
(__prev_n->_M_nxt) = __n_last; 
# 2261
return __result; 
# 2262
} 
# 2264
template< class _Key, class _Value, class _Alloc, class 
# 2265
_ExtractKey, class _Equal, class 
# 2266
_Hash, class _RangeHash, class _Unused, class 
# 2267
_RehashPolicy, class _Traits> auto 
# 2271
_Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::erase(const_iterator __first, const_iterator __last)->iterator 
# 2273
{ 
# 2274
__node_ptr __n = ((__first._M_cur)); 
# 2275
__node_ptr __last_n = ((__last._M_cur)); 
# 2276
if (__n == __last_n) { 
# 2277
return (iterator)__n; }  
# 2279
std::size_t __bkt = _M_bucket_index(*__n); 
# 2281
__node_base_ptr __prev_n = _M_get_previous_node(__bkt, __n); 
# 2282
bool __is_bucket_begin = __n == _M_bucket_begin(__bkt); 
# 2283
std::size_t __n_bkt = __bkt; 
# 2284
for (; ;) 
# 2285
{ 
# 2286
do 
# 2287
{ 
# 2288
__node_ptr __tmp = __n; 
# 2289
__n = (__n->_M_next)(); 
# 2290
this->_M_deallocate_node(__tmp); 
# 2291
--(_M_element_count); 
# 2292
if (!__n) { 
# 2293
break; }  
# 2294
__n_bkt = _M_bucket_index(*__n); 
# 2295
} 
# 2296
while ((__n != __last_n) && (__n_bkt == __bkt)); 
# 2297
if (__is_bucket_begin) { 
# 2298
_M_remove_bucket_begin(__bkt, __n, __n_bkt); }  
# 2299
if (__n == __last_n) { 
# 2300
break; }  
# 2301
__is_bucket_begin = true; 
# 2302
__bkt = __n_bkt; 
# 2303
}  
# 2305
if (__n && ((__n_bkt != __bkt) || __is_bucket_begin)) { 
# 2306
((_M_buckets)[__n_bkt]) = __prev_n; }  
# 2307
(__prev_n->_M_nxt) = __n; 
# 2308
return (iterator)__n; 
# 2309
} 
# 2311
template< class _Key, class _Value, class _Alloc, class 
# 2312
_ExtractKey, class _Equal, class 
# 2313
_Hash, class _RangeHash, class _Unused, class 
# 2314
_RehashPolicy, class _Traits> void 
# 2318
_Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::clear() noexcept 
# 2319
{ 
# 2320
this->_M_deallocate_nodes(_M_begin()); 
# 2321
__builtin_memset(_M_buckets, 0, (_M_bucket_count) * sizeof(__node_base_ptr)); 
# 2323
(_M_element_count) = 0; 
# 2324
((_M_before_begin)._M_nxt) = nullptr; 
# 2325
} 
# 2327
template< class _Key, class _Value, class _Alloc, class 
# 2328
_ExtractKey, class _Equal, class 
# 2329
_Hash, class _RangeHash, class _Unused, class 
# 2330
_RehashPolicy, class _Traits> void 
# 2334
_Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::rehash(size_type __bkt_count) 
# 2335
{ 
# 2336
const __rehash_state &__saved_state = (_M_rehash_policy)._M_state(); 
# 2337
__bkt_count = std::max((_M_rehash_policy)._M_bkt_for_elements((_M_element_count) + 1), __bkt_count); 
# 2340
__bkt_count = (_M_rehash_policy)._M_next_bkt(__bkt_count); 
# 2342
if (__bkt_count != (_M_bucket_count)) { 
# 2343
_M_rehash(__bkt_count, __saved_state); } else { 
# 2347
(_M_rehash_policy)._M_reset(__saved_state); }  
# 2348
} 
# 2350
template< class _Key, class _Value, class _Alloc, class 
# 2351
_ExtractKey, class _Equal, class 
# 2352
_Hash, class _RangeHash, class _Unused, class 
# 2353
_RehashPolicy, class _Traits> void 
# 2357
_Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::_M_rehash(size_type __bkt_count, const __rehash_state &__state) 
# 2358
{ 
# 2359
try 
# 2360
{ 
# 2361
_M_rehash_aux(__bkt_count, __unique_keys{}); 
# 2362
} 
# 2363
catch (...) 
# 2364
{ 
# 2367
(_M_rehash_policy)._M_reset(__state); 
# 2368
throw; 
# 2369
}  
# 2370
} 
# 2373
template< class _Key, class _Value, class _Alloc, class 
# 2374
_ExtractKey, class _Equal, class 
# 2375
_Hash, class _RangeHash, class _Unused, class 
# 2376
_RehashPolicy, class _Traits> void 
# 2380
_Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::_M_rehash_aux(size_type __bkt_count, std::true_type) 
# 2381
{ 
# 2382
__buckets_ptr __new_buckets = _M_allocate_buckets(__bkt_count); 
# 2383
__node_ptr __p = _M_begin(); 
# 2384
((_M_before_begin)._M_nxt) = nullptr; 
# 2385
std::size_t __bbegin_bkt = (0); 
# 2386
while (__p) 
# 2387
{ 
# 2388
__node_ptr __next = (__p->_M_next)(); 
# 2389
std::size_t __bkt = __hash_code_base::_M_bucket_index(*__p, __bkt_count); 
# 2391
if (!(__new_buckets[__bkt])) 
# 2392
{ 
# 2393
(__p->_M_nxt) = ((_M_before_begin)._M_nxt); 
# 2394
((_M_before_begin)._M_nxt) = __p; 
# 2395
(__new_buckets[__bkt]) = (&(_M_before_begin)); 
# 2396
if (__p->_M_nxt) { 
# 2397
(__new_buckets[__bbegin_bkt]) = __p; }  
# 2398
__bbegin_bkt = __bkt; 
# 2399
} else 
# 2401
{ 
# 2402
(__p->_M_nxt) = ((__new_buckets[__bkt])->_M_nxt); 
# 2403
((__new_buckets[__bkt])->_M_nxt) = __p; 
# 2404
}  
# 2406
__p = __next; 
# 2407
}  
# 2409
_M_deallocate_buckets(); 
# 2410
(_M_bucket_count) = __bkt_count; 
# 2411
(_M_buckets) = __new_buckets; 
# 2412
} 
# 2416
template< class _Key, class _Value, class _Alloc, class 
# 2417
_ExtractKey, class _Equal, class 
# 2418
_Hash, class _RangeHash, class _Unused, class 
# 2419
_RehashPolicy, class _Traits> void 
# 2423
_Hashtable< _Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> ::_M_rehash_aux(size_type __bkt_count, std::false_type) 
# 2424
{ 
# 2425
__buckets_ptr __new_buckets = _M_allocate_buckets(__bkt_count); 
# 2426
__node_ptr __p = _M_begin(); 
# 2427
((_M_before_begin)._M_nxt) = nullptr; 
# 2428
std::size_t __bbegin_bkt = (0); 
# 2429
std::size_t __prev_bkt = (0); 
# 2430
__node_ptr __prev_p = (nullptr); 
# 2431
bool __check_bucket = false; 
# 2433
while (__p) 
# 2434
{ 
# 2435
__node_ptr __next = (__p->_M_next)(); 
# 2436
std::size_t __bkt = __hash_code_base::_M_bucket_index(*__p, __bkt_count); 
# 2439
if (__prev_p && (__prev_bkt == __bkt)) 
# 2440
{ 
# 2444
(__p->_M_nxt) = (__prev_p->_M_nxt); 
# 2445
(__prev_p->_M_nxt) = __p; 
# 2452
__check_bucket = true; 
# 2453
} else 
# 2455
{ 
# 2456
if (__check_bucket) 
# 2457
{ 
# 2460
if (__prev_p->_M_nxt) 
# 2461
{ 
# 2462
std::size_t __next_bkt = __hash_code_base::_M_bucket_index(*(__prev_p->_M_next)(), __bkt_count); 
# 2465
if (__next_bkt != __prev_bkt) { 
# 2466
(__new_buckets[__next_bkt]) = __prev_p; }  
# 2467
}  
# 2468
__check_bucket = false; 
# 2469
}  
# 2471
if (!(__new_buckets[__bkt])) 
# 2472
{ 
# 2473
(__p->_M_nxt) = ((_M_before_begin)._M_nxt); 
# 2474
((_M_before_begin)._M_nxt) = __p; 
# 2475
(__new_buckets[__bkt]) = (&(_M_before_begin)); 
# 2476
if (__p->_M_nxt) { 
# 2477
(__new_buckets[__bbegin_bkt]) = __p; }  
# 2478
__bbegin_bkt = __bkt; 
# 2479
} else 
# 2481
{ 
# 2482
(__p->_M_nxt) = ((__new_buckets[__bkt])->_M_nxt); 
# 2483
((__new_buckets[__bkt])->_M_nxt) = __p; 
# 2484
}  
# 2485
}  
# 2486
__prev_p = __p; 
# 2487
__prev_bkt = __bkt; 
# 2488
__p = __next; 
# 2489
}  
# 2491
if (__check_bucket && (__prev_p->_M_nxt)) 
# 2492
{ 
# 2493
std::size_t __next_bkt = __hash_code_base::_M_bucket_index(*(__prev_p->_M_next)(), __bkt_count); 
# 2496
if (__next_bkt != __prev_bkt) { 
# 2497
(__new_buckets[__next_bkt]) = __prev_p; }  
# 2498
}  
# 2500
_M_deallocate_buckets(); 
# 2501
(_M_bucket_count) = __bkt_count; 
# 2502
(_M_buckets) = __new_buckets; 
# 2503
} 
# 2506
template< class , class , class > class _Hash_merge_helper { }; 
# 2511
template< class _Hash> using _RequireNotAllocatorOrIntegral = __enable_if_t< !__or_< is_integral< _Hash> , __is_allocator< _Hash> > ::value> ; 
# 2518
}
# 33 "/usr/include/c++/11/bits/unordered_map.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 39
template< bool _Cache> using __umap_traits = __detail::_Hashtable_traits< _Cache, false, true> ; 
# 42
template< class _Key, class 
# 43
_Tp, class 
# 44
_Hash = hash< _Key> , class 
# 45
_Pred = equal_to< _Key> , class 
# 46
_Alloc = allocator< pair< const _Key, _Tp> > , class 
# 47
_Tr = __umap_traits< __not_< __and_< __is_fast_hash< _Hash> , __is_nothrow_invocable< const _Hash &, const _Key &> > > ::value> > using __umap_hashtable = _Hashtable< _Key, pair< const _Key, _Tp> , _Alloc, __detail::_Select1st, _Pred, _Hash, __detail::_Mod_range_hashing, __detail::_Default_ranged_hash, __detail::_Prime_rehash_policy, _Tr> ; 
# 56
template< bool _Cache> using __ummap_traits = __detail::_Hashtable_traits< _Cache, false, false> ; 
# 59
template< class _Key, class 
# 60
_Tp, class 
# 61
_Hash = hash< _Key> , class 
# 62
_Pred = equal_to< _Key> , class 
# 63
_Alloc = allocator< pair< const _Key, _Tp> > , class 
# 64
_Tr = __ummap_traits< __not_< __and_< __is_fast_hash< _Hash> , __is_nothrow_invocable< const _Hash &, const _Key &> > > ::value> > using __ummap_hashtable = _Hashtable< _Key, pair< const _Key, _Tp> , _Alloc, __detail::_Select1st, _Pred, _Hash, __detail::_Mod_range_hashing, __detail::_Default_ranged_hash, __detail::_Prime_rehash_policy, _Tr> ; 
# 72
template< class _Key, class _Tp, class _Hash, class _Pred, class _Alloc> class unordered_multimap; 
# 98 "/usr/include/c++/11/bits/unordered_map.h" 3
template< class _Key, class _Tp, class 
# 99
_Hash = hash< _Key> , class 
# 100
_Pred = equal_to< _Key> , class 
# 101
_Alloc = allocator< pair< const _Key, _Tp> > > 
# 102
class unordered_map { 
# 104
typedef __umap_hashtable< _Key, _Tp, _Hash, _Pred, _Alloc>  _Hashtable; 
# 105
_Hashtable _M_h; 
# 111
public: typedef typename __umap_hashtable< _Key, _Tp, _Hash, _Pred, _Alloc> ::key_type key_type; 
# 112
typedef typename __umap_hashtable< _Key, _Tp, _Hash, _Pred, _Alloc> ::value_type value_type; 
# 113
typedef typename __umap_hashtable< _Key, _Tp, _Hash, _Pred, _Alloc> ::mapped_type mapped_type; 
# 114
typedef typename __umap_hashtable< _Key, _Tp, _Hash, _Pred, _Alloc> ::hasher hasher; 
# 115
typedef typename __umap_hashtable< _Key, _Tp, _Hash, _Pred, _Alloc> ::key_equal key_equal; 
# 116
typedef typename __umap_hashtable< _Key, _Tp, _Hash, _Pred, _Alloc> ::allocator_type allocator_type; 
# 121
typedef typename __umap_hashtable< _Key, _Tp, _Hash, _Pred, _Alloc> ::pointer pointer; 
# 122
typedef typename __umap_hashtable< _Key, _Tp, _Hash, _Pred, _Alloc> ::const_pointer const_pointer; 
# 123
typedef typename __umap_hashtable< _Key, _Tp, _Hash, _Pred, _Alloc> ::reference reference; 
# 124
typedef typename __umap_hashtable< _Key, _Tp, _Hash, _Pred, _Alloc> ::const_reference const_reference; 
# 125
typedef typename __umap_hashtable< _Key, _Tp, _Hash, _Pred, _Alloc> ::iterator iterator; 
# 126
typedef typename __umap_hashtable< _Key, _Tp, _Hash, _Pred, _Alloc> ::const_iterator const_iterator; 
# 127
typedef typename __umap_hashtable< _Key, _Tp, _Hash, _Pred, _Alloc> ::local_iterator local_iterator; 
# 128
typedef typename __umap_hashtable< _Key, _Tp, _Hash, _Pred, _Alloc> ::const_local_iterator const_local_iterator; 
# 129
typedef typename __umap_hashtable< _Key, _Tp, _Hash, _Pred, _Alloc> ::size_type size_type; 
# 130
typedef typename __umap_hashtable< _Key, _Tp, _Hash, _Pred, _Alloc> ::difference_type difference_type; 
# 134
using node_type = typename __umap_hashtable< _Key, _Tp, _Hash, _Pred, _Alloc> ::node_type; 
# 135
using insert_return_type = typename __umap_hashtable< _Key, _Tp, _Hash, _Pred, _Alloc> ::insert_return_type; 
# 141
unordered_map() = default;
# 151 "/usr/include/c++/11/bits/unordered_map.h" 3
explicit unordered_map(size_type __n, const hasher &
# 152
__hf = hasher(), const key_equal &
# 153
__eql = key_equal(), const allocator_type &
# 154
__a = allocator_type()) : _M_h(__n, __hf, __eql, __a) 
# 156
{ } 
# 171 "/usr/include/c++/11/bits/unordered_map.h" 3
template< class _InputIterator> 
# 172
unordered_map(_InputIterator __first, _InputIterator __last, size_type 
# 173
__n = 0, const hasher &
# 174
__hf = hasher(), const key_equal &
# 175
__eql = key_equal(), const allocator_type &
# 176
__a = allocator_type()) : _M_h(__first, __last, __n, __hf, __eql, __a) 
# 178
{ } 
# 181
unordered_map(const unordered_map &) = default;
# 184
unordered_map(unordered_map &&) = default;
# 191
explicit unordered_map(const allocator_type &__a) : _M_h(__a) 
# 193
{ } 
# 200
unordered_map(const unordered_map &__umap, const allocator_type &
# 201
__a) : _M_h(__umap._M_h, __a) 
# 203
{ } 
# 210
unordered_map(unordered_map &&__umap, const allocator_type &
# 211
__a) noexcept(noexcept((_Hashtable(std::move(__umap._M_h), __a)))) : _M_h(std::move(__umap._M_h), __a) 
# 214
{ } 
# 227 "/usr/include/c++/11/bits/unordered_map.h" 3
unordered_map(initializer_list< value_type>  __l, size_type 
# 228
__n = 0, const hasher &
# 229
__hf = hasher(), const key_equal &
# 230
__eql = key_equal(), const allocator_type &
# 231
__a = allocator_type()) : _M_h(__l, __n, __hf, __eql, __a) 
# 233
{ } 
# 235
unordered_map(size_type __n, const allocator_type &__a) : unordered_map(__n, hasher(), key_equal(), __a) 
# 237
{ } 
# 239
unordered_map(size_type __n, const hasher &__hf, const allocator_type &
# 240
__a) : unordered_map(__n, __hf, key_equal(), __a) 
# 242
{ } 
# 244
template< class _InputIterator> 
# 245
unordered_map(_InputIterator __first, _InputIterator __last, size_type 
# 246
__n, const allocator_type &
# 247
__a) : unordered_map(__first, __last, __n, hasher(), key_equal(), __a) 
# 249
{ } 
# 251
template< class _InputIterator> 
# 252
unordered_map(_InputIterator __first, _InputIterator __last, size_type 
# 253
__n, const hasher &__hf, const allocator_type &
# 254
__a) : unordered_map(__first, __last, __n, __hf, key_equal(), __a) 
# 256
{ } 
# 258
unordered_map(initializer_list< value_type>  __l, size_type 
# 259
__n, const allocator_type &
# 260
__a) : unordered_map(__l, __n, hasher(), key_equal(), __a) 
# 262
{ } 
# 264
unordered_map(initializer_list< value_type>  __l, size_type 
# 265
__n, const hasher &__hf, const allocator_type &
# 266
__a) : unordered_map(__l, __n, __hf, key_equal(), __a) 
# 268
{ } 
# 272
unordered_map &operator=(const unordered_map &) = default;
# 276
unordered_map &operator=(unordered_map &&) = default;
# 290 "/usr/include/c++/11/bits/unordered_map.h" 3
unordered_map &operator=(initializer_list< value_type>  __l) 
# 291
{ 
# 292
(_M_h) = __l; 
# 293
return *this; 
# 294
} 
# 298
allocator_type get_allocator() const noexcept 
# 299
{ return (_M_h).get_allocator(); } 
# 304
[[__nodiscard__]] bool 
# 305
empty() const noexcept 
# 306
{ return (_M_h).empty(); } 
# 310
size_type size() const noexcept 
# 311
{ return (_M_h).size(); } 
# 315
size_type max_size() const noexcept 
# 316
{ return (_M_h).max_size(); } 
# 325
iterator begin() noexcept 
# 326
{ return (_M_h).begin(); } 
# 334
const_iterator begin() const noexcept 
# 335
{ return (_M_h).begin(); } 
# 338
const_iterator cbegin() const noexcept 
# 339
{ return (_M_h).begin(); } 
# 347
iterator end() noexcept 
# 348
{ return (_M_h).end(); } 
# 356
const_iterator end() const noexcept 
# 357
{ return (_M_h).end(); } 
# 360
const_iterator cend() const noexcept 
# 361
{ return (_M_h).end(); } 
# 386 "/usr/include/c++/11/bits/unordered_map.h" 3
template< class ..._Args> pair< iterator, bool>  
# 388
emplace(_Args &&...__args) 
# 389
{ return (_M_h).emplace(std::forward< _Args> (__args)...); } 
# 417 "/usr/include/c++/11/bits/unordered_map.h" 3
template< class ..._Args> iterator 
# 419
emplace_hint(const_iterator __pos, _Args &&...__args) 
# 420
{ return (_M_h).emplace_hint(__pos, std::forward< _Args> (__args)...); } 
# 425
node_type extract(const_iterator __pos) 
# 426
{ 
# 427
do { if (__builtin_is_constant_evaluated() && (!((bool)(__pos != end())))) { __builtin_unreachable(); }  } while (false); 
# 428
return (_M_h).extract(__pos); 
# 429
} 
# 433
node_type extract(const key_type &__key) 
# 434
{ return (_M_h).extract(__key); } 
# 438
insert_return_type insert(node_type &&__nh) 
# 439
{ return (_M_h)._M_reinsert_node(std::move(__nh)); } 
# 443
iterator insert(const_iterator, node_type &&__nh) 
# 444
{ return (_M_h)._M_reinsert_node(std::move(__nh)).position; } 
# 469 "/usr/include/c++/11/bits/unordered_map.h" 3
template< class ..._Args> pair< iterator, bool>  
# 471
try_emplace(const key_type &__k, _Args &&...__args) 
# 472
{ 
# 473
return (_M_h).try_emplace(cend(), __k, std::forward< _Args> (__args)...); 
# 474
} 
# 477
template< class ..._Args> pair< iterator, bool>  
# 479
try_emplace(key_type &&__k, _Args &&...__args) 
# 480
{ 
# 481
return (_M_h).try_emplace(cend(), std::move(__k), std::forward< _Args> (__args)...); 
# 483
} 
# 513 "/usr/include/c++/11/bits/unordered_map.h" 3
template< class ..._Args> iterator 
# 515
try_emplace(const_iterator __hint, const key_type &__k, _Args &&...
# 516
__args) 
# 517
{ 
# 518
return (_M_h).try_emplace(__hint, __k, std::forward< _Args> (__args)...).first; 
# 520
} 
# 523
template< class ..._Args> iterator 
# 525
try_emplace(const_iterator __hint, key_type &&__k, _Args &&...__args) 
# 526
{ 
# 527
return (_M_h).try_emplace(__hint, std::move(__k), std::forward< _Args> (__args)...).first; 
# 529
} 
# 551 "/usr/include/c++/11/bits/unordered_map.h" 3
pair< iterator, bool>  insert(const value_type &__x) 
# 552
{ return (_M_h).insert(__x); } 
# 557
pair< iterator, bool>  insert(value_type &&__x) 
# 558
{ return (_M_h).insert(std::move(__x)); } 
# 560
template< class _Pair> __enable_if_t< is_constructible< value_type, _Pair &&> ::value, pair< iterator, bool> >  
# 563
insert(_Pair &&__x) 
# 564
{ return (_M_h).emplace(std::forward< _Pair> (__x)); } 
# 590 "/usr/include/c++/11/bits/unordered_map.h" 3
iterator insert(const_iterator __hint, const value_type &__x) 
# 591
{ return (_M_h).insert(__hint, __x); } 
# 596
iterator insert(const_iterator __hint, value_type &&__x) 
# 597
{ return (_M_h).insert(__hint, std::move(__x)); } 
# 599
template< class _Pair> __enable_if_t< is_constructible< value_type, _Pair &&> ::value, iterator>  
# 601
insert(const_iterator __hint, _Pair &&__x) 
# 602
{ return (_M_h).emplace_hint(__hint, std::forward< _Pair> (__x)); } 
# 614 "/usr/include/c++/11/bits/unordered_map.h" 3
template< class _InputIterator> void 
# 616
insert(_InputIterator __first, _InputIterator __last) 
# 617
{ (_M_h).insert(__first, __last); } 
# 627 "/usr/include/c++/11/bits/unordered_map.h" 3
void insert(initializer_list< value_type>  __l) 
# 628
{ (_M_h).insert(__l); } 
# 652 "/usr/include/c++/11/bits/unordered_map.h" 3
template< class _Obj> pair< iterator, bool>  
# 654
insert_or_assign(const key_type &__k, _Obj &&__obj) 
# 655
{ 
# 656
auto __ret = (_M_h).try_emplace(cend(), __k, std::forward< _Obj> (__obj)); 
# 658
if (!(__ret.second)) { 
# 659
((__ret.first)->second) = std::forward< _Obj> (__obj); }  
# 660
return __ret; 
# 661
} 
# 664
template< class _Obj> pair< iterator, bool>  
# 666
insert_or_assign(key_type &&__k, _Obj &&__obj) 
# 667
{ 
# 668
auto __ret = (_M_h).try_emplace(cend(), std::move(__k), std::forward< _Obj> (__obj)); 
# 670
if (!(__ret.second)) { 
# 671
((__ret.first)->second) = std::forward< _Obj> (__obj); }  
# 672
return __ret; 
# 673
} 
# 701 "/usr/include/c++/11/bits/unordered_map.h" 3
template< class _Obj> iterator 
# 703
insert_or_assign(const_iterator __hint, const key_type &__k, _Obj &&
# 704
__obj) 
# 705
{ 
# 706
auto __ret = (_M_h).try_emplace(__hint, __k, std::forward< _Obj> (__obj)); 
# 707
if (!(__ret.second)) { 
# 708
((__ret.first)->second) = std::forward< _Obj> (__obj); }  
# 709
return __ret.first; 
# 710
} 
# 713
template< class _Obj> iterator 
# 715
insert_or_assign(const_iterator __hint, key_type &&__k, _Obj &&__obj) 
# 716
{ 
# 717
auto __ret = (_M_h).try_emplace(__hint, std::move(__k), std::forward< _Obj> (__obj)); 
# 719
if (!(__ret.second)) { 
# 720
((__ret.first)->second) = std::forward< _Obj> (__obj); }  
# 721
return __ret.first; 
# 722
} 
# 740 "/usr/include/c++/11/bits/unordered_map.h" 3
iterator erase(const_iterator __position) 
# 741
{ return (_M_h).erase(__position); } 
# 745
iterator erase(iterator __position) 
# 746
{ return (_M_h).erase(__position); } 
# 762 "/usr/include/c++/11/bits/unordered_map.h" 3
size_type erase(const key_type &__x) 
# 763
{ return (_M_h).erase(__x); } 
# 780 "/usr/include/c++/11/bits/unordered_map.h" 3
iterator erase(const_iterator __first, const_iterator __last) 
# 781
{ return (_M_h).erase(__first, __last); } 
# 790
void clear() noexcept 
# 791
{ (_M_h).clear(); } 
# 804 "/usr/include/c++/11/bits/unordered_map.h" 3
void swap(unordered_map &__x) noexcept(noexcept((_M_h).swap(__x._M_h))) 
# 806
{ (_M_h).swap(__x._M_h); } 
# 809
template< class , class , class > friend class _Hash_merge_helper; 
# 812
template< class _H2, class _P2> void 
# 814
merge(unordered_map< _Key, _Tp, _H2, _P2, _Alloc>  &__source) 
# 815
{ 
# 816
using _Merge_helper = _Hash_merge_helper< unordered_map, _H2, _P2> ; 
# 817
(_M_h)._M_merge_unique(_Merge_helper::_S_get_table(__source)); 
# 818
} 
# 820
template< class _H2, class _P2> void 
# 822
merge(unordered_map< _Key, _Tp, _H2, _P2, _Alloc>  &&__source) 
# 823
{ merge(__source); } 
# 825
template< class _H2, class _P2> void 
# 827
merge(unordered_multimap< _Key, _Tp, _H2, _P2, _Alloc>  &__source) 
# 828
{ 
# 829
using _Merge_helper = _Hash_merge_helper< unordered_map, _H2, _P2> ; 
# 830
(_M_h)._M_merge_unique(_Merge_helper::_S_get_table(__source)); 
# 831
} 
# 833
template< class _H2, class _P2> void 
# 835
merge(unordered_multimap< _Key, _Tp, _H2, _P2, _Alloc>  &&__source) 
# 836
{ merge(__source); } 
# 844
hasher hash_function() const 
# 845
{ return (_M_h).hash_function(); } 
# 850
key_equal key_eq() const 
# 851
{ return (_M_h).key_eq(); } 
# 868 "/usr/include/c++/11/bits/unordered_map.h" 3
iterator find(const key_type &__x) 
# 869
{ return (_M_h).find(__x); } 
# 879 "/usr/include/c++/11/bits/unordered_map.h" 3
const_iterator find(const key_type &__x) const 
# 880
{ return (_M_h).find(__x); } 
# 901 "/usr/include/c++/11/bits/unordered_map.h" 3
size_type count(const key_type &__x) const 
# 902
{ return (_M_h).count(__x); } 
# 941 "/usr/include/c++/11/bits/unordered_map.h" 3
pair< iterator, iterator>  equal_range(const key_type &__x) 
# 942
{ return (_M_h).equal_range(__x); } 
# 953 "/usr/include/c++/11/bits/unordered_map.h" 3
pair< const_iterator, const_iterator>  equal_range(const key_type &__x) const 
# 954
{ return (_M_h).equal_range(__x); } 
# 979 "/usr/include/c++/11/bits/unordered_map.h" 3
mapped_type &operator[](const key_type &__k) 
# 980
{ return (_M_h)[__k]; } 
# 983
mapped_type &operator[](key_type &&__k) 
# 984
{ return (_M_h)[std::move(__k)]; } 
# 996 "/usr/include/c++/11/bits/unordered_map.h" 3
mapped_type &at(const key_type &__k) 
# 997
{ return (_M_h).at(__k); } 
# 1000
const mapped_type &at(const key_type &__k) const 
# 1001
{ return (_M_h).at(__k); } 
# 1008
size_type bucket_count() const noexcept 
# 1009
{ return (_M_h).bucket_count(); } 
# 1013
size_type max_bucket_count() const noexcept 
# 1014
{ return (_M_h).max_bucket_count(); } 
# 1022
size_type bucket_size(size_type __n) const 
# 1023
{ return (_M_h).bucket_size(__n); } 
# 1031
size_type bucket(const key_type &__key) const 
# 1032
{ return (_M_h).bucket(__key); } 
# 1041
local_iterator begin(size_type __n) 
# 1042
{ return (_M_h).begin(__n); } 
# 1052 "/usr/include/c++/11/bits/unordered_map.h" 3
const_local_iterator begin(size_type __n) const 
# 1053
{ return (_M_h).begin(__n); } 
# 1056
const_local_iterator cbegin(size_type __n) const 
# 1057
{ return (_M_h).cbegin(__n); } 
# 1067 "/usr/include/c++/11/bits/unordered_map.h" 3
local_iterator end(size_type __n) 
# 1068
{ return (_M_h).end(__n); } 
# 1078 "/usr/include/c++/11/bits/unordered_map.h" 3
const_local_iterator end(size_type __n) const 
# 1079
{ return (_M_h).end(__n); } 
# 1082
const_local_iterator cend(size_type __n) const 
# 1083
{ return (_M_h).cend(__n); } 
# 1090
float load_factor() const noexcept 
# 1091
{ return (_M_h).load_factor(); } 
# 1096
float max_load_factor() const noexcept 
# 1097
{ return (_M_h).max_load_factor(); } 
# 1104
void max_load_factor(float __z) 
# 1105
{ (_M_h).max_load_factor(__z); } 
# 1115 "/usr/include/c++/11/bits/unordered_map.h" 3
void rehash(size_type __n) 
# 1116
{ (_M_h).rehash(__n); } 
# 1126 "/usr/include/c++/11/bits/unordered_map.h" 3
void reserve(size_type __n) 
# 1127
{ (_M_h).reserve(__n); } 
# 1129
template< class _Key1, class _Tp1, class _Hash1, class _Pred1, class 
# 1130
_Alloc1> friend bool 
# 1129
operator==(const std::unordered_map< _Key1, _Tp1, _Hash1, _Pred1, _Alloc1>  &, const std::unordered_map< _Key1, _Tp1, _Hash1, _Pred1, _Alloc1>  &); 
# 1134
}; 
# 1138
template< class _InputIterator, class 
# 1139
_Hash = hash< __iter_key_t< _InputIterator> > , class 
# 1140
_Pred = equal_to< __iter_key_t< _InputIterator> > , class 
# 1141
_Allocator = allocator< __iter_to_alloc_t< _InputIterator> > , class 
# 1142
 = _RequireInputIter< _InputIterator> , class 
# 1143
 = _RequireNotAllocatorOrIntegral< _Hash> , class 
# 1144
 = _RequireNotAllocator< _Pred> , class 
# 1145
 = _RequireAllocator< _Allocator> > 
# 1146
unordered_map(_InputIterator, _InputIterator, unordered_map< int, int> ::size_type = (unsigned long)0UL, _Hash = _Hash(), _Pred = _Pred(), _Allocator = _Allocator())->unordered_map< __iter_key_t< _InputIterator> , __iter_val_t< _InputIterator> , _Hash, _Pred, _Allocator> ; 
# 1153
template< class _Key, class _Tp, class _Hash = hash< _Key> , class 
# 1154
_Pred = equal_to< _Key> , class 
# 1155
_Allocator = allocator< pair< const _Key, _Tp> > , class 
# 1156
 = _RequireNotAllocatorOrIntegral< _Hash> , class 
# 1157
 = _RequireNotAllocator< _Pred> , class 
# 1158
 = _RequireAllocator< _Allocator> > 
# 1159
unordered_map(initializer_list< pair< _Key, _Tp> > , unordered_map< int, int> ::size_type = (unsigned long)0UL, _Hash = _Hash(), _Pred = _Pred(), _Allocator = _Allocator())->unordered_map< _Key, _Tp, _Hash, _Pred, _Allocator> ; 
# 1164
template< class _InputIterator, class _Allocator, class 
# 1165
 = _RequireInputIter< _InputIterator> , class 
# 1166
 = _RequireAllocator< _Allocator> > 
# 1167
unordered_map(_InputIterator, _InputIterator, unordered_map< int, int> ::size_type, _Allocator)->unordered_map< __iter_key_t< _InputIterator> , __iter_val_t< _InputIterator> , hash< __iter_key_t< _InputIterator> > , equal_to< __iter_key_t< _InputIterator> > , _Allocator> ; 
# 1175
template< class _InputIterator, class _Allocator, class 
# 1176
 = _RequireInputIter< _InputIterator> , class 
# 1177
 = _RequireAllocator< _Allocator> > 
# 1178
unordered_map(_InputIterator, _InputIterator, _Allocator)->unordered_map< __iter_key_t< _InputIterator> , __iter_val_t< _InputIterator> , hash< __iter_key_t< _InputIterator> > , equal_to< __iter_key_t< _InputIterator> > , _Allocator> ; 
# 1185
template< class _InputIterator, class _Hash, class _Allocator, class 
# 1186
 = _RequireInputIter< _InputIterator> , class 
# 1187
 = _RequireNotAllocatorOrIntegral< _Hash> , class 
# 1188
 = _RequireAllocator< _Allocator> > 
# 1189
unordered_map(_InputIterator, _InputIterator, unordered_map< int, int> ::size_type, _Hash, _Allocator)->unordered_map< __iter_key_t< _InputIterator> , __iter_val_t< _InputIterator> , _Hash, equal_to< __iter_key_t< _InputIterator> > , _Allocator> ; 
# 1196
template< class _Key, class _Tp, class _Allocator, class 
# 1197
 = _RequireAllocator< _Allocator> > 
# 1198
unordered_map(initializer_list< pair< _Key, _Tp> > , unordered_map< int, int> ::size_type, _Allocator)->unordered_map< _Key, _Tp, hash< _Key> , equal_to< _Key> , _Allocator> ; 
# 1203
template< class _Key, class _Tp, class _Allocator, class 
# 1204
 = _RequireAllocator< _Allocator> > 
# 1205
unordered_map(initializer_list< pair< _Key, _Tp> > , _Allocator)->unordered_map< _Key, _Tp, hash< _Key> , equal_to< _Key> , _Allocator> ; 
# 1208
template< class _Key, class _Tp, class _Hash, class _Allocator, class 
# 1209
 = _RequireNotAllocatorOrIntegral< _Hash> , class 
# 1210
 = _RequireAllocator< _Allocator> > 
# 1211
unordered_map(initializer_list< pair< _Key, _Tp> > , unordered_map< int, int> ::size_type, _Hash, _Allocator)->unordered_map< _Key, _Tp, _Hash, equal_to< _Key> , _Allocator> ; 
# 1241 "/usr/include/c++/11/bits/unordered_map.h" 3
template< class _Key, class _Tp, class 
# 1242
_Hash = hash< _Key> , class 
# 1243
_Pred = equal_to< _Key> , class 
# 1244
_Alloc = allocator< pair< const _Key, _Tp> > > 
# 1245
class unordered_multimap { 
# 1247
typedef __ummap_hashtable< _Key, _Tp, _Hash, _Pred, _Alloc>  _Hashtable; 
# 1248
_Hashtable _M_h; 
# 1254
public: typedef typename __ummap_hashtable< _Key, _Tp, _Hash, _Pred, _Alloc> ::key_type key_type; 
# 1255
typedef typename __ummap_hashtable< _Key, _Tp, _Hash, _Pred, _Alloc> ::value_type value_type; 
# 1256
typedef typename __ummap_hashtable< _Key, _Tp, _Hash, _Pred, _Alloc> ::mapped_type mapped_type; 
# 1257
typedef typename __ummap_hashtable< _Key, _Tp, _Hash, _Pred, _Alloc> ::hasher hasher; 
# 1258
typedef typename __ummap_hashtable< _Key, _Tp, _Hash, _Pred, _Alloc> ::key_equal key_equal; 
# 1259
typedef typename __ummap_hashtable< _Key, _Tp, _Hash, _Pred, _Alloc> ::allocator_type allocator_type; 
# 1264
typedef typename __ummap_hashtable< _Key, _Tp, _Hash, _Pred, _Alloc> ::pointer pointer; 
# 1265
typedef typename __ummap_hashtable< _Key, _Tp, _Hash, _Pred, _Alloc> ::const_pointer const_pointer; 
# 1266
typedef typename __ummap_hashtable< _Key, _Tp, _Hash, _Pred, _Alloc> ::reference reference; 
# 1267
typedef typename __ummap_hashtable< _Key, _Tp, _Hash, _Pred, _Alloc> ::const_reference const_reference; 
# 1268
typedef typename __ummap_hashtable< _Key, _Tp, _Hash, _Pred, _Alloc> ::iterator iterator; 
# 1269
typedef typename __ummap_hashtable< _Key, _Tp, _Hash, _Pred, _Alloc> ::const_iterator const_iterator; 
# 1270
typedef typename __ummap_hashtable< _Key, _Tp, _Hash, _Pred, _Alloc> ::local_iterator local_iterator; 
# 1271
typedef typename __ummap_hashtable< _Key, _Tp, _Hash, _Pred, _Alloc> ::const_local_iterator const_local_iterator; 
# 1272
typedef typename __ummap_hashtable< _Key, _Tp, _Hash, _Pred, _Alloc> ::size_type size_type; 
# 1273
typedef typename __ummap_hashtable< _Key, _Tp, _Hash, _Pred, _Alloc> ::difference_type difference_type; 
# 1277
using node_type = typename __ummap_hashtable< _Key, _Tp, _Hash, _Pred, _Alloc> ::node_type; 
# 1283
unordered_multimap() = default;
# 1293 "/usr/include/c++/11/bits/unordered_map.h" 3
explicit unordered_multimap(size_type __n, const hasher &
# 1294
__hf = hasher(), const key_equal &
# 1295
__eql = key_equal(), const allocator_type &
# 1296
__a = allocator_type()) : _M_h(__n, __hf, __eql, __a) 
# 1298
{ } 
# 1313 "/usr/include/c++/11/bits/unordered_map.h" 3
template< class _InputIterator> 
# 1314
unordered_multimap(_InputIterator __first, _InputIterator __last, size_type 
# 1315
__n = 0, const hasher &
# 1316
__hf = hasher(), const key_equal &
# 1317
__eql = key_equal(), const allocator_type &
# 1318
__a = allocator_type()) : _M_h(__first, __last, __n, __hf, __eql, __a) 
# 1320
{ } 
# 1323
unordered_multimap(const unordered_multimap &) = default;
# 1326
unordered_multimap(unordered_multimap &&) = default;
# 1333
explicit unordered_multimap(const allocator_type &__a) : _M_h(__a) 
# 1335
{ } 
# 1342
unordered_multimap(const unordered_multimap &__ummap, const allocator_type &
# 1343
__a) : _M_h(__ummap._M_h, __a) 
# 1345
{ } 
# 1352
unordered_multimap(unordered_multimap &&__ummap, const allocator_type &
# 1353
__a) noexcept(noexcept((_Hashtable(std::move(__ummap._M_h), __a)))) : _M_h(std::move(__ummap._M_h), __a) 
# 1356
{ } 
# 1369 "/usr/include/c++/11/bits/unordered_map.h" 3
unordered_multimap(initializer_list< value_type>  __l, size_type 
# 1370
__n = 0, const hasher &
# 1371
__hf = hasher(), const key_equal &
# 1372
__eql = key_equal(), const allocator_type &
# 1373
__a = allocator_type()) : _M_h(__l, __n, __hf, __eql, __a) 
# 1375
{ } 
# 1377
unordered_multimap(size_type __n, const allocator_type &__a) : unordered_multimap(__n, hasher(), key_equal(), __a) 
# 1379
{ } 
# 1381
unordered_multimap(size_type __n, const hasher &__hf, const allocator_type &
# 1382
__a) : unordered_multimap(__n, __hf, key_equal(), __a) 
# 1384
{ } 
# 1386
template< class _InputIterator> 
# 1387
unordered_multimap(_InputIterator __first, _InputIterator __last, size_type 
# 1388
__n, const allocator_type &
# 1389
__a) : unordered_multimap(__first, __last, __n, hasher(), key_equal(), __a) 
# 1391
{ } 
# 1393
template< class _InputIterator> 
# 1394
unordered_multimap(_InputIterator __first, _InputIterator __last, size_type 
# 1395
__n, const hasher &__hf, const allocator_type &
# 1396
__a) : unordered_multimap(__first, __last, __n, __hf, key_equal(), __a) 
# 1398
{ } 
# 1400
unordered_multimap(initializer_list< value_type>  __l, size_type 
# 1401
__n, const allocator_type &
# 1402
__a) : unordered_multimap(__l, __n, hasher(), key_equal(), __a) 
# 1404
{ } 
# 1406
unordered_multimap(initializer_list< value_type>  __l, size_type 
# 1407
__n, const hasher &__hf, const allocator_type &
# 1408
__a) : unordered_multimap(__l, __n, __hf, key_equal(), __a) 
# 1410
{ } 
# 1414
unordered_multimap &operator=(const unordered_multimap &) = default;
# 1418
unordered_multimap &operator=(unordered_multimap &&) = default;
# 1432 "/usr/include/c++/11/bits/unordered_map.h" 3
unordered_multimap &operator=(initializer_list< value_type>  __l) 
# 1433
{ 
# 1434
(_M_h) = __l; 
# 1435
return *this; 
# 1436
} 
# 1440
allocator_type get_allocator() const noexcept 
# 1441
{ return (_M_h).get_allocator(); } 
# 1446
[[__nodiscard__]] bool 
# 1447
empty() const noexcept 
# 1448
{ return (_M_h).empty(); } 
# 1452
size_type size() const noexcept 
# 1453
{ return (_M_h).size(); } 
# 1457
size_type max_size() const noexcept 
# 1458
{ return (_M_h).max_size(); } 
# 1467
iterator begin() noexcept 
# 1468
{ return (_M_h).begin(); } 
# 1476
const_iterator begin() const noexcept 
# 1477
{ return (_M_h).begin(); } 
# 1480
const_iterator cbegin() const noexcept 
# 1481
{ return (_M_h).begin(); } 
# 1489
iterator end() noexcept 
# 1490
{ return (_M_h).end(); } 
# 1498
const_iterator end() const noexcept 
# 1499
{ return (_M_h).end(); } 
# 1502
const_iterator cend() const noexcept 
# 1503
{ return (_M_h).end(); } 
# 1523 "/usr/include/c++/11/bits/unordered_map.h" 3
template< class ..._Args> iterator 
# 1525
emplace(_Args &&...__args) 
# 1526
{ return (_M_h).emplace(std::forward< _Args> (__args)...); } 
# 1550 "/usr/include/c++/11/bits/unordered_map.h" 3
template< class ..._Args> iterator 
# 1552
emplace_hint(const_iterator __pos, _Args &&...__args) 
# 1553
{ return (_M_h).emplace_hint(__pos, std::forward< _Args> (__args)...); } 
# 1566 "/usr/include/c++/11/bits/unordered_map.h" 3
iterator insert(const value_type &__x) 
# 1567
{ return (_M_h).insert(__x); } 
# 1570
iterator insert(value_type &&__x) 
# 1571
{ return (_M_h).insert(std::move(__x)); } 
# 1573
template< class _Pair> __enable_if_t< is_constructible< value_type, _Pair &&> ::value, iterator>  
# 1575
insert(_Pair &&__x) 
# 1576
{ return (_M_h).emplace(std::forward< _Pair> (__x)); } 
# 1600 "/usr/include/c++/11/bits/unordered_map.h" 3
iterator insert(const_iterator __hint, const value_type &__x) 
# 1601
{ return (_M_h).insert(__hint, __x); } 
# 1606
iterator insert(const_iterator __hint, value_type &&__x) 
# 1607
{ return (_M_h).insert(__hint, std::move(__x)); } 
# 1609
template< class _Pair> __enable_if_t< is_constructible< value_type, _Pair &&> ::value, iterator>  
# 1611
insert(const_iterator __hint, _Pair &&__x) 
# 1612
{ return (_M_h).emplace_hint(__hint, std::forward< _Pair> (__x)); } 
# 1624 "/usr/include/c++/11/bits/unordered_map.h" 3
template< class _InputIterator> void 
# 1626
insert(_InputIterator __first, _InputIterator __last) 
# 1627
{ (_M_h).insert(__first, __last); } 
# 1638 "/usr/include/c++/11/bits/unordered_map.h" 3
void insert(initializer_list< value_type>  __l) 
# 1639
{ (_M_h).insert(__l); } 
# 1644
node_type extract(const_iterator __pos) 
# 1645
{ 
# 1646
do { if (__builtin_is_constant_evaluated() && (!((bool)(__pos != end())))) { __builtin_unreachable(); }  } while (false); 
# 1647
return (_M_h).extract(__pos); 
# 1648
} 
# 1652
node_type extract(const key_type &__key) 
# 1653
{ return (_M_h).extract(__key); } 
# 1657
iterator insert(node_type &&__nh) 
# 1658
{ return (_M_h)._M_reinsert_node_multi(cend(), std::move(__nh)); } 
# 1662
iterator insert(const_iterator __hint, node_type &&__nh) 
# 1663
{ return (_M_h)._M_reinsert_node_multi(__hint, std::move(__nh)); } 
# 1681 "/usr/include/c++/11/bits/unordered_map.h" 3
iterator erase(const_iterator __position) 
# 1682
{ return (_M_h).erase(__position); } 
# 1686
iterator erase(iterator __position) 
# 1687
{ return (_M_h).erase(__position); } 
# 1702 "/usr/include/c++/11/bits/unordered_map.h" 3
size_type erase(const key_type &__x) 
# 1703
{ return (_M_h).erase(__x); } 
# 1721 "/usr/include/c++/11/bits/unordered_map.h" 3
iterator erase(const_iterator __first, const_iterator __last) 
# 1722
{ return (_M_h).erase(__first, __last); } 
# 1731
void clear() noexcept 
# 1732
{ (_M_h).clear(); } 
# 1745 "/usr/include/c++/11/bits/unordered_map.h" 3
void swap(unordered_multimap &__x) noexcept(noexcept((_M_h).swap(__x._M_h))) 
# 1747
{ (_M_h).swap(__x._M_h); } 
# 1750
template< class , class , class > friend class _Hash_merge_helper; 
# 1753
template< class _H2, class _P2> void 
# 1755
merge(unordered_multimap< _Key, _Tp, _H2, _P2, _Alloc>  &__source) 
# 1756
{ 
# 1757
using _Merge_helper = _Hash_merge_helper< unordered_multimap, _H2, _P2> ; 
# 1759
(_M_h)._M_merge_multi(_Merge_helper::_S_get_table(__source)); 
# 1760
} 
# 1762
template< class _H2, class _P2> void 
# 1764
merge(unordered_multimap< _Key, _Tp, _H2, _P2, _Alloc>  &&__source) 
# 1765
{ merge(__source); } 
# 1767
template< class _H2, class _P2> void 
# 1769
merge(unordered_map< _Key, _Tp, _H2, _P2, _Alloc>  &__source) 
# 1770
{ 
# 1771
using _Merge_helper = _Hash_merge_helper< unordered_multimap, _H2, _P2> ; 
# 1773
(_M_h)._M_merge_multi(_Merge_helper::_S_get_table(__source)); 
# 1774
} 
# 1776
template< class _H2, class _P2> void 
# 1778
merge(unordered_map< _Key, _Tp, _H2, _P2, _Alloc>  &&__source) 
# 1779
{ merge(__source); } 
# 1787
hasher hash_function() const 
# 1788
{ return (_M_h).hash_function(); } 
# 1793
key_equal key_eq() const 
# 1794
{ return (_M_h).key_eq(); } 
# 1811 "/usr/include/c++/11/bits/unordered_map.h" 3
iterator find(const key_type &__x) 
# 1812
{ return (_M_h).find(__x); } 
# 1822 "/usr/include/c++/11/bits/unordered_map.h" 3
const_iterator find(const key_type &__x) const 
# 1823
{ return (_M_h).find(__x); } 
# 1840 "/usr/include/c++/11/bits/unordered_map.h" 3
size_type count(const key_type &__x) const 
# 1841
{ return (_M_h).count(__x); } 
# 1878 "/usr/include/c++/11/bits/unordered_map.h" 3
pair< iterator, iterator>  equal_range(const key_type &__x) 
# 1879
{ return (_M_h).equal_range(__x); } 
# 1890 "/usr/include/c++/11/bits/unordered_map.h" 3
pair< const_iterator, const_iterator>  equal_range(const key_type &__x) const 
# 1891
{ return (_M_h).equal_range(__x); } 
# 1906 "/usr/include/c++/11/bits/unordered_map.h" 3
size_type bucket_count() const noexcept 
# 1907
{ return (_M_h).bucket_count(); } 
# 1911
size_type max_bucket_count() const noexcept 
# 1912
{ return (_M_h).max_bucket_count(); } 
# 1920
size_type bucket_size(size_type __n) const 
# 1921
{ return (_M_h).bucket_size(__n); } 
# 1929
size_type bucket(const key_type &__key) const 
# 1930
{ return (_M_h).bucket(__key); } 
# 1939
local_iterator begin(size_type __n) 
# 1940
{ return (_M_h).begin(__n); } 
# 1950 "/usr/include/c++/11/bits/unordered_map.h" 3
const_local_iterator begin(size_type __n) const 
# 1951
{ return (_M_h).begin(__n); } 
# 1954
const_local_iterator cbegin(size_type __n) const 
# 1955
{ return (_M_h).cbegin(__n); } 
# 1965 "/usr/include/c++/11/bits/unordered_map.h" 3
local_iterator end(size_type __n) 
# 1966
{ return (_M_h).end(__n); } 
# 1976 "/usr/include/c++/11/bits/unordered_map.h" 3
const_local_iterator end(size_type __n) const 
# 1977
{ return (_M_h).end(__n); } 
# 1980
const_local_iterator cend(size_type __n) const 
# 1981
{ return (_M_h).cend(__n); } 
# 1988
float load_factor() const noexcept 
# 1989
{ return (_M_h).load_factor(); } 
# 1994
float max_load_factor() const noexcept 
# 1995
{ return (_M_h).max_load_factor(); } 
# 2002
void max_load_factor(float __z) 
# 2003
{ (_M_h).max_load_factor(__z); } 
# 2013 "/usr/include/c++/11/bits/unordered_map.h" 3
void rehash(size_type __n) 
# 2014
{ (_M_h).rehash(__n); } 
# 2024 "/usr/include/c++/11/bits/unordered_map.h" 3
void reserve(size_type __n) 
# 2025
{ (_M_h).reserve(__n); } 
# 2027
template< class _Key1, class _Tp1, class _Hash1, class _Pred1, class 
# 2028
_Alloc1> friend bool 
# 2027
operator==(const std::unordered_multimap< _Key1, _Tp1, _Hash1, _Pred1, _Alloc1>  &, const std::unordered_multimap< _Key1, _Tp1, _Hash1, _Pred1, _Alloc1>  &); 
# 2034
}; 
# 2038
template< class _InputIterator, class 
# 2039
_Hash = hash< __iter_key_t< _InputIterator> > , class 
# 2040
_Pred = equal_to< __iter_key_t< _InputIterator> > , class 
# 2041
_Allocator = allocator< __iter_to_alloc_t< _InputIterator> > , class 
# 2042
 = _RequireInputIter< _InputIterator> , class 
# 2043
 = _RequireNotAllocatorOrIntegral< _Hash> , class 
# 2044
 = _RequireNotAllocator< _Pred> , class 
# 2045
 = _RequireAllocator< _Allocator> > 
# 2046
unordered_multimap(_InputIterator, _InputIterator, unordered_multimap< int, int> ::size_type = (unsigned long)0UL, _Hash = _Hash(), _Pred = _Pred(), _Allocator = _Allocator())->unordered_multimap< __iter_key_t< _InputIterator> , __iter_val_t< _InputIterator> , _Hash, _Pred, _Allocator> ; 
# 2054
template< class _Key, class _Tp, class _Hash = hash< _Key> , class 
# 2055
_Pred = equal_to< _Key> , class 
# 2056
_Allocator = allocator< pair< const _Key, _Tp> > , class 
# 2057
 = _RequireNotAllocatorOrIntegral< _Hash> , class 
# 2058
 = _RequireNotAllocator< _Pred> , class 
# 2059
 = _RequireAllocator< _Allocator> > 
# 2060
unordered_multimap(initializer_list< pair< _Key, _Tp> > , unordered_multimap< int, int> ::size_type = (unsigned long)0UL, _Hash = _Hash(), _Pred = _Pred(), _Allocator = _Allocator())->unordered_multimap< _Key, _Tp, _Hash, _Pred, _Allocator> ; 
# 2066
template< class _InputIterator, class _Allocator, class 
# 2067
 = _RequireInputIter< _InputIterator> , class 
# 2068
 = _RequireAllocator< _Allocator> > 
# 2069
unordered_multimap(_InputIterator, _InputIterator, unordered_multimap< int, int> ::size_type, _Allocator)->unordered_multimap< __iter_key_t< _InputIterator> , __iter_val_t< _InputIterator> , hash< __iter_key_t< _InputIterator> > , equal_to< __iter_key_t< _InputIterator> > , _Allocator> ; 
# 2076
template< class _InputIterator, class _Allocator, class 
# 2077
 = _RequireInputIter< _InputIterator> , class 
# 2078
 = _RequireAllocator< _Allocator> > 
# 2079
unordered_multimap(_InputIterator, _InputIterator, _Allocator)->unordered_multimap< __iter_key_t< _InputIterator> , __iter_val_t< _InputIterator> , hash< __iter_key_t< _InputIterator> > , equal_to< __iter_key_t< _InputIterator> > , _Allocator> ; 
# 2085
template< class _InputIterator, class _Hash, class _Allocator, class 
# 2086
 = _RequireInputIter< _InputIterator> , class 
# 2087
 = _RequireNotAllocatorOrIntegral< _Hash> , class 
# 2088
 = _RequireAllocator< _Allocator> > 
# 2089
unordered_multimap(_InputIterator, _InputIterator, unordered_multimap< int, int> ::size_type, _Hash, _Allocator)->unordered_multimap< __iter_key_t< _InputIterator> , __iter_val_t< _InputIterator> , _Hash, equal_to< __iter_key_t< _InputIterator> > , _Allocator> ; 
# 2096
template< class _Key, class _Tp, class _Allocator, class 
# 2097
 = _RequireAllocator< _Allocator> > 
# 2098
unordered_multimap(initializer_list< pair< _Key, _Tp> > , unordered_multimap< int, int> ::size_type, _Allocator)->unordered_multimap< _Key, _Tp, hash< _Key> , equal_to< _Key> , _Allocator> ; 
# 2103
template< class _Key, class _Tp, class _Allocator, class 
# 2104
 = _RequireAllocator< _Allocator> > 
# 2105
unordered_multimap(initializer_list< pair< _Key, _Tp> > , _Allocator)->unordered_multimap< _Key, _Tp, hash< _Key> , equal_to< _Key> , _Allocator> ; 
# 2108
template< class _Key, class _Tp, class _Hash, class _Allocator, class 
# 2109
 = _RequireNotAllocatorOrIntegral< _Hash> , class 
# 2110
 = _RequireAllocator< _Allocator> > 
# 2111
unordered_multimap(initializer_list< pair< _Key, _Tp> > , unordered_multimap< int, int> ::size_type, _Hash, _Allocator)->unordered_multimap< _Key, _Tp, _Hash, equal_to< _Key> , _Allocator> ; 
# 2118
template< class _Key, class _Tp, class _Hash, class _Pred, class _Alloc> inline void 
# 2120
swap(unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc>  &__x, unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc>  &
# 2121
__y) noexcept(noexcept(__x.swap(__y))) 
# 2123
{ __x.swap(__y); } 
# 2125
template< class _Key, class _Tp, class _Hash, class _Pred, class _Alloc> inline void 
# 2127
swap(unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc>  &__x, unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc>  &
# 2128
__y) noexcept(noexcept(__x.swap(__y))) 
# 2130
{ __x.swap(__y); } 
# 2132
template< class _Key, class _Tp, class _Hash, class _Pred, class _Alloc> inline bool 
# 2134
operator==(const unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc>  &__x, const unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc>  &
# 2135
__y) 
# 2136
{ return (__x._M_h)._M_equal((__y._M_h)); } 
# 2139
template< class _Key, class _Tp, class _Hash, class _Pred, class _Alloc> inline bool 
# 2141
operator!=(const unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc>  &__x, const unordered_map< _Key, _Tp, _Hash, _Pred, _Alloc>  &
# 2142
__y) 
# 2143
{ return !(__x == __y); } 
# 2146
template< class _Key, class _Tp, class _Hash, class _Pred, class _Alloc> inline bool 
# 2148
operator==(const unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc>  &__x, const unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc>  &
# 2149
__y) 
# 2150
{ return (__x._M_h)._M_equal((__y._M_h)); } 
# 2153
template< class _Key, class _Tp, class _Hash, class _Pred, class _Alloc> inline bool 
# 2155
operator!=(const unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc>  &__x, const unordered_multimap< _Key, _Tp, _Hash, _Pred, _Alloc>  &
# 2156
__y) 
# 2157
{ return !(__x == __y); } 
# 2164
template< class _Key, class _Val, class _Hash1, class _Eq1, class 
# 2165
_Alloc, class _Hash2, class _Eq2> 
# 2166
struct _Hash_merge_helper< unordered_map< _Key, _Val, _Hash1, _Eq1, _Alloc> , _Hash2, _Eq2>  { 
# 2172
private: 
# 2171
template< class ..._Tp> using unordered_map = std::unordered_map< _Tp...> ; 
# 2173
template< class ..._Tp> using unordered_multimap = std::unordered_multimap< _Tp...> ; 
# 2176
friend class std::unordered_map< _Key, _Val, _Hash1, _Eq1, _Alloc> ; 
# 2179
static auto &_S_get_table(unordered_map< _Key, _Val, _Hash2, _Eq2, _Alloc>  &__map) 
# 2180
{ return __map._M_h; } 
# 2183
static auto &_S_get_table(unordered_multimap< _Key, _Val, _Hash2, _Eq2, _Alloc>  &__map) 
# 2184
{ return __map._M_h; } 
# 2185
}; 
# 2188
template< class _Key, class _Val, class _Hash1, class _Eq1, class 
# 2189
_Alloc, class _Hash2, class _Eq2> 
# 2190
struct _Hash_merge_helper< unordered_multimap< _Key, _Val, _Hash1, _Eq1, _Alloc> , _Hash2, _Eq2>  { 
# 2196
private: 
# 2195
template< class ..._Tp> using unordered_map = std::unordered_map< _Tp...> ; 
# 2197
template< class ..._Tp> using unordered_multimap = std::unordered_multimap< _Tp...> ; 
# 2200
friend class std::unordered_multimap< _Key, _Val, _Hash1, _Eq1, _Alloc> ; 
# 2203
static auto &_S_get_table(unordered_map< _Key, _Val, _Hash2, _Eq2, _Alloc>  &__map) 
# 2204
{ return __map._M_h; } 
# 2207
static auto &_S_get_table(unordered_multimap< _Key, _Val, _Hash2, _Eq2, _Alloc>  &__map) 
# 2208
{ return __map._M_h; } 
# 2209
}; 
# 2213
}
# 39 "/usr/include/c++/11/bits/erase_if.h" 3
namespace std { 
# 47
namespace __detail { 
# 49
template< class _Container, class _Predicate> typename _Container::size_type 
# 51
__erase_nodes_if(_Container &__cont, _Predicate __pred) 
# 52
{ 
# 53
typename _Container::size_type __num = (0); 
# 54
for (auto __iter = __cont.begin(), __last = __cont.end(); __iter != __last;) 
# 56
{ 
# 57
if (__pred(*__iter)) 
# 58
{ 
# 59
__iter = __cont.erase(__iter); 
# 60
++__num; 
# 61
} else { 
# 63
++__iter; }  
# 64
}  
# 65
return __num; 
# 66
} 
# 67
}
# 70
}
# 56 "/usr/include/c++/11/unordered_map" 3
namespace std __attribute((__visibility__("default"))) { 
# 59
namespace pmr { 
# 61
template< class _Tp> class polymorphic_allocator; 
# 62
template< class _Key, class _Tp, class _Hash = hash< _Key> , class 
# 63
_Pred = equal_to< _Key> > using unordered_map = std::unordered_map< _Key, _Tp, _Hash, _Pred, polymorphic_allocator< pair< const _Key, _Tp> > > ; 
# 67
template< class _Key, class _Tp, class _Hash = hash< _Key> , class 
# 68
_Pred = equal_to< _Key> > using unordered_multimap = std::unordered_multimap< _Key, _Tp, _Hash, _Pred, polymorphic_allocator< pair< const _Key, _Tp> > > ; 
# 72
}
# 74
}
# 70 "/usr/include/c++/11/bits/stl_uninitialized.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 80
template< bool _TrivialValueTypes> 
# 81
struct __uninitialized_copy { 
# 83
template< class _InputIterator, class _ForwardIterator> static _ForwardIterator 
# 85
__uninit_copy(_InputIterator __first, _InputIterator __last, _ForwardIterator 
# 86
__result) 
# 87
{ 
# 88
_ForwardIterator __cur = __result; 
# 89
try 
# 90
{ 
# 91
for (; __first != __last; (++__first), ((void)(++__cur))) { 
# 92
std::_Construct(std::__addressof(*__cur), *__first); }  
# 93
return __cur; 
# 94
} 
# 95
catch (...) 
# 96
{ 
# 97
std::_Destroy(__result, __cur); 
# 98
throw; 
# 99
}  
# 100
} 
# 101
}; 
# 104
template<> struct __uninitialized_copy< true>  { 
# 106
template< class _InputIterator, class _ForwardIterator> static _ForwardIterator 
# 108
__uninit_copy(_InputIterator __first, _InputIterator __last, _ForwardIterator 
# 109
__result) 
# 110
{ return std::copy(__first, __last, __result); } 
# 111
}; 
# 124 "/usr/include/c++/11/bits/stl_uninitialized.h" 3
template< class _InputIterator, class _ForwardIterator> inline _ForwardIterator 
# 126
uninitialized_copy(_InputIterator __first, _InputIterator __last, _ForwardIterator 
# 127
__result) 
# 128
{ 
# 130
typedef typename iterator_traits< _InputIterator> ::value_type _ValueType1; 
# 132
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType2; 
# 138
static_assert((is_constructible< typename iterator_traits< _ForwardIterator> ::value_type, __decltype((*__first))> ::value), "result type must be constructible from value type of input range");
# 141
typedef typename iterator_traits< _InputIterator> ::reference _RefType1; 
# 142
typedef typename iterator_traits< _ForwardIterator> ::reference _RefType2; 
# 145
const bool __assignable = (is_assignable< typename iterator_traits< _ForwardIterator> ::reference, typename iterator_traits< _InputIterator> ::reference> ::value); 
# 148
return std::template __uninitialized_copy< __is_trivial(_ValueType1) && __is_trivial(_ValueType2) && __assignable> ::__uninit_copy(__first, __last, __result); 
# 152
} 
# 156
template< bool _TrivialValueType> 
# 157
struct __uninitialized_fill { 
# 159
template< class _ForwardIterator, class _Tp> static void 
# 161
__uninit_fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 162
__x) 
# 163
{ 
# 164
_ForwardIterator __cur = __first; 
# 165
try 
# 166
{ 
# 167
for (; __cur != __last; ++__cur) { 
# 168
std::_Construct(std::__addressof(*__cur), __x); }  
# 169
} 
# 170
catch (...) 
# 171
{ 
# 172
std::_Destroy(__first, __cur); 
# 173
throw; 
# 174
}  
# 175
} 
# 176
}; 
# 179
template<> struct __uninitialized_fill< true>  { 
# 181
template< class _ForwardIterator, class _Tp> static void 
# 183
__uninit_fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 184
__x) 
# 185
{ std::fill(__first, __last, __x); } 
# 186
}; 
# 199 "/usr/include/c++/11/bits/stl_uninitialized.h" 3
template< class _ForwardIterator, class _Tp> inline void 
# 201
uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 202
__x) 
# 203
{ 
# 205
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType; 
# 211
static_assert((is_constructible< typename iterator_traits< _ForwardIterator> ::value_type, const _Tp &> ::value), "result type must be constructible from input type");
# 216
const bool __assignable = (is_copy_assignable< typename iterator_traits< _ForwardIterator> ::value_type> ::value); 
# 219
std::template __uninitialized_fill< __is_trivial(_ValueType) && __assignable> ::__uninit_fill(__first, __last, __x); 
# 221
} 
# 225
template< bool _TrivialValueType> 
# 226
struct __uninitialized_fill_n { 
# 228
template< class _ForwardIterator, class _Size, class _Tp> static _ForwardIterator 
# 230
__uninit_fill_n(_ForwardIterator __first, _Size __n, const _Tp &
# 231
__x) 
# 232
{ 
# 233
_ForwardIterator __cur = __first; 
# 234
try 
# 235
{ 
# 236
for (; __n > 0; (--__n), ((void)(++__cur))) { 
# 237
std::_Construct(std::__addressof(*__cur), __x); }  
# 238
return __cur; 
# 239
} 
# 240
catch (...) 
# 241
{ 
# 242
std::_Destroy(__first, __cur); 
# 243
throw; 
# 244
}  
# 245
} 
# 246
}; 
# 249
template<> struct __uninitialized_fill_n< true>  { 
# 251
template< class _ForwardIterator, class _Size, class _Tp> static _ForwardIterator 
# 253
__uninit_fill_n(_ForwardIterator __first, _Size __n, const _Tp &
# 254
__x) 
# 255
{ return std::fill_n(__first, __n, __x); } 
# 256
}; 
# 271 "/usr/include/c++/11/bits/stl_uninitialized.h" 3
template< class _ForwardIterator, class _Size, class _Tp> inline _ForwardIterator 
# 273
uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp &__x) 
# 274
{ 
# 276
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType; 
# 288 "/usr/include/c++/11/bits/stl_uninitialized.h" 3
static_assert((is_constructible< typename iterator_traits< _ForwardIterator> ::value_type, const _Tp &> ::value), "result type must be constructible from input type");
# 293
constexpr bool __can_fill = (__and_< is_integral< _Size> , is_copy_assignable< typename iterator_traits< _ForwardIterator> ::value_type> > ::value); 
# 296
return __uninitialized_fill_n< __is_trivial(_ValueType) && __can_fill> ::__uninit_fill_n(__first, __n, __x); 
# 298
} 
# 308 "/usr/include/c++/11/bits/stl_uninitialized.h" 3
template< class _InputIterator, class _ForwardIterator, class 
# 309
_Allocator> _ForwardIterator 
# 311
__uninitialized_copy_a(_InputIterator __first, _InputIterator __last, _ForwardIterator 
# 312
__result, _Allocator &__alloc) 
# 313
{ 
# 314
_ForwardIterator __cur = __result; 
# 315
try 
# 316
{ 
# 317
typedef __gnu_cxx::__alloc_traits< _Allocator>  __traits; 
# 318
for (; __first != __last; (++__first), ((void)(++__cur))) { 
# 319
__traits::construct(__alloc, std::__addressof(*__cur), *__first); }  
# 320
return __cur; 
# 321
} 
# 322
catch (...) 
# 323
{ 
# 324
std::_Destroy(__result, __cur, __alloc); 
# 325
throw; 
# 326
}  
# 327
} 
# 329
template< class _InputIterator, class _ForwardIterator, class _Tp> inline _ForwardIterator 
# 331
__uninitialized_copy_a(_InputIterator __first, _InputIterator __last, _ForwardIterator 
# 332
__result, allocator< _Tp>  &) 
# 333
{ return std::uninitialized_copy(__first, __last, __result); } 
# 335
template< class _InputIterator, class _ForwardIterator, class 
# 336
_Allocator> inline _ForwardIterator 
# 338
__uninitialized_move_a(_InputIterator __first, _InputIterator __last, _ForwardIterator 
# 339
__result, _Allocator &__alloc) 
# 340
{ 
# 341
return std::__uninitialized_copy_a(std::make_move_iterator(__first), std::make_move_iterator(__last), __result, __alloc); 
# 344
} 
# 346
template< class _InputIterator, class _ForwardIterator, class 
# 347
_Allocator> inline _ForwardIterator 
# 349
__uninitialized_move_if_noexcept_a(_InputIterator __first, _InputIterator 
# 350
__last, _ForwardIterator 
# 351
__result, _Allocator &
# 352
__alloc) 
# 353
{ 
# 354
return std::__uninitialized_copy_a(std::__make_move_if_noexcept_iterator(__first), std::__make_move_if_noexcept_iterator(__last), __result, __alloc); 
# 357
} 
# 359
template< class _ForwardIterator, class _Tp, class _Allocator> void 
# 361
__uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 362
__x, _Allocator &__alloc) 
# 363
{ 
# 364
_ForwardIterator __cur = __first; 
# 365
try 
# 366
{ 
# 367
typedef __gnu_cxx::__alloc_traits< _Allocator>  __traits; 
# 368
for (; __cur != __last; ++__cur) { 
# 369
__traits::construct(__alloc, std::__addressof(*__cur), __x); }  
# 370
} 
# 371
catch (...) 
# 372
{ 
# 373
std::_Destroy(__first, __cur, __alloc); 
# 374
throw; 
# 375
}  
# 376
} 
# 378
template< class _ForwardIterator, class _Tp, class _Tp2> inline void 
# 380
__uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 381
__x, allocator< _Tp2>  &) 
# 382
{ std::uninitialized_fill(__first, __last, __x); } 
# 384
template< class _ForwardIterator, class _Size, class _Tp, class 
# 385
_Allocator> _ForwardIterator 
# 387
__uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, const _Tp &
# 388
__x, _Allocator &__alloc) 
# 389
{ 
# 390
_ForwardIterator __cur = __first; 
# 391
try 
# 392
{ 
# 393
typedef __gnu_cxx::__alloc_traits< _Allocator>  __traits; 
# 394
for (; __n > 0; (--__n), ((void)(++__cur))) { 
# 395
__traits::construct(__alloc, std::__addressof(*__cur), __x); }  
# 396
return __cur; 
# 397
} 
# 398
catch (...) 
# 399
{ 
# 400
std::_Destroy(__first, __cur, __alloc); 
# 401
throw; 
# 402
}  
# 403
} 
# 405
template< class _ForwardIterator, class _Size, class _Tp, class 
# 406
_Tp2> inline _ForwardIterator 
# 408
__uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, const _Tp &
# 409
__x, allocator< _Tp2>  &) 
# 410
{ return std::uninitialized_fill_n(__first, __n, __x); } 
# 422 "/usr/include/c++/11/bits/stl_uninitialized.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 423
_ForwardIterator, class _Allocator> inline _ForwardIterator 
# 425
__uninitialized_copy_move(_InputIterator1 __first1, _InputIterator1 
# 426
__last1, _InputIterator2 
# 427
__first2, _InputIterator2 
# 428
__last2, _ForwardIterator 
# 429
__result, _Allocator &
# 430
__alloc) 
# 431
{ 
# 432
_ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1, __result, __alloc); 
# 435
try 
# 436
{ 
# 437
return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc); 
# 438
} 
# 439
catch (...) 
# 440
{ 
# 441
std::_Destroy(__result, __mid, __alloc); 
# 442
throw; 
# 443
}  
# 444
} 
# 450
template< class _InputIterator1, class _InputIterator2, class 
# 451
_ForwardIterator, class _Allocator> inline _ForwardIterator 
# 453
__uninitialized_move_copy(_InputIterator1 __first1, _InputIterator1 
# 454
__last1, _InputIterator2 
# 455
__first2, _InputIterator2 
# 456
__last2, _ForwardIterator 
# 457
__result, _Allocator &
# 458
__alloc) 
# 459
{ 
# 460
_ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1, __result, __alloc); 
# 463
try 
# 464
{ 
# 465
return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc); 
# 466
} 
# 467
catch (...) 
# 468
{ 
# 469
std::_Destroy(__result, __mid, __alloc); 
# 470
throw; 
# 471
}  
# 472
} 
# 477
template< class _ForwardIterator, class _Tp, class _InputIterator, class 
# 478
_Allocator> inline _ForwardIterator 
# 480
__uninitialized_fill_move(_ForwardIterator __result, _ForwardIterator __mid, const _Tp &
# 481
__x, _InputIterator __first, _InputIterator 
# 482
__last, _Allocator &__alloc) 
# 483
{ 
# 484
std::__uninitialized_fill_a(__result, __mid, __x, __alloc); 
# 485
try 
# 486
{ 
# 487
return std::__uninitialized_move_a(__first, __last, __mid, __alloc); 
# 488
} 
# 489
catch (...) 
# 490
{ 
# 491
std::_Destroy(__result, __mid, __alloc); 
# 492
throw; 
# 493
}  
# 494
} 
# 499
template< class _InputIterator, class _ForwardIterator, class _Tp, class 
# 500
_Allocator> inline void 
# 502
__uninitialized_move_fill(_InputIterator __first1, _InputIterator __last1, _ForwardIterator 
# 503
__first2, _ForwardIterator 
# 504
__last2, const _Tp &__x, _Allocator &
# 505
__alloc) 
# 506
{ 
# 507
_ForwardIterator __mid2 = std::__uninitialized_move_a(__first1, __last1, __first2, __alloc); 
# 510
try 
# 511
{ 
# 512
std::__uninitialized_fill_a(__mid2, __last2, __x, __alloc); 
# 513
} 
# 514
catch (...) 
# 515
{ 
# 516
std::_Destroy(__first2, __mid2, __alloc); 
# 517
throw; 
# 518
}  
# 519
} 
# 529 "/usr/include/c++/11/bits/stl_uninitialized.h" 3
template< bool _TrivialValueType> 
# 530
struct __uninitialized_default_1 { 
# 532
template< class _ForwardIterator> static void 
# 534
__uninit_default(_ForwardIterator __first, _ForwardIterator __last) 
# 535
{ 
# 536
_ForwardIterator __cur = __first; 
# 537
try 
# 538
{ 
# 539
for (; __cur != __last; ++__cur) { 
# 540
std::_Construct(std::__addressof(*__cur)); }  
# 541
} 
# 542
catch (...) 
# 543
{ 
# 544
std::_Destroy(__first, __cur); 
# 545
throw; 
# 546
}  
# 547
} 
# 548
}; 
# 551
template<> struct __uninitialized_default_1< true>  { 
# 553
template< class _ForwardIterator> static void 
# 555
__uninit_default(_ForwardIterator __first, _ForwardIterator __last) 
# 556
{ 
# 557
if (__first == __last) { 
# 558
return; }  
# 560
typename iterator_traits< _ForwardIterator> ::value_type *__val = std::__addressof(*__first); 
# 562
std::_Construct(__val); 
# 563
if ((++__first) != __last) { 
# 564
std::fill(__first, __last, *__val); }  
# 565
} 
# 566
}; 
# 568
template< bool _TrivialValueType> 
# 569
struct __uninitialized_default_n_1 { 
# 571
template< class _ForwardIterator, class _Size> static _ForwardIterator 
# 573
__uninit_default_n(_ForwardIterator __first, _Size __n) 
# 574
{ 
# 575
_ForwardIterator __cur = __first; 
# 576
try 
# 577
{ 
# 578
for (; __n > 0; (--__n), ((void)(++__cur))) { 
# 579
std::_Construct(std::__addressof(*__cur)); }  
# 580
return __cur; 
# 581
} 
# 582
catch (...) 
# 583
{ 
# 584
std::_Destroy(__first, __cur); 
# 585
throw; 
# 586
}  
# 587
} 
# 588
}; 
# 591
template<> struct __uninitialized_default_n_1< true>  { 
# 593
template< class _ForwardIterator, class _Size> static _ForwardIterator 
# 595
__uninit_default_n(_ForwardIterator __first, _Size __n) 
# 596
{ 
# 597
if (__n > 0) 
# 598
{ 
# 599
typename iterator_traits< _ForwardIterator> ::value_type *__val = std::__addressof(*__first); 
# 601
std::_Construct(__val); 
# 602
++__first; 
# 603
__first = std::fill_n(__first, __n - 1, *__val); 
# 604
}  
# 605
return __first; 
# 606
} 
# 607
}; 
# 611
template< class _ForwardIterator> inline void 
# 613
__uninitialized_default(_ForwardIterator __first, _ForwardIterator 
# 614
__last) 
# 615
{ 
# 617
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType; 
# 619
const bool __assignable = (is_copy_assignable< typename iterator_traits< _ForwardIterator> ::value_type> ::value); 
# 621
std::template __uninitialized_default_1< __is_trivial(_ValueType) && __assignable> ::__uninit_default(__first, __last); 
# 624
} 
# 628
template< class _ForwardIterator, class _Size> inline _ForwardIterator 
# 630
__uninitialized_default_n(_ForwardIterator __first, _Size __n) 
# 631
{ 
# 633
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType; 
# 635
constexpr bool __can_fill = (__and_< is_integral< _Size> , is_copy_assignable< typename iterator_traits< _ForwardIterator> ::value_type> > ::value); 
# 638
return __uninitialized_default_n_1< __is_trivial(_ValueType) && __can_fill> ::__uninit_default_n(__first, __n); 
# 641
} 
# 647
template< class _ForwardIterator, class _Allocator> void 
# 649
__uninitialized_default_a(_ForwardIterator __first, _ForwardIterator 
# 650
__last, _Allocator &
# 651
__alloc) 
# 652
{ 
# 653
_ForwardIterator __cur = __first; 
# 654
try 
# 655
{ 
# 656
typedef __gnu_cxx::__alloc_traits< _Allocator>  __traits; 
# 657
for (; __cur != __last; ++__cur) { 
# 658
__traits::construct(__alloc, std::__addressof(*__cur)); }  
# 659
} 
# 660
catch (...) 
# 661
{ 
# 662
std::_Destroy(__first, __cur, __alloc); 
# 663
throw; 
# 664
}  
# 665
} 
# 667
template< class _ForwardIterator, class _Tp> inline void 
# 669
__uninitialized_default_a(_ForwardIterator __first, _ForwardIterator 
# 670
__last, allocator< _Tp>  &) 
# 672
{ std::__uninitialized_default(__first, __last); } 
# 678
template< class _ForwardIterator, class _Size, class _Allocator> _ForwardIterator 
# 680
__uninitialized_default_n_a(_ForwardIterator __first, _Size __n, _Allocator &
# 681
__alloc) 
# 682
{ 
# 683
_ForwardIterator __cur = __first; 
# 684
try 
# 685
{ 
# 686
typedef __gnu_cxx::__alloc_traits< _Allocator>  __traits; 
# 687
for (; __n > 0; (--__n), ((void)(++__cur))) { 
# 688
__traits::construct(__alloc, std::__addressof(*__cur)); }  
# 689
return __cur; 
# 690
} 
# 691
catch (...) 
# 692
{ 
# 693
std::_Destroy(__first, __cur, __alloc); 
# 694
throw; 
# 695
}  
# 696
} 
# 700
template< class _ForwardIterator, class _Size, class _Tp> inline _ForwardIterator 
# 702
__uninitialized_default_n_a(_ForwardIterator __first, _Size __n, allocator< _Tp>  &) 
# 704
{ return std::__uninitialized_default_n(__first, __n); } 
# 706
template< bool _TrivialValueType> 
# 707
struct __uninitialized_default_novalue_1 { 
# 709
template< class _ForwardIterator> static void 
# 711
__uninit_default_novalue(_ForwardIterator __first, _ForwardIterator 
# 712
__last) 
# 713
{ 
# 714
_ForwardIterator __cur = __first; 
# 715
try 
# 716
{ 
# 717
for (; __cur != __last; ++__cur) { 
# 718
std::_Construct_novalue(std::__addressof(*__cur)); }  
# 719
} 
# 720
catch (...) 
# 721
{ 
# 722
std::_Destroy(__first, __cur); 
# 723
throw; 
# 724
}  
# 725
} 
# 726
}; 
# 729
template<> struct __uninitialized_default_novalue_1< true>  { 
# 731
template< class _ForwardIterator> static void 
# 733
__uninit_default_novalue(_ForwardIterator __first, _ForwardIterator 
# 734
__last) 
# 735
{ 
# 736
} 
# 737
}; 
# 739
template< bool _TrivialValueType> 
# 740
struct __uninitialized_default_novalue_n_1 { 
# 742
template< class _ForwardIterator, class _Size> static _ForwardIterator 
# 744
__uninit_default_novalue_n(_ForwardIterator __first, _Size __n) 
# 745
{ 
# 746
_ForwardIterator __cur = __first; 
# 747
try 
# 748
{ 
# 749
for (; __n > 0; (--__n), ((void)(++__cur))) { 
# 750
std::_Construct_novalue(std::__addressof(*__cur)); }  
# 751
return __cur; 
# 752
} 
# 753
catch (...) 
# 754
{ 
# 755
std::_Destroy(__first, __cur); 
# 756
throw; 
# 757
}  
# 758
} 
# 759
}; 
# 762
template<> struct __uninitialized_default_novalue_n_1< true>  { 
# 764
template< class _ForwardIterator, class _Size> static _ForwardIterator 
# 766
__uninit_default_novalue_n(_ForwardIterator __first, _Size __n) 
# 767
{ return std::next(__first, __n); } 
# 768
}; 
# 772
template< class _ForwardIterator> inline void 
# 774
__uninitialized_default_novalue(_ForwardIterator __first, _ForwardIterator 
# 775
__last) 
# 776
{ 
# 778
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType; 
# 780
std::template __uninitialized_default_novalue_1< is_trivially_default_constructible< typename iterator_traits< _ForwardIterator> ::value_type> ::value> ::__uninit_default_novalue(__first, __last); 
# 783
} 
# 787
template< class _ForwardIterator, class _Size> inline _ForwardIterator 
# 789
__uninitialized_default_novalue_n(_ForwardIterator __first, _Size __n) 
# 790
{ 
# 792
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType; 
# 794
return __uninitialized_default_novalue_n_1< is_trivially_default_constructible< typename iterator_traits< _ForwardIterator> ::value_type> ::value> ::__uninit_default_novalue_n(__first, __n); 
# 797
} 
# 799
template< class _InputIterator, class _Size, class 
# 800
_ForwardIterator> _ForwardIterator 
# 802
__uninitialized_copy_n(_InputIterator __first, _Size __n, _ForwardIterator 
# 803
__result, input_iterator_tag) 
# 804
{ 
# 805
_ForwardIterator __cur = __result; 
# 806
try 
# 807
{ 
# 808
for (; __n > 0; ((--__n), ((void)(++__first))), (++__cur)) { 
# 809
std::_Construct(std::__addressof(*__cur), *__first); }  
# 810
return __cur; 
# 811
} 
# 812
catch (...) 
# 813
{ 
# 814
std::_Destroy(__result, __cur); 
# 815
throw; 
# 816
}  
# 817
} 
# 819
template< class _RandomAccessIterator, class _Size, class 
# 820
_ForwardIterator> inline _ForwardIterator 
# 822
__uninitialized_copy_n(_RandomAccessIterator __first, _Size __n, _ForwardIterator 
# 823
__result, random_access_iterator_tag) 
# 825
{ return std::uninitialized_copy(__first, __first + __n, __result); } 
# 827
template< class _InputIterator, class _Size, class 
# 828
_ForwardIterator> pair< _InputIterator, _ForwardIterator>  
# 830
__uninitialized_copy_n_pair(_InputIterator __first, _Size __n, _ForwardIterator 
# 831
__result, input_iterator_tag) 
# 832
{ 
# 833
_ForwardIterator __cur = __result; 
# 834
try 
# 835
{ 
# 836
for (; __n > 0; ((--__n), ((void)(++__first))), (++__cur)) { 
# 837
std::_Construct(std::__addressof(*__cur), *__first); }  
# 838
return {__first, __cur}; 
# 839
} 
# 840
catch (...) 
# 841
{ 
# 842
std::_Destroy(__result, __cur); 
# 843
throw; 
# 844
}  
# 845
} 
# 847
template< class _RandomAccessIterator, class _Size, class 
# 848
_ForwardIterator> inline pair< _RandomAccessIterator, _ForwardIterator>  
# 850
__uninitialized_copy_n_pair(_RandomAccessIterator __first, _Size __n, _ForwardIterator 
# 851
__result, random_access_iterator_tag) 
# 853
{ 
# 854
auto __second_res = uninitialized_copy(__first, __first + __n, __result); 
# 855
auto __first_res = std::next(__first, __n); 
# 856
return {__first_res, __second_res}; 
# 857
} 
# 870 "/usr/include/c++/11/bits/stl_uninitialized.h" 3
template< class _InputIterator, class _Size, class _ForwardIterator> inline _ForwardIterator 
# 872
uninitialized_copy_n(_InputIterator __first, _Size __n, _ForwardIterator 
# 873
__result) 
# 874
{ return std::__uninitialized_copy_n(__first, __n, __result, std::__iterator_category(__first)); 
# 875
} 
# 878
template< class _InputIterator, class _Size, class _ForwardIterator> inline pair< _InputIterator, _ForwardIterator>  
# 880
__uninitialized_copy_n_pair(_InputIterator __first, _Size __n, _ForwardIterator 
# 881
__result) 
# 882
{ 
# 883
return std::__uninitialized_copy_n_pair(__first, __n, __result, std::__iterator_category(__first)); 
# 886
} 
# 898 "/usr/include/c++/11/bits/stl_uninitialized.h" 3
template< class _ForwardIterator> inline void 
# 900
uninitialized_default_construct(_ForwardIterator __first, _ForwardIterator 
# 901
__last) 
# 902
{ 
# 903
__uninitialized_default_novalue(__first, __last); 
# 904
} 
# 912
template< class _ForwardIterator, class _Size> inline _ForwardIterator 
# 914
uninitialized_default_construct_n(_ForwardIterator __first, _Size __count) 
# 915
{ 
# 916
return __uninitialized_default_novalue_n(__first, __count); 
# 917
} 
# 924
template< class _ForwardIterator> inline void 
# 926
uninitialized_value_construct(_ForwardIterator __first, _ForwardIterator 
# 927
__last) 
# 928
{ 
# 929
return __uninitialized_default(__first, __last); 
# 930
} 
# 938
template< class _ForwardIterator, class _Size> inline _ForwardIterator 
# 940
uninitialized_value_construct_n(_ForwardIterator __first, _Size __count) 
# 941
{ 
# 942
return __uninitialized_default_n(__first, __count); 
# 943
} 
# 952 "/usr/include/c++/11/bits/stl_uninitialized.h" 3
template< class _InputIterator, class _ForwardIterator> inline _ForwardIterator 
# 954
uninitialized_move(_InputIterator __first, _InputIterator __last, _ForwardIterator 
# 955
__result) 
# 956
{ 
# 957
return std::uninitialized_copy(std::make_move_iterator(__first), std::make_move_iterator(__last), __result); 
# 960
} 
# 969 "/usr/include/c++/11/bits/stl_uninitialized.h" 3
template< class _InputIterator, class _Size, class _ForwardIterator> inline pair< _InputIterator, _ForwardIterator>  
# 971
uninitialized_move_n(_InputIterator __first, _Size __count, _ForwardIterator 
# 972
__result) 
# 973
{ 
# 974
auto __res = std::__uninitialized_copy_n_pair(std::make_move_iterator(__first), __count, __result); 
# 977
return {(__res.first).base(), (__res.second)}; 
# 978
} 
# 984
template< class _Tp, class _Up, class _Allocator> inline void 
# 986
__relocate_object_a(_Tp *__restrict__ __dest, _Up *__restrict__ __orig, _Allocator &
# 987
__alloc) noexcept(noexcept(std::template allocator_traits< _Allocator> ::construct(__alloc, __dest, std::move(*__orig))) && noexcept(std::template allocator_traits< _Allocator> ::destroy(__alloc, std::__addressof(*__orig)))) 
# 992
{ 
# 993
typedef allocator_traits< _Allocator>  __traits; 
# 994
__traits::construct(__alloc, __dest, std::move(*__orig)); 
# 995
__traits::destroy(__alloc, std::__addressof(*__orig)); 
# 996
} 
# 1000
template< class _Tp, class  = void> 
# 1001
struct __is_bitwise_relocatable : public is_trivial< _Tp>  { 
# 1002
}; 
# 1004
template< class _Tp, class _Up> inline __enable_if_t< __is_bitwise_relocatable< _Tp> ::value, _Tp *>  
# 1006
__relocate_a_1(_Tp *__first, _Tp *__last, _Tp *
# 1007
__result, allocator< _Up>  &) noexcept 
# 1008
{ 
# 1009
ptrdiff_t __count = __last - __first; 
# 1010
if (__count > (0)) { 
# 1011
__builtin_memmove(__result, __first, __count * sizeof(_Tp)); }  
# 1012
return __result + __count; 
# 1013
} 
# 1015
template< class _InputIterator, class _ForwardIterator, class 
# 1016
_Allocator> inline _ForwardIterator 
# 1018
__relocate_a_1(_InputIterator __first, _InputIterator __last, _ForwardIterator 
# 1019
__result, _Allocator &__alloc) noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result), std::addressof(*__first), __alloc))) 
# 1023
{ 
# 1025
typedef typename iterator_traits< _InputIterator> ::value_type _ValueType; 
# 1027
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType2; 
# 1028
static_assert((std::template is_same< typename iterator_traits< _InputIterator> ::value_type, typename iterator_traits< _ForwardIterator> ::value_type> ::value), "relocation is only possible for values of the same type");
# 1030
_ForwardIterator __cur = __result; 
# 1031
for (; __first != __last; (++__first), ((void)(++__cur))) { 
# 1032
std::__relocate_object_a(std::__addressof(*__cur), std::__addressof(*__first), __alloc); }  
# 1034
return __cur; 
# 1035
} 
# 1037
template< class _InputIterator, class _ForwardIterator, class 
# 1038
_Allocator> inline _ForwardIterator 
# 1040
__relocate_a(_InputIterator __first, _InputIterator __last, _ForwardIterator 
# 1041
__result, _Allocator &__alloc) noexcept(noexcept(__relocate_a_1(std::__niter_base(__first), std::__niter_base(__last), std::__niter_base(__result), __alloc))) 
# 1045
{ 
# 1046
return __relocate_a_1(std::__niter_base(__first), std::__niter_base(__last), std::__niter_base(__result), __alloc); 
# 1049
} 
# 1057
}
# 77 "/usr/include/c++/11/bits/stl_vector.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 83
template< class _Tp, class _Alloc> 
# 84
struct _Vector_base { 
# 87
typedef typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _Tp> ::other _Tp_alloc_type; 
# 89
typedef typename __gnu_cxx::__alloc_traits< _Tp_alloc_type> ::pointer pointer; 
# 91
struct _Vector_impl_data { 
# 93
pointer _M_start; 
# 94
pointer _M_finish; 
# 95
pointer _M_end_of_storage; 
# 97
_Vector_impl_data() noexcept : _M_start(), _M_finish(), _M_end_of_storage() 
# 99
{ } 
# 102
_Vector_impl_data(_Vector_impl_data &&__x) noexcept : _M_start(__x._M_start), _M_finish(__x._M_finish), _M_end_of_storage(__x._M_end_of_storage) 
# 105
{ (__x._M_start) = ((__x._M_finish) = ((__x._M_end_of_storage) = pointer())); } 
# 109
void _M_copy_data(const _Vector_impl_data &__x) noexcept 
# 110
{ 
# 111
(_M_start) = (__x._M_start); 
# 112
(_M_finish) = (__x._M_finish); 
# 113
(_M_end_of_storage) = (__x._M_end_of_storage); 
# 114
} 
# 117
void _M_swap_data(_Vector_impl_data &__x) noexcept 
# 118
{ 
# 121
_Vector_impl_data __tmp; 
# 122
__tmp._M_copy_data(*this); 
# 123
_M_copy_data(__x); 
# 124
__x._M_copy_data(__tmp); 
# 125
} 
# 126
}; 
# 128
struct _Vector_impl : public _Tp_alloc_type, public _Vector_impl_data { 
# 131
_Vector_impl() noexcept(is_nothrow_default_constructible< typename _Vector_base< _Tp, _Alloc> ::_Tp_alloc_type> ::value) : _Vector_base< _Tp, _Alloc> ::_Tp_alloc_type() 
# 134
{ } 
# 136
_Vector_impl(const typename _Vector_base< _Tp, _Alloc> ::_Tp_alloc_type &__a) noexcept : _Vector_base< _Tp, _Alloc> ::_Tp_alloc_type(__a) 
# 138
{ } 
# 143
_Vector_impl(_Vector_impl &&__x) noexcept : _Vector_base< _Tp, _Alloc> ::_Vector_impl_data(std::move(__x)), _Vector_base< _Tp, _Alloc> ::_Tp_alloc_type(std::move(__x)) 
# 145
{ } 
# 147
_Vector_impl(typename _Vector_base< _Tp, _Alloc> ::_Tp_alloc_type &&__a) noexcept : _Vector_base< _Tp, _Alloc> ::_Tp_alloc_type(std::move(__a)) 
# 149
{ } 
# 151
_Vector_impl(typename _Vector_base< _Tp, _Alloc> ::_Tp_alloc_type &&__a, _Vector_impl &&__rv) noexcept : _Vector_base< _Tp, _Alloc> ::_Vector_impl_data(std::move(__rv)), _Vector_base< _Tp, _Alloc> ::_Tp_alloc_type(std::move(__a)) 
# 153
{ } 
# 270 "/usr/include/c++/11/bits/stl_vector.h" 3
}; 
# 273
typedef _Alloc allocator_type; 
# 276
_Tp_alloc_type &_M_get_Tp_allocator() noexcept 
# 277
{ return this->_M_impl; } 
# 280
const _Tp_alloc_type &_M_get_Tp_allocator() const noexcept 
# 281
{ return this->_M_impl; } 
# 284
allocator_type get_allocator() const noexcept 
# 285
{ return (allocator_type)_M_get_Tp_allocator(); } 
# 288
_Vector_base() = default;
# 293
_Vector_base(const allocator_type &__a) noexcept : _M_impl(__a) 
# 294
{ } 
# 298
_Vector_base(size_t __n) : _M_impl() 
# 300
{ _M_create_storage(__n); } 
# 303
_Vector_base(size_t __n, const allocator_type &__a) : _M_impl(__a) 
# 305
{ _M_create_storage(__n); } 
# 308
_Vector_base(_Vector_base &&) = default;
# 312
_Vector_base(_Tp_alloc_type &&__a) noexcept : _M_impl(std::move(__a)) 
# 313
{ } 
# 315
_Vector_base(_Vector_base &&__x, const allocator_type &__a) : _M_impl(__a) 
# 317
{ 
# 318
if (__x.get_allocator() == __a) { 
# 319
(this->_M_impl)._M_swap_data(__x._M_impl); } else 
# 321
{ 
# 322
size_t __n = ((__x._M_impl)._M_finish) - ((__x._M_impl)._M_start); 
# 323
_M_create_storage(__n); 
# 324
}  
# 325
} 
# 328
_Vector_base(const allocator_type &__a, _Vector_base &&__x) : _M_impl((_Tp_alloc_type)__a, std::move(__x._M_impl)) 
# 330
{ } 
# 333
~_Vector_base() noexcept 
# 334
{ 
# 335
_M_deallocate(((_M_impl)._M_start), ((_M_impl)._M_end_of_storage) - ((_M_impl)._M_start)); 
# 337
} 
# 340
_Vector_impl _M_impl; 
# 343
pointer _M_allocate(size_t __n) 
# 344
{ 
# 345
typedef __gnu_cxx::__alloc_traits< _Tp_alloc_type>  _Tr; 
# 346
return (__n != (0)) ? _Tr::allocate(_M_impl, __n) : pointer(); 
# 347
} 
# 350
void _M_deallocate(pointer __p, size_t __n) 
# 351
{ 
# 352
typedef __gnu_cxx::__alloc_traits< _Tp_alloc_type>  _Tr; 
# 353
if (__p) { 
# 354
_Tr::deallocate(_M_impl, __p, __n); }  
# 355
} 
# 359
protected: void _M_create_storage(size_t __n) 
# 360
{ 
# 361
((this->_M_impl)._M_start) = _M_allocate(__n); 
# 362
((this->_M_impl)._M_finish) = ((this->_M_impl)._M_start); 
# 363
((this->_M_impl)._M_end_of_storage) = (((this->_M_impl)._M_start) + __n); 
# 364
} 
# 365
}; 
# 388 "/usr/include/c++/11/bits/stl_vector.h" 3
template< class _Tp, class _Alloc = allocator< _Tp> > 
# 389
class vector : protected _Vector_base< _Tp, _Alloc>  { 
# 401 "/usr/include/c++/11/bits/stl_vector.h" 3
static_assert((is_same< typename remove_cv< _Tp> ::type, _Tp> ::value), "std::vector must have a non-const, non-volatile value_type");
# 404
static_assert((is_same< typename _Alloc::value_type, _Tp> ::value), "std::vector must have the same value_type as its allocator");
# 409
typedef _Vector_base< _Tp, _Alloc>  _Base; 
# 410
typedef typename _Vector_base< _Tp, _Alloc> ::_Tp_alloc_type _Tp_alloc_type; 
# 411
typedef __gnu_cxx::__alloc_traits< _Tp_alloc_type>  _Alloc_traits; 
# 414
public: typedef _Tp value_type; 
# 415
typedef typename _Vector_base< _Tp, _Alloc> ::pointer pointer; 
# 416
typedef typename __gnu_cxx::__alloc_traits< _Tp_alloc_type> ::const_pointer const_pointer; 
# 417
typedef typename __gnu_cxx::__alloc_traits< _Tp_alloc_type> ::reference reference; 
# 418
typedef typename __gnu_cxx::__alloc_traits< _Tp_alloc_type> ::const_reference const_reference; 
# 419
typedef __gnu_cxx::__normal_iterator< pointer, vector>  iterator; 
# 421
typedef __gnu_cxx::__normal_iterator< const_pointer, vector>  const_iterator; 
# 422
typedef std::reverse_iterator< const_iterator>  const_reverse_iterator; 
# 423
typedef std::reverse_iterator< iterator>  reverse_iterator; 
# 424
typedef std::size_t size_type; 
# 425
typedef std::ptrdiff_t difference_type; 
# 426
typedef _Alloc allocator_type; 
# 431
private: static constexpr bool _S_nothrow_relocate(std::true_type) 
# 432
{ 
# 433
return noexcept(std::__relocate_a(std::declval< pointer> (), std::declval< pointer> (), std::declval< pointer> (), std::declval< _Tp_alloc_type &> ())); 
# 437
} 
# 440
static constexpr bool _S_nothrow_relocate(std::false_type) 
# 441
{ return false; } 
# 444
static constexpr bool _S_use_relocate() 
# 445
{ 
# 449
return _S_nothrow_relocate(__is_move_insertable< _Tp_alloc_type> {}); 
# 450
} 
# 453
static pointer _S_do_relocate(pointer __first, pointer __last, pointer __result, _Tp_alloc_type &
# 454
__alloc, std::true_type) noexcept 
# 455
{ 
# 456
return std::__relocate_a(__first, __last, __result, __alloc); 
# 457
} 
# 460
static pointer _S_do_relocate(pointer, pointer, pointer __result, _Tp_alloc_type &, std::false_type) noexcept 
# 462
{ return __result; } 
# 465
static pointer _S_relocate(pointer __first, pointer __last, pointer __result, _Tp_alloc_type &
# 466
__alloc) noexcept 
# 467
{ 
# 468
using __do_it = std::__bool_constant< (_S_use_relocate)()> ; 
# 469
return _S_do_relocate(__first, __last, __result, __alloc, __do_it{}); 
# 470
} 
# 474
protected: using _Vector_base< _Tp, _Alloc> ::_M_allocate;
# 475
using _Vector_base< _Tp, _Alloc> ::_M_deallocate;
# 476
using _Vector_base< _Tp, _Alloc> ::_M_impl;
# 477
using _Vector_base< _Tp, _Alloc> ::_M_get_Tp_allocator;
# 487
public: vector() = default;
# 497 "/usr/include/c++/11/bits/stl_vector.h" 3
explicit vector(const allocator_type &__a) noexcept : _Base(__a) 
# 498
{ } 
# 510 "/usr/include/c++/11/bits/stl_vector.h" 3
explicit vector(size_type __n, const allocator_type &__a = allocator_type()) : _Base((_S_check_init_len)(__n, __a), __a) 
# 512
{ _M_default_initialize(__n); } 
# 522 "/usr/include/c++/11/bits/stl_vector.h" 3
vector(size_type __n, const value_type &__value, const allocator_type &
# 523
__a = allocator_type()) : _Base((_S_check_init_len)(__n, __a), __a) 
# 525
{ _M_fill_initialize(__n, __value); } 
# 553 "/usr/include/c++/11/bits/stl_vector.h" 3
vector(const vector &__x) : _Base(__x.size(), _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator())) 
# 556
{ 
# 557
((this->_M_impl)._M_finish) = std::__uninitialized_copy_a(__x.begin(), __x.end(), ((this->_M_impl)._M_start), _M_get_Tp_allocator()); 
# 561
} 
# 572 "/usr/include/c++/11/bits/stl_vector.h" 3
vector(vector &&) noexcept = default;
# 575
vector(const vector &__x, const allocator_type &__a) : _Base(__x.size(), __a) 
# 577
{ 
# 578
((this->_M_impl)._M_finish) = std::__uninitialized_copy_a(__x.begin(), __x.end(), ((this->_M_impl)._M_start), _M_get_Tp_allocator()); 
# 582
} 
# 585
private: vector(vector &&__rv, const allocator_type &__m, std::true_type) noexcept : _Base(__m, std::move(__rv)) 
# 587
{ } 
# 589
vector(vector &&__rv, const allocator_type &__m, std::false_type) : _Base(__m) 
# 591
{ 
# 592
if (__rv.get_allocator() == __m) { 
# 593
(this->_M_impl)._M_swap_data((__rv._M_impl)); } else { 
# 594
if (!__rv.empty()) 
# 595
{ 
# 596
this->_M_create_storage(__rv.size()); 
# 597
((this->_M_impl)._M_finish) = std::__uninitialized_move_a(__rv.begin(), __rv.end(), ((this->_M_impl)._M_start), _M_get_Tp_allocator()); 
# 601
__rv.clear(); 
# 602
}  }  
# 603
} 
# 607
public: vector(vector &&__rv, const allocator_type &__m) noexcept(noexcept((vector(std::declval< vector &&> (), std::declval< const allocator_type &> (), std::declval< typename __gnu_cxx::__alloc_traits< _Tp_alloc_type> ::is_always_equal> ())))) : vector(std::move(__rv), __m, typename __gnu_cxx::__alloc_traits< _Tp_alloc_type> ::is_always_equal{}) 
# 612
{ } 
# 625 "/usr/include/c++/11/bits/stl_vector.h" 3
vector(initializer_list< value_type>  __l, const allocator_type &
# 626
__a = allocator_type()) : _Base(__a) 
# 628
{ 
# 629
_M_range_initialize(__l.begin(), __l.end(), std::random_access_iterator_tag()); 
# 631
} 
# 651 "/usr/include/c++/11/bits/stl_vector.h" 3
template< class _InputIterator, class 
# 652
 = std::_RequireInputIter< _InputIterator> > 
# 653
vector(_InputIterator __first, _InputIterator __last, const allocator_type &
# 654
__a = allocator_type()) : _Base(__a) 
# 656
{ 
# 657
_M_range_initialize(__first, __last, std::__iterator_category(__first)); 
# 659
} 
# 678 "/usr/include/c++/11/bits/stl_vector.h" 3
~vector() noexcept 
# 679
{ 
# 680
std::_Destroy(((this->_M_impl)._M_start), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 682
; 
# 683
} 
# 695 "/usr/include/c++/11/bits/stl_vector.h" 3
vector &operator=(const vector & __x); 
# 709 "/usr/include/c++/11/bits/stl_vector.h" 3
vector &operator=(vector &&__x) noexcept(_Alloc_traits::_S_nothrow_move()) 
# 710
{ 
# 711
constexpr bool __move_storage = (_Alloc_traits::_S_propagate_on_move_assign() || _Alloc_traits::_S_always_equal()); 
# 714
_M_move_assign(std::move(__x), std::__bool_constant< __move_storage> ()); 
# 715
return *this; 
# 716
} 
# 730 "/usr/include/c++/11/bits/stl_vector.h" 3
vector &operator=(initializer_list< value_type>  __l) 
# 731
{ 
# 732
this->_M_assign_aux(__l.begin(), __l.end(), std::random_access_iterator_tag()); 
# 734
return *this; 
# 735
} 
# 749 "/usr/include/c++/11/bits/stl_vector.h" 3
void assign(size_type __n, const value_type &__val) 
# 750
{ _M_fill_assign(__n, __val); } 
# 765 "/usr/include/c++/11/bits/stl_vector.h" 3
template< class _InputIterator, class 
# 766
 = std::_RequireInputIter< _InputIterator> > void 
# 768
assign(_InputIterator __first, _InputIterator __last) 
# 769
{ _M_assign_dispatch(__first, __last, std::__false_type()); } 
# 794 "/usr/include/c++/11/bits/stl_vector.h" 3
void assign(initializer_list< value_type>  __l) 
# 795
{ 
# 796
this->_M_assign_aux(__l.begin(), __l.end(), std::random_access_iterator_tag()); 
# 798
} 
# 802
using _Vector_base< _Tp, _Alloc> ::get_allocator;
# 811
iterator begin() noexcept 
# 812
{ return ((__gnu_cxx::__normal_iterator< pointer, vector> )(((this->_M_impl)._M_start))); } 
# 820
const_iterator begin() const noexcept 
# 821
{ return ((__gnu_cxx::__normal_iterator< const_pointer, vector> )(((this->_M_impl)._M_start))); } 
# 829
iterator end() noexcept 
# 830
{ return ((__gnu_cxx::__normal_iterator< pointer, vector> )(((this->_M_impl)._M_finish))); } 
# 838
const_iterator end() const noexcept 
# 839
{ return ((__gnu_cxx::__normal_iterator< const_pointer, vector> )(((this->_M_impl)._M_finish))); } 
# 847
reverse_iterator rbegin() noexcept 
# 848
{ return ((std::reverse_iterator< iterator> )(end())); } 
# 856
const_reverse_iterator rbegin() const noexcept 
# 857
{ return ((std::reverse_iterator< const_iterator> )(end())); } 
# 865
reverse_iterator rend() noexcept 
# 866
{ return ((std::reverse_iterator< iterator> )(begin())); } 
# 874
const_reverse_iterator rend() const noexcept 
# 875
{ return ((std::reverse_iterator< const_iterator> )(begin())); } 
# 884
const_iterator cbegin() const noexcept 
# 885
{ return ((__gnu_cxx::__normal_iterator< const_pointer, vector> )(((this->_M_impl)._M_start))); } 
# 893
const_iterator cend() const noexcept 
# 894
{ return ((__gnu_cxx::__normal_iterator< const_pointer, vector> )(((this->_M_impl)._M_finish))); } 
# 902
const_reverse_iterator crbegin() const noexcept 
# 903
{ return ((std::reverse_iterator< const_iterator> )(end())); } 
# 911
const_reverse_iterator crend() const noexcept 
# 912
{ return ((std::reverse_iterator< const_iterator> )(begin())); } 
# 918
size_type size() const noexcept 
# 919
{ return (size_type)(((this->_M_impl)._M_finish) - ((this->_M_impl)._M_start)); } 
# 923
size_type max_size() const noexcept 
# 924
{ return (_S_max_size)(_M_get_Tp_allocator()); } 
# 937 "/usr/include/c++/11/bits/stl_vector.h" 3
void resize(size_type __new_size) 
# 938
{ 
# 939
if (__new_size > size()) { 
# 940
_M_default_append(__new_size - size()); } else { 
# 941
if (__new_size < size()) { 
# 942
_M_erase_at_end(((this->_M_impl)._M_start) + __new_size); }  }  
# 943
} 
# 957 "/usr/include/c++/11/bits/stl_vector.h" 3
void resize(size_type __new_size, const value_type &__x) 
# 958
{ 
# 959
if (__new_size > size()) { 
# 960
_M_fill_insert(end(), __new_size - size(), __x); } else { 
# 961
if (__new_size < size()) { 
# 962
_M_erase_at_end(((this->_M_impl)._M_start) + __new_size); }  }  
# 963
} 
# 989 "/usr/include/c++/11/bits/stl_vector.h" 3
void shrink_to_fit() 
# 990
{ _M_shrink_to_fit(); } 
# 998
size_type capacity() const noexcept 
# 999
{ return (size_type)(((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_start)); 
# 1000
} 
# 1006
[[__nodiscard__]] bool 
# 1007
empty() const noexcept 
# 1008
{ return begin() == end(); } 
# 1028 "/usr/include/c++/11/bits/stl_vector.h" 3
void reserve(size_type __n); 
# 1043 "/usr/include/c++/11/bits/stl_vector.h" 3
reference operator[](size_type __n) noexcept 
# 1044
{ 
# 1045
; 
# 1046
return *(((this->_M_impl)._M_start) + __n); 
# 1047
} 
# 1061 "/usr/include/c++/11/bits/stl_vector.h" 3
const_reference operator[](size_type __n) const noexcept 
# 1062
{ 
# 1063
; 
# 1064
return *(((this->_M_impl)._M_start) + __n); 
# 1065
} 
# 1070
protected: void _M_range_check(size_type __n) const 
# 1071
{ 
# 1072
if (__n >= size()) { 
# 1073
__throw_out_of_range_fmt("vector::_M_range_check: __n (which is %zu) >= this->size() (which is %zu)", __n, size()); }  
# 1077
} 
# 1092 "/usr/include/c++/11/bits/stl_vector.h" 3
public: reference at(size_type __n) 
# 1093
{ 
# 1094
_M_range_check(__n); 
# 1095
return (*this)[__n]; 
# 1096
} 
# 1110 "/usr/include/c++/11/bits/stl_vector.h" 3
const_reference at(size_type __n) const 
# 1111
{ 
# 1112
_M_range_check(__n); 
# 1113
return (*this)[__n]; 
# 1114
} 
# 1121
reference front() noexcept 
# 1122
{ 
# 1123
; 
# 1124
return *begin(); 
# 1125
} 
# 1132
const_reference front() const noexcept 
# 1133
{ 
# 1134
; 
# 1135
return *begin(); 
# 1136
} 
# 1143
reference back() noexcept 
# 1144
{ 
# 1145
; 
# 1146
return *(end() - 1); 
# 1147
} 
# 1154
const_reference back() const noexcept 
# 1155
{ 
# 1156
; 
# 1157
return *(end() - 1); 
# 1158
} 
# 1168 "/usr/include/c++/11/bits/stl_vector.h" 3
_Tp *data() noexcept 
# 1169
{ return _M_data_ptr(((this->_M_impl)._M_start)); } 
# 1172
const _Tp *data() const noexcept 
# 1173
{ return _M_data_ptr(((this->_M_impl)._M_start)); } 
# 1187 "/usr/include/c++/11/bits/stl_vector.h" 3
void push_back(const value_type &__x) 
# 1188
{ 
# 1189
if (((this->_M_impl)._M_finish) != ((this->_M_impl)._M_end_of_storage)) 
# 1190
{ 
# 1191
; 
# 1192
_Alloc_traits::construct((this->_M_impl), ((this->_M_impl)._M_finish), __x); 
# 1194
++((this->_M_impl)._M_finish); 
# 1195
; 
# 1196
} else { 
# 1198
_M_realloc_insert(end(), __x); }  
# 1199
} 
# 1203
void push_back(value_type &&__x) 
# 1204
{ emplace_back(std::move(__x)); } 
# 1206
template< class ..._Args> reference emplace_back(_Args && ...__args); 
# 1225 "/usr/include/c++/11/bits/stl_vector.h" 3
void pop_back() noexcept 
# 1226
{ 
# 1227
; 
# 1228
--((this->_M_impl)._M_finish); 
# 1229
_Alloc_traits::destroy((this->_M_impl), ((this->_M_impl)._M_finish)); 
# 1230
; 
# 1231
} 
# 1246 "/usr/include/c++/11/bits/stl_vector.h" 3
template< class ..._Args> iterator 
# 1248
emplace(const_iterator __position, _Args &&...__args) 
# 1249
{ return _M_emplace_aux(__position, std::forward< _Args> (__args)...); } 
# 1263 "/usr/include/c++/11/bits/stl_vector.h" 3
iterator insert(const_iterator __position, const value_type & __x); 
# 1293 "/usr/include/c++/11/bits/stl_vector.h" 3
iterator insert(const_iterator __position, value_type &&__x) 
# 1294
{ return _M_insert_rval(__position, std::move(__x)); } 
# 1310 "/usr/include/c++/11/bits/stl_vector.h" 3
iterator insert(const_iterator __position, initializer_list< value_type>  __l) 
# 1311
{ 
# 1312
auto __offset = __position - cbegin(); 
# 1313
_M_range_insert(begin() + __offset, __l.begin(), __l.end(), std::random_access_iterator_tag()); 
# 1315
return begin() + __offset; 
# 1316
} 
# 1335 "/usr/include/c++/11/bits/stl_vector.h" 3
iterator insert(const_iterator __position, size_type __n, const value_type &__x) 
# 1336
{ 
# 1337
difference_type __offset = __position - cbegin(); 
# 1338
_M_fill_insert(begin() + __offset, __n, __x); 
# 1339
return begin() + __offset; 
# 1340
} 
# 1376 "/usr/include/c++/11/bits/stl_vector.h" 3
template< class _InputIterator, class 
# 1377
 = std::_RequireInputIter< _InputIterator> > iterator 
# 1379
insert(const_iterator __position, _InputIterator __first, _InputIterator 
# 1380
__last) 
# 1381
{ 
# 1382
difference_type __offset = __position - cbegin(); 
# 1383
_M_insert_dispatch(begin() + __offset, __first, __last, std::__false_type()); 
# 1385
return begin() + __offset; 
# 1386
} 
# 1430 "/usr/include/c++/11/bits/stl_vector.h" 3
iterator erase(const_iterator __position) 
# 1431
{ return _M_erase(begin() + (__position - cbegin())); } 
# 1457 "/usr/include/c++/11/bits/stl_vector.h" 3
iterator erase(const_iterator __first, const_iterator __last) 
# 1458
{ 
# 1459
const auto __beg = begin(); 
# 1460
const auto __cbeg = cbegin(); 
# 1461
return _M_erase(__beg + (__first - __cbeg), __beg + (__last - __cbeg)); 
# 1462
} 
# 1480 "/usr/include/c++/11/bits/stl_vector.h" 3
void swap(vector &__x) noexcept 
# 1481
{ 
# 1483
do { if (__builtin_is_constant_evaluated() && (!((bool)(_Alloc_traits::propagate_on_container_swap::value || (_M_get_Tp_allocator() == __x._M_get_Tp_allocator()))))) { __builtin_unreachable(); }  } while (false); 
# 1486
(this->_M_impl)._M_swap_data((__x._M_impl)); 
# 1487
_Alloc_traits::_S_on_swap(_M_get_Tp_allocator(), __x._M_get_Tp_allocator()); 
# 1489
} 
# 1498
void clear() noexcept 
# 1499
{ _M_erase_at_end(((this->_M_impl)._M_start)); } 
# 1508
protected: 
# 1506
template< class _ForwardIterator> pointer 
# 1508
_M_allocate_and_copy(size_type __n, _ForwardIterator 
# 1509
__first, _ForwardIterator __last) 
# 1510
{ 
# 1511
pointer __result = this->_M_allocate(__n); 
# 1512
try 
# 1513
{ 
# 1514
std::__uninitialized_copy_a(__first, __last, __result, _M_get_Tp_allocator()); 
# 1516
return __result; 
# 1517
} 
# 1518
catch (...) 
# 1519
{ 
# 1520
_M_deallocate(__result, __n); 
# 1521
throw; 
# 1522
}  
# 1523
} 
# 1556 "/usr/include/c++/11/bits/stl_vector.h" 3
template< class _InputIterator> void 
# 1558
_M_range_initialize(_InputIterator __first, _InputIterator __last, std::input_iterator_tag) 
# 1560
{ 
# 1561
try { 
# 1562
for (; __first != __last; ++__first) { 
# 1564
emplace_back(*__first); }  
# 1568
} catch (...) { 
# 1569
clear(); 
# 1570
throw; 
# 1571
}  
# 1572
} 
# 1575
template< class _ForwardIterator> void 
# 1577
_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag) 
# 1579
{ 
# 1580
const size_type __n = std::distance(__first, __last); 
# 1581
((this->_M_impl)._M_start) = this->_M_allocate((_S_check_init_len)(__n, _M_get_Tp_allocator())); 
# 1583
((this->_M_impl)._M_end_of_storage) = (((this->_M_impl)._M_start) + __n); 
# 1584
((this->_M_impl)._M_finish) = std::__uninitialized_copy_a(__first, __last, ((this->_M_impl)._M_start), _M_get_Tp_allocator()); 
# 1588
} 
# 1593
void _M_fill_initialize(size_type __n, const value_type &__value) 
# 1594
{ 
# 1595
((this->_M_impl)._M_finish) = std::__uninitialized_fill_n_a(((this->_M_impl)._M_start), __n, __value, _M_get_Tp_allocator()); 
# 1598
} 
# 1603
void _M_default_initialize(size_type __n) 
# 1604
{ 
# 1605
((this->_M_impl)._M_finish) = std::__uninitialized_default_n_a(((this->_M_impl)._M_start), __n, _M_get_Tp_allocator()); 
# 1608
} 
# 1618 "/usr/include/c++/11/bits/stl_vector.h" 3
template< class _Integer> void 
# 1620
_M_assign_dispatch(_Integer __n, _Integer __val, std::__true_type) 
# 1621
{ _M_fill_assign(__n, __val); } 
# 1624
template< class _InputIterator> void 
# 1626
_M_assign_dispatch(_InputIterator __first, _InputIterator __last, std::__false_type) 
# 1628
{ _M_assign_aux(__first, __last, std::__iterator_category(__first)); } 
# 1631
template< class _InputIterator> void _M_assign_aux(_InputIterator __first, _InputIterator __last, std::input_iterator_tag); 
# 1637
template< class _ForwardIterator> void _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag); 
# 1645
void _M_fill_assign(size_type __n, const value_type & __val); 
# 1653
template< class _Integer> void 
# 1655
_M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val, std::__true_type) 
# 1657
{ _M_fill_insert(__pos, __n, __val); } 
# 1660
template< class _InputIterator> void 
# 1662
_M_insert_dispatch(iterator __pos, _InputIterator __first, _InputIterator 
# 1663
__last, std::__false_type) 
# 1664
{ 
# 1665
_M_range_insert(__pos, __first, __last, std::__iterator_category(__first)); 
# 1667
} 
# 1670
template< class _InputIterator> void _M_range_insert(iterator __pos, _InputIterator __first, _InputIterator __last, std::input_iterator_tag); 
# 1676
template< class _ForwardIterator> void _M_range_insert(iterator __pos, _ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag); 
# 1684
void _M_fill_insert(iterator __pos, size_type __n, const value_type & __x); 
# 1689
void _M_default_append(size_type __n); 
# 1692
bool _M_shrink_to_fit(); 
# 1705 "/usr/include/c++/11/bits/stl_vector.h" 3
struct _Temporary_value { 
# 1707
template< class ..._Args> explicit 
# 1709
_Temporary_value(vector *__vec, _Args &&...__args) : _M_this(__vec) 
# 1710
{ 
# 1711
_Alloc_traits::construct(((_M_this)->_M_impl), _M_ptr(), std::forward< _Args> (__args)...); 
# 1713
} 
# 1715
~_Temporary_value() 
# 1716
{ _Alloc_traits::destroy(((_M_this)->_M_impl), _M_ptr()); } 
# 1719
value_type &_M_val() { return *_M_ptr(); } 
# 1723
private: _Tp *_M_ptr() { return reinterpret_cast< _Tp *>(&(__buf)); } 
# 1725
vector *_M_this; 
# 1726
typename aligned_storage< sizeof(_Tp), __alignof__(_Tp)> ::type __buf; 
# 1727
}; 
# 1731
template< class _Arg> void _M_insert_aux(iterator __position, _Arg && __arg); 
# 1735
template< class ..._Args> void _M_realloc_insert(iterator __position, _Args && ...__args); 
# 1741
iterator _M_insert_rval(const_iterator __position, value_type && __v); 
# 1744
template< class ..._Args> iterator _M_emplace_aux(const_iterator __position, _Args && ...__args); 
# 1750
iterator _M_emplace_aux(const_iterator __position, value_type &&__v) 
# 1751
{ return _M_insert_rval(__position, std::move(__v)); } 
# 1756
size_type _M_check_len(size_type __n, const char *__s) const 
# 1757
{ 
# 1758
if ((max_size() - size()) < __n) { 
# 1759
__throw_length_error(__s); }  
# 1761
const size_type __len = size() + (std::max)(size(), __n); 
# 1762
return ((__len < size()) || (__len > max_size())) ? max_size() : __len; 
# 1763
} 
# 1767
static size_type _S_check_init_len(size_type __n, const allocator_type &__a) 
# 1768
{ 
# 1769
if (__n > (_S_max_size)((_Tp_alloc_type)__a)) { 
# 1770
__throw_length_error("cannot create std::vector larger than max_size()"); }  
# 1772
return __n; 
# 1773
} 
# 1776
static size_type _S_max_size(const _Tp_alloc_type &__a) noexcept 
# 1777
{ 
# 1781
const std::size_t __diffmax = (__gnu_cxx::__numeric_traits< std::ptrdiff_t> ::__max / sizeof(_Tp)); 
# 1783
const std::size_t __allocmax = _Alloc_traits::max_size(__a); 
# 1784
return (std::min)(__diffmax, __allocmax); 
# 1785
} 
# 1792
void _M_erase_at_end(pointer __pos) noexcept 
# 1793
{ 
# 1794
if (size_type __n = ((this->_M_impl)._M_finish) - __pos) 
# 1795
{ 
# 1796
std::_Destroy(__pos, ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 1798
((this->_M_impl)._M_finish) = __pos; 
# 1799
; 
# 1800
}  
# 1801
} 
# 1804
iterator _M_erase(iterator __position); 
# 1807
iterator _M_erase(iterator __first, iterator __last); 
# 1815
private: void _M_move_assign(vector &&__x, std::true_type) noexcept 
# 1816
{ 
# 1817
vector __tmp(get_allocator()); 
# 1818
(this->_M_impl)._M_swap_data((__x._M_impl)); 
# 1819
(__tmp._M_impl)._M_swap_data((__x._M_impl)); 
# 1820
std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator()); 
# 1821
} 
# 1826
void _M_move_assign(vector &&__x, std::false_type) 
# 1827
{ 
# 1828
if (__x._M_get_Tp_allocator() == this->_M_get_Tp_allocator()) { 
# 1829
_M_move_assign(std::move(__x), std::true_type()); } else 
# 1831
{ 
# 1834
this->_M_assign_aux(std::make_move_iterator(__x.begin()), std::make_move_iterator(__x.end()), std::random_access_iterator_tag()); 
# 1837
__x.clear(); 
# 1838
}  
# 1839
} 
# 1842
template< class _Up> _Up *
# 1844
_M_data_ptr(_Up *__ptr) const noexcept 
# 1845
{ return __ptr; } 
# 1848
template< class _Ptr> typename pointer_traits< _Ptr> ::element_type *
# 1850
_M_data_ptr(_Ptr __ptr) const 
# 1851
{ return (empty()) ? nullptr : std::__to_address(__ptr); } 
# 1868 "/usr/include/c++/11/bits/stl_vector.h" 3
}; 
# 1871
template< class _InputIterator, class _ValT = typename iterator_traits< _InputIterator> ::value_type, class 
# 1873
_Allocator = allocator< _ValT> , class 
# 1874
 = _RequireInputIter< _InputIterator> , class 
# 1875
 = _RequireAllocator< _Allocator> > 
# 1876
vector(_InputIterator, _InputIterator, _Allocator = _Allocator())->vector< _ValT, _Allocator> ; 
# 1890 "/usr/include/c++/11/bits/stl_vector.h" 3
template< class _Tp, class _Alloc> inline bool 
# 1892
operator==(const vector< _Tp, _Alloc>  &__x, const vector< _Tp, _Alloc>  &__y) 
# 1893
{ return ((__x.size() == __y.size()) && std::equal(__x.begin(), __x.end(), __y.begin())); 
# 1894
} 
# 1928 "/usr/include/c++/11/bits/stl_vector.h" 3
template< class _Tp, class _Alloc> inline bool 
# 1930
operator<(const vector< _Tp, _Alloc>  &__x, const vector< _Tp, _Alloc>  &__y) 
# 1931
{ return std::lexicographical_compare(__x.begin(), __x.end(), __y.begin(), __y.end()); 
# 1932
} 
# 1935
template< class _Tp, class _Alloc> inline bool 
# 1937
operator!=(const vector< _Tp, _Alloc>  &__x, const vector< _Tp, _Alloc>  &__y) 
# 1938
{ return !(__x == __y); } 
# 1941
template< class _Tp, class _Alloc> inline bool 
# 1943
operator>(const vector< _Tp, _Alloc>  &__x, const vector< _Tp, _Alloc>  &__y) 
# 1944
{ return __y < __x; } 
# 1947
template< class _Tp, class _Alloc> inline bool 
# 1949
operator<=(const vector< _Tp, _Alloc>  &__x, const vector< _Tp, _Alloc>  &__y) 
# 1950
{ return !(__y < __x); } 
# 1953
template< class _Tp, class _Alloc> inline bool 
# 1955
operator>=(const vector< _Tp, _Alloc>  &__x, const vector< _Tp, _Alloc>  &__y) 
# 1956
{ return !(__x < __y); } 
# 1960
template< class _Tp, class _Alloc> inline void 
# 1962
swap(vector< _Tp, _Alloc>  &__x, vector< _Tp, _Alloc>  &__y) noexcept(noexcept(__x.swap(__y))) 
# 1964
{ __x.swap(__y); } 
# 1969
namespace __detail { namespace __variant { 
# 1971
template< class > struct _Never_valueless_alt; 
# 1975
template< class _Tp, class _Alloc> 
# 1976
struct _Never_valueless_alt< vector< _Tp, _Alloc> >  : public is_nothrow_move_assignable< vector< _Tp, _Alloc> >  { 
# 1978
}; 
# 1979
}}
# 1983
}
# 64 "/usr/include/c++/11/bits/stl_bvector.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 69
typedef unsigned long _Bit_type; 
# 70
enum { _S_word_bit = ((int)((8) * sizeof(_Bit_type)))}; 
# 72
struct _Bit_reference { 
# 74
_Bit_type *_M_p; 
# 75
_Bit_type _M_mask; 
# 77
_Bit_reference(_Bit_type *__x, _Bit_type __y) : _M_p(__x), _M_mask(__y) 
# 78
{ } 
# 80
_Bit_reference() noexcept : _M_p((0)), _M_mask((0)) { } 
# 83
_Bit_reference(const _Bit_reference &) = default;
# 86
operator bool() const noexcept 
# 87
{ return !(!((*(_M_p)) & (_M_mask))); } 
# 90
_Bit_reference &operator=(bool __x) noexcept 
# 91
{ 
# 92
if (__x) { 
# 93
(*(_M_p)) |= (_M_mask); } else { 
# 95
(*(_M_p)) &= (~(_M_mask)); }  
# 96
return *this; 
# 97
} 
# 100
_Bit_reference &operator=(const _Bit_reference &__x) noexcept 
# 101
{ return ((*this) = ((bool)__x)); } 
# 104
bool operator==(const _Bit_reference &__x) const 
# 105
{ return ((bool)(*this)) == ((bool)__x); } 
# 108
bool operator<(const _Bit_reference &__x) const 
# 109
{ return (!((bool)(*this))) && ((bool)__x); } 
# 112
void flip() noexcept 
# 113
{ (*(_M_p)) ^= (_M_mask); } 
# 114
}; 
# 118
inline void swap(_Bit_reference __x, _Bit_reference __y) noexcept 
# 119
{ 
# 120
bool __tmp = __x; 
# 121
(__x = __y); 
# 122
(__y = __tmp); 
# 123
} 
# 126
inline void swap(_Bit_reference __x, bool &__y) noexcept 
# 127
{ 
# 128
bool __tmp = __x; 
# 129
(__x = __y); 
# 130
__y = __tmp; 
# 131
} 
# 134
inline void swap(bool &__x, _Bit_reference __y) noexcept 
# 135
{ 
# 136
bool __tmp = __x; 
# 137
__x = __y; 
# 138
(__y = __tmp); 
# 139
} 
# 142
struct _Bit_iterator_base : public iterator< random_access_iterator_tag, bool>  { 
# 145
_Bit_type *_M_p; 
# 146
unsigned _M_offset; 
# 148
_Bit_iterator_base(_Bit_type *__x, unsigned __y) : _M_p(__x), _M_offset(__y) 
# 149
{ } 
# 152
void _M_bump_up() 
# 153
{ 
# 154
if (((_M_offset)++) == (((int)_S_word_bit) - 1)) 
# 155
{ 
# 156
(_M_offset) = (0); 
# 157
++(_M_p); 
# 158
}  
# 159
} 
# 162
void _M_bump_down() 
# 163
{ 
# 164
if (((_M_offset)--) == (0)) 
# 165
{ 
# 166
(_M_offset) = (((int)_S_word_bit) - 1); 
# 167
--(_M_p); 
# 168
}  
# 169
} 
# 172
void _M_incr(ptrdiff_t __i) 
# 173
{ 
# 174
difference_type __n = __i + (_M_offset); 
# 175
(_M_p) += (__n / ((int)_S_word_bit)); 
# 176
__n = (__n % ((int)_S_word_bit)); 
# 177
if (__n < (0)) 
# 178
{ 
# 179
__n += ((int)_S_word_bit); 
# 180
--(_M_p); 
# 181
}  
# 182
(_M_offset) = (static_cast< unsigned>(__n)); 
# 183
} 
# 186
friend inline bool operator==(const _Bit_iterator_base &__x, const _Bit_iterator_base &__y) 
# 187
{ return ((__x._M_p) == (__y._M_p)) && ((__x._M_offset) == (__y._M_offset)); } 
# 200 "/usr/include/c++/11/bits/stl_bvector.h" 3
friend inline bool operator<(const _Bit_iterator_base &__x, const _Bit_iterator_base &__y) 
# 201
{ 
# 202
return ((__x._M_p) < (__y._M_p)) || (((__x._M_p) == (__y._M_p)) && ((__x._M_offset) < (__y._M_offset))); 
# 204
} 
# 207
friend inline bool operator!=(const _Bit_iterator_base &__x, const _Bit_iterator_base &__y) 
# 208
{ return !(__x == __y); } 
# 211
friend inline bool operator>(const _Bit_iterator_base &__x, const _Bit_iterator_base &__y) 
# 212
{ return (__y < __x); } 
# 215
friend inline bool operator<=(const _Bit_iterator_base &__x, const _Bit_iterator_base &__y) 
# 216
{ return !(__y < __x); } 
# 219
friend inline bool operator>=(const _Bit_iterator_base &__x, const _Bit_iterator_base &__y) 
# 220
{ return !(__x < __y); } 
# 224
friend inline ptrdiff_t operator-(const _Bit_iterator_base &__x, const _Bit_iterator_base &__y) 
# 225
{ 
# 226
return (((((int)_S_word_bit) * ((__x._M_p) - (__y._M_p))) + (__x._M_offset)) - (__y._M_offset)); 
# 228
} 
# 229
}; 
# 231
struct _Bit_iterator : public _Bit_iterator_base { 
# 233
typedef _Bit_reference reference; 
# 237
typedef _Bit_reference *pointer; 
# 239
typedef _Bit_iterator iterator; 
# 241
_Bit_iterator() : _Bit_iterator_base(0, 0) { } 
# 243
_Bit_iterator(_Bit_type *__x, unsigned __y) : _Bit_iterator_base(__x, __y) 
# 244
{ } 
# 247
iterator _M_const_cast() const 
# 248
{ return *this; } 
# 251
reference operator*() const 
# 252
{ return reference(_M_p, 1UL << (_M_offset)); } 
# 255
iterator &operator++() 
# 256
{ 
# 257
this->_M_bump_up(); 
# 258
return *this; 
# 259
} 
# 262
iterator operator++(int) 
# 263
{ 
# 264
iterator __tmp = *this; 
# 265
this->_M_bump_up(); 
# 266
return __tmp; 
# 267
} 
# 270
iterator &operator--() 
# 271
{ 
# 272
this->_M_bump_down(); 
# 273
return *this; 
# 274
} 
# 277
iterator operator--(int) 
# 278
{ 
# 279
iterator __tmp = *this; 
# 280
this->_M_bump_down(); 
# 281
return __tmp; 
# 282
} 
# 285
iterator &operator+=(difference_type __i) 
# 286
{ 
# 287
this->_M_incr(__i); 
# 288
return *this; 
# 289
} 
# 292
iterator &operator-=(difference_type __i) 
# 293
{ 
# 294
((*this) += (-__i)); 
# 295
return *this; 
# 296
} 
# 299
reference operator[](difference_type __i) const 
# 300
{ return (*(((*this) + __i))); } 
# 303
friend inline iterator operator+(const _Bit_iterator::iterator &__x, std::iterator< std::random_access_iterator_tag, bool> ::difference_type __n) 
# 304
{ 
# 305
iterator __tmp = __x; 
# 306
(__tmp += __n); 
# 307
return __tmp; 
# 308
} 
# 311
friend inline iterator operator+(std::iterator< std::random_access_iterator_tag, bool> ::difference_type __n, const _Bit_iterator::iterator &__x) 
# 312
{ return (__x + __n); } 
# 315
friend inline iterator operator-(const _Bit_iterator::iterator &__x, std::iterator< std::random_access_iterator_tag, bool> ::difference_type __n) 
# 316
{ 
# 317
iterator __tmp = __x; 
# 318
(__tmp -= __n); 
# 319
return __tmp; 
# 320
} 
# 321
}; 
# 323
struct _Bit_const_iterator : public _Bit_iterator_base { 
# 325
typedef bool reference; 
# 326
typedef bool const_reference; 
# 330
typedef const bool *pointer; 
# 332
typedef _Bit_const_iterator const_iterator; 
# 334
_Bit_const_iterator() : _Bit_iterator_base(0, 0) { } 
# 336
_Bit_const_iterator(_Bit_type *__x, unsigned __y) : _Bit_iterator_base(__x, __y) 
# 337
{ } 
# 339
_Bit_const_iterator(const _Bit_iterator &__x) : _Bit_iterator_base(__x._M_p, __x._M_offset) 
# 340
{ } 
# 343
_Bit_iterator _M_const_cast() const 
# 344
{ return _Bit_iterator(_M_p, _M_offset); } 
# 347
const_reference operator*() const 
# 348
{ return _Bit_reference(_M_p, 1UL << (_M_offset)); } 
# 351
const_iterator &operator++() 
# 352
{ 
# 353
this->_M_bump_up(); 
# 354
return *this; 
# 355
} 
# 358
const_iterator operator++(int) 
# 359
{ 
# 360
const_iterator __tmp = *this; 
# 361
this->_M_bump_up(); 
# 362
return __tmp; 
# 363
} 
# 366
const_iterator &operator--() 
# 367
{ 
# 368
this->_M_bump_down(); 
# 369
return *this; 
# 370
} 
# 373
const_iterator operator--(int) 
# 374
{ 
# 375
const_iterator __tmp = *this; 
# 376
this->_M_bump_down(); 
# 377
return __tmp; 
# 378
} 
# 381
const_iterator &operator+=(difference_type __i) 
# 382
{ 
# 383
this->_M_incr(__i); 
# 384
return *this; 
# 385
} 
# 388
const_iterator &operator-=(difference_type __i) 
# 389
{ 
# 390
((*this) += (-__i)); 
# 391
return *this; 
# 392
} 
# 395
const_reference operator[](difference_type __i) const 
# 396
{ return (*(((*this) + __i))); } 
# 399
friend inline const_iterator operator+(const _Bit_const_iterator::const_iterator &__x, std::iterator< std::random_access_iterator_tag, bool> ::difference_type __n) 
# 400
{ 
# 401
const_iterator __tmp = __x; 
# 402
(__tmp += __n); 
# 403
return __tmp; 
# 404
} 
# 407
friend inline const_iterator operator-(const _Bit_const_iterator::const_iterator &__x, std::iterator< std::random_access_iterator_tag, bool> ::difference_type __n) 
# 408
{ 
# 409
const_iterator __tmp = __x; 
# 410
(__tmp -= __n); 
# 411
return __tmp; 
# 412
} 
# 415
friend inline const_iterator operator+(std::iterator< std::random_access_iterator_tag, bool> ::difference_type __n, const _Bit_const_iterator::const_iterator &__x) 
# 416
{ return (__x + __n); } 
# 417
}; 
# 419
template< class _Alloc> 
# 420
struct _Bvector_base { 
# 423
typedef typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _Bit_type> ::other _Bit_alloc_type; 
# 425
typedef __gnu_cxx::__alloc_traits< _Bit_alloc_type>  _Bit_alloc_traits; 
# 426
typedef typename __gnu_cxx::__alloc_traits< _Bit_alloc_type> ::pointer _Bit_pointer; 
# 428
struct _Bvector_impl_data { 
# 431
_Bit_iterator _M_start; 
# 440 "/usr/include/c++/11/bits/stl_bvector.h" 3
_Bit_iterator _M_finish; 
# 441
_Bit_pointer _M_end_of_storage; 
# 443
_Bvector_impl_data() noexcept : _M_start(), _M_finish(), _M_end_of_storage() 
# 445
{ } 
# 448
_Bvector_impl_data(const _Bvector_impl_data &) = default;
# 450
_Bvector_impl_data &operator=(const _Bvector_impl_data &) = default;
# 452
_Bvector_impl_data(_Bvector_impl_data &&__x) noexcept : _Bvector_impl_data(__x) 
# 454
{ __x._M_reset(); } 
# 457
void _M_move_data(_Bvector_impl_data &&__x) noexcept 
# 458
{ 
# 459
(*this) = __x; 
# 460
__x._M_reset(); 
# 461
} 
# 465
void _M_reset() noexcept 
# 466
{ (*this) = _Bvector_impl_data(); } 
# 469
void _M_swap_data(_Bvector_impl_data &__x) noexcept 
# 470
{ 
# 473
std::swap(*this, __x); 
# 474
} 
# 475
}; 
# 477
struct _Bvector_impl : public _Bit_alloc_type, public _Bvector_impl_data { 
# 480
_Bvector_impl() noexcept(is_nothrow_default_constructible< typename _Bvector_base< _Alloc> ::_Bit_alloc_type> ::value) : _Bvector_base< _Alloc> ::_Bit_alloc_type() 
# 483
{ } 
# 485
_Bvector_impl(const typename _Bvector_base< _Alloc> ::_Bit_alloc_type &__a) noexcept : _Bvector_base< _Alloc> ::_Bit_alloc_type(__a) 
# 487
{ } 
# 492
_Bvector_impl(_Bvector_impl &&__x) noexcept : _Bvector_base< _Alloc> ::_Bvector_impl_data(std::move(__x)), _Bvector_base< _Alloc> ::_Bit_alloc_type(std::move(__x)) 
# 494
{ } 
# 496
_Bvector_impl(typename _Bvector_base< _Alloc> ::_Bit_alloc_type &&__a, _Bvector_impl &&__x) noexcept : _Bvector_base< _Alloc> ::_Bvector_impl_data(std::move(__x)), _Bvector_base< _Alloc> ::_Bit_alloc_type(std::move(__a)) 
# 498
{ } 
# 502
std::_Bit_type *_M_end_addr() const noexcept 
# 503
{ 
# 504
if (this->_M_end_of_storage) { 
# 505
return std::__addressof((this->_M_end_of_storage)[-1]) + 1; }  
# 506
return 0; 
# 507
} 
# 508
}; 
# 511
typedef _Alloc allocator_type; 
# 514
_Bit_alloc_type &_M_get_Bit_allocator() noexcept 
# 515
{ return this->_M_impl; } 
# 518
const _Bit_alloc_type &_M_get_Bit_allocator() const noexcept 
# 519
{ return this->_M_impl; } 
# 522
allocator_type get_allocator() const noexcept 
# 523
{ return (allocator_type)_M_get_Bit_allocator(); } 
# 526
_Bvector_base() = default;
# 531
_Bvector_base(const allocator_type &__a) : _M_impl(__a) 
# 532
{ } 
# 535
_Bvector_base(_Bvector_base &&) = default;
# 537
_Bvector_base(_Bvector_base &&__x, const allocator_type &__a) noexcept : _M_impl((_Bit_alloc_type)__a, std::move(__x._M_impl)) 
# 539
{ } 
# 542
~_Bvector_base() 
# 543
{ _M_deallocate(); } 
# 546
protected: _Bvector_impl _M_impl; 
# 549
_Bit_pointer _M_allocate(size_t __n) 
# 550
{ return _Bit_alloc_traits::allocate(_M_impl, (_S_nword)(__n)); } 
# 553
void _M_deallocate() 
# 554
{ 
# 555
if (((_M_impl)._M_start)._M_p) 
# 556
{ 
# 557
const size_t __n = (_M_impl)._M_end_addr() - (((_M_impl)._M_start)._M_p); 
# 558
_Bit_alloc_traits::deallocate(_M_impl, ((_M_impl)._M_end_of_storage) - __n, __n); 
# 561
(_M_impl)._M_reset(); 
# 562
}  
# 563
} 
# 567
void _M_move_data(_Bvector_base &&__x) noexcept 
# 568
{ (_M_impl)._M_move_data(std::move(__x._M_impl)); } 
# 572
static size_t _S_nword(size_t __n) 
# 573
{ return ((__n + ((int)_S_word_bit)) - (1)) / ((int)_S_word_bit); } 
# 574
}; 
# 595 "/usr/include/c++/11/bits/stl_bvector.h" 3
template< class _Alloc> 
# 596
class vector< bool, _Alloc>  : protected _Bvector_base< _Alloc>  { 
# 598
typedef _Bvector_base< _Alloc>  _Base; 
# 599
typedef typename _Bvector_base< _Alloc> ::_Bit_pointer _Bit_pointer; 
# 600
typedef typename _Bvector_base< _Alloc> ::_Bit_alloc_traits _Bit_alloc_traits; 
# 603
friend struct hash< vector> ; 
# 607
public: typedef bool value_type; 
# 608
typedef std::size_t size_type; 
# 609
typedef std::ptrdiff_t difference_type; 
# 610
typedef std::_Bit_reference reference; 
# 611
typedef bool const_reference; 
# 612
typedef std::_Bit_reference *pointer; 
# 613
typedef const bool *const_pointer; 
# 614
typedef std::_Bit_iterator iterator; 
# 615
typedef std::_Bit_const_iterator const_iterator; 
# 616
typedef std::reverse_iterator< std::_Bit_const_iterator>  const_reverse_iterator; 
# 617
typedef std::reverse_iterator< std::_Bit_iterator>  reverse_iterator; 
# 618
typedef _Alloc allocator_type; 
# 621
allocator_type get_allocator() const 
# 622
{ return _Base::get_allocator(); } 
# 625
protected: using _Bvector_base< _Alloc> ::_M_allocate;
# 626
using _Bvector_base< _Alloc> ::_M_deallocate;
# 627
using _Bvector_base< _Alloc> ::_S_nword;
# 628
using _Bvector_base< _Alloc> ::_M_get_Bit_allocator;
# 632
public: vector() = default;
# 638
explicit vector(const allocator_type &__a) : _Base(__a) 
# 639
{ } 
# 643
explicit vector(size_type __n, const allocator_type &__a = allocator_type()) : vector(__n, false, __a) 
# 645
{ } 
# 647
vector(size_type __n, const bool &__value, const allocator_type &
# 648
__a = allocator_type()) : _Base(__a) 
# 655
{ 
# 656
_M_initialize(__n); 
# 657
_M_initialize_value(__value); 
# 658
} 
# 660
vector(const vector &__x) : _Base(_Bit_alloc_traits::_S_select_on_copy(__x._M_get_Bit_allocator())) 
# 662
{ 
# 663
_M_initialize(__x.size()); 
# 664
_M_copy_aligned(__x.begin(), __x.end(), begin()); 
# 665
} 
# 668
vector(vector &&) = default;
# 671
private: vector(vector &&__x, const allocator_type &__a, std::true_type) noexcept : _Base(std::move(__x), __a) 
# 673
{ } 
# 675
vector(vector &&__x, const allocator_type &__a, std::false_type) : _Base(__a) 
# 677
{ 
# 678
if (__x.get_allocator() == __a) { 
# 679
this->_M_move_data(std::move(__x)); } else 
# 681
{ 
# 682
_M_initialize(__x.size()); 
# 683
_M_copy_aligned(__x.begin(), __x.end(), begin()); 
# 684
__x.clear(); 
# 685
}  
# 686
} 
# 689
public: vector(vector &&__x, const allocator_type &__a) noexcept(_Bit_alloc_traits::_S_always_equal()) : vector(std::move(__x), __a, typename _Bvector_base< _Alloc> ::_Bit_alloc_traits::is_always_equal{}) 
# 693
{ } 
# 695
vector(const vector &__x, const allocator_type &__a) : _Base(__a) 
# 697
{ 
# 698
_M_initialize(__x.size()); 
# 699
_M_copy_aligned(__x.begin(), __x.end(), begin()); 
# 700
} 
# 702
vector(std::initializer_list< bool>  __l, const allocator_type &
# 703
__a = allocator_type()) : _Base(__a) 
# 705
{ 
# 706
_M_initialize_range(__l.begin(), __l.end(), std::random_access_iterator_tag()); 
# 708
} 
# 712
template< class _InputIterator, class 
# 713
 = std::_RequireInputIter< _InputIterator> > 
# 714
vector(_InputIterator __first, _InputIterator __last, const allocator_type &
# 715
__a = allocator_type()) : _Base(__a) 
# 717
{ 
# 718
_M_initialize_range(__first, __last, std::__iterator_category(__first)); 
# 720
} 
# 733 "/usr/include/c++/11/bits/stl_bvector.h" 3
~vector() noexcept { } 
# 736
vector &operator=(const vector &__x) 
# 737
{ 
# 738
if ((&__x) == this) { 
# 739
return *this; }  
# 741
if (_Bit_alloc_traits::_S_propagate_on_copy_assign()) 
# 742
{ 
# 743
if (this->_M_get_Bit_allocator() != __x._M_get_Bit_allocator()) 
# 744
{ 
# 745
this->_M_deallocate(); 
# 746
std::__alloc_on_copy(_M_get_Bit_allocator(), __x._M_get_Bit_allocator()); 
# 748
_M_initialize(__x.size()); 
# 749
} else { 
# 751
std::__alloc_on_copy(_M_get_Bit_allocator(), __x._M_get_Bit_allocator()); }  
# 753
}  
# 755
if (__x.size() > capacity()) 
# 756
{ 
# 757
this->_M_deallocate(); 
# 758
_M_initialize(__x.size()); 
# 759
}  
# 760
((this->_M_impl)._M_finish) = _M_copy_aligned(__x.begin(), __x.end(), begin()); 
# 762
return *this; 
# 763
} 
# 767
vector &operator=(vector &&__x) noexcept(_Bit_alloc_traits::_S_nothrow_move()) 
# 768
{ 
# 769
if (_Bit_alloc_traits::_S_propagate_on_move_assign() || (this->_M_get_Bit_allocator() == __x._M_get_Bit_allocator())) 
# 771
{ 
# 772
this->_M_deallocate(); 
# 773
this->_M_move_data(std::move(__x)); 
# 774
std::__alloc_on_move(_M_get_Bit_allocator(), __x._M_get_Bit_allocator()); 
# 776
} else 
# 778
{ 
# 779
if (__x.size() > capacity()) 
# 780
{ 
# 781
this->_M_deallocate(); 
# 782
_M_initialize(__x.size()); 
# 783
}  
# 784
((this->_M_impl)._M_finish) = _M_copy_aligned(__x.begin(), __x.end(), begin()); 
# 786
__x.clear(); 
# 787
}  
# 788
return *this; 
# 789
} 
# 792
vector &operator=(std::initializer_list< bool>  __l) 
# 793
{ 
# 794
this->assign(__l.begin(), __l.end()); 
# 795
return *this; 
# 796
} 
# 804
void assign(size_type __n, const bool &__x) 
# 805
{ _M_fill_assign(__n, __x); } 
# 808
template< class _InputIterator, class 
# 809
 = std::_RequireInputIter< _InputIterator> > void 
# 811
assign(_InputIterator __first, _InputIterator __last) 
# 812
{ _M_assign_aux(__first, __last, std::__iterator_category(__first)); } 
# 826 "/usr/include/c++/11/bits/stl_bvector.h" 3
void assign(std::initializer_list< bool>  __l) 
# 827
{ _M_assign_aux(__l.begin(), __l.end(), std::random_access_iterator_tag()); } 
# 831
iterator begin() noexcept 
# 832
{ return iterator((((this->_M_impl)._M_start)._M_p), 0); } 
# 835
const_iterator begin() const noexcept 
# 836
{ return const_iterator((((this->_M_impl)._M_start)._M_p), 0); } 
# 839
iterator end() noexcept 
# 840
{ return (this->_M_impl)._M_finish; } 
# 843
const_iterator end() const noexcept 
# 844
{ return (this->_M_impl)._M_finish; } 
# 847
reverse_iterator rbegin() noexcept 
# 848
{ return ((std::reverse_iterator< std::_Bit_iterator> )(end())); } 
# 851
const_reverse_iterator rbegin() const noexcept 
# 852
{ return ((std::reverse_iterator< std::_Bit_const_iterator> )(end())); } 
# 855
reverse_iterator rend() noexcept 
# 856
{ return ((std::reverse_iterator< std::_Bit_iterator> )(begin())); } 
# 859
const_reverse_iterator rend() const noexcept 
# 860
{ return ((std::reverse_iterator< std::_Bit_const_iterator> )(begin())); } 
# 864
const_iterator cbegin() const noexcept 
# 865
{ return const_iterator((((this->_M_impl)._M_start)._M_p), 0); } 
# 868
const_iterator cend() const noexcept 
# 869
{ return (this->_M_impl)._M_finish; } 
# 872
const_reverse_iterator crbegin() const noexcept 
# 873
{ return ((std::reverse_iterator< std::_Bit_const_iterator> )(end())); } 
# 876
const_reverse_iterator crend() const noexcept 
# 877
{ return ((std::reverse_iterator< std::_Bit_const_iterator> )(begin())); } 
# 881
size_type size() const noexcept 
# 882
{ return (size_type)(end() - begin()); } 
# 885
size_type max_size() const noexcept 
# 886
{ 
# 887
const size_type __isize = ((__gnu_cxx::__numeric_traits< std::ptrdiff_t> ::__max - ((int)_S_word_bit)) + (1)); 
# 890
const size_type __asize = _Bit_alloc_traits::max_size(_M_get_Bit_allocator()); 
# 892
return (__asize <= (__isize / ((int)_S_word_bit))) ? __asize * ((int)_S_word_bit) : __isize; 
# 894
} 
# 897
size_type capacity() const noexcept 
# 898
{ return (size_type)(const_iterator((this->_M_impl)._M_end_addr(), 0) - begin()); 
# 899
} 
# 901
[[__nodiscard__]] bool 
# 902
empty() const noexcept 
# 903
{ return begin() == end(); } 
# 906
reference operator[](size_type __n) 
# 907
{ return begin()[__n]; } 
# 910
const_reference operator[](size_type __n) const 
# 911
{ return begin()[__n]; } 
# 915
protected: void _M_range_check(size_type __n) const 
# 916
{ 
# 917
if (__n >= size()) { 
# 918
__throw_out_of_range_fmt("vector<bool>::_M_range_check: __n (which is %zu) >= this->size() (which is %zu)", __n, size()); }  
# 922
} 
# 926
public: reference at(size_type __n) 
# 927
{ _M_range_check(__n); return (*this)[__n]; } 
# 930
const_reference at(size_type __n) const 
# 931
{ _M_range_check(__n); return (*this)[__n]; } 
# 934
void reserve(size_type __n) 
# 935
{ 
# 936
if (__n > max_size()) { 
# 937
__throw_length_error("vector::reserve"); }  
# 938
if (capacity() < __n) { 
# 939
_M_reallocate(__n); }  
# 940
} 
# 943
reference front() 
# 944
{ return *begin(); } 
# 947
const_reference front() const 
# 948
{ return *begin(); } 
# 951
reference back() 
# 952
{ return *(end() - 1); } 
# 955
const_reference back() const 
# 956
{ return *(end() - 1); } 
# 964
void data() noexcept { } 
# 967
void push_back(bool __x) 
# 968
{ 
# 969
if ((((this->_M_impl)._M_finish)._M_p) != (this->_M_impl)._M_end_addr()) { 
# 970
(*(((this->_M_impl)._M_finish)++)) = __x; } else { 
# 972
_M_insert_aux(end(), __x); }  
# 973
} 
# 976
void swap(vector &__x) noexcept 
# 977
{ 
# 979
do { if (__builtin_is_constant_evaluated() && (!((bool)(_Bit_alloc_traits::propagate_on_container_swap::value || (_M_get_Bit_allocator() == __x._M_get_Bit_allocator()))))) { __builtin_unreachable(); }  } while (false); 
# 982
(this->_M_impl)._M_swap_data((__x._M_impl)); 
# 983
_Bit_alloc_traits::_S_on_swap(_M_get_Bit_allocator(), __x._M_get_Bit_allocator()); 
# 985
} 
# 989
static void swap(reference __x, reference __y) noexcept 
# 990
{ 
# 991
bool __tmp = __x; 
# 992
(__x = __y); 
# 993
(__y = __tmp); 
# 994
} 
# 998
iterator insert(const_iterator __position, const bool &__x = ((bool)0)) 
# 1002
{ 
# 1003
const difference_type __n = __position - begin(); 
# 1004
if (((((this->_M_impl)._M_finish)._M_p) != (this->_M_impl)._M_end_addr()) && (__position == end())) { 
# 1006
(*(((this->_M_impl)._M_finish)++)) = __x; } else { 
# 1008
_M_insert_aux(__position._M_const_cast(), __x); }  
# 1009
return begin() + __n; 
# 1010
} 
# 1013
template< class _InputIterator, class 
# 1014
 = std::_RequireInputIter< _InputIterator> > iterator 
# 1016
insert(const_iterator __position, _InputIterator 
# 1017
__first, _InputIterator __last) 
# 1018
{ 
# 1019
difference_type __offset = __position - cbegin(); 
# 1020
_M_insert_range(__position._M_const_cast(), __first, __last, std::__iterator_category(__first)); 
# 1023
return begin() + __offset; 
# 1024
} 
# 1039 "/usr/include/c++/11/bits/stl_bvector.h" 3
iterator insert(const_iterator __position, size_type __n, const bool &__x) 
# 1040
{ 
# 1041
difference_type __offset = __position - cbegin(); 
# 1042
_M_fill_insert(__position._M_const_cast(), __n, __x); 
# 1043
return begin() + __offset; 
# 1044
} 
# 1053
iterator insert(const_iterator __p, std::initializer_list< bool>  __l) 
# 1054
{ return this->insert(__p, __l.begin(), __l.end()); } 
# 1058
void pop_back() 
# 1059
{ --((this->_M_impl)._M_finish); } 
# 1063
iterator erase(const_iterator __position) 
# 1067
{ return _M_erase(__position._M_const_cast()); } 
# 1071
iterator erase(const_iterator __first, const_iterator __last) 
# 1075
{ return _M_erase(__first._M_const_cast(), __last._M_const_cast()); } 
# 1078
void resize(size_type __new_size, bool __x = ((bool)0)) 
# 1079
{ 
# 1080
if (__new_size < size()) { 
# 1081
_M_erase_at_end(begin() + ((difference_type)__new_size)); } else { 
# 1083
insert(end(), __new_size - size(), __x); }  
# 1084
} 
# 1088
void shrink_to_fit() 
# 1089
{ _M_shrink_to_fit(); } 
# 1093
void flip() noexcept 
# 1094
{ 
# 1095
std::_Bit_type *const __end = (this->_M_impl)._M_end_addr(); 
# 1096
for (std::_Bit_type *__p = ((((this->_M_impl)._M_start)._M_p)); __p != __end; ++__p) { 
# 1097
(*__p) = (~(*__p)); }  
# 1098
} 
# 1101
void clear() noexcept 
# 1102
{ _M_erase_at_end(begin()); } 
# 1105
template< class ..._Args> reference 
# 1111
emplace_back(_Args &&...__args) 
# 1112
{ 
# 1113
push_back(bool(__args...)); 
# 1115
return back(); 
# 1117
} 
# 1119
template< class ..._Args> iterator 
# 1121
emplace(const_iterator __pos, _Args &&...__args) 
# 1122
{ return insert(__pos, bool(__args...)); } 
# 1128
protected: iterator _M_copy_aligned(const_iterator __first, const_iterator __last, iterator 
# 1129
__result) 
# 1130
{ 
# 1131
std::_Bit_type *__q = std::copy(__first._M_p, __last._M_p, __result._M_p); 
# 1132
return std::copy(const_iterator(__last._M_p, 0), __last, iterator(__q, 0)); 
# 1134
} 
# 1137
void _M_initialize(size_type __n) 
# 1138
{ 
# 1139
if (__n) 
# 1140
{ 
# 1141
_Bit_pointer __q = this->_M_allocate(__n); 
# 1142
((this->_M_impl)._M_end_of_storage) = (__q + _S_nword(__n)); 
# 1143
iterator __start = iterator(std::__addressof(*__q), 0); 
# 1144
((this->_M_impl)._M_start) = __start; 
# 1145
((this->_M_impl)._M_finish) = (__start + ((difference_type)__n)); 
# 1146
}  
# 1147
} 
# 1150
void _M_initialize_value(bool __x) 
# 1151
{ 
# 1152
if (std::_Bit_type *__p = ((((this->_M_impl)._M_start)._M_p))) { 
# 1153
__builtin_memset(__p, __x ? ~0 : 0, ((this->_M_impl)._M_end_addr() - __p) * sizeof(std::_Bit_type)); }  
# 1156
} 
# 1159
void _M_reallocate(size_type __n); 
# 1163
bool _M_shrink_to_fit(); 
# 1185 "/usr/include/c++/11/bits/stl_bvector.h" 3
template< class _InputIterator> void 
# 1187
_M_initialize_range(_InputIterator __first, _InputIterator __last, std::input_iterator_tag) 
# 1189
{ 
# 1190
for (; __first != __last; ++__first) { 
# 1191
push_back(*__first); }  
# 1192
} 
# 1194
template< class _ForwardIterator> void 
# 1196
_M_initialize_range(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag) 
# 1198
{ 
# 1199
const size_type __n = std::distance(__first, __last); 
# 1200
_M_initialize(__n); 
# 1201
std::copy(__first, __last, begin()); 
# 1202
} 
# 1220 "/usr/include/c++/11/bits/stl_bvector.h" 3
void _M_fill_assign(std::size_t __n, bool __x) 
# 1221
{ 
# 1222
if (__n > size()) 
# 1223
{ 
# 1224
_M_initialize_value(__x); 
# 1225
insert(end(), __n - size(), __x); 
# 1226
} else 
# 1228
{ 
# 1229
_M_erase_at_end(begin() + __n); 
# 1230
_M_initialize_value(__x); 
# 1231
}  
# 1232
} 
# 1234
template< class _InputIterator> void 
# 1236
_M_assign_aux(_InputIterator __first, _InputIterator __last, std::input_iterator_tag) 
# 1238
{ 
# 1239
iterator __cur = begin(); 
# 1240
for (; (__first != __last) && (__cur != end()); (++__cur), ((void)(++__first))) { 
# 1241
(*__cur) = (*__first); }  
# 1242
if (__first == __last) { 
# 1243
_M_erase_at_end(__cur); } else { 
# 1245
insert(end(), __first, __last); }  
# 1246
} 
# 1248
template< class _ForwardIterator> void 
# 1250
_M_assign_aux(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag) 
# 1252
{ 
# 1253
const size_type __len = std::distance(__first, __last); 
# 1254
if (__len < size()) { 
# 1255
_M_erase_at_end(std::copy(__first, __last, begin())); } else 
# 1257
{ 
# 1258
_ForwardIterator __mid = __first; 
# 1259
std::advance(__mid, size()); 
# 1260
std::copy(__first, __mid, begin()); 
# 1261
insert(end(), __mid, __last); 
# 1262
}  
# 1263
} 
# 1284 "/usr/include/c++/11/bits/stl_bvector.h" 3
void _M_fill_insert(iterator __position, size_type __n, bool __x); 
# 1286
template< class _InputIterator> void 
# 1288
_M_insert_range(iterator __pos, _InputIterator __first, _InputIterator 
# 1289
__last, std::input_iterator_tag) 
# 1290
{ 
# 1291
for (; __first != __last; ++__first) 
# 1292
{ 
# 1293
__pos = insert(__pos, *__first); 
# 1294
(++__pos); 
# 1295
}  
# 1296
} 
# 1298
template< class _ForwardIterator> void _M_insert_range(iterator __position, _ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag); 
# 1304
void _M_insert_aux(iterator __position, bool __x); 
# 1307
size_type _M_check_len(size_type __n, const char *__s) const 
# 1308
{ 
# 1309
if ((max_size() - size()) < __n) { 
# 1310
__throw_length_error(__s); }  
# 1312
const size_type __len = size() + std::max(size(), __n); 
# 1313
return ((__len < size()) || (__len > max_size())) ? max_size() : __len; 
# 1314
} 
# 1317
void _M_erase_at_end(iterator __pos) 
# 1318
{ ((this->_M_impl)._M_finish) = __pos; } 
# 1321
iterator _M_erase(iterator __pos); 
# 1324
iterator _M_erase(iterator __first, iterator __last); 
# 1325
}; 
# 1330
inline void __fill_bvector(_Bit_type *__v, unsigned 
# 1331
__first, unsigned __last, bool __x) 
# 1332
{ 
# 1333
using std::_Bit_type;
# 1334
using std::_S_word_bit;
# 1335
const _Bit_type __fmask = (~0UL) << __first; 
# 1336
const _Bit_type __lmask = (~0UL) >> ((_S_word_bit) - __last); 
# 1337
const _Bit_type __mask = __fmask & __lmask; 
# 1339
if (__x) { 
# 1340
(*__v) |= __mask; } else { 
# 1342
(*__v) &= (~__mask); }  
# 1343
} 
# 1346
inline void __fill_a1(_Bit_iterator __first, _Bit_iterator 
# 1347
__last, const bool &__x) 
# 1348
{ 
# 1349
using std::_Bit_type;
# 1350
using std::_S_word_bit;
# 1351
if ((__first._M_p) != (__last._M_p)) 
# 1352
{ 
# 1353
_Bit_type *__first_p = __first._M_p; 
# 1354
if ((__first._M_offset) != (0)) { 
# 1355
__fill_bvector(__first_p++, __first._M_offset, _S_word_bit, __x); }  
# 1357
__builtin_memset(__first_p, __x ? ~0 : 0, ((__last._M_p) - __first_p) * sizeof(_Bit_type)); 
# 1360
if ((__last._M_offset) != (0)) { 
# 1361
__fill_bvector(__last._M_p, 0, __last._M_offset, __x); }  
# 1362
} else { 
# 1363
if ((__first._M_offset) != (__last._M_offset)) { 
# 1364
__fill_bvector(__first._M_p, __first._M_offset, __last._M_offset, __x); }  }  
# 1365
} 
# 1370
template< class _Alloc> 
# 1371
struct hash< vector< bool, _Alloc> >  : public __hash_base< unsigned long, vector< bool, _Alloc> >  { 
# 1375
std::size_t operator()(const vector< bool, _Alloc>  &) const noexcept; 
# 1376
}; 
# 1380
}
# 59 "/usr/include/c++/11/bits/vector.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 64
template< class _Tp, class _Alloc> void 
# 67
vector< _Tp, _Alloc> ::reserve(size_type __n) 
# 68
{ 
# 69
if (__n > max_size()) { 
# 70
__throw_length_error("vector::reserve"); }  
# 71
if (capacity() < __n) 
# 72
{ 
# 73
const size_type __old_size = size(); 
# 74
pointer __tmp; 
# 76
if constexpr ((_S_use_relocate)()) 
# 77
{ 
# 78
__tmp = this->_M_allocate(__n); 
# 79
(_S_relocate)(((this->_M_impl)._M_start), ((this->_M_impl)._M_finish), __tmp, _M_get_Tp_allocator()); 
# 81
} else 
# 84
{ 
# 85
__tmp = _M_allocate_and_copy(__n, std::__make_move_if_noexcept_iterator(((this->_M_impl)._M_start)), std::__make_move_if_noexcept_iterator(((this->_M_impl)._M_finish))); 
# 88
std::_Destroy(((this->_M_impl)._M_start), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 90
}  
# 91
; 
# 92
_M_deallocate(((this->_M_impl)._M_start), ((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_start)); 
# 95
((this->_M_impl)._M_start) = __tmp; 
# 96
((this->_M_impl)._M_finish) = (__tmp + __old_size); 
# 97
((this->_M_impl)._M_end_of_storage) = (((this->_M_impl)._M_start) + __n); 
# 98
}  
# 99
} 
# 102
template< class _Tp, class _Alloc> 
# 103
template< class ..._Args> typename vector< _Tp, _Alloc> ::reference 
# 110
vector< _Tp, _Alloc> ::emplace_back(_Args &&...__args) 
# 111
{ 
# 112
if (((this->_M_impl)._M_finish) != ((this->_M_impl)._M_end_of_storage)) 
# 113
{ 
# 114
; 
# 115
_Alloc_traits::construct((this->_M_impl), ((this->_M_impl)._M_finish), std::forward< _Args> (__args)...); 
# 117
++((this->_M_impl)._M_finish); 
# 118
; 
# 119
} else { 
# 121
_M_realloc_insert(end(), std::forward< _Args> (__args)...); }  
# 123
return back(); 
# 125
} 
# 128
template< class _Tp, class _Alloc> typename vector< _Tp, _Alloc> ::iterator 
# 132
vector< _Tp, _Alloc> ::insert(const_iterator __position, const value_type &__x) 
# 136
{ 
# 137
const size_type __n = __position - begin(); 
# 138
if (((this->_M_impl)._M_finish) != ((this->_M_impl)._M_end_of_storage)) { 
# 139
if (__position == end()) 
# 140
{ 
# 141
; 
# 142
_Alloc_traits::construct((this->_M_impl), ((this->_M_impl)._M_finish), __x); 
# 144
++((this->_M_impl)._M_finish); 
# 145
; 
# 146
} else 
# 148
{ 
# 150
const auto __pos = begin() + (__position - cbegin()); 
# 153
_Temporary_value __x_copy(this, __x); 
# 154
_M_insert_aux(__pos, std::move(__x_copy._M_val())); 
# 158
}  } else { 
# 161
_M_realloc_insert(begin() + (__position - cbegin()), __x); }  
# 166
return ((__gnu_cxx::__normal_iterator< pointer, vector> )(((this->_M_impl)._M_start) + __n)); 
# 167
} 
# 169
template< class _Tp, class _Alloc> typename vector< _Tp, _Alloc> ::iterator 
# 172
vector< _Tp, _Alloc> ::_M_erase(iterator __position) 
# 173
{ 
# 174
if ((__position + 1) != end()) { 
# 175
std::move(__position + 1, end(), __position); }  
# 176
--((this->_M_impl)._M_finish); 
# 177
_Alloc_traits::destroy((this->_M_impl), ((this->_M_impl)._M_finish)); 
# 178
; 
# 179
return __position; 
# 180
} 
# 182
template< class _Tp, class _Alloc> typename vector< _Tp, _Alloc> ::iterator 
# 185
vector< _Tp, _Alloc> ::_M_erase(iterator __first, iterator __last) 
# 186
{ 
# 187
if (__first != __last) 
# 188
{ 
# 189
if (__last != end()) { 
# 190
std::move(__last, end(), __first); }  
# 191
_M_erase_at_end(__first.base() + (end() - __last)); 
# 192
}  
# 193
return __first; 
# 194
} 
# 196
template< class _Tp, class _Alloc> vector< _Tp, _Alloc>  &
# 199
vector< _Tp, _Alloc> ::operator=(const vector &__x) 
# 200
{ 
# 201
if ((&__x) != this) 
# 202
{ 
# 203
; 
# 205
if (_Alloc_traits::_S_propagate_on_copy_assign()) 
# 206
{ 
# 207
if ((!_Alloc_traits::_S_always_equal()) && (_M_get_Tp_allocator() != __x._M_get_Tp_allocator())) 
# 209
{ 
# 211
clear(); 
# 212
_M_deallocate(((this->_M_impl)._M_start), ((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_start)); 
# 215
((this->_M_impl)._M_start) = nullptr; 
# 216
((this->_M_impl)._M_finish) = nullptr; 
# 217
((this->_M_impl)._M_end_of_storage) = nullptr; 
# 218
}  
# 219
std::__alloc_on_copy(_M_get_Tp_allocator(), __x._M_get_Tp_allocator()); 
# 221
}  
# 223
const size_type __xlen = __x.size(); 
# 224
if (__xlen > capacity()) 
# 225
{ 
# 226
pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(), __x.end()); 
# 228
std::_Destroy(((this->_M_impl)._M_start), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 230
_M_deallocate(((this->_M_impl)._M_start), ((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_start)); 
# 233
((this->_M_impl)._M_start) = __tmp; 
# 234
((this->_M_impl)._M_end_of_storage) = (((this->_M_impl)._M_start) + __xlen); 
# 235
} else { 
# 236
if (size() >= __xlen) 
# 237
{ 
# 238
std::_Destroy(std::copy(__x.begin(), __x.end(), begin()), end(), _M_get_Tp_allocator()); 
# 240
} else 
# 242
{ 
# 243
std::copy(((__x._M_impl)._M_start), ((__x._M_impl)._M_start) + size(), ((this->_M_impl)._M_start)); 
# 245
std::__uninitialized_copy_a(((__x._M_impl)._M_start) + size(), ((__x._M_impl)._M_finish), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 249
}  }  
# 250
((this->_M_impl)._M_finish) = (((this->_M_impl)._M_start) + __xlen); 
# 251
}  
# 252
return *this; 
# 253
} 
# 255
template< class _Tp, class _Alloc> void 
# 258
vector< _Tp, _Alloc> ::_M_fill_assign(std::size_t __n, const value_type &__val) 
# 259
{ 
# 260
if (__n > capacity()) 
# 261
{ 
# 262
vector __tmp(__n, __val, _M_get_Tp_allocator()); 
# 263
(__tmp._M_impl)._M_swap_data((this->_M_impl)); 
# 264
} else { 
# 265
if (__n > size()) 
# 266
{ 
# 267
std::fill(begin(), end(), __val); 
# 268
const size_type __add = __n - size(); 
# 269
; 
# 270
((this->_M_impl)._M_finish) = std::__uninitialized_fill_n_a(((this->_M_impl)._M_finish), __add, __val, _M_get_Tp_allocator()); 
# 273
; 
# 274
} else { 
# 276
_M_erase_at_end(std::fill_n(((this->_M_impl)._M_start), __n, __val)); }  }  
# 277
} 
# 279
template< class _Tp, class _Alloc> 
# 280
template< class _InputIterator> void 
# 283
vector< _Tp, _Alloc> ::_M_assign_aux(_InputIterator __first, _InputIterator __last, std::input_iterator_tag) 
# 285
{ 
# 286
pointer __cur(((this->_M_impl)._M_start)); 
# 287
for (; (__first != __last) && (__cur != ((this->_M_impl)._M_finish)); (++__cur), ((void)(++__first))) { 
# 289
(*__cur) = (*__first); }  
# 290
if (__first == __last) { 
# 291
_M_erase_at_end(__cur); } else { 
# 293
_M_range_insert(end(), __first, __last, std::__iterator_category(__first)); }  
# 295
} 
# 297
template< class _Tp, class _Alloc> 
# 298
template< class _ForwardIterator> void 
# 301
vector< _Tp, _Alloc> ::_M_assign_aux(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag) 
# 303
{ 
# 304
const size_type __len = std::distance(__first, __last); 
# 306
if (__len > capacity()) 
# 307
{ 
# 308
(_S_check_init_len)(__len, _M_get_Tp_allocator()); 
# 309
pointer __tmp(_M_allocate_and_copy(__len, __first, __last)); 
# 310
std::_Destroy(((this->_M_impl)._M_start), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 312
; 
# 313
_M_deallocate(((this->_M_impl)._M_start), ((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_start)); 
# 316
((this->_M_impl)._M_start) = __tmp; 
# 317
((this->_M_impl)._M_finish) = (((this->_M_impl)._M_start) + __len); 
# 318
((this->_M_impl)._M_end_of_storage) = ((this->_M_impl)._M_finish); 
# 319
} else { 
# 320
if (size() >= __len) { 
# 321
_M_erase_at_end(std::copy(__first, __last, ((this->_M_impl)._M_start))); } else 
# 323
{ 
# 324
_ForwardIterator __mid = __first; 
# 325
std::advance(__mid, size()); 
# 326
std::copy(__first, __mid, ((this->_M_impl)._M_start)); 
# 327
__attribute((__unused__)) const size_type __n = __len - size(); 
# 328
; 
# 329
((this->_M_impl)._M_finish) = std::__uninitialized_copy_a(__mid, __last, ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 333
; 
# 334
}  }  
# 335
} 
# 338
template< class _Tp, class _Alloc> auto 
# 341
vector< _Tp, _Alloc> ::_M_insert_rval(const_iterator __position, value_type &&__v)->iterator 
# 342
{ 
# 343
const auto __n = __position - cbegin(); 
# 344
if (((this->_M_impl)._M_finish) != ((this->_M_impl)._M_end_of_storage)) { 
# 345
if (__position == cend()) 
# 346
{ 
# 347
; 
# 348
_Alloc_traits::construct((this->_M_impl), ((this->_M_impl)._M_finish), std::move(__v)); 
# 350
++((this->_M_impl)._M_finish); 
# 351
; 
# 352
} else { 
# 354
_M_insert_aux(begin() + __n, std::move(__v)); }  } else { 
# 356
_M_realloc_insert(begin() + __n, std::move(__v)); }  
# 358
return ((__gnu_cxx::__normal_iterator< pointer, vector> )(((this->_M_impl)._M_start) + __n)); 
# 359
} 
# 361
template< class _Tp, class _Alloc> 
# 362
template< class ..._Args> auto 
# 365
vector< _Tp, _Alloc> ::_M_emplace_aux(const_iterator __position, _Args &&...__args)->iterator 
# 367
{ 
# 368
const auto __n = __position - cbegin(); 
# 369
if (((this->_M_impl)._M_finish) != ((this->_M_impl)._M_end_of_storage)) { 
# 370
if (__position == cend()) 
# 371
{ 
# 372
; 
# 373
_Alloc_traits::construct((this->_M_impl), ((this->_M_impl)._M_finish), std::forward< _Args> (__args)...); 
# 375
++((this->_M_impl)._M_finish); 
# 376
; 
# 377
} else 
# 379
{ 
# 383
_Temporary_value __tmp(this, std::forward< _Args> (__args)...); 
# 384
_M_insert_aux(begin() + __n, std::move(__tmp._M_val())); 
# 385
}  } else { 
# 387
_M_realloc_insert(begin() + __n, std::forward< _Args> (__args)...); }  
# 389
return ((__gnu_cxx::__normal_iterator< pointer, vector> )(((this->_M_impl)._M_start) + __n)); 
# 390
} 
# 392
template< class _Tp, class _Alloc> 
# 393
template< class _Arg> void 
# 396
vector< _Tp, _Alloc> ::_M_insert_aux(iterator __position, _Arg &&__arg) 
# 403
{ 
# 404
; 
# 405
_Alloc_traits::construct((this->_M_impl), ((this->_M_impl)._M_finish), std::move(*(((this->_M_impl)._M_finish) - 1))); 
# 407
++((this->_M_impl)._M_finish); 
# 408
; 
# 412
std::move_backward(__position.base(), ((this->_M_impl)._M_finish) - 2, ((this->_M_impl)._M_finish) - 1); 
# 418
(*__position) = std::forward< _Arg> (__arg); 
# 420
} 
# 423
template< class _Tp, class _Alloc> 
# 424
template< class ..._Args> void 
# 427
vector< _Tp, _Alloc> ::_M_realloc_insert(iterator __position, _Args &&...__args) 
# 434
{ 
# 435
const size_type __len = _M_check_len((size_type)1, "vector::_M_realloc_insert"); 
# 437
pointer __old_start = (((this->_M_impl)._M_start)); 
# 438
pointer __old_finish = (((this->_M_impl)._M_finish)); 
# 439
const size_type __elems_before = __position - begin(); 
# 440
pointer __new_start(this->_M_allocate(__len)); 
# 441
pointer __new_finish(__new_start); 
# 442
try 
# 443
{ 
# 449
_Alloc_traits::construct((this->_M_impl), __new_start + __elems_before, std::forward< _Args> (__args)...); 
# 456
__new_finish = pointer(); 
# 459
if constexpr ((_S_use_relocate)()) 
# 460
{ 
# 461
__new_finish = (_S_relocate)(__old_start, __position.base(), __new_start, _M_get_Tp_allocator()); 
# 464
++__new_finish; 
# 466
__new_finish = (_S_relocate)(__position.base(), __old_finish, __new_finish, _M_get_Tp_allocator()); 
# 468
} else 
# 471
{ 
# 472
__new_finish = std::__uninitialized_move_if_noexcept_a(__old_start, __position.base(), __new_start, _M_get_Tp_allocator()); 
# 477
++__new_finish; 
# 479
__new_finish = std::__uninitialized_move_if_noexcept_a(__position.base(), __old_finish, __new_finish, _M_get_Tp_allocator()); 
# 483
}  
# 484
} 
# 485
catch (...) 
# 486
{ 
# 487
if (!__new_finish) { 
# 488
_Alloc_traits::destroy((this->_M_impl), __new_start + __elems_before); } else { 
# 491
std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator()); }  
# 492
_M_deallocate(__new_start, __len); 
# 493
throw; 
# 494
}  
# 496
if constexpr (!(_S_use_relocate)()) { 
# 498
std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator()); }  
# 499
; 
# 500
_M_deallocate(__old_start, ((this->_M_impl)._M_end_of_storage) - __old_start); 
# 502
((this->_M_impl)._M_start) = __new_start; 
# 503
((this->_M_impl)._M_finish) = __new_finish; 
# 504
((this->_M_impl)._M_end_of_storage) = (__new_start + __len); 
# 505
} 
# 507
template< class _Tp, class _Alloc> void 
# 510
vector< _Tp, _Alloc> ::_M_fill_insert(iterator __position, size_type __n, const value_type &__x) 
# 511
{ 
# 512
if (__n != (0)) 
# 513
{ 
# 514
if (((size_type)(((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_finish))) >= __n) 
# 516
{ 
# 520
_Temporary_value __tmp(this, __x); 
# 521
value_type &__x_copy = __tmp._M_val(); 
# 523
const size_type __elems_after = end() - __position; 
# 524
pointer __old_finish(((this->_M_impl)._M_finish)); 
# 525
if (__elems_after > __n) 
# 526
{ 
# 527
; 
# 528
std::__uninitialized_move_a(((this->_M_impl)._M_finish) - __n, ((this->_M_impl)._M_finish), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 532
((this->_M_impl)._M_finish) += __n; 
# 533
; 
# 534
std::move_backward(__position.base(), __old_finish - __n, __old_finish); 
# 536
std::fill(__position.base(), __position.base() + __n, __x_copy); 
# 538
} else 
# 540
{ 
# 541
; 
# 542
((this->_M_impl)._M_finish) = std::__uninitialized_fill_n_a(((this->_M_impl)._M_finish), __n - __elems_after, __x_copy, _M_get_Tp_allocator()); 
# 547
; 
# 548
std::__uninitialized_move_a(__position.base(), __old_finish, ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 551
((this->_M_impl)._M_finish) += __elems_after; 
# 552
; 
# 553
std::fill(__position.base(), __old_finish, __x_copy); 
# 554
}  
# 555
} else 
# 557
{ 
# 558
const size_type __len = _M_check_len(__n, "vector::_M_fill_insert"); 
# 560
const size_type __elems_before = __position - begin(); 
# 561
pointer __new_start(this->_M_allocate(__len)); 
# 562
pointer __new_finish(__new_start); 
# 563
try 
# 564
{ 
# 566
std::__uninitialized_fill_n_a(__new_start + __elems_before, __n, __x, _M_get_Tp_allocator()); 
# 569
__new_finish = pointer(); 
# 571
__new_finish = std::__uninitialized_move_if_noexcept_a(((this->_M_impl)._M_start), __position.base(), __new_start, _M_get_Tp_allocator()); 
# 576
__new_finish += __n; 
# 578
__new_finish = std::__uninitialized_move_if_noexcept_a(__position.base(), ((this->_M_impl)._M_finish), __new_finish, _M_get_Tp_allocator()); 
# 582
} 
# 583
catch (...) 
# 584
{ 
# 585
if (!__new_finish) { 
# 586
std::_Destroy(__new_start + __elems_before, (__new_start + __elems_before) + __n, _M_get_Tp_allocator()); } else { 
# 590
std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator()); }  
# 592
_M_deallocate(__new_start, __len); 
# 593
throw; 
# 594
}  
# 595
std::_Destroy(((this->_M_impl)._M_start), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 597
; 
# 598
_M_deallocate(((this->_M_impl)._M_start), ((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_start)); 
# 601
((this->_M_impl)._M_start) = __new_start; 
# 602
((this->_M_impl)._M_finish) = __new_finish; 
# 603
((this->_M_impl)._M_end_of_storage) = (__new_start + __len); 
# 604
}  
# 605
}  
# 606
} 
# 609
template< class _Tp, class _Alloc> void 
# 612
vector< _Tp, _Alloc> ::_M_default_append(size_type __n) 
# 613
{ 
# 614
if (__n != (0)) 
# 615
{ 
# 616
const size_type __size = size(); 
# 617
size_type __navail = (size_type)(((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_finish)); 
# 620
if ((__size > max_size()) || (__navail > (max_size() - __size))) { 
# 621
__builtin_unreachable(); }  
# 623
if (__navail >= __n) 
# 624
{ 
# 625
; 
# 626
((this->_M_impl)._M_finish) = std::__uninitialized_default_n_a(((this->_M_impl)._M_finish), __n, _M_get_Tp_allocator()); 
# 629
; 
# 630
} else 
# 632
{ 
# 633
const size_type __len = _M_check_len(__n, "vector::_M_default_append"); 
# 635
pointer __new_start(this->_M_allocate(__len)); 
# 636
if constexpr ((_S_use_relocate)()) 
# 637
{ 
# 638
try 
# 639
{ 
# 640
std::__uninitialized_default_n_a(__new_start + __size, __n, _M_get_Tp_allocator()); 
# 642
} 
# 643
catch (...) 
# 644
{ 
# 645
_M_deallocate(__new_start, __len); 
# 646
throw; 
# 647
}  
# 648
(_S_relocate)(((this->_M_impl)._M_start), ((this->_M_impl)._M_finish), __new_start, _M_get_Tp_allocator()); 
# 650
} else 
# 652
{ 
# 653
pointer __destroy_from = pointer(); 
# 654
try 
# 655
{ 
# 656
std::__uninitialized_default_n_a(__new_start + __size, __n, _M_get_Tp_allocator()); 
# 658
__destroy_from = (__new_start + __size); 
# 659
std::__uninitialized_move_if_noexcept_a(((this->_M_impl)._M_start), ((this->_M_impl)._M_finish), __new_start, _M_get_Tp_allocator()); 
# 662
} 
# 663
catch (...) 
# 664
{ 
# 665
if (__destroy_from) { 
# 666
std::_Destroy(__destroy_from, __destroy_from + __n, _M_get_Tp_allocator()); }  
# 668
_M_deallocate(__new_start, __len); 
# 669
throw; 
# 670
}  
# 671
std::_Destroy(((this->_M_impl)._M_start), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 673
}  
# 674
; 
# 675
_M_deallocate(((this->_M_impl)._M_start), ((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_start)); 
# 678
((this->_M_impl)._M_start) = __new_start; 
# 679
((this->_M_impl)._M_finish) = ((__new_start + __size) + __n); 
# 680
((this->_M_impl)._M_end_of_storage) = (__new_start + __len); 
# 681
}  
# 682
}  
# 683
} 
# 685
template< class _Tp, class _Alloc> bool 
# 688
vector< _Tp, _Alloc> ::_M_shrink_to_fit() 
# 689
{ 
# 690
if (capacity() == size()) { 
# 691
return false; }  
# 692
; 
# 693
return std::template __shrink_to_fit_aux< vector> ::_S_do_it(*this); 
# 694
} 
# 697
template< class _Tp, class _Alloc> 
# 698
template< class _InputIterator> void 
# 701
vector< _Tp, _Alloc> ::_M_range_insert(iterator __pos, _InputIterator __first, _InputIterator 
# 702
__last, std::input_iterator_tag) 
# 703
{ 
# 704
if (__pos == end()) 
# 705
{ 
# 706
for (; __first != __last; ++__first) { 
# 707
insert(end(), *__first); }  
# 708
} else { 
# 709
if (__first != __last) 
# 710
{ 
# 711
vector __tmp(__first, __last, _M_get_Tp_allocator()); 
# 712
insert(__pos, std::make_move_iterator(__tmp.begin()), std::make_move_iterator(__tmp.end())); 
# 715
}  }  
# 716
} 
# 718
template< class _Tp, class _Alloc> 
# 719
template< class _ForwardIterator> void 
# 722
vector< _Tp, _Alloc> ::_M_range_insert(iterator __position, _ForwardIterator __first, _ForwardIterator 
# 723
__last, std::forward_iterator_tag) 
# 724
{ 
# 725
if (__first != __last) 
# 726
{ 
# 727
const size_type __n = std::distance(__first, __last); 
# 728
if (((size_type)(((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_finish))) >= __n) 
# 730
{ 
# 731
const size_type __elems_after = end() - __position; 
# 732
pointer __old_finish(((this->_M_impl)._M_finish)); 
# 733
if (__elems_after > __n) 
# 734
{ 
# 735
; 
# 736
std::__uninitialized_move_a(((this->_M_impl)._M_finish) - __n, ((this->_M_impl)._M_finish), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 740
((this->_M_impl)._M_finish) += __n; 
# 741
; 
# 742
std::move_backward(__position.base(), __old_finish - __n, __old_finish); 
# 744
std::copy(__first, __last, __position); 
# 745
} else 
# 747
{ 
# 748
_ForwardIterator __mid = __first; 
# 749
std::advance(__mid, __elems_after); 
# 750
; 
# 751
std::__uninitialized_copy_a(__mid, __last, ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 754
((this->_M_impl)._M_finish) += (__n - __elems_after); 
# 755
; 
# 756
std::__uninitialized_move_a(__position.base(), __old_finish, ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 760
((this->_M_impl)._M_finish) += __elems_after; 
# 761
; 
# 762
std::copy(__first, __mid, __position); 
# 763
}  
# 764
} else 
# 766
{ 
# 767
const size_type __len = _M_check_len(__n, "vector::_M_range_insert"); 
# 769
pointer __new_start(this->_M_allocate(__len)); 
# 770
pointer __new_finish(__new_start); 
# 771
try 
# 772
{ 
# 773
__new_finish = std::__uninitialized_move_if_noexcept_a(((this->_M_impl)._M_start), __position.base(), __new_start, _M_get_Tp_allocator()); 
# 777
__new_finish = std::__uninitialized_copy_a(__first, __last, __new_finish, _M_get_Tp_allocator()); 
# 781
__new_finish = std::__uninitialized_move_if_noexcept_a(__position.base(), ((this->_M_impl)._M_finish), __new_finish, _M_get_Tp_allocator()); 
# 785
} 
# 786
catch (...) 
# 787
{ 
# 788
std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator()); 
# 790
_M_deallocate(__new_start, __len); 
# 791
throw; 
# 792
}  
# 793
std::_Destroy(((this->_M_impl)._M_start), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 795
; 
# 796
_M_deallocate(((this->_M_impl)._M_start), ((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_start)); 
# 799
((this->_M_impl)._M_start) = __new_start; 
# 800
((this->_M_impl)._M_finish) = __new_finish; 
# 801
((this->_M_impl)._M_end_of_storage) = (__new_start + __len); 
# 802
}  
# 803
}  
# 804
} 
# 808
template< class _Alloc> void 
# 811
vector< bool, _Alloc> ::_M_reallocate(size_type __n) 
# 812
{ 
# 813
_Bit_pointer __q = this->_M_allocate(__n); 
# 814
iterator __start(std::__addressof(*__q), 0); 
# 815
iterator __finish(_M_copy_aligned(begin(), end(), __start)); 
# 816
this->_M_deallocate(); 
# 817
((this->_M_impl)._M_start) = __start; 
# 818
((this->_M_impl)._M_finish) = __finish; 
# 819
((this->_M_impl)._M_end_of_storage) = (__q + _S_nword(__n)); 
# 820
} 
# 822
template< class _Alloc> void 
# 825
vector< bool, _Alloc> ::_M_fill_insert(iterator __position, size_type __n, bool __x) 
# 826
{ 
# 827
if (__n == (0)) { 
# 828
return; }  
# 829
if ((capacity() - size()) >= __n) 
# 830
{ 
# 831
std::copy_backward(__position, end(), ((this->_M_impl)._M_finish) + ((difference_type)__n)); 
# 833
std::fill(__position, (__position + ((difference_type)__n)), __x); 
# 834
((this->_M_impl)._M_finish) += ((difference_type)__n); 
# 835
} else 
# 837
{ 
# 838
const size_type __len = _M_check_len(__n, "vector<bool>::_M_fill_insert"); 
# 840
_Bit_pointer __q = this->_M_allocate(__len); 
# 841
iterator __start(std::__addressof(*__q), 0); 
# 842
iterator __i = _M_copy_aligned(begin(), __position, __start); 
# 843
std::fill(__i, (__i + ((difference_type)__n)), __x); 
# 844
iterator __finish = std::copy(__position, end(), (__i + ((difference_type)__n))); 
# 846
this->_M_deallocate(); 
# 847
((this->_M_impl)._M_end_of_storage) = (__q + _S_nword(__len)); 
# 848
((this->_M_impl)._M_start) = __start; 
# 849
((this->_M_impl)._M_finish) = __finish; 
# 850
}  
# 851
} 
# 853
template< class _Alloc> 
# 854
template< class _ForwardIterator> void 
# 857
vector< bool, _Alloc> ::_M_insert_range(iterator __position, _ForwardIterator __first, _ForwardIterator 
# 858
__last, std::forward_iterator_tag) 
# 859
{ 
# 860
if (__first != __last) 
# 861
{ 
# 862
size_type __n = std::distance(__first, __last); 
# 863
if ((capacity() - size()) >= __n) 
# 864
{ 
# 865
std::copy_backward(__position, end(), ((this->_M_impl)._M_finish) + ((difference_type)__n)); 
# 868
std::copy(__first, __last, __position); 
# 869
((this->_M_impl)._M_finish) += ((difference_type)__n); 
# 870
} else 
# 872
{ 
# 873
const size_type __len = _M_check_len(__n, "vector<bool>::_M_insert_range"); 
# 875
_Bit_pointer __q = this->_M_allocate(__len); 
# 876
iterator __start(std::__addressof(*__q), 0); 
# 877
iterator __i = _M_copy_aligned(begin(), __position, __start); 
# 878
__i = std::copy(__first, __last, __i); 
# 879
iterator __finish = std::copy(__position, end(), __i); 
# 880
this->_M_deallocate(); 
# 881
((this->_M_impl)._M_end_of_storage) = (__q + _S_nword(__len)); 
# 882
((this->_M_impl)._M_start) = __start; 
# 883
((this->_M_impl)._M_finish) = __finish; 
# 884
}  
# 885
}  
# 886
} 
# 888
template< class _Alloc> void 
# 891
vector< bool, _Alloc> ::_M_insert_aux(iterator __position, bool __x) 
# 892
{ 
# 893
if ((((this->_M_impl)._M_finish)._M_p) != (this->_M_impl)._M_end_addr()) 
# 894
{ 
# 895
std::copy_backward(__position, ((this->_M_impl)._M_finish), ((this->_M_impl)._M_finish) + 1); 
# 897
(((*__position)) = __x); 
# 898
++((this->_M_impl)._M_finish); 
# 899
} else 
# 901
{ 
# 902
const size_type __len = _M_check_len((size_type)1, "vector<bool>::_M_insert_aux"); 
# 904
_Bit_pointer __q = this->_M_allocate(__len); 
# 905
iterator __start(std::__addressof(*__q), 0); 
# 906
iterator __i = _M_copy_aligned(begin(), __position, __start); 
# 907
(((*(__i++))) = __x); 
# 908
iterator __finish = std::copy(__position, end(), __i); 
# 909
this->_M_deallocate(); 
# 910
((this->_M_impl)._M_end_of_storage) = (__q + _S_nword(__len)); 
# 911
((this->_M_impl)._M_start) = __start; 
# 912
((this->_M_impl)._M_finish) = __finish; 
# 913
}  
# 914
} 
# 916
template< class _Alloc> typename vector< bool, _Alloc> ::iterator 
# 919
vector< bool, _Alloc> ::_M_erase(iterator __position) 
# 920
{ 
# 921
if ((__position + (1)) != end()) { 
# 922
std::copy((__position + (1)), end(), __position); }  
# 923
--((this->_M_impl)._M_finish); 
# 924
return __position; 
# 925
} 
# 927
template< class _Alloc> typename vector< bool, _Alloc> ::iterator 
# 930
vector< bool, _Alloc> ::_M_erase(iterator __first, iterator __last) 
# 931
{ 
# 932
if ((__first != __last)) { 
# 933
_M_erase_at_end(std::copy(__last, end(), __first)); }  
# 934
return __first; 
# 935
} 
# 938
template< class _Alloc> bool 
# 941
vector< bool, _Alloc> ::_M_shrink_to_fit() 
# 942
{ 
# 943
if ((capacity() - size()) < ((int)_S_word_bit)) { 
# 944
return false; }  
# 945
try 
# 946
{ 
# 947
if (size_type __n = size()) { 
# 948
_M_reallocate(__n); } else 
# 950
{ 
# 951
this->_M_deallocate(); 
# 952
(this->_M_impl)._M_reset(); 
# 953
}  
# 954
return true; 
# 955
} 
# 956
catch (...) 
# 957
{ return false; }  
# 958
} 
# 963
}
# 967
namespace std __attribute((__visibility__("default"))) { 
# 971
template< class _Alloc> size_t 
# 974
hash< vector< bool, _Alloc> > ::operator()(const vector< bool, _Alloc>  &__b) const noexcept 
# 975
{ 
# 976
std::size_t __hash = (0); 
# 977
using std::_S_word_bit;
# 978
using std::_Bit_type;
# 980
const std::size_t __words = __b.size() / _S_word_bit; 
# 981
if (__words) 
# 982
{ 
# 983
const std::size_t __clength = (__words * sizeof(std::_Bit_type)); 
# 984
__hash = std::_Hash_impl::hash((((__b._M_impl)._M_start)._M_p), __clength); 
# 985
}  
# 987
const std::size_t __extrabits = __b.size() % _S_word_bit; 
# 988
if (__extrabits) 
# 989
{ 
# 990
std::_Bit_type __hiword = (*(((__b._M_impl)._M_finish)._M_p)); 
# 991
__hiword &= (~((~(static_cast< std::_Bit_type>(0))) << __extrabits)); 
# 993
const std::size_t __clength = (((__extrabits + (8)) - (1)) / (8)); 
# 995
if (__words) { 
# 996
__hash = std::_Hash_impl::hash(&__hiword, __clength, __hash); } else { 
# 998
__hash = std::_Hash_impl::hash(&__hiword, __clength); }  
# 999
}  
# 1001
return __hash; 
# 1002
} 
# 1005
}
# 80 "/usr/include/c++/11/vector" 3
namespace std __attribute((__visibility__("default"))) { 
# 83
namespace pmr { 
# 84
template< class _Tp> class polymorphic_allocator; 
# 85
template< class _Tp> using vector = std::vector< _Tp, polymorphic_allocator< _Tp> > ; 
# 87
}
# 96
}
# 42 "/usr/include/c++/11/bits/algorithmfwd.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 199 "/usr/include/c++/11/bits/algorithmfwd.h" 3
template< class _IIter, class _Predicate> inline bool all_of(_IIter, _IIter, _Predicate); 
# 204
template< class _IIter, class _Predicate> inline bool any_of(_IIter, _IIter, _Predicate); 
# 210
template< class _FIter, class _Tp> bool binary_search(_FIter, _FIter, const _Tp &); 
# 215
template< class _FIter, class _Tp, class _Compare> bool binary_search(_FIter, _FIter, const _Tp &, _Compare); 
# 221
template< class _Tp> constexpr const _Tp &clamp(const _Tp &, const _Tp &, const _Tp &); 
# 226
template< class _Tp, class _Compare> constexpr const _Tp &clamp(const _Tp &, const _Tp &, const _Tp &, _Compare); 
# 232
template< class _IIter, class _OIter> inline _OIter copy(_IIter, _IIter, _OIter); 
# 237
template< class _BIter1, class _BIter2> inline _BIter2 copy_backward(_BIter1, _BIter1, _BIter2); 
# 243
template< class _IIter, class _OIter, class _Predicate> _OIter copy_if(_IIter, _IIter, _OIter, _Predicate); 
# 248
template< class _IIter, class _Size, class _OIter> inline _OIter copy_n(_IIter, _Size, _OIter); 
# 257
template< class _FIter, class _Tp> inline pair< _FIter, _FIter>  equal_range(_FIter, _FIter, const _Tp &); 
# 262
template< class _FIter, class _Tp, class _Compare> inline pair< _FIter, _FIter>  equal_range(_FIter, _FIter, const _Tp &, _Compare); 
# 267
template< class _FIter, class _Tp> inline void fill(_FIter, _FIter, const _Tp &); 
# 272
template< class _OIter, class _Size, class _Tp> inline _OIter fill_n(_OIter, _Size, const _Tp &); 
# 279
template< class _FIter1, class _FIter2> inline _FIter1 find_end(_FIter1, _FIter1, _FIter2, _FIter2); 
# 284
template< class _FIter1, class _FIter2, class _BinaryPredicate> inline _FIter1 find_end(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate); 
# 293
template< class _IIter, class _Predicate> inline _IIter find_if_not(_IIter, _IIter, _Predicate); 
# 303
template< class _IIter1, class _IIter2> inline bool includes(_IIter1, _IIter1, _IIter2, _IIter2); 
# 308
template< class _IIter1, class _IIter2, class _Compare> inline bool includes(_IIter1, _IIter1, _IIter2, _IIter2, _Compare); 
# 313
template< class _BIter> inline void inplace_merge(_BIter, _BIter, _BIter); 
# 317
template< class _BIter, class _Compare> inline void inplace_merge(_BIter, _BIter, _BIter, _Compare); 
# 322
template< class _RAIter> inline bool is_heap(_RAIter, _RAIter); 
# 327
template< class _RAIter, class _Compare> inline bool is_heap(_RAIter, _RAIter, _Compare); 
# 332
template< class _RAIter> inline _RAIter is_heap_until(_RAIter, _RAIter); 
# 337
template< class _RAIter, class _Compare> inline _RAIter is_heap_until(_RAIter, _RAIter, _Compare); 
# 342
template< class _IIter, class _Predicate> inline bool is_partitioned(_IIter, _IIter, _Predicate); 
# 347
template< class _FIter1, class _FIter2> inline bool is_permutation(_FIter1, _FIter1, _FIter2); 
# 352
template< class _FIter1, class _FIter2, class 
# 353
_BinaryPredicate> inline bool 
# 352
is_permutation(_FIter1, _FIter1, _FIter2, _BinaryPredicate); 
# 358
template< class _FIter> inline bool is_sorted(_FIter, _FIter); 
# 363
template< class _FIter, class _Compare> inline bool is_sorted(_FIter, _FIter, _Compare); 
# 368
template< class _FIter> inline _FIter is_sorted_until(_FIter, _FIter); 
# 373
template< class _FIter, class _Compare> inline _FIter is_sorted_until(_FIter, _FIter, _Compare); 
# 379
template< class _FIter1, class _FIter2> inline void iter_swap(_FIter1, _FIter2); 
# 384
template< class _FIter, class _Tp> inline _FIter lower_bound(_FIter, _FIter, const _Tp &); 
# 389
template< class _FIter, class _Tp, class _Compare> inline _FIter lower_bound(_FIter, _FIter, const _Tp &, _Compare); 
# 394
template< class _RAIter> inline void make_heap(_RAIter, _RAIter); 
# 399
template< class _RAIter, class _Compare> inline void make_heap(_RAIter, _RAIter, _Compare); 
# 404
template< class _Tp> constexpr const _Tp &max(const _Tp &, const _Tp &); 
# 409
template< class _Tp, class _Compare> constexpr const _Tp &max(const _Tp &, const _Tp &, _Compare); 
# 417
template< class _Tp> constexpr const _Tp &min(const _Tp &, const _Tp &); 
# 422
template< class _Tp, class _Compare> constexpr const _Tp &min(const _Tp &, const _Tp &, _Compare); 
# 430
template< class _Tp> constexpr pair< const _Tp &, const _Tp &>  minmax(const _Tp &, const _Tp &); 
# 435
template< class _Tp, class _Compare> constexpr pair< const _Tp &, const _Tp &>  minmax(const _Tp &, const _Tp &, _Compare); 
# 440
template< class _FIter> constexpr pair< _FIter, _FIter>  minmax_element(_FIter, _FIter); 
# 445
template< class _FIter, class _Compare> constexpr pair< _FIter, _FIter>  minmax_element(_FIter, _FIter, _Compare); 
# 450
template< class _Tp> constexpr _Tp min(initializer_list< _Tp> ); 
# 455
template< class _Tp, class _Compare> constexpr _Tp min(initializer_list< _Tp> , _Compare); 
# 460
template< class _Tp> constexpr _Tp max(initializer_list< _Tp> ); 
# 465
template< class _Tp, class _Compare> constexpr _Tp max(initializer_list< _Tp> , _Compare); 
# 470
template< class _Tp> constexpr pair< _Tp, _Tp>  minmax(initializer_list< _Tp> ); 
# 475
template< class _Tp, class _Compare> constexpr pair< _Tp, _Tp>  minmax(initializer_list< _Tp> , _Compare); 
# 483
template< class _BIter> inline bool next_permutation(_BIter, _BIter); 
# 488
template< class _BIter, class _Compare> inline bool next_permutation(_BIter, _BIter, _Compare); 
# 494
template< class _IIter, class _Predicate> inline bool none_of(_IIter, _IIter, _Predicate); 
# 503
template< class _IIter, class _RAIter> inline _RAIter partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter); 
# 508
template< class _IIter, class _RAIter, class _Compare> inline _RAIter partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter, _Compare); 
# 516
template< class _IIter, class _OIter1, class 
# 517
_OIter2, class _Predicate> pair< _OIter1, _OIter2>  
# 516
partition_copy(_IIter, _IIter, _OIter1, _OIter2, _Predicate); 
# 522
template< class _FIter, class _Predicate> _FIter partition_point(_FIter, _FIter, _Predicate); 
# 528
template< class _RAIter> inline void pop_heap(_RAIter, _RAIter); 
# 533
template< class _RAIter, class _Compare> inline void pop_heap(_RAIter, _RAIter, _Compare); 
# 538
template< class _BIter> inline bool prev_permutation(_BIter, _BIter); 
# 543
template< class _BIter, class _Compare> inline bool prev_permutation(_BIter, _BIter, _Compare); 
# 548
template< class _RAIter> inline void push_heap(_RAIter, _RAIter); 
# 553
template< class _RAIter, class _Compare> inline void push_heap(_RAIter, _RAIter, _Compare); 
# 560
template< class _FIter, class _Tp> inline _FIter remove(_FIter, _FIter, const _Tp &); 
# 565
template< class _FIter, class _Predicate> inline _FIter remove_if(_FIter, _FIter, _Predicate); 
# 570
template< class _IIter, class _OIter, class _Tp> inline _OIter remove_copy(_IIter, _IIter, _OIter, const _Tp &); 
# 575
template< class _IIter, class _OIter, class _Predicate> inline _OIter remove_copy_if(_IIter, _IIter, _OIter, _Predicate); 
# 582
template< class _IIter, class _OIter, class _Tp> inline _OIter replace_copy(_IIter, _IIter, _OIter, const _Tp &, const _Tp &); 
# 587
template< class _Iter, class _OIter, class _Predicate, class _Tp> inline _OIter replace_copy_if(_Iter, _Iter, _OIter, _Predicate, const _Tp &); 
# 594
template< class _BIter> inline void reverse(_BIter, _BIter); 
# 599
template< class _BIter, class _OIter> _OIter reverse_copy(_BIter, _BIter, _OIter); 
# 604
inline namespace _V2 { 
# 606
template< class _FIter> inline _FIter rotate(_FIter, _FIter, _FIter); 
# 610
}
# 612
template< class _FIter, class _OIter> inline _OIter rotate_copy(_FIter, _FIter, _FIter, _OIter); 
# 625 "/usr/include/c++/11/bits/algorithmfwd.h" 3
template< class _RAIter, class _UGenerator> void shuffle(_RAIter, _RAIter, _UGenerator &&); 
# 630
template< class _RAIter> inline void sort_heap(_RAIter, _RAIter); 
# 635
template< class _RAIter, class _Compare> inline void sort_heap(_RAIter, _RAIter, _Compare); 
# 640
template< class _BIter, class _Predicate> inline _BIter stable_partition(_BIter, _BIter, _Predicate); 
# 658 "/usr/include/c++/11/bits/algorithmfwd.h" 3
template< class _FIter1, class _FIter2> _FIter2 swap_ranges(_FIter1, _FIter1, _FIter2); 
# 665
template< class _FIter> inline _FIter unique(_FIter, _FIter); 
# 670
template< class _FIter, class _BinaryPredicate> inline _FIter unique(_FIter, _FIter, _BinaryPredicate); 
# 677
template< class _FIter, class _Tp> inline _FIter upper_bound(_FIter, _FIter, const _Tp &); 
# 682
template< class _FIter, class _Tp, class _Compare> inline _FIter upper_bound(_FIter, _FIter, const _Tp &, _Compare); 
# 689
template< class _FIter> inline _FIter adjacent_find(_FIter, _FIter); 
# 694
template< class _FIter, class _BinaryPredicate> inline _FIter adjacent_find(_FIter, _FIter, _BinaryPredicate); 
# 699
template< class _IIter, class _Tp> inline typename iterator_traits< _IIter> ::difference_type count(_IIter, _IIter, const _Tp &); 
# 704
template< class _IIter, class _Predicate> inline typename iterator_traits< _IIter> ::difference_type count_if(_IIter, _IIter, _Predicate); 
# 709
template< class _IIter1, class _IIter2> inline bool equal(_IIter1, _IIter1, _IIter2); 
# 714
template< class _IIter1, class _IIter2, class _BinaryPredicate> inline bool equal(_IIter1, _IIter1, _IIter2, _BinaryPredicate); 
# 719
template< class _IIter, class _Tp> inline _IIter find(_IIter, _IIter, const _Tp &); 
# 724
template< class _FIter1, class _FIter2> _FIter1 find_first_of(_FIter1, _FIter1, _FIter2, _FIter2); 
# 729
template< class _FIter1, class _FIter2, class _BinaryPredicate> _FIter1 find_first_of(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate); 
# 734
template< class _IIter, class _Predicate> inline _IIter find_if(_IIter, _IIter, _Predicate); 
# 739
template< class _IIter, class _Funct> _Funct for_each(_IIter, _IIter, _Funct); 
# 744
template< class _FIter, class _Generator> void generate(_FIter, _FIter, _Generator); 
# 749
template< class _OIter, class _Size, class _Generator> _OIter generate_n(_OIter, _Size, _Generator); 
# 754
template< class _IIter1, class _IIter2> inline bool lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2); 
# 759
template< class _IIter1, class _IIter2, class _Compare> inline bool lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2, _Compare); 
# 764
template< class _FIter> constexpr _FIter max_element(_FIter, _FIter); 
# 769
template< class _FIter, class _Compare> constexpr _FIter max_element(_FIter, _FIter, _Compare); 
# 774
template< class _IIter1, class _IIter2, class _OIter> inline _OIter merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter); 
# 779
template< class _IIter1, class _IIter2, class _OIter, class 
# 780
_Compare> inline _OIter 
# 779
merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare); 
# 785
template< class _FIter> constexpr _FIter min_element(_FIter, _FIter); 
# 790
template< class _FIter, class _Compare> constexpr _FIter min_element(_FIter, _FIter, _Compare); 
# 795
template< class _IIter1, class _IIter2> inline pair< _IIter1, _IIter2>  mismatch(_IIter1, _IIter1, _IIter2); 
# 800
template< class _IIter1, class _IIter2, class _BinaryPredicate> inline pair< _IIter1, _IIter2>  mismatch(_IIter1, _IIter1, _IIter2, _BinaryPredicate); 
# 805
template< class _RAIter> inline void nth_element(_RAIter, _RAIter, _RAIter); 
# 810
template< class _RAIter, class _Compare> inline void nth_element(_RAIter, _RAIter, _RAIter, _Compare); 
# 815
template< class _RAIter> inline void partial_sort(_RAIter, _RAIter, _RAIter); 
# 820
template< class _RAIter, class _Compare> inline void partial_sort(_RAIter, _RAIter, _RAIter, _Compare); 
# 825
template< class _BIter, class _Predicate> inline _BIter partition(_BIter, _BIter, _Predicate); 
# 830
template< class _RAIter> inline void random_shuffle(_RAIter, _RAIter); 
# 834
template< class _RAIter, class _Generator> void random_shuffle(_RAIter, _RAIter, _Generator &&); 
# 843
template< class _FIter, class _Tp> void replace(_FIter, _FIter, const _Tp &, const _Tp &); 
# 848
template< class _FIter, class _Predicate, class _Tp> void replace_if(_FIter, _FIter, _Predicate, const _Tp &); 
# 853
template< class _FIter1, class _FIter2> inline _FIter1 search(_FIter1, _FIter1, _FIter2, _FIter2); 
# 858
template< class _FIter1, class _FIter2, class _BinaryPredicate> inline _FIter1 search(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate); 
# 863
template< class _FIter, class _Size, class _Tp> inline _FIter search_n(_FIter, _FIter, _Size, const _Tp &); 
# 868
template< class _FIter, class _Size, class _Tp, class 
# 869
_BinaryPredicate> inline _FIter 
# 868
search_n(_FIter, _FIter, _Size, const _Tp &, _BinaryPredicate); 
# 874
template< class _IIter1, class _IIter2, class _OIter> inline _OIter set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter); 
# 879
template< class _IIter1, class _IIter2, class _OIter, class 
# 880
_Compare> inline _OIter 
# 879
set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare); 
# 885
template< class _IIter1, class _IIter2, class _OIter> inline _OIter set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter); 
# 890
template< class _IIter1, class _IIter2, class _OIter, class 
# 891
_Compare> inline _OIter 
# 890
set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare); 
# 896
template< class _IIter1, class _IIter2, class _OIter> inline _OIter set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter); 
# 901
template< class _IIter1, class _IIter2, class _OIter, class 
# 902
_Compare> inline _OIter 
# 901
set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare); 
# 908
template< class _IIter1, class _IIter2, class _OIter> inline _OIter set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter); 
# 913
template< class _IIter1, class _IIter2, class _OIter, class 
# 914
_Compare> inline _OIter 
# 913
set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare); 
# 919
template< class _RAIter> inline void sort(_RAIter, _RAIter); 
# 924
template< class _RAIter, class _Compare> inline void sort(_RAIter, _RAIter, _Compare); 
# 929
template< class _RAIter> inline void stable_sort(_RAIter, _RAIter); 
# 933
template< class _RAIter, class _Compare> inline void stable_sort(_RAIter, _RAIter, _Compare); 
# 937
template< class _IIter, class _OIter, class _UnaryOperation> _OIter transform(_IIter, _IIter, _OIter, _UnaryOperation); 
# 942
template< class _IIter1, class _IIter2, class _OIter, class 
# 943
_BinaryOperation> _OIter 
# 942
transform(_IIter1, _IIter1, _IIter2, _OIter, _BinaryOperation); 
# 948
template< class _IIter, class _OIter> inline _OIter unique_copy(_IIter, _IIter, _OIter); 
# 953
template< class _IIter, class _OIter, class _BinaryPredicate> inline _OIter unique_copy(_IIter, _IIter, _OIter, _BinaryPredicate); 
# 960
}
# 62 "/usr/include/c++/11/bits/stl_heap.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 71
template< class _RandomAccessIterator, class _Distance, class 
# 72
_Compare> _Distance 
# 75
__is_heap_until(_RandomAccessIterator __first, _Distance __n, _Compare &
# 76
__comp) 
# 77
{ 
# 78
_Distance __parent = (0); 
# 79
for (_Distance __child = (1); __child < __n; ++__child) 
# 80
{ 
# 81
if (__comp(__first + __parent, __first + __child)) { 
# 82
return __child; }  
# 83
if ((__child & 1) == 0) { 
# 84
++__parent; }  
# 85
}  
# 86
return __n; 
# 87
} 
# 91
template< class _RandomAccessIterator, class _Distance> inline bool 
# 94
__is_heap(_RandomAccessIterator __first, _Distance __n) 
# 95
{ 
# 96
__gnu_cxx::__ops::_Iter_less_iter __comp; 
# 97
return std::__is_heap_until(__first, __n, __comp) == __n; 
# 98
} 
# 100
template< class _RandomAccessIterator, class _Compare, class 
# 101
_Distance> inline bool 
# 104
__is_heap(_RandomAccessIterator __first, _Compare __comp, _Distance __n) 
# 105
{ 
# 106
typedef __decltype(__comp) _Cmp; 
# 107
__gnu_cxx::__ops::_Iter_comp_iter< __decltype(__comp)>  __cmp(std::move(__comp)); 
# 108
return std::__is_heap_until(__first, __n, __cmp) == __n; 
# 109
} 
# 111
template< class _RandomAccessIterator> inline bool 
# 114
__is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last) 
# 115
{ return std::__is_heap(__first, std::distance(__first, __last)); } 
# 117
template< class _RandomAccessIterator, class _Compare> inline bool 
# 120
__is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 121
__comp) 
# 122
{ 
# 123
return std::__is_heap(__first, std::move(__comp), std::distance(__first, __last)); 
# 125
} 
# 130
template< class _RandomAccessIterator, class _Distance, class _Tp, class 
# 131
_Compare> void 
# 134
__push_heap(_RandomAccessIterator __first, _Distance 
# 135
__holeIndex, _Distance __topIndex, _Tp __value, _Compare &
# 136
__comp) 
# 137
{ 
# 138
_Distance __parent = (__holeIndex - 1) / 2; 
# 139
while ((__holeIndex > __topIndex) && __comp(__first + __parent, __value)) 
# 140
{ 
# 141
(*(__first + __holeIndex)) = std::move(*(__first + __parent)); 
# 142
__holeIndex = __parent; 
# 143
__parent = ((__holeIndex - 1) / 2); 
# 144
}  
# 145
(*(__first + __holeIndex)) = std::move(__value); 
# 146
} 
# 158 "/usr/include/c++/11/bits/stl_heap.h" 3
template< class _RandomAccessIterator> inline void 
# 161
push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last) 
# 162
{ 
# 164
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType; 
# 166
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType; 
# 172
; 
# 173
; 
# 174
; 
# 176
__gnu_cxx::__ops::_Iter_less_val __comp; 
# 177
_ValueType __value = std::move(*(__last - 1)); 
# 178
std::__push_heap(__first, (_DistanceType)((__last - __first) - 1), (_DistanceType)0, std::move(__value), __comp); 
# 180
} 
# 194 "/usr/include/c++/11/bits/stl_heap.h" 3
template< class _RandomAccessIterator, class _Compare> inline void 
# 197
push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 198
__comp) 
# 199
{ 
# 201
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType; 
# 203
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType; 
# 208
; 
# 209
; 
# 210
; 
# 213
__decltype((__gnu_cxx::__ops::__iter_comp_val(std::move(__comp)))) __cmp(std::move(__comp)); 
# 214
_ValueType __value = std::move(*(__last - 1)); 
# 215
std::__push_heap(__first, (_DistanceType)((__last - __first) - 1), (_DistanceType)0, std::move(__value), __cmp); 
# 217
} 
# 219
template< class _RandomAccessIterator, class _Distance, class 
# 220
_Tp, class _Compare> void 
# 223
__adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex, _Distance 
# 224
__len, _Tp __value, _Compare __comp) 
# 225
{ 
# 226
const _Distance __topIndex = __holeIndex; 
# 227
_Distance __secondChild = __holeIndex; 
# 228
while (__secondChild < ((__len - 1) / 2)) 
# 229
{ 
# 230
__secondChild = (2 * (__secondChild + 1)); 
# 231
if (__comp(__first + __secondChild, __first + (__secondChild - 1))) { 
# 233
__secondChild--; }  
# 234
(*(__first + __holeIndex)) = std::move(*(__first + __secondChild)); 
# 235
__holeIndex = __secondChild; 
# 236
}  
# 237
if (((__len & 1) == 0) && (__secondChild == ((__len - 2) / 2))) 
# 238
{ 
# 239
__secondChild = (2 * (__secondChild + 1)); 
# 240
(*(__first + __holeIndex)) = std::move(*(__first + (__secondChild - 1))); 
# 242
__holeIndex = (__secondChild - 1); 
# 243
}  
# 245
__decltype((__gnu_cxx::__ops::__iter_comp_val(std::move(__comp)))) __cmp(std::move(__comp)); 
# 246
std::__push_heap(__first, __holeIndex, __topIndex, std::move(__value), __cmp); 
# 248
} 
# 250
template< class _RandomAccessIterator, class _Compare> inline void 
# 253
__pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _RandomAccessIterator 
# 254
__result, _Compare &__comp) 
# 255
{ 
# 257
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType; 
# 259
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType; 
# 261
_ValueType __value = std::move(*__result); 
# 262
(*__result) = std::move(*__first); 
# 263
std::__adjust_heap(__first, (_DistanceType)0, (_DistanceType)(__last - __first), std::move(__value), __comp); 
# 266
} 
# 279 "/usr/include/c++/11/bits/stl_heap.h" 3
template< class _RandomAccessIterator> inline void 
# 282
pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last) 
# 283
{ 
# 289
; 
# 290
; 
# 291
; 
# 292
; 
# 294
if ((__last - __first) > 1) 
# 295
{ 
# 296
--__last; 
# 297
__gnu_cxx::__ops::_Iter_less_iter __comp; 
# 298
std::__pop_heap(__first, __last, __last, __comp); 
# 299
}  
# 300
} 
# 313 "/usr/include/c++/11/bits/stl_heap.h" 3
template< class _RandomAccessIterator, class _Compare> inline void 
# 316
pop_heap(_RandomAccessIterator __first, _RandomAccessIterator 
# 317
__last, _Compare __comp) 
# 318
{ 
# 322
; 
# 323
; 
# 324
; 
# 325
; 
# 327
if ((__last - __first) > 1) 
# 328
{ 
# 329
typedef __decltype(__comp) _Cmp; 
# 330
__gnu_cxx::__ops::_Iter_comp_iter< __decltype(__comp)>  __cmp(std::move(__comp)); 
# 331
--__last; 
# 332
std::__pop_heap(__first, __last, __last, __cmp); 
# 333
}  
# 334
} 
# 336
template< class _RandomAccessIterator, class _Compare> void 
# 339
__make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare &
# 340
__comp) 
# 341
{ 
# 343
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType; 
# 345
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType; 
# 347
if ((__last - __first) < 2) { 
# 348
return; }  
# 350
const _DistanceType __len = __last - __first; 
# 351
_DistanceType __parent = (__len - 2) / 2; 
# 352
while (true) 
# 353
{ 
# 354
_ValueType __value = std::move(*(__first + __parent)); 
# 355
std::__adjust_heap(__first, __parent, __len, std::move(__value), __comp); 
# 357
if (__parent == 0) { 
# 358
return; }  
# 359
__parent--; 
# 360
}  
# 361
} 
# 371 "/usr/include/c++/11/bits/stl_heap.h" 3
template< class _RandomAccessIterator> inline void 
# 374
make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last) 
# 375
{ 
# 381
; 
# 382
; 
# 384
__gnu_cxx::__ops::_Iter_less_iter __comp; 
# 385
std::__make_heap(__first, __last, __comp); 
# 386
} 
# 398 "/usr/include/c++/11/bits/stl_heap.h" 3
template< class _RandomAccessIterator, class _Compare> inline void 
# 401
make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 402
__comp) 
# 403
{ 
# 407
; 
# 408
; 
# 410
typedef __decltype(__comp) _Cmp; 
# 411
__gnu_cxx::__ops::_Iter_comp_iter< __decltype(__comp)>  __cmp(std::move(__comp)); 
# 412
std::__make_heap(__first, __last, __cmp); 
# 413
} 
# 415
template< class _RandomAccessIterator, class _Compare> void 
# 418
__sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare &
# 419
__comp) 
# 420
{ 
# 421
while ((__last - __first) > 1) 
# 422
{ 
# 423
--__last; 
# 424
std::__pop_heap(__first, __last, __last, __comp); 
# 425
}  
# 426
} 
# 436 "/usr/include/c++/11/bits/stl_heap.h" 3
template< class _RandomAccessIterator> inline void 
# 439
sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last) 
# 440
{ 
# 446
; 
# 447
; 
# 448
; 
# 450
__gnu_cxx::__ops::_Iter_less_iter __comp; 
# 451
std::__sort_heap(__first, __last, __comp); 
# 452
} 
# 464 "/usr/include/c++/11/bits/stl_heap.h" 3
template< class _RandomAccessIterator, class _Compare> inline void 
# 467
sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 468
__comp) 
# 469
{ 
# 473
; 
# 474
; 
# 475
; 
# 477
typedef __decltype(__comp) _Cmp; 
# 478
__gnu_cxx::__ops::_Iter_comp_iter< __decltype(__comp)>  __cmp(std::move(__comp)); 
# 479
std::__sort_heap(__first, __last, __cmp); 
# 480
} 
# 493 "/usr/include/c++/11/bits/stl_heap.h" 3
template< class _RandomAccessIterator> inline _RandomAccessIterator 
# 496
is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last) 
# 497
{ 
# 503
; 
# 504
; 
# 506
__gnu_cxx::__ops::_Iter_less_iter __comp; 
# 507
return __first + std::__is_heap_until(__first, std::distance(__first, __last), __comp); 
# 509
} 
# 522 "/usr/include/c++/11/bits/stl_heap.h" 3
template< class _RandomAccessIterator, class _Compare> inline _RandomAccessIterator 
# 525
is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 526
__comp) 
# 527
{ 
# 531
; 
# 532
; 
# 534
typedef __decltype(__comp) _Cmp; 
# 535
__gnu_cxx::__ops::_Iter_comp_iter< __decltype(__comp)>  __cmp(std::move(__comp)); 
# 536
return __first + std::__is_heap_until(__first, std::distance(__first, __last), __cmp); 
# 538
} 
# 547 "/usr/include/c++/11/bits/stl_heap.h" 3
template< class _RandomAccessIterator> inline bool 
# 550
is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last) 
# 551
{ return std::is_heap_until(__first, __last) == __last; } 
# 561 "/usr/include/c++/11/bits/stl_heap.h" 3
template< class _RandomAccessIterator, class _Compare> inline bool 
# 564
is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 565
__comp) 
# 566
{ 
# 570
; 
# 571
; 
# 573
const auto __dist = std::distance(__first, __last); 
# 574
typedef __decltype(__comp) _Cmp; 
# 575
__gnu_cxx::__ops::_Iter_comp_iter< __decltype(__comp)>  __cmp(std::move(__comp)); 
# 576
return std::__is_heap_until(__first, __dist, __cmp) == __dist; 
# 577
} 
# 581
}
# 62 "/usr/include/c++/11/bits/stl_tempbuf.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 66
namespace __detail { 
# 68
template< class _Tp> inline void 
# 70
__return_temporary_buffer(_Tp *__p, size_t 
# 71
__len __attribute((__unused__))) 
# 72
{ 
# 74
::operator delete(__p, __len * sizeof(_Tp)); 
# 78
} 
# 79
}
# 98 "/usr/include/c++/11/bits/stl_tempbuf.h" 3
template< class _Tp> pair< _Tp *, long>  
# 100
get_temporary_buffer(ptrdiff_t __len) noexcept 
# 101
{ 
# 102
const ptrdiff_t __max = (__gnu_cxx::__numeric_traits< ptrdiff_t> ::__max / sizeof(_Tp)); 
# 104
if (__len > __max) { 
# 105
__len = __max; }  
# 107
while (__len > (0)) 
# 108
{ 
# 109
_Tp *__tmp = static_cast< _Tp *>(::operator new(__len * sizeof(_Tp), std::nothrow)); 
# 111
if (__tmp != 0) { 
# 112
return pair< _Tp *, long> (__tmp, __len); }  
# 113
__len = ((__len == (1)) ? 0 : ((__len + (1)) / (2))); 
# 114
}  
# 115
return pair< _Tp *, ptrdiff_t> (static_cast< _Tp *>(0), 0); 
# 116
} 
# 125 "/usr/include/c++/11/bits/stl_tempbuf.h" 3
template< class _Tp> inline void 
# 127
return_temporary_buffer(_Tp *__p) 
# 128
{ ::operator delete(__p); } 
# 135
template< class _ForwardIterator, class _Tp> 
# 136
class _Temporary_buffer { 
# 142
public: typedef _Tp value_type; 
# 143
typedef value_type *pointer; 
# 144
typedef pointer iterator; 
# 145
typedef ptrdiff_t size_type; 
# 148
protected: size_type _M_original_len; 
# 149
size_type _M_len; 
# 150
pointer _M_buffer; 
# 155
public: size_type size() const 
# 156
{ return _M_len; } 
# 160
size_type requested_size() const 
# 161
{ return _M_original_len; } 
# 165
iterator begin() 
# 166
{ return _M_buffer; } 
# 170
iterator end() 
# 171
{ return (_M_buffer) + (_M_len); } 
# 177
_Temporary_buffer(_ForwardIterator __seed, size_type __original_len); 
# 179
~_Temporary_buffer() 
# 180
{ 
# 181
std::_Destroy(_M_buffer, (_M_buffer) + (_M_len)); 
# 182
__detail::__return_temporary_buffer(_M_buffer, _M_len); 
# 183
} 
# 187
private: _Temporary_buffer(const _Temporary_buffer &); 
# 190
void operator=(const _Temporary_buffer &); 
# 191
}; 
# 194
template< bool > 
# 195
struct __uninitialized_construct_buf_dispatch { 
# 197
template< class _Pointer, class _ForwardIterator> static void 
# 199
__ucr(_Pointer __first, _Pointer __last, _ForwardIterator 
# 200
__seed) 
# 201
{ 
# 202
if (__first == __last) { 
# 203
return; }  
# 205
_Pointer __cur = __first; 
# 206
try 
# 207
{ 
# 208
std::_Construct(std::__addressof(*__first), std::move(*__seed)); 
# 210
_Pointer __prev = __cur; 
# 211
++__cur; 
# 212
for (; __cur != __last; (++__cur), (++__prev)) { 
# 213
std::_Construct(std::__addressof(*__cur), std::move(*__prev)); }  
# 215
(*__seed) = std::move(*__prev); 
# 216
} 
# 217
catch (...) 
# 218
{ 
# 219
std::_Destroy(__first, __cur); 
# 220
throw; 
# 221
}  
# 222
} 
# 223
}; 
# 226
template<> struct __uninitialized_construct_buf_dispatch< true>  { 
# 228
template< class _Pointer, class _ForwardIterator> static void 
# 230
__ucr(_Pointer, _Pointer, _ForwardIterator) { } 
# 231
}; 
# 243 "/usr/include/c++/11/bits/stl_tempbuf.h" 3
template< class _Pointer, class _ForwardIterator> inline void 
# 245
__uninitialized_construct_buf(_Pointer __first, _Pointer __last, _ForwardIterator 
# 246
__seed) 
# 247
{ 
# 249
typedef typename iterator_traits< _Pointer> ::value_type _ValueType; 
# 251
std::template __uninitialized_construct_buf_dispatch< __has_trivial_constructor(_ValueType)> ::__ucr(__first, __last, __seed); 
# 254
} 
# 256
template< class _ForwardIterator, class _Tp> 
# 258
_Temporary_buffer< _ForwardIterator, _Tp> ::_Temporary_buffer(_ForwardIterator __seed, size_type __original_len) : _M_original_len(__original_len), _M_len((0)), _M_buffer((0)) 
# 260
{ 
# 261
pair< pointer, ptrdiff_t>  __p(std::get_temporary_buffer< value_type> (_M_original_len)); 
# 264
if (__p.first) 
# 265
{ 
# 266
try 
# 267
{ 
# 268
std::__uninitialized_construct_buf((__p.first), (__p.first) + (__p.second), __seed); 
# 270
(_M_buffer) = (__p.first); 
# 271
(_M_len) = (__p.second); 
# 272
} 
# 273
catch (...) 
# 274
{ 
# 275
__detail::__return_temporary_buffer((__p.first), (__p.second)); 
# 276
throw; 
# 277
}  
# 278
}  
# 279
} 
# 282
}
# 41 "/usr/include/c++/11/bits/uniform_int_dist.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 58 "/usr/include/c++/11/bits/uniform_int_dist.h" 3
namespace __detail { 
# 63
template< class _Tp> constexpr bool 
# 65
_Power_of_2(_Tp __x) 
# 66
{ 
# 67
return ((__x - 1) & __x) == 0; 
# 68
} 
# 69
}
# 76
template< class _IntType = int> 
# 77
class uniform_int_distribution { 
# 79
static_assert((std::template is_integral< _IntType> ::value), "template argument must be an integral type");
# 84
public: typedef _IntType result_type; 
# 86
struct param_type { 
# 88
typedef uniform_int_distribution distribution_type; 
# 90
param_type() : param_type(0) { } 
# 93
explicit param_type(_IntType __a, _IntType 
# 94
__b = __gnu_cxx::__int_traits< _IntType> ::__max) : _M_a(__a), _M_b(__b) 
# 96
{ 
# 97
do { if (__builtin_is_constant_evaluated() && (!((bool)((_M_a) <= (_M_b))))) { __builtin_unreachable(); }  } while (false); 
# 98
} 
# 101
result_type a() const 
# 102
{ return _M_a; } 
# 105
result_type b() const 
# 106
{ return _M_b; } 
# 109
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 110
{ return ((__p1._M_a) == (__p2._M_a)) && ((__p1._M_b) == (__p2._M_b)); } 
# 113
friend inline bool operator!=(const param_type &__p1, const param_type &__p2) 
# 114
{ return !(__p1 == __p2); } 
# 117
private: _IntType _M_a; 
# 118
_IntType _M_b; 
# 119
}; 
# 125
uniform_int_distribution() : uniform_int_distribution(0) { } 
# 131
explicit uniform_int_distribution(_IntType __a, _IntType 
# 132
__b = __gnu_cxx::__int_traits< _IntType> ::__max) : _M_param(__a, __b) 
# 135
{ } 
# 138
explicit uniform_int_distribution(const param_type &__p) : _M_param(__p) 
# 140
{ } 
# 148
void reset() { } 
# 151
result_type a() const 
# 152
{ return (_M_param).a(); } 
# 155
result_type b() const 
# 156
{ return (_M_param).b(); } 
# 162
param_type param() const 
# 163
{ return _M_param; } 
# 170
void param(const param_type &__param) 
# 171
{ (_M_param) = __param; } 
# 177
result_type min() const 
# 178
{ return a(); } 
# 184
result_type max() const 
# 185
{ return b(); } 
# 190
template< class _UniformRandomBitGenerator> result_type 
# 192
operator()(_UniformRandomBitGenerator &__urng) 
# 193
{ return this->operator()(__urng, _M_param); } 
# 195
template< class _UniformRandomBitGenerator> result_type operator()(_UniformRandomBitGenerator & __urng, const param_type & __p); 
# 200
template< class _ForwardIterator, class 
# 201
_UniformRandomBitGenerator> void 
# 203
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomBitGenerator &
# 204
__urng) 
# 205
{ this->__generate(__f, __t, __urng, _M_param); } 
# 207
template< class _ForwardIterator, class 
# 208
_UniformRandomBitGenerator> void 
# 210
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomBitGenerator &
# 211
__urng, const param_type &
# 212
__p) 
# 213
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 215
template< class _UniformRandomBitGenerator> void 
# 217
__generate(result_type *__f, result_type *__t, _UniformRandomBitGenerator &
# 218
__urng, const param_type &
# 219
__p) 
# 220
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 227
friend inline bool operator==(const uniform_int_distribution< _IntType>  &__d1, const uniform_int_distribution< _IntType>  &
# 228
__d2) 
# 229
{ return (__d1._M_param) == (__d2._M_param); } 
# 232
private: template< class _ForwardIterator, class 
# 233
_UniformRandomBitGenerator> void 
# 232
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomBitGenerator & __urng, const param_type & __p); 
# 239
param_type _M_param; 
# 244
template< class _Wp, class _Urbg, class _Up> static _Up 
# 246
_S_nd(_Urbg &__g, _Up __range) 
# 247
{ 
# 248
using _Up_traits = __gnu_cxx::__int_traits< _Up> ; 
# 249
using _Wp_traits = __gnu_cxx::__int_traits< _Wp> ; 
# 250
static_assert((!_Up_traits::__is_signed), "U must be unsigned");
# 251
static_assert((!_Wp_traits::__is_signed), "W must be unsigned");
# 252
static_assert((_Wp_traits::__digits == (2 * _Up_traits::__digits)), "W must be twice as wide as U");
# 258
_Wp __product = ((_Wp)__g()) * ((_Wp)__range); 
# 259
_Up __low = (_Up)__product; 
# 260
if (__low < __range) 
# 261
{ 
# 262
_Up __threshold = (-__range) % __range; 
# 263
while (__low < __threshold) 
# 264
{ 
# 265
__product = (((_Wp)__g()) * ((_Wp)__range)); 
# 266
__low = ((_Up)__product); 
# 267
}  
# 268
}  
# 269
return __product >> _Up_traits::__digits; 
# 270
} 
# 271
}; 
# 273
template< class _IntType> 
# 274
template< class _UniformRandomBitGenerator> typename uniform_int_distribution< _IntType> ::result_type 
# 277
uniform_int_distribution< _IntType> ::operator()(_UniformRandomBitGenerator &__urng, const param_type &
# 278
__param) 
# 279
{ 
# 280
typedef typename _UniformRandomBitGenerator::result_type _Gresult_type; 
# 281
typedef typename make_unsigned< result_type> ::type __utype; 
# 282
typedef typename common_type< typename _UniformRandomBitGenerator::result_type, typename make_unsigned< result_type> ::type> ::type __uctype; 
# 284
constexpr __uctype __urngmin = _UniformRandomBitGenerator::min(); 
# 285
constexpr __uctype __urngmax = _UniformRandomBitGenerator::max(); 
# 286
static_assert((__urngmin < __urngmax), "Uniform random bit generator must define min() < max()");
# 288
constexpr __uctype __urngrange = (__urngmax - __urngmin); 
# 290
const __uctype __urange = ((__uctype)__param.b()) - ((__uctype)__param.a()); 
# 293
__uctype __ret; 
# 294
if (__urngrange > __urange) 
# 295
{ 
# 298
const __uctype __uerange = __urange + 1; 
# 302
if constexpr (__urngrange == 18446744073709551615UL) 
# 303
{ 
# 306
unsigned long __u64erange = __uerange; 
# 307
__ret = _S_nd< unsigned __int128> (__urng, __u64erange); 
# 308
} else { 
# 311
if constexpr (__urngrange == 4294967295U) 
# 312
{ 
# 315
unsigned __u32erange = __uerange; 
# 316
__ret = _S_nd< unsigned long> (__urng, __u32erange); 
# 317
} else 
# 320
{ 
# 322
const __uctype __scaling = __urngrange / __uerange; 
# 323
const __uctype __past = __uerange * __scaling; 
# 324
do { 
# 325
__ret = (((__uctype)__urng()) - __urngmin); } 
# 326
while (__ret >= __past); 
# 327
__ret /= __scaling; 
# 328
}  }  
# 329
} else { 
# 330
if (__urngrange < __urange) 
# 331
{ 
# 347 "/usr/include/c++/11/bits/uniform_int_dist.h" 3
__uctype __tmp; 
# 348
do 
# 349
{ 
# 350
const __uctype __uerngrange = __urngrange + 1; 
# 351
__tmp = (__uerngrange * operator()(__urng, param_type(0, __urange / __uerngrange))); 
# 353
__ret = (__tmp + (((__uctype)__urng()) - __urngmin)); 
# 354
} 
# 355
while ((__ret > __urange) || (__ret < __tmp)); 
# 356
} else { 
# 358
__ret = (((__uctype)__urng()) - __urngmin); }  }  
# 360
return __ret + __param.a(); 
# 361
} 
# 364
template< class _IntType> 
# 365
template< class _ForwardIterator, class 
# 366
_UniformRandomBitGenerator> void 
# 369
uniform_int_distribution< _IntType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomBitGenerator &
# 370
__urng, const param_type &
# 371
__param) 
# 372
{ 
# 374
typedef typename _UniformRandomBitGenerator::result_type _Gresult_type; 
# 375
typedef typename make_unsigned< result_type> ::type __utype; 
# 376
typedef typename common_type< typename _UniformRandomBitGenerator::result_type, typename make_unsigned< result_type> ::type> ::type __uctype; 
# 378
static_assert((__urng.min() < __urng.max()), "Uniform random bit generator must define min() < max()");
# 381
constexpr __uctype __urngmin = __urng.min(); 
# 382
constexpr __uctype __urngmax = __urng.max(); 
# 383
constexpr __uctype __urngrange = (__urngmax - __urngmin); 
# 384
const __uctype __urange = ((__uctype)__param.b()) - ((__uctype)__param.a()); 
# 387
__uctype __ret; 
# 389
if (__urngrange > __urange) 
# 390
{ 
# 391
if (__detail::_Power_of_2(__urngrange + 1) && __detail::_Power_of_2(__urange + 1)) 
# 393
{ 
# 394
while (__f != __t) 
# 395
{ 
# 396
__ret = (((__uctype)__urng()) - __urngmin); 
# 397
(*(__f++)) = ((__ret & __urange) + __param.a()); 
# 398
}  
# 399
} else 
# 401
{ 
# 403
const __uctype __uerange = __urange + 1; 
# 404
const __uctype __scaling = __urngrange / __uerange; 
# 405
const __uctype __past = __uerange * __scaling; 
# 406
while (__f != __t) 
# 407
{ 
# 408
do { 
# 409
__ret = (((__uctype)__urng()) - __urngmin); } 
# 410
while (__ret >= __past); 
# 411
(*(__f++)) = ((__ret / __scaling) + __param.a()); 
# 412
}  
# 413
}  
# 414
} else { 
# 415
if (__urngrange < __urange) 
# 416
{ 
# 432 "/usr/include/c++/11/bits/uniform_int_dist.h" 3
__uctype __tmp; 
# 433
while (__f != __t) 
# 434
{ 
# 435
do 
# 436
{ 
# 437
constexpr __uctype __uerngrange = (__urngrange + 1); 
# 438
__tmp = (__uerngrange * operator()(__urng, param_type(0, __urange / __uerngrange))); 
# 440
__ret = (__tmp + (((__uctype)__urng()) - __urngmin)); 
# 441
} 
# 442
while ((__ret > __urange) || (__ret < __tmp)); 
# 443
(*(__f++)) = __ret; 
# 444
}  
# 445
} else { 
# 447
while (__f != __t) { 
# 448
(*(__f++)) = ((((__uctype)__urng()) - __urngmin) + __param.a()); }  }  }  
# 449
} 
# 454
}
# 71 "/usr/include/c++/11/bits/stl_algo.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 76
template< class _Iterator, class _Compare> void 
# 79
__move_median_to_first(_Iterator __result, _Iterator __a, _Iterator __b, _Iterator 
# 80
__c, _Compare __comp) 
# 81
{ 
# 82
if (__comp(__a, __b)) 
# 83
{ 
# 84
if (__comp(__b, __c)) { 
# 85
std::iter_swap(__result, __b); } else { 
# 86
if (__comp(__a, __c)) { 
# 87
std::iter_swap(__result, __c); } else { 
# 89
std::iter_swap(__result, __a); }  }  
# 90
} else { 
# 91
if (__comp(__a, __c)) { 
# 92
std::iter_swap(__result, __a); } else { 
# 93
if (__comp(__b, __c)) { 
# 94
std::iter_swap(__result, __c); } else { 
# 96
std::iter_swap(__result, __b); }  }  }  
# 97
} 
# 100
template< class _InputIterator, class _Predicate> inline _InputIterator 
# 103
__find_if_not(_InputIterator __first, _InputIterator __last, _Predicate 
# 104
__pred) 
# 105
{ 
# 106
return std::__find_if(__first, __last, __gnu_cxx::__ops::__negate(__pred), std::__iterator_category(__first)); 
# 109
} 
# 114
template< class _InputIterator, class _Predicate, class _Distance> _InputIterator 
# 117
__find_if_not_n(_InputIterator __first, _Distance &__len, _Predicate __pred) 
# 118
{ 
# 119
for (; __len; (--__len), ((void)(++__first))) { 
# 120
if (!__pred(__first)) { 
# 121
break; }  }  
# 122
return __first; 
# 123
} 
# 138 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _ForwardIterator1, class _ForwardIterator2, class 
# 139
_BinaryPredicate> _ForwardIterator1 
# 142
__search(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 143
__first2, _ForwardIterator2 __last2, _BinaryPredicate 
# 144
__predicate) 
# 145
{ 
# 147
if ((__first1 == __last1) || (__first2 == __last2)) { 
# 148
return __first1; }  
# 151
_ForwardIterator2 __p1(__first2); 
# 152
if ((++__p1) == __last2) { 
# 153
return std::__find_if(__first1, __last1, __gnu_cxx::__ops::__iter_comp_iter(__predicate, __first2)); }  
# 157
_ForwardIterator1 __current = __first1; 
# 159
for (; ;) 
# 160
{ 
# 161
__first1 = std::__find_if(__first1, __last1, __gnu_cxx::__ops::__iter_comp_iter(__predicate, __first2)); 
# 165
if (__first1 == __last1) { 
# 166
return __last1; }  
# 168
_ForwardIterator2 __p = __p1; 
# 169
__current = __first1; 
# 170
if ((++__current) == __last1) { 
# 171
return __last1; }  
# 173
while (__predicate(__current, __p)) 
# 174
{ 
# 175
if ((++__p) == __last2) { 
# 176
return __first1; }  
# 177
if ((++__current) == __last1) { 
# 178
return __last1; }  
# 179
}  
# 180
++__first1; 
# 181
}  
# 182
return __first1; 
# 183
} 
# 190
template< class _ForwardIterator, class _Integer, class 
# 191
_UnaryPredicate> _ForwardIterator 
# 194
__search_n_aux(_ForwardIterator __first, _ForwardIterator __last, _Integer 
# 195
__count, _UnaryPredicate __unary_pred, forward_iterator_tag) 
# 197
{ 
# 198
__first = std::__find_if(__first, __last, __unary_pred); 
# 199
while (__first != __last) 
# 200
{ 
# 202
typename iterator_traits< _ForwardIterator> ::difference_type __n = __count; 
# 203
_ForwardIterator __i = __first; 
# 204
++__i; 
# 205
while ((__i != __last) && (__n != 1) && __unary_pred(__i)) 
# 206
{ 
# 207
++__i; 
# 208
--__n; 
# 209
}  
# 210
if (__n == 1) { 
# 211
return __first; }  
# 212
if (__i == __last) { 
# 213
return __last; }  
# 214
__first = std::__find_if(++__i, __last, __unary_pred); 
# 215
}  
# 216
return __last; 
# 217
} 
# 223
template< class _RandomAccessIter, class _Integer, class 
# 224
_UnaryPredicate> _RandomAccessIter 
# 227
__search_n_aux(_RandomAccessIter __first, _RandomAccessIter __last, _Integer 
# 228
__count, _UnaryPredicate __unary_pred, random_access_iterator_tag) 
# 230
{ 
# 232
typedef typename iterator_traits< _RandomAccessIter> ::difference_type _DistanceType; 
# 234
_DistanceType __tailSize = __last - __first; 
# 235
_DistanceType __remainder = __count; 
# 237
while (__remainder <= __tailSize) 
# 238
{ 
# 239
__first += __remainder; 
# 240
__tailSize -= __remainder; 
# 243
_RandomAccessIter __backTrack = __first; 
# 244
while (__unary_pred(--__backTrack)) 
# 245
{ 
# 246
if ((--__remainder) == 0) { 
# 247
return (__first - __count); }  
# 248
}  
# 249
__remainder = ((__count + 1) - (__first - __backTrack)); 
# 250
}  
# 251
return __last; 
# 252
} 
# 254
template< class _ForwardIterator, class _Integer, class 
# 255
_UnaryPredicate> _ForwardIterator 
# 258
__search_n(_ForwardIterator __first, _ForwardIterator __last, _Integer 
# 259
__count, _UnaryPredicate 
# 260
__unary_pred) 
# 261
{ 
# 262
if (__count <= 0) { 
# 263
return __first; }  
# 265
if (__count == 1) { 
# 266
return std::__find_if(__first, __last, __unary_pred); }  
# 268
return std::__search_n_aux(__first, __last, __count, __unary_pred, std::__iterator_category(__first)); 
# 270
} 
# 273
template< class _ForwardIterator1, class _ForwardIterator2, class 
# 274
_BinaryPredicate> _ForwardIterator1 
# 277
__find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 278
__first2, _ForwardIterator2 __last2, forward_iterator_tag, forward_iterator_tag, _BinaryPredicate 
# 280
__comp) 
# 281
{ 
# 282
if (__first2 == __last2) { 
# 283
return __last1; }  
# 285
_ForwardIterator1 __result = __last1; 
# 286
while (1) 
# 287
{ 
# 288
_ForwardIterator1 __new_result = std::__search(__first1, __last1, __first2, __last2, __comp); 
# 290
if (__new_result == __last1) { 
# 291
return __result; } else 
# 293
{ 
# 294
__result = __new_result; 
# 295
__first1 = __new_result; 
# 296
++__first1; 
# 297
}  
# 298
}  
# 299
} 
# 302
template< class _BidirectionalIterator1, class _BidirectionalIterator2, class 
# 303
_BinaryPredicate> _BidirectionalIterator1 
# 306
__find_end(_BidirectionalIterator1 __first1, _BidirectionalIterator1 
# 307
__last1, _BidirectionalIterator2 
# 308
__first2, _BidirectionalIterator2 
# 309
__last2, bidirectional_iterator_tag, bidirectional_iterator_tag, _BinaryPredicate 
# 311
__comp) 
# 312
{ 
# 319
typedef reverse_iterator< _BidirectionalIterator1>  _RevIterator1; 
# 320
typedef reverse_iterator< _BidirectionalIterator2>  _RevIterator2; 
# 322
_RevIterator1 __rlast1(__first1); 
# 323
_RevIterator2 __rlast2(__first2); 
# 324
_RevIterator1 __rresult = std::__search(((reverse_iterator< _BidirectionalIterator1> )(__last1)), __rlast1, ((reverse_iterator< _BidirectionalIterator2> )(__last2)), __rlast2, __comp); 
# 328
if (__rresult == __rlast1) { 
# 329
return __last1; } else 
# 331
{ 
# 332
_BidirectionalIterator1 __result = __rresult.base(); 
# 333
std::advance(__result, -std::distance(__first2, __last2)); 
# 334
return __result; 
# 335
}  
# 336
} 
# 364 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _ForwardIterator1, class _ForwardIterator2> inline _ForwardIterator1 
# 367
find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 368
__first2, _ForwardIterator2 __last2) 
# 369
{ 
# 376
; 
# 377
; 
# 379
return std::__find_end(__first1, __last1, __first2, __last2, std::__iterator_category(__first1), std::__iterator_category(__first2), __gnu_cxx::__ops::__iter_equal_to_iter()); 
# 383
} 
# 413 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _ForwardIterator1, class _ForwardIterator2, class 
# 414
_BinaryPredicate> inline _ForwardIterator1 
# 417
find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 418
__first2, _ForwardIterator2 __last2, _BinaryPredicate 
# 419
__comp) 
# 420
{ 
# 427
; 
# 428
; 
# 430
return std::__find_end(__first1, __last1, __first2, __last2, std::__iterator_category(__first1), std::__iterator_category(__first2), __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 434
} 
# 449 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _InputIterator, class _Predicate> inline bool 
# 452
all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred) 
# 453
{ return __last == std::find_if_not(__first, __last, __pred); } 
# 467 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _InputIterator, class _Predicate> inline bool 
# 470
none_of(_InputIterator __first, _InputIterator __last, _Predicate __pred) 
# 471
{ return __last == std::find_if(__first, __last, __pred); } 
# 486 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _InputIterator, class _Predicate> inline bool 
# 489
any_of(_InputIterator __first, _InputIterator __last, _Predicate __pred) 
# 490
{ return !std::none_of(__first, __last, __pred); } 
# 502 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _InputIterator, class _Predicate> inline _InputIterator 
# 505
find_if_not(_InputIterator __first, _InputIterator __last, _Predicate 
# 506
__pred) 
# 507
{ 
# 512
; 
# 513
return std::__find_if_not(__first, __last, __gnu_cxx::__ops::__pred_iter(__pred)); 
# 515
} 
# 527 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _InputIterator, class _Predicate> inline bool 
# 530
is_partitioned(_InputIterator __first, _InputIterator __last, _Predicate 
# 531
__pred) 
# 532
{ 
# 533
__first = std::find_if_not(__first, __last, __pred); 
# 534
if (__first == __last) { 
# 535
return true; }  
# 536
++__first; 
# 537
return std::none_of(__first, __last, __pred); 
# 538
} 
# 549 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Predicate> _ForwardIterator 
# 552
partition_point(_ForwardIterator __first, _ForwardIterator __last, _Predicate 
# 553
__pred) 
# 554
{ 
# 561
; 
# 564
typedef typename iterator_traits< _ForwardIterator> ::difference_type _DistanceType; 
# 566
_DistanceType __len = std::distance(__first, __last); 
# 568
while (__len > 0) 
# 569
{ 
# 570
_DistanceType __half = __len >> 1; 
# 571
_ForwardIterator __middle = __first; 
# 572
std::advance(__middle, __half); 
# 573
if (__pred(*__middle)) 
# 574
{ 
# 575
__first = __middle; 
# 576
++__first; 
# 577
__len = ((__len - __half) - 1); 
# 578
} else { 
# 580
__len = __half; }  
# 581
}  
# 582
return __first; 
# 583
} 
# 586
template< class _InputIterator, class _OutputIterator, class 
# 587
_Predicate> _OutputIterator 
# 590
__remove_copy_if(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 591
__result, _Predicate __pred) 
# 592
{ 
# 593
for (; __first != __last; ++__first) { 
# 594
if (!__pred(__first)) 
# 595
{ 
# 596
(*__result) = (*__first); 
# 597
++__result; 
# 598
}  }  
# 599
return __result; 
# 600
} 
# 616 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _InputIterator, class _OutputIterator, class _Tp> inline _OutputIterator 
# 619
remove_copy(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 620
__result, const _Tp &__value) 
# 621
{ 
# 628
; 
# 630
return std::__remove_copy_if(__first, __last, __result, __gnu_cxx::__ops::__iter_equals_val(__value)); 
# 632
} 
# 649 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _InputIterator, class _OutputIterator, class 
# 650
_Predicate> inline _OutputIterator 
# 653
remove_copy_if(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 654
__result, _Predicate __pred) 
# 655
{ 
# 662
; 
# 664
return std::__remove_copy_if(__first, __last, __result, __gnu_cxx::__ops::__pred_iter(__pred)); 
# 666
} 
# 684 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _InputIterator, class _OutputIterator, class 
# 685
_Predicate> _OutputIterator 
# 688
copy_if(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 689
__result, _Predicate __pred) 
# 690
{ 
# 697
; 
# 699
for (; __first != __last; ++__first) { 
# 700
if (__pred(*__first)) 
# 701
{ 
# 702
(*__result) = (*__first); 
# 703
++__result; 
# 704
}  }  
# 705
return __result; 
# 706
} 
# 708
template< class _InputIterator, class _Size, class _OutputIterator> _OutputIterator 
# 711
__copy_n(_InputIterator __first, _Size __n, _OutputIterator 
# 712
__result, input_iterator_tag) 
# 713
{ 
# 714
return std::__niter_wrap(__result, __copy_n_a(__first, __n, std::__niter_base(__result), true)); 
# 717
} 
# 719
template< class _RandomAccessIterator, class _Size, class 
# 720
_OutputIterator> inline _OutputIterator 
# 723
__copy_n(_RandomAccessIterator __first, _Size __n, _OutputIterator 
# 724
__result, random_access_iterator_tag) 
# 725
{ return std::copy(__first, __first + __n, __result); } 
# 740 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _InputIterator, class _Size, class _OutputIterator> inline _OutputIterator 
# 743
copy_n(_InputIterator __first, _Size __n, _OutputIterator __result) 
# 744
{ 
# 750
const auto __n2 = std::__size_to_integer(__n); 
# 751
if (__n2 <= 0) { 
# 752
return __result; }  
# 754
; 
# 755
; 
# 757
return std::__copy_n(__first, __n2, __result, std::__iterator_category(__first)); 
# 759
} 
# 776 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _InputIterator, class _OutputIterator1, class 
# 777
_OutputIterator2, class _Predicate> pair< _OutputIterator1, _OutputIterator2>  
# 780
partition_copy(_InputIterator __first, _InputIterator __last, _OutputIterator1 
# 781
__out_true, _OutputIterator2 __out_false, _Predicate 
# 782
__pred) 
# 783
{ 
# 792
; 
# 794
for (; __first != __last; ++__first) { 
# 795
if (__pred(*__first)) 
# 796
{ 
# 797
(*__out_true) = (*__first); 
# 798
++__out_true; 
# 799
} else 
# 801
{ 
# 802
(*__out_false) = (*__first); 
# 803
++__out_false; 
# 804
}  }  
# 806
return pair< _OutputIterator1, _OutputIterator2> (__out_true, __out_false); 
# 807
} 
# 810
template< class _ForwardIterator, class _Predicate> _ForwardIterator 
# 813
__remove_if(_ForwardIterator __first, _ForwardIterator __last, _Predicate 
# 814
__pred) 
# 815
{ 
# 816
__first = std::__find_if(__first, __last, __pred); 
# 817
if (__first == __last) { 
# 818
return __first; }  
# 819
_ForwardIterator __result = __first; 
# 820
++__first; 
# 821
for (; __first != __last; ++__first) { 
# 822
if (!__pred(__first)) 
# 823
{ 
# 824
(*__result) = std::move(*__first); 
# 825
++__result; 
# 826
}  }  
# 827
return __result; 
# 828
} 
# 847 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Tp> inline _ForwardIterator 
# 850
remove(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 851
__value) 
# 852
{ 
# 858
; 
# 860
return std::__remove_if(__first, __last, __gnu_cxx::__ops::__iter_equals_val(__value)); 
# 862
} 
# 881 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Predicate> inline _ForwardIterator 
# 884
remove_if(_ForwardIterator __first, _ForwardIterator __last, _Predicate 
# 885
__pred) 
# 886
{ 
# 892
; 
# 894
return std::__remove_if(__first, __last, __gnu_cxx::__ops::__pred_iter(__pred)); 
# 896
} 
# 898
template< class _ForwardIterator, class _BinaryPredicate> _ForwardIterator 
# 901
__adjacent_find(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate 
# 902
__binary_pred) 
# 903
{ 
# 904
if (__first == __last) { 
# 905
return __last; }  
# 906
_ForwardIterator __next = __first; 
# 907
while ((++__next) != __last) 
# 908
{ 
# 909
if (__binary_pred(__first, __next)) { 
# 910
return __first; }  
# 911
__first = __next; 
# 912
}  
# 913
return __last; 
# 914
} 
# 916
template< class _ForwardIterator, class _BinaryPredicate> _ForwardIterator 
# 919
__unique(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate 
# 920
__binary_pred) 
# 921
{ 
# 923
__first = std::__adjacent_find(__first, __last, __binary_pred); 
# 924
if (__first == __last) { 
# 925
return __last; }  
# 928
_ForwardIterator __dest = __first; 
# 929
++__first; 
# 930
while ((++__first) != __last) { 
# 931
if (!__binary_pred(__dest, __first)) { 
# 932
(*(++__dest)) = std::move(*__first); }  }  
# 933
return ++__dest; 
# 934
} 
# 950 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _ForwardIterator> inline _ForwardIterator 
# 953
unique(_ForwardIterator __first, _ForwardIterator __last) 
# 954
{ 
# 960
; 
# 962
return std::__unique(__first, __last, __gnu_cxx::__ops::__iter_equal_to_iter()); 
# 964
} 
# 981 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _ForwardIterator, class _BinaryPredicate> inline _ForwardIterator 
# 984
unique(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate 
# 985
__binary_pred) 
# 986
{ 
# 993
; 
# 995
return std::__unique(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__binary_pred)); 
# 997
} 
# 1005
template< class _ForwardIterator, class _OutputIterator, class 
# 1006
_BinaryPredicate> _OutputIterator 
# 1009
__unique_copy(_ForwardIterator __first, _ForwardIterator __last, _OutputIterator 
# 1010
__result, _BinaryPredicate __binary_pred, forward_iterator_tag, output_iterator_tag) 
# 1012
{ 
# 1018
_ForwardIterator __next = __first; 
# 1019
(*__result) = (*__first); 
# 1020
while ((++__next) != __last) { 
# 1021
if (!__binary_pred(__first, __next)) 
# 1022
{ 
# 1023
__first = __next; 
# 1024
(*(++__result)) = (*__first); 
# 1025
}  }  
# 1026
return ++__result; 
# 1027
} 
# 1035
template< class _InputIterator, class _OutputIterator, class 
# 1036
_BinaryPredicate> _OutputIterator 
# 1039
__unique_copy(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 1040
__result, _BinaryPredicate __binary_pred, input_iterator_tag, output_iterator_tag) 
# 1042
{ 
# 1048
typename iterator_traits< _InputIterator> ::value_type __value = (*__first); 
# 1050
__decltype((__gnu_cxx::__ops::__iter_comp_val(__binary_pred))) __rebound_pred = __gnu_cxx::__ops::__iter_comp_val(__binary_pred); 
# 1052
(*__result) = __value; 
# 1053
while ((++__first) != __last) { 
# 1054
if (!__rebound_pred(__first, __value)) 
# 1055
{ 
# 1056
__value = (*__first); 
# 1057
(*(++__result)) = __value; 
# 1058
}  }  
# 1059
return ++__result; 
# 1060
} 
# 1068
template< class _InputIterator, class _ForwardIterator, class 
# 1069
_BinaryPredicate> _ForwardIterator 
# 1072
__unique_copy(_InputIterator __first, _InputIterator __last, _ForwardIterator 
# 1073
__result, _BinaryPredicate __binary_pred, input_iterator_tag, forward_iterator_tag) 
# 1075
{ 
# 1080
(*__result) = (*__first); 
# 1081
while ((++__first) != __last) { 
# 1082
if (!__binary_pred(__result, __first)) { 
# 1083
(*(++__result)) = (*__first); }  }  
# 1084
return ++__result; 
# 1085
} 
# 1092
template< class _BidirectionalIterator> void 
# 1095
__reverse(_BidirectionalIterator __first, _BidirectionalIterator __last, bidirectional_iterator_tag) 
# 1097
{ 
# 1098
while (true) { 
# 1099
if ((__first == __last) || (__first == (--__last))) { 
# 1100
return; } else 
# 1102
{ 
# 1103
std::iter_swap(__first, __last); 
# 1104
++__first; 
# 1105
}  }  
# 1106
} 
# 1113
template< class _RandomAccessIterator> void 
# 1116
__reverse(_RandomAccessIterator __first, _RandomAccessIterator __last, random_access_iterator_tag) 
# 1118
{ 
# 1119
if (__first == __last) { 
# 1120
return; }  
# 1121
--__last; 
# 1122
while (__first < __last) 
# 1123
{ 
# 1124
std::iter_swap(__first, __last); 
# 1125
++__first; 
# 1126
--__last; 
# 1127
}  
# 1128
} 
# 1142 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _BidirectionalIterator> inline void 
# 1145
reverse(_BidirectionalIterator __first, _BidirectionalIterator __last) 
# 1146
{ 
# 1150
; 
# 1151
std::__reverse(__first, __last, std::__iterator_category(__first)); 
# 1152
} 
# 1170 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _BidirectionalIterator, class _OutputIterator> _OutputIterator 
# 1173
reverse_copy(_BidirectionalIterator __first, _BidirectionalIterator __last, _OutputIterator 
# 1174
__result) 
# 1175
{ 
# 1181
; 
# 1183
while (__first != __last) 
# 1184
{ 
# 1185
--__last; 
# 1186
(*__result) = (*__last); 
# 1187
++__result; 
# 1188
}  
# 1189
return __result; 
# 1190
} 
# 1196
template< class _EuclideanRingElement> _EuclideanRingElement 
# 1199
__gcd(_EuclideanRingElement __m, _EuclideanRingElement __n) 
# 1200
{ 
# 1201
while (__n != 0) 
# 1202
{ 
# 1203
_EuclideanRingElement __t = __m % __n; 
# 1204
__m = __n; 
# 1205
__n = __t; 
# 1206
}  
# 1207
return __m; 
# 1208
} 
# 1210
inline namespace _V2 { 
# 1214
template< class _ForwardIterator> _ForwardIterator 
# 1217
__rotate(_ForwardIterator __first, _ForwardIterator 
# 1218
__middle, _ForwardIterator 
# 1219
__last, forward_iterator_tag) 
# 1221
{ 
# 1222
if (__first == __middle) { 
# 1223
return __last; } else { 
# 1224
if (__last == __middle) { 
# 1225
return __first; }  }  
# 1227
_ForwardIterator __first2 = __middle; 
# 1228
do 
# 1229
{ 
# 1230
std::iter_swap(__first, __first2); 
# 1231
++__first; 
# 1232
++__first2; 
# 1233
if (__first == __middle) { 
# 1234
__middle = __first2; }  
# 1235
} 
# 1236
while (__first2 != __last); 
# 1238
_ForwardIterator __ret = __first; 
# 1240
__first2 = __middle; 
# 1242
while (__first2 != __last) 
# 1243
{ 
# 1244
std::iter_swap(__first, __first2); 
# 1245
++__first; 
# 1246
++__first2; 
# 1247
if (__first == __middle) { 
# 1248
__middle = __first2; } else { 
# 1249
if (__first2 == __last) { 
# 1250
__first2 = __middle; }  }  
# 1251
}  
# 1252
return __ret; 
# 1253
} 
# 1256
template< class _BidirectionalIterator> _BidirectionalIterator 
# 1259
__rotate(_BidirectionalIterator __first, _BidirectionalIterator 
# 1260
__middle, _BidirectionalIterator 
# 1261
__last, bidirectional_iterator_tag) 
# 1263
{ 
# 1268
if (__first == __middle) { 
# 1269
return __last; } else { 
# 1270
if (__last == __middle) { 
# 1271
return __first; }  }  
# 1273
std::__reverse(__first, __middle, bidirectional_iterator_tag()); 
# 1274
std::__reverse(__middle, __last, bidirectional_iterator_tag()); 
# 1276
while ((__first != __middle) && (__middle != __last)) 
# 1277
{ 
# 1278
std::iter_swap(__first, --__last); 
# 1279
++__first; 
# 1280
}  
# 1282
if (__first == __middle) 
# 1283
{ 
# 1284
std::__reverse(__middle, __last, bidirectional_iterator_tag()); 
# 1285
return __last; 
# 1286
} else 
# 1288
{ 
# 1289
std::__reverse(__first, __middle, bidirectional_iterator_tag()); 
# 1290
return __first; 
# 1291
}  
# 1292
} 
# 1295
template< class _RandomAccessIterator> _RandomAccessIterator 
# 1298
__rotate(_RandomAccessIterator __first, _RandomAccessIterator 
# 1299
__middle, _RandomAccessIterator 
# 1300
__last, random_access_iterator_tag) 
# 1302
{ 
# 1307
if (__first == __middle) { 
# 1308
return __last; } else { 
# 1309
if (__last == __middle) { 
# 1310
return __first; }  }  
# 1313
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _Distance; 
# 1315
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType; 
# 1317
_Distance __n = __last - __first; 
# 1318
_Distance __k = __middle - __first; 
# 1320
if (__k == (__n - __k)) 
# 1321
{ 
# 1322
std::swap_ranges(__first, __middle, __middle); 
# 1323
return __middle; 
# 1324
}  
# 1326
_RandomAccessIterator __p = __first; 
# 1327
_RandomAccessIterator __ret = __first + (__last - __middle); 
# 1329
for (; ;) 
# 1330
{ 
# 1331
if (__k < (__n - __k)) 
# 1332
{ 
# 1333
if (__is_pod(_ValueType) && (__k == 1)) 
# 1334
{ 
# 1335
_ValueType __t = std::move(*__p); 
# 1336
std::move(__p + 1, __p + __n, __p); 
# 1337
(*((__p + __n) - 1)) = std::move(__t); 
# 1338
return __ret; 
# 1339
}  
# 1340
_RandomAccessIterator __q = __p + __k; 
# 1341
for (_Distance __i = (0); __i < (__n - __k); ++__i) 
# 1342
{ 
# 1343
std::iter_swap(__p, __q); 
# 1344
++__p; 
# 1345
++__q; 
# 1346
}  
# 1347
__n %= __k; 
# 1348
if (__n == 0) { 
# 1349
return __ret; }  
# 1350
std::swap(__n, __k); 
# 1351
__k = (__n - __k); 
# 1352
} else 
# 1354
{ 
# 1355
__k = (__n - __k); 
# 1356
if (__is_pod(_ValueType) && (__k == 1)) 
# 1357
{ 
# 1358
_ValueType __t = std::move(*((__p + __n) - 1)); 
# 1359
std::move_backward(__p, (__p + __n) - 1, __p + __n); 
# 1360
(*__p) = std::move(__t); 
# 1361
return __ret; 
# 1362
}  
# 1363
_RandomAccessIterator __q = __p + __n; 
# 1364
__p = (__q - __k); 
# 1365
for (_Distance __i = (0); __i < (__n - __k); ++__i) 
# 1366
{ 
# 1367
--__p; 
# 1368
--__q; 
# 1369
std::iter_swap(__p, __q); 
# 1370
}  
# 1371
__n %= __k; 
# 1372
if (__n == 0) { 
# 1373
return __ret; }  
# 1374
std::swap(__n, __k); 
# 1375
}  
# 1376
}  
# 1377
} 
# 1402 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _ForwardIterator> inline _ForwardIterator 
# 1405
rotate(_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator 
# 1406
__last) 
# 1407
{ 
# 1411
; 
# 1412
; 
# 1414
return std::__rotate(__first, __middle, __last, std::__iterator_category(__first)); 
# 1416
} 
# 1418
}
# 1440 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _ForwardIterator, class _OutputIterator> inline _OutputIterator 
# 1443
rotate_copy(_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator 
# 1444
__last, _OutputIterator __result) 
# 1445
{ 
# 1450
; 
# 1451
; 
# 1453
return std::copy(__first, __middle, std::copy(__middle, __last, __result)); 
# 1455
} 
# 1458
template< class _ForwardIterator, class _Predicate> _ForwardIterator 
# 1461
__partition(_ForwardIterator __first, _ForwardIterator __last, _Predicate 
# 1462
__pred, forward_iterator_tag) 
# 1463
{ 
# 1464
if (__first == __last) { 
# 1465
return __first; }  
# 1467
while (__pred(*__first)) { 
# 1468
if ((++__first) == __last) { 
# 1469
return __first; }  }  
# 1471
_ForwardIterator __next = __first; 
# 1473
while ((++__next) != __last) { 
# 1474
if (__pred(*__next)) 
# 1475
{ 
# 1476
std::iter_swap(__first, __next); 
# 1477
++__first; 
# 1478
}  }  
# 1480
return __first; 
# 1481
} 
# 1484
template< class _BidirectionalIterator, class _Predicate> _BidirectionalIterator 
# 1487
__partition(_BidirectionalIterator __first, _BidirectionalIterator __last, _Predicate 
# 1488
__pred, bidirectional_iterator_tag) 
# 1489
{ 
# 1490
while (true) 
# 1491
{ 
# 1492
while (true) { 
# 1493
if (__first == __last) { 
# 1494
return __first; } else { 
# 1495
if (__pred(*__first)) { 
# 1496
++__first; } else { 
# 1498
break; }  }  }  
# 1499
--__last; 
# 1500
while (true) { 
# 1501
if (__first == __last) { 
# 1502
return __first; } else { 
# 1503
if (!((bool)__pred(*__last))) { 
# 1504
--__last; } else { 
# 1506
break; }  }  }  
# 1507
std::iter_swap(__first, __last); 
# 1508
++__first; 
# 1509
}  
# 1510
} 
# 1520 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Pointer, class _Predicate, class 
# 1521
_Distance> _ForwardIterator 
# 1523
__stable_partition_adaptive(_ForwardIterator __first, _ForwardIterator 
# 1524
__last, _Predicate 
# 1525
__pred, _Distance __len, _Pointer 
# 1526
__buffer, _Distance 
# 1527
__buffer_size) 
# 1528
{ 
# 1529
if (__len == 1) { 
# 1530
return __first; }  
# 1532
if (__len <= __buffer_size) 
# 1533
{ 
# 1534
_ForwardIterator __result1 = __first; 
# 1535
_Pointer __result2 = __buffer; 
# 1540
(*__result2) = std::move(*__first); 
# 1541
++__result2; 
# 1542
++__first; 
# 1543
for (; __first != __last; ++__first) { 
# 1544
if (__pred(__first)) 
# 1545
{ 
# 1546
(*__result1) = std::move(*__first); 
# 1547
++__result1; 
# 1548
} else 
# 1550
{ 
# 1551
(*__result2) = std::move(*__first); 
# 1552
++__result2; 
# 1553
}  }  
# 1555
std::move(__buffer, __result2, __result1); 
# 1556
return __result1; 
# 1557
}  
# 1559
_ForwardIterator __middle = __first; 
# 1560
std::advance(__middle, __len / 2); 
# 1561
_ForwardIterator __left_split = std::__stable_partition_adaptive(__first, __middle, __pred, __len / 2, __buffer, __buffer_size); 
# 1568
_Distance __right_len = __len - (__len / 2); 
# 1569
_ForwardIterator __right_split = std::__find_if_not_n(__middle, __right_len, __pred); 
# 1572
if (__right_len) { 
# 1573
__right_split = std::__stable_partition_adaptive(__right_split, __last, __pred, __right_len, __buffer, __buffer_size); }  
# 1578
return std::rotate(__left_split, __middle, __right_split); 
# 1579
} 
# 1581
template< class _ForwardIterator, class _Predicate> _ForwardIterator 
# 1583
__stable_partition(_ForwardIterator __first, _ForwardIterator __last, _Predicate 
# 1584
__pred) 
# 1585
{ 
# 1586
__first = std::__find_if_not(__first, __last, __pred); 
# 1588
if (__first == __last) { 
# 1589
return __first; }  
# 1592
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType; 
# 1594
typedef typename iterator_traits< _ForwardIterator> ::difference_type _DistanceType; 
# 1597
_Temporary_buffer< _ForwardIterator, typename iterator_traits< _ForwardIterator> ::value_type>  __buf(__first, std::distance(__first, __last)); 
# 1598
return std::__stable_partition_adaptive(__first, __last, __pred, (_DistanceType)__buf.requested_size(), __buf.begin(), (_DistanceType)__buf.size()); 
# 1603
} 
# 1622 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Predicate> inline _ForwardIterator 
# 1624
stable_partition(_ForwardIterator __first, _ForwardIterator __last, _Predicate 
# 1625
__pred) 
# 1626
{ 
# 1632
; 
# 1634
return std::__stable_partition(__first, __last, __gnu_cxx::__ops::__pred_iter(__pred)); 
# 1636
} 
# 1639
template< class _RandomAccessIterator, class _Compare> void 
# 1642
__heap_select(_RandomAccessIterator __first, _RandomAccessIterator 
# 1643
__middle, _RandomAccessIterator 
# 1644
__last, _Compare __comp) 
# 1645
{ 
# 1646
std::__make_heap(__first, __middle, __comp); 
# 1647
for (_RandomAccessIterator __i = __middle; __i < __last; ++__i) { 
# 1648
if (__comp(__i, __first)) { 
# 1649
std::__pop_heap(__first, __middle, __i, __comp); }  }  
# 1650
} 
# 1654
template< class _InputIterator, class _RandomAccessIterator, class 
# 1655
_Compare> _RandomAccessIterator 
# 1658
__partial_sort_copy(_InputIterator __first, _InputIterator __last, _RandomAccessIterator 
# 1659
__result_first, _RandomAccessIterator 
# 1660
__result_last, _Compare 
# 1661
__comp) 
# 1662
{ 
# 1664
typedef typename iterator_traits< _InputIterator> ::value_type _InputValueType; 
# 1665
typedef iterator_traits< _RandomAccessIterator>  _RItTraits; 
# 1666
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType; 
# 1668
if (__result_first == __result_last) { 
# 1669
return __result_last; }  
# 1670
_RandomAccessIterator __result_real_last = __result_first; 
# 1671
while ((__first != __last) && (__result_real_last != __result_last)) 
# 1672
{ 
# 1673
(*__result_real_last) = (*__first); 
# 1674
++__result_real_last; 
# 1675
++__first; 
# 1676
}  
# 1678
std::__make_heap(__result_first, __result_real_last, __comp); 
# 1679
while (__first != __last) 
# 1680
{ 
# 1681
if (__comp(__first, __result_first)) { 
# 1682
std::__adjust_heap(__result_first, (_DistanceType)0, (_DistanceType)(__result_real_last - __result_first), (_InputValueType)(*__first), __comp); }  
# 1686
++__first; 
# 1687
}  
# 1688
std::__sort_heap(__result_first, __result_real_last, __comp); 
# 1689
return __result_real_last; 
# 1690
} 
# 1710 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _InputIterator, class _RandomAccessIterator> inline _RandomAccessIterator 
# 1713
partial_sort_copy(_InputIterator __first, _InputIterator __last, _RandomAccessIterator 
# 1714
__result_first, _RandomAccessIterator 
# 1715
__result_last) 
# 1716
{ 
# 1731 "/usr/include/c++/11/bits/stl_algo.h" 3
; 
# 1732
; 
# 1733
; 
# 1735
return std::__partial_sort_copy(__first, __last, __result_first, __result_last, __gnu_cxx::__ops::__iter_less_iter()); 
# 1738
} 
# 1760 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _InputIterator, class _RandomAccessIterator, class 
# 1761
_Compare> inline _RandomAccessIterator 
# 1764
partial_sort_copy(_InputIterator __first, _InputIterator __last, _RandomAccessIterator 
# 1765
__result_first, _RandomAccessIterator 
# 1766
__result_last, _Compare 
# 1767
__comp) 
# 1768
{ 
# 1786 "/usr/include/c++/11/bits/stl_algo.h" 3
; 
# 1787
; 
# 1788
; 
# 1790
return std::__partial_sort_copy(__first, __last, __result_first, __result_last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 1793
} 
# 1796
template< class _RandomAccessIterator, class _Compare> void 
# 1799
__unguarded_linear_insert(_RandomAccessIterator __last, _Compare 
# 1800
__comp) 
# 1801
{ 
# 1803
typename iterator_traits< _RandomAccessIterator> ::value_type __val = std::move(*__last); 
# 1804
_RandomAccessIterator __next = __last; 
# 1805
--__next; 
# 1806
while (__comp(__val, __next)) 
# 1807
{ 
# 1808
(*__last) = std::move(*__next); 
# 1809
__last = __next; 
# 1810
--__next; 
# 1811
}  
# 1812
(*__last) = std::move(__val); 
# 1813
} 
# 1816
template< class _RandomAccessIterator, class _Compare> void 
# 1819
__insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator 
# 1820
__last, _Compare __comp) 
# 1821
{ 
# 1822
if (__first == __last) { return; }  
# 1824
for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i) 
# 1825
{ 
# 1826
if (__comp(__i, __first)) 
# 1827
{ 
# 1829
typename iterator_traits< _RandomAccessIterator> ::value_type __val = std::move(*__i); 
# 1830
std::move_backward(__first, __i, __i + 1); 
# 1831
(*__first) = std::move(__val); 
# 1832
} else { 
# 1834
std::__unguarded_linear_insert(__i, __gnu_cxx::__ops::__val_comp_iter(__comp)); }  
# 1836
}  
# 1837
} 
# 1840
template< class _RandomAccessIterator, class _Compare> inline void 
# 1843
__unguarded_insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator 
# 1844
__last, _Compare __comp) 
# 1845
{ 
# 1846
for (_RandomAccessIterator __i = __first; __i != __last; ++__i) { 
# 1847
std::__unguarded_linear_insert(__i, __gnu_cxx::__ops::__val_comp_iter(__comp)); }  
# 1849
} 
# 1855
enum { _S_threshold = 16}; 
# 1858
template< class _RandomAccessIterator, class _Compare> void 
# 1861
__final_insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator 
# 1862
__last, _Compare __comp) 
# 1863
{ 
# 1864
if ((__last - __first) > ((int)_S_threshold)) 
# 1865
{ 
# 1866
std::__insertion_sort(__first, __first + ((int)_S_threshold), __comp); 
# 1867
std::__unguarded_insertion_sort(__first + ((int)_S_threshold), __last, __comp); 
# 1869
} else { 
# 1871
std::__insertion_sort(__first, __last, __comp); }  
# 1872
} 
# 1875
template< class _RandomAccessIterator, class _Compare> _RandomAccessIterator 
# 1878
__unguarded_partition(_RandomAccessIterator __first, _RandomAccessIterator 
# 1879
__last, _RandomAccessIterator 
# 1880
__pivot, _Compare __comp) 
# 1881
{ 
# 1882
while (true) 
# 1883
{ 
# 1884
while (__comp(__first, __pivot)) { 
# 1885
++__first; }  
# 1886
--__last; 
# 1887
while (__comp(__pivot, __last)) { 
# 1888
--__last; }  
# 1889
if (!(__first < __last)) { 
# 1890
return __first; }  
# 1891
std::iter_swap(__first, __last); 
# 1892
++__first; 
# 1893
}  
# 1894
} 
# 1897
template< class _RandomAccessIterator, class _Compare> inline _RandomAccessIterator 
# 1900
__unguarded_partition_pivot(_RandomAccessIterator __first, _RandomAccessIterator 
# 1901
__last, _Compare __comp) 
# 1902
{ 
# 1903
_RandomAccessIterator __mid = __first + ((__last - __first) / 2); 
# 1904
std::__move_median_to_first(__first, __first + 1, __mid, __last - 1, __comp); 
# 1906
return std::__unguarded_partition(__first + 1, __last, __first, __comp); 
# 1907
} 
# 1909
template< class _RandomAccessIterator, class _Compare> inline void 
# 1912
__partial_sort(_RandomAccessIterator __first, _RandomAccessIterator 
# 1913
__middle, _RandomAccessIterator 
# 1914
__last, _Compare 
# 1915
__comp) 
# 1916
{ 
# 1917
std::__heap_select(__first, __middle, __last, __comp); 
# 1918
std::__sort_heap(__first, __middle, __comp); 
# 1919
} 
# 1922
template< class _RandomAccessIterator, class _Size, class _Compare> void 
# 1925
__introsort_loop(_RandomAccessIterator __first, _RandomAccessIterator 
# 1926
__last, _Size 
# 1927
__depth_limit, _Compare __comp) 
# 1928
{ 
# 1929
while ((__last - __first) > ((int)_S_threshold)) 
# 1930
{ 
# 1931
if (__depth_limit == 0) 
# 1932
{ 
# 1933
std::__partial_sort(__first, __last, __last, __comp); 
# 1934
return; 
# 1935
}  
# 1936
--__depth_limit; 
# 1937
_RandomAccessIterator __cut = std::__unguarded_partition_pivot(__first, __last, __comp); 
# 1939
std::__introsort_loop(__cut, __last, __depth_limit, __comp); 
# 1940
__last = __cut; 
# 1941
}  
# 1942
} 
# 1946
template< class _RandomAccessIterator, class _Compare> inline void 
# 1949
__sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 1950
__comp) 
# 1951
{ 
# 1952
if (__first != __last) 
# 1953
{ 
# 1954
std::__introsort_loop(__first, __last, std::__lg(__last - __first) * 2, __comp); 
# 1957
std::__final_insertion_sort(__first, __last, __comp); 
# 1958
}  
# 1959
} 
# 1961
template< class _RandomAccessIterator, class _Size, class _Compare> void 
# 1964
__introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator 
# 1965
__last, _Size __depth_limit, _Compare 
# 1966
__comp) 
# 1967
{ 
# 1968
while ((__last - __first) > 3) 
# 1969
{ 
# 1970
if (__depth_limit == 0) 
# 1971
{ 
# 1972
std::__heap_select(__first, __nth + 1, __last, __comp); 
# 1974
std::iter_swap(__first, __nth); 
# 1975
return; 
# 1976
}  
# 1977
--__depth_limit; 
# 1978
_RandomAccessIterator __cut = std::__unguarded_partition_pivot(__first, __last, __comp); 
# 1980
if (__cut <= __nth) { 
# 1981
__first = __cut; } else { 
# 1983
__last = __cut; }  
# 1984
}  
# 1985
std::__insertion_sort(__first, __last, __comp); 
# 1986
} 
# 2008 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Tp, class _Compare> inline _ForwardIterator 
# 2011
lower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2012
__val, _Compare __comp) 
# 2013
{ 
# 2019
; 
# 2021
return std::__lower_bound(__first, __last, __val, __gnu_cxx::__ops::__iter_comp_val(__comp)); 
# 2023
} 
# 2025
template< class _ForwardIterator, class _Tp, class _Compare> _ForwardIterator 
# 2028
__upper_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2029
__val, _Compare __comp) 
# 2030
{ 
# 2032
typedef typename iterator_traits< _ForwardIterator> ::difference_type _DistanceType; 
# 2034
_DistanceType __len = std::distance(__first, __last); 
# 2036
while (__len > 0) 
# 2037
{ 
# 2038
_DistanceType __half = __len >> 1; 
# 2039
_ForwardIterator __middle = __first; 
# 2040
std::advance(__middle, __half); 
# 2041
if (__comp(__val, __middle)) { 
# 2042
__len = __half; } else 
# 2044
{ 
# 2045
__first = __middle; 
# 2046
++__first; 
# 2047
__len = ((__len - __half) - 1); 
# 2048
}  
# 2049
}  
# 2050
return __first; 
# 2051
} 
# 2064 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Tp> inline _ForwardIterator 
# 2067
upper_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2068
__val) 
# 2069
{ 
# 2074
; 
# 2076
return std::__upper_bound(__first, __last, __val, __gnu_cxx::__ops::__val_less_iter()); 
# 2078
} 
# 2095 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Tp, class _Compare> inline _ForwardIterator 
# 2098
upper_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2099
__val, _Compare __comp) 
# 2100
{ 
# 2106
; 
# 2108
return std::__upper_bound(__first, __last, __val, __gnu_cxx::__ops::__val_comp_iter(__comp)); 
# 2110
} 
# 2112
template< class _ForwardIterator, class _Tp, class 
# 2113
_CompareItTp, class _CompareTpIt> pair< _ForwardIterator, _ForwardIterator>  
# 2116
__equal_range(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2117
__val, _CompareItTp 
# 2118
__comp_it_val, _CompareTpIt __comp_val_it) 
# 2119
{ 
# 2121
typedef typename iterator_traits< _ForwardIterator> ::difference_type _DistanceType; 
# 2123
_DistanceType __len = std::distance(__first, __last); 
# 2125
while (__len > 0) 
# 2126
{ 
# 2127
_DistanceType __half = __len >> 1; 
# 2128
_ForwardIterator __middle = __first; 
# 2129
std::advance(__middle, __half); 
# 2130
if (__comp_it_val(__middle, __val)) 
# 2131
{ 
# 2132
__first = __middle; 
# 2133
++__first; 
# 2134
__len = ((__len - __half) - 1); 
# 2135
} else { 
# 2136
if (__comp_val_it(__val, __middle)) { 
# 2137
__len = __half; } else 
# 2139
{ 
# 2140
_ForwardIterator __left = std::__lower_bound(__first, __middle, __val, __comp_it_val); 
# 2142
std::advance(__first, __len); 
# 2143
_ForwardIterator __right = std::__upper_bound(++__middle, __first, __val, __comp_val_it); 
# 2145
return pair< _ForwardIterator, _ForwardIterator> (__left, __right); 
# 2146
}  }  
# 2147
}  
# 2148
return pair< _ForwardIterator, _ForwardIterator> (__first, __first); 
# 2149
} 
# 2168 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Tp> inline pair< _ForwardIterator, _ForwardIterator>  
# 2171
equal_range(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2172
__val) 
# 2173
{ 
# 2180
; 
# 2181
; 
# 2183
return std::__equal_range(__first, __last, __val, __gnu_cxx::__ops::__iter_less_val(), __gnu_cxx::__ops::__val_less_iter()); 
# 2186
} 
# 2205 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Tp, class _Compare> inline pair< _ForwardIterator, _ForwardIterator>  
# 2208
equal_range(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2209
__val, _Compare __comp) 
# 2210
{ 
# 2218
; 
# 2220
; 
# 2222
return std::__equal_range(__first, __last, __val, __gnu_cxx::__ops::__iter_comp_val(__comp), __gnu_cxx::__ops::__val_comp_iter(__comp)); 
# 2225
} 
# 2239 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Tp> bool 
# 2242
binary_search(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2243
__val) 
# 2244
{ 
# 2249
; 
# 2250
; 
# 2252
_ForwardIterator __i = std::__lower_bound(__first, __last, __val, __gnu_cxx::__ops::__iter_less_val()); 
# 2255
return (__i != __last) && (!(__val < (*__i))); 
# 2256
} 
# 2273 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Tp, class _Compare> bool 
# 2276
binary_search(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2277
__val, _Compare __comp) 
# 2278
{ 
# 2284
; 
# 2286
; 
# 2288
_ForwardIterator __i = std::__lower_bound(__first, __last, __val, __gnu_cxx::__ops::__iter_comp_val(__comp)); 
# 2291
return (__i != __last) && (!((bool)__comp(__val, *__i))); 
# 2292
} 
# 2297
template< class _InputIterator1, class _InputIterator2, class 
# 2298
_OutputIterator, class _Compare> void 
# 2300
__move_merge_adaptive(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 2301
__first2, _InputIterator2 __last2, _OutputIterator 
# 2302
__result, _Compare __comp) 
# 2303
{ 
# 2304
while ((__first1 != __last1) && (__first2 != __last2)) 
# 2305
{ 
# 2306
if (__comp(__first2, __first1)) 
# 2307
{ 
# 2308
(*__result) = std::move(*__first2); 
# 2309
++__first2; 
# 2310
} else 
# 2312
{ 
# 2313
(*__result) = std::move(*__first1); 
# 2314
++__first1; 
# 2315
}  
# 2316
++__result; 
# 2317
}  
# 2318
if (__first1 != __last1) { 
# 2319
std::move(__first1, __last1, __result); }  
# 2320
} 
# 2323
template< class _BidirectionalIterator1, class _BidirectionalIterator2, class 
# 2324
_BidirectionalIterator3, class _Compare> void 
# 2326
__move_merge_adaptive_backward(_BidirectionalIterator1 __first1, _BidirectionalIterator1 
# 2327
__last1, _BidirectionalIterator2 
# 2328
__first2, _BidirectionalIterator2 
# 2329
__last2, _BidirectionalIterator3 
# 2330
__result, _Compare 
# 2331
__comp) 
# 2332
{ 
# 2333
if (__first1 == __last1) 
# 2334
{ 
# 2335
std::move_backward(__first2, __last2, __result); 
# 2336
return; 
# 2337
} else { 
# 2338
if (__first2 == __last2) { 
# 2339
return; }  }  
# 2341
--__last1; 
# 2342
--__last2; 
# 2343
while (true) 
# 2344
{ 
# 2345
if (__comp(__last2, __last1)) 
# 2346
{ 
# 2347
(*(--__result)) = std::move(*__last1); 
# 2348
if (__first1 == __last1) 
# 2349
{ 
# 2350
std::move_backward(__first2, ++__last2, __result); 
# 2351
return; 
# 2352
}  
# 2353
--__last1; 
# 2354
} else 
# 2356
{ 
# 2357
(*(--__result)) = std::move(*__last2); 
# 2358
if (__first2 == __last2) { 
# 2359
return; }  
# 2360
--__last2; 
# 2361
}  
# 2362
}  
# 2363
} 
# 2366
template< class _BidirectionalIterator1, class _BidirectionalIterator2, class 
# 2367
_Distance> _BidirectionalIterator1 
# 2369
__rotate_adaptive(_BidirectionalIterator1 __first, _BidirectionalIterator1 
# 2370
__middle, _BidirectionalIterator1 
# 2371
__last, _Distance 
# 2372
__len1, _Distance __len2, _BidirectionalIterator2 
# 2373
__buffer, _Distance 
# 2374
__buffer_size) 
# 2375
{ 
# 2376
_BidirectionalIterator2 __buffer_end; 
# 2377
if ((__len1 > __len2) && (__len2 <= __buffer_size)) 
# 2378
{ 
# 2379
if (__len2) 
# 2380
{ 
# 2381
__buffer_end = std::move(__middle, __last, __buffer); 
# 2382
std::move_backward(__first, __middle, __last); 
# 2383
return std::move(__buffer, __buffer_end, __first); 
# 2384
} else { 
# 2386
return __first; }  
# 2387
} else { 
# 2388
if (__len1 <= __buffer_size) 
# 2389
{ 
# 2390
if (__len1) 
# 2391
{ 
# 2392
__buffer_end = std::move(__first, __middle, __buffer); 
# 2393
std::move(__middle, __last, __first); 
# 2394
return std::move_backward(__buffer, __buffer_end, __last); 
# 2395
} else { 
# 2397
return __last; }  
# 2398
} else { 
# 2400
return std::rotate(__first, __middle, __last); }  }  
# 2401
} 
# 2404
template< class _BidirectionalIterator, class _Distance, class 
# 2405
_Pointer, class _Compare> void 
# 2407
__merge_adaptive(_BidirectionalIterator __first, _BidirectionalIterator 
# 2408
__middle, _BidirectionalIterator 
# 2409
__last, _Distance 
# 2410
__len1, _Distance __len2, _Pointer 
# 2411
__buffer, _Distance __buffer_size, _Compare 
# 2412
__comp) 
# 2413
{ 
# 2414
if ((__len1 <= __len2) && (__len1 <= __buffer_size)) 
# 2415
{ 
# 2416
_Pointer __buffer_end = std::move(__first, __middle, __buffer); 
# 2417
std::__move_merge_adaptive(__buffer, __buffer_end, __middle, __last, __first, __comp); 
# 2419
} else { 
# 2420
if (__len2 <= __buffer_size) 
# 2421
{ 
# 2422
_Pointer __buffer_end = std::move(__middle, __last, __buffer); 
# 2423
std::__move_merge_adaptive_backward(__first, __middle, __buffer, __buffer_end, __last, __comp); 
# 2425
} else 
# 2427
{ 
# 2428
_BidirectionalIterator __first_cut = __first; 
# 2429
_BidirectionalIterator __second_cut = __middle; 
# 2430
_Distance __len11 = (0); 
# 2431
_Distance __len22 = (0); 
# 2432
if (__len1 > __len2) 
# 2433
{ 
# 2434
__len11 = (__len1 / 2); 
# 2435
std::advance(__first_cut, __len11); 
# 2436
__second_cut = std::__lower_bound(__middle, __last, *__first_cut, __gnu_cxx::__ops::__iter_comp_val(__comp)); 
# 2439
__len22 = std::distance(__middle, __second_cut); 
# 2440
} else 
# 2442
{ 
# 2443
__len22 = (__len2 / 2); 
# 2444
std::advance(__second_cut, __len22); 
# 2445
__first_cut = std::__upper_bound(__first, __middle, *__second_cut, __gnu_cxx::__ops::__val_comp_iter(__comp)); 
# 2448
__len11 = std::distance(__first, __first_cut); 
# 2449
}  
# 2451
_BidirectionalIterator __new_middle = std::__rotate_adaptive(__first_cut, __middle, __second_cut, __len1 - __len11, __len22, __buffer, __buffer_size); 
# 2455
std::__merge_adaptive(__first, __first_cut, __new_middle, __len11, __len22, __buffer, __buffer_size, __comp); 
# 2457
std::__merge_adaptive(__new_middle, __second_cut, __last, __len1 - __len11, __len2 - __len22, __buffer, __buffer_size, __comp); 
# 2461
}  }  
# 2462
} 
# 2465
template< class _BidirectionalIterator, class _Distance, class 
# 2466
_Compare> void 
# 2468
__merge_without_buffer(_BidirectionalIterator __first, _BidirectionalIterator 
# 2469
__middle, _BidirectionalIterator 
# 2470
__last, _Distance 
# 2471
__len1, _Distance __len2, _Compare 
# 2472
__comp) 
# 2473
{ 
# 2474
if ((__len1 == 0) || (__len2 == 0)) { 
# 2475
return; }  
# 2477
if ((__len1 + __len2) == 2) 
# 2478
{ 
# 2479
if (__comp(__middle, __first)) { 
# 2480
std::iter_swap(__first, __middle); }  
# 2481
return; 
# 2482
}  
# 2484
_BidirectionalIterator __first_cut = __first; 
# 2485
_BidirectionalIterator __second_cut = __middle; 
# 2486
_Distance __len11 = (0); 
# 2487
_Distance __len22 = (0); 
# 2488
if (__len1 > __len2) 
# 2489
{ 
# 2490
__len11 = (__len1 / 2); 
# 2491
std::advance(__first_cut, __len11); 
# 2492
__second_cut = std::__lower_bound(__middle, __last, *__first_cut, __gnu_cxx::__ops::__iter_comp_val(__comp)); 
# 2495
__len22 = std::distance(__middle, __second_cut); 
# 2496
} else 
# 2498
{ 
# 2499
__len22 = (__len2 / 2); 
# 2500
std::advance(__second_cut, __len22); 
# 2501
__first_cut = std::__upper_bound(__first, __middle, *__second_cut, __gnu_cxx::__ops::__val_comp_iter(__comp)); 
# 2504
__len11 = std::distance(__first, __first_cut); 
# 2505
}  
# 2507
_BidirectionalIterator __new_middle = std::rotate(__first_cut, __middle, __second_cut); 
# 2509
std::__merge_without_buffer(__first, __first_cut, __new_middle, __len11, __len22, __comp); 
# 2511
std::__merge_without_buffer(__new_middle, __second_cut, __last, __len1 - __len11, __len2 - __len22, __comp); 
# 2513
} 
# 2515
template< class _BidirectionalIterator, class _Compare> void 
# 2517
__inplace_merge(_BidirectionalIterator __first, _BidirectionalIterator 
# 2518
__middle, _BidirectionalIterator 
# 2519
__last, _Compare 
# 2520
__comp) 
# 2521
{ 
# 2523
typedef typename iterator_traits< _BidirectionalIterator> ::value_type _ValueType; 
# 2525
typedef typename iterator_traits< _BidirectionalIterator> ::difference_type _DistanceType; 
# 2526
typedef _Temporary_buffer< _BidirectionalIterator, typename iterator_traits< _BidirectionalIterator> ::value_type>  _TmpBuf; 
# 2528
if ((__first == __middle) || (__middle == __last)) { 
# 2529
return; }  
# 2531
const _DistanceType __len1 = std::distance(__first, __middle); 
# 2532
const _DistanceType __len2 = std::distance(__middle, __last); 
# 2536
_TmpBuf __buf(__first, std::min(__len1, __len2)); 
# 2538
if (__buf.begin() == 0) { 
# 2539
std::__merge_without_buffer(__first, __middle, __last, __len1, __len2, __comp); } else { 
# 2542
std::__merge_adaptive(__first, __middle, __last, __len1, __len2, __buf.begin(), (_DistanceType)__buf.size(), __comp); }  
# 2545
} 
# 2565 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _BidirectionalIterator> inline void 
# 2567
inplace_merge(_BidirectionalIterator __first, _BidirectionalIterator 
# 2568
__middle, _BidirectionalIterator 
# 2569
__last) 
# 2570
{ 
# 2576
; 
# 2577
; 
# 2578
; 
# 2580
std::__inplace_merge(__first, __middle, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 2582
} 
# 2606 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _BidirectionalIterator, class _Compare> inline void 
# 2608
inplace_merge(_BidirectionalIterator __first, _BidirectionalIterator 
# 2609
__middle, _BidirectionalIterator 
# 2610
__last, _Compare 
# 2611
__comp) 
# 2612
{ 
# 2619
; 
# 2620
; 
# 2621
; 
# 2623
std::__inplace_merge(__first, __middle, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 2625
} 
# 2629
template< class _InputIterator, class _OutputIterator, class 
# 2630
_Compare> _OutputIterator 
# 2632
__move_merge(_InputIterator __first1, _InputIterator __last1, _InputIterator 
# 2633
__first2, _InputIterator __last2, _OutputIterator 
# 2634
__result, _Compare __comp) 
# 2635
{ 
# 2636
while ((__first1 != __last1) && (__first2 != __last2)) 
# 2637
{ 
# 2638
if (__comp(__first2, __first1)) 
# 2639
{ 
# 2640
(*__result) = std::move(*__first2); 
# 2641
++__first2; 
# 2642
} else 
# 2644
{ 
# 2645
(*__result) = std::move(*__first1); 
# 2646
++__first1; 
# 2647
}  
# 2648
++__result; 
# 2649
}  
# 2650
return std::move(__first2, __last2, std::move(__first1, __last1, __result)); 
# 2653
} 
# 2655
template< class _RandomAccessIterator1, class _RandomAccessIterator2, class 
# 2656
_Distance, class _Compare> void 
# 2658
__merge_sort_loop(_RandomAccessIterator1 __first, _RandomAccessIterator1 
# 2659
__last, _RandomAccessIterator2 
# 2660
__result, _Distance __step_size, _Compare 
# 2661
__comp) 
# 2662
{ 
# 2663
const _Distance __two_step = 2 * __step_size; 
# 2665
while ((__last - __first) >= __two_step) 
# 2666
{ 
# 2667
__result = std::__move_merge(__first, __first + __step_size, __first + __step_size, __first + __two_step, __result, __comp); 
# 2671
__first += __two_step; 
# 2672
}  
# 2673
__step_size = std::min((_Distance)(__last - __first), __step_size); 
# 2675
std::__move_merge(__first, __first + __step_size, __first + __step_size, __last, __result, __comp); 
# 2677
} 
# 2679
template< class _RandomAccessIterator, class _Distance, class 
# 2680
_Compare> void 
# 2683
__chunk_insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator 
# 2684
__last, _Distance 
# 2685
__chunk_size, _Compare __comp) 
# 2686
{ 
# 2687
while ((__last - __first) >= __chunk_size) 
# 2688
{ 
# 2689
std::__insertion_sort(__first, __first + __chunk_size, __comp); 
# 2690
__first += __chunk_size; 
# 2691
}  
# 2692
std::__insertion_sort(__first, __last, __comp); 
# 2693
} 
# 2695
enum { _S_chunk_size = 7}; 
# 2697
template< class _RandomAccessIterator, class _Pointer, class _Compare> void 
# 2699
__merge_sort_with_buffer(_RandomAccessIterator __first, _RandomAccessIterator 
# 2700
__last, _Pointer 
# 2701
__buffer, _Compare __comp) 
# 2702
{ 
# 2704
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _Distance; 
# 2706
const _Distance __len = __last - __first; 
# 2707
const _Pointer __buffer_last = __buffer + __len; 
# 2709
_Distance __step_size = (_S_chunk_size); 
# 2710
std::__chunk_insertion_sort(__first, __last, __step_size, __comp); 
# 2712
while (__step_size < __len) 
# 2713
{ 
# 2714
std::__merge_sort_loop(__first, __last, __buffer, __step_size, __comp); 
# 2716
__step_size *= 2; 
# 2717
std::__merge_sort_loop(__buffer, __buffer_last, __first, __step_size, __comp); 
# 2719
__step_size *= 2; 
# 2720
}  
# 2721
} 
# 2723
template< class _RandomAccessIterator, class _Pointer, class 
# 2724
_Distance, class _Compare> void 
# 2726
__stable_sort_adaptive(_RandomAccessIterator __first, _RandomAccessIterator 
# 2727
__last, _Pointer 
# 2728
__buffer, _Distance __buffer_size, _Compare 
# 2729
__comp) 
# 2730
{ 
# 2731
const _Distance __len = ((__last - __first) + 1) / 2; 
# 2732
const _RandomAccessIterator __middle = __first + __len; 
# 2733
if (__len > __buffer_size) 
# 2734
{ 
# 2735
std::__stable_sort_adaptive(__first, __middle, __buffer, __buffer_size, __comp); 
# 2737
std::__stable_sort_adaptive(__middle, __last, __buffer, __buffer_size, __comp); 
# 2739
} else 
# 2741
{ 
# 2742
std::__merge_sort_with_buffer(__first, __middle, __buffer, __comp); 
# 2743
std::__merge_sort_with_buffer(__middle, __last, __buffer, __comp); 
# 2744
}  
# 2746
std::__merge_adaptive(__first, __middle, __last, (_Distance)(__middle - __first), (_Distance)(__last - __middle), __buffer, __buffer_size, __comp); 
# 2751
} 
# 2754
template< class _RandomAccessIterator, class _Compare> void 
# 2756
__inplace_stable_sort(_RandomAccessIterator __first, _RandomAccessIterator 
# 2757
__last, _Compare __comp) 
# 2758
{ 
# 2759
if ((__last - __first) < 15) 
# 2760
{ 
# 2761
std::__insertion_sort(__first, __last, __comp); 
# 2762
return; 
# 2763
}  
# 2764
_RandomAccessIterator __middle = __first + ((__last - __first) / 2); 
# 2765
std::__inplace_stable_sort(__first, __middle, __comp); 
# 2766
std::__inplace_stable_sort(__middle, __last, __comp); 
# 2767
std::__merge_without_buffer(__first, __middle, __last, __middle - __first, __last - __middle, __comp); 
# 2771
} 
# 2780 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 2781
_Compare> bool 
# 2784
__includes(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 2785
__first2, _InputIterator2 __last2, _Compare 
# 2786
__comp) 
# 2787
{ 
# 2788
while ((__first1 != __last1) && (__first2 != __last2)) 
# 2789
{ 
# 2790
if (__comp(__first2, __first1)) { 
# 2791
return false; }  
# 2792
if (!__comp(__first1, __first2)) { 
# 2793
++__first2; }  
# 2794
++__first1; 
# 2795
}  
# 2797
return __first2 == __last2; 
# 2798
} 
# 2818 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2> inline bool 
# 2821
includes(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 2822
__first2, _InputIterator2 __last2) 
# 2823
{ 
# 2833
; 
# 2834
; 
# 2835
; 
# 2836
; 
# 2838
return std::__includes(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_less_iter()); 
# 2840
} 
# 2863 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 2864
_Compare> inline bool 
# 2867
includes(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 2868
__first2, _InputIterator2 __last2, _Compare 
# 2869
__comp) 
# 2870
{ 
# 2880
; 
# 2881
; 
# 2882
; 
# 2883
; 
# 2885
return std::__includes(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 2887
} 
# 2899 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _BidirectionalIterator, class _Compare> bool 
# 2902
__next_permutation(_BidirectionalIterator __first, _BidirectionalIterator 
# 2903
__last, _Compare __comp) 
# 2904
{ 
# 2905
if (__first == __last) { 
# 2906
return false; }  
# 2907
_BidirectionalIterator __i = __first; 
# 2908
++__i; 
# 2909
if (__i == __last) { 
# 2910
return false; }  
# 2911
__i = __last; 
# 2912
--__i; 
# 2914
for (; ;) 
# 2915
{ 
# 2916
_BidirectionalIterator __ii = __i; 
# 2917
--__i; 
# 2918
if (__comp(__i, __ii)) 
# 2919
{ 
# 2920
_BidirectionalIterator __j = __last; 
# 2921
while (!__comp(__i, --__j)) 
# 2922
{ }  
# 2923
std::iter_swap(__i, __j); 
# 2924
std::__reverse(__ii, __last, std::__iterator_category(__first)); 
# 2926
return true; 
# 2927
}  
# 2928
if (__i == __first) 
# 2929
{ 
# 2930
std::__reverse(__first, __last, std::__iterator_category(__first)); 
# 2932
return false; 
# 2933
}  
# 2934
}  
# 2935
} 
# 2949 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _BidirectionalIterator> inline bool 
# 2952
next_permutation(_BidirectionalIterator __first, _BidirectionalIterator 
# 2953
__last) 
# 2954
{ 
# 2960
; 
# 2961
; 
# 2963
return std::__next_permutation(__first, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 2965
} 
# 2982 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _BidirectionalIterator, class _Compare> inline bool 
# 2985
next_permutation(_BidirectionalIterator __first, _BidirectionalIterator 
# 2986
__last, _Compare __comp) 
# 2987
{ 
# 2994
; 
# 2995
; 
# 2997
return std::__next_permutation(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 2999
} 
# 3001
template< class _BidirectionalIterator, class _Compare> bool 
# 3004
__prev_permutation(_BidirectionalIterator __first, _BidirectionalIterator 
# 3005
__last, _Compare __comp) 
# 3006
{ 
# 3007
if (__first == __last) { 
# 3008
return false; }  
# 3009
_BidirectionalIterator __i = __first; 
# 3010
++__i; 
# 3011
if (__i == __last) { 
# 3012
return false; }  
# 3013
__i = __last; 
# 3014
--__i; 
# 3016
for (; ;) 
# 3017
{ 
# 3018
_BidirectionalIterator __ii = __i; 
# 3019
--__i; 
# 3020
if (__comp(__ii, __i)) 
# 3021
{ 
# 3022
_BidirectionalIterator __j = __last; 
# 3023
while (!__comp(--__j, __i)) 
# 3024
{ }  
# 3025
std::iter_swap(__i, __j); 
# 3026
std::__reverse(__ii, __last, std::__iterator_category(__first)); 
# 3028
return true; 
# 3029
}  
# 3030
if (__i == __first) 
# 3031
{ 
# 3032
std::__reverse(__first, __last, std::__iterator_category(__first)); 
# 3034
return false; 
# 3035
}  
# 3036
}  
# 3037
} 
# 3052 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _BidirectionalIterator> inline bool 
# 3055
prev_permutation(_BidirectionalIterator __first, _BidirectionalIterator 
# 3056
__last) 
# 3057
{ 
# 3063
; 
# 3064
; 
# 3066
return std::__prev_permutation(__first, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 3068
} 
# 3085 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _BidirectionalIterator, class _Compare> inline bool 
# 3088
prev_permutation(_BidirectionalIterator __first, _BidirectionalIterator 
# 3089
__last, _Compare __comp) 
# 3090
{ 
# 3097
; 
# 3098
; 
# 3100
return std::__prev_permutation(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 3102
} 
# 3107
template< class _InputIterator, class _OutputIterator, class 
# 3108
_Predicate, class _Tp> _OutputIterator 
# 3111
__replace_copy_if(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 3112
__result, _Predicate 
# 3113
__pred, const _Tp &__new_value) 
# 3114
{ 
# 3115
for (; __first != __last; (++__first), ((void)(++__result))) { 
# 3116
if (__pred(__first)) { 
# 3117
(*__result) = __new_value; } else { 
# 3119
(*__result) = (*__first); }  }  
# 3120
return __result; 
# 3121
} 
# 3137 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _InputIterator, class _OutputIterator, class _Tp> inline _OutputIterator 
# 3140
replace_copy(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 3141
__result, const _Tp &
# 3142
__old_value, const _Tp &__new_value) 
# 3143
{ 
# 3150
; 
# 3152
return std::__replace_copy_if(__first, __last, __result, __gnu_cxx::__ops::__iter_equals_val(__old_value), __new_value); 
# 3155
} 
# 3172 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _InputIterator, class _OutputIterator, class 
# 3173
_Predicate, class _Tp> inline _OutputIterator 
# 3176
replace_copy_if(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 3177
__result, _Predicate 
# 3178
__pred, const _Tp &__new_value) 
# 3179
{ 
# 3186
; 
# 3188
return std::__replace_copy_if(__first, __last, __result, __gnu_cxx::__ops::__pred_iter(__pred), __new_value); 
# 3191
} 
# 3201 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _ForwardIterator> inline bool 
# 3204
is_sorted(_ForwardIterator __first, _ForwardIterator __last) 
# 3205
{ return std::is_sorted_until(__first, __last) == __last; } 
# 3216 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Compare> inline bool 
# 3219
is_sorted(_ForwardIterator __first, _ForwardIterator __last, _Compare 
# 3220
__comp) 
# 3221
{ return std::is_sorted_until(__first, __last, __comp) == __last; } 
# 3223
template< class _ForwardIterator, class _Compare> _ForwardIterator 
# 3226
__is_sorted_until(_ForwardIterator __first, _ForwardIterator __last, _Compare 
# 3227
__comp) 
# 3228
{ 
# 3229
if (__first == __last) { 
# 3230
return __last; }  
# 3232
_ForwardIterator __next = __first; 
# 3233
for (++__next; __next != __last; (__first = __next), ((void)(++__next))) { 
# 3234
if (__comp(__next, __first)) { 
# 3235
return __next; }  }  
# 3236
return __next; 
# 3237
} 
# 3247 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _ForwardIterator> inline _ForwardIterator 
# 3250
is_sorted_until(_ForwardIterator __first, _ForwardIterator __last) 
# 3251
{ 
# 3256
; 
# 3257
; 
# 3259
return std::__is_sorted_until(__first, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 3261
} 
# 3272 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Compare> inline _ForwardIterator 
# 3275
is_sorted_until(_ForwardIterator __first, _ForwardIterator __last, _Compare 
# 3276
__comp) 
# 3277
{ 
# 3283
; 
# 3284
; 
# 3286
return std::__is_sorted_until(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 3288
} 
# 3298 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _Tp> constexpr pair< const _Tp &, const _Tp &>  
# 3301
minmax(const _Tp &__a, const _Tp &__b) 
# 3302
{ 
# 3306
return (__b < __a) ? pair< const _Tp &, const _Tp &> (__b, __a) : pair< const _Tp &, const _Tp &> (__a, __b); 
# 3308
} 
# 3319 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _Tp, class _Compare> constexpr pair< const _Tp &, const _Tp &>  
# 3322
minmax(const _Tp &__a, const _Tp &__b, _Compare __comp) 
# 3323
{ 
# 3324
return (__comp(__b, __a)) ? pair< const _Tp &, const _Tp &> (__b, __a) : pair< const _Tp &, const _Tp &> (__a, __b); 
# 3326
} 
# 3328
template< class _ForwardIterator, class _Compare> constexpr pair< _ForwardIterator, _ForwardIterator>  
# 3331
__minmax_element(_ForwardIterator __first, _ForwardIterator __last, _Compare 
# 3332
__comp) 
# 3333
{ 
# 3334
_ForwardIterator __next = __first; 
# 3335
if ((__first == __last) || ((++__next) == __last)) { 
# 3337
return std::make_pair(__first, __first); }  
# 3339
_ForwardIterator __min{}, __max{}; 
# 3340
if (__comp(__next, __first)) 
# 3341
{ 
# 3342
__min = __next; 
# 3343
__max = __first; 
# 3344
} else 
# 3346
{ 
# 3347
__min = __first; 
# 3348
__max = __next; 
# 3349
}  
# 3351
__first = __next; 
# 3352
++__first; 
# 3354
while (__first != __last) 
# 3355
{ 
# 3356
__next = __first; 
# 3357
if ((++__next) == __last) 
# 3358
{ 
# 3359
if (__comp(__first, __min)) { 
# 3360
__min = __first; } else { 
# 3361
if (!__comp(__first, __max)) { 
# 3362
__max = __first; }  }  
# 3363
break; 
# 3364
}  
# 3366
if (__comp(__next, __first)) 
# 3367
{ 
# 3368
if (__comp(__next, __min)) { 
# 3369
__min = __next; }  
# 3370
if (!__comp(__first, __max)) { 
# 3371
__max = __first; }  
# 3372
} else 
# 3374
{ 
# 3375
if (__comp(__first, __min)) { 
# 3376
__min = __first; }  
# 3377
if (!__comp(__next, __max)) { 
# 3378
__max = __next; }  
# 3379
}  
# 3381
__first = __next; 
# 3382
++__first; 
# 3383
}  
# 3385
return std::make_pair(__min, __max); 
# 3386
} 
# 3399 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _ForwardIterator> constexpr pair< _ForwardIterator, _ForwardIterator>  
# 3402
minmax_element(_ForwardIterator __first, _ForwardIterator __last) 
# 3403
{ 
# 3408
; 
# 3409
; 
# 3411
return std::__minmax_element(__first, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 3413
} 
# 3427 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Compare> constexpr pair< _ForwardIterator, _ForwardIterator>  
# 3430
minmax_element(_ForwardIterator __first, _ForwardIterator __last, _Compare 
# 3431
__comp) 
# 3432
{ 
# 3438
; 
# 3439
; 
# 3441
return std::__minmax_element(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 3443
} 
# 3446
template< class _Tp> constexpr _Tp 
# 3449
min(initializer_list< _Tp>  __l) 
# 3450
{ return *std::min_element(__l.begin(), __l.end()); } 
# 3452
template< class _Tp, class _Compare> constexpr _Tp 
# 3455
min(initializer_list< _Tp>  __l, _Compare __comp) 
# 3456
{ return *std::min_element(__l.begin(), __l.end(), __comp); } 
# 3458
template< class _Tp> constexpr _Tp 
# 3461
max(initializer_list< _Tp>  __l) 
# 3462
{ return *std::max_element(__l.begin(), __l.end()); } 
# 3464
template< class _Tp, class _Compare> constexpr _Tp 
# 3467
max(initializer_list< _Tp>  __l, _Compare __comp) 
# 3468
{ return *std::max_element(__l.begin(), __l.end(), __comp); } 
# 3470
template< class _Tp> constexpr pair< _Tp, _Tp>  
# 3473
minmax(initializer_list< _Tp>  __l) 
# 3474
{ 
# 3475
pair< const _Tp *, const _Tp *>  __p = std::minmax_element(__l.begin(), __l.end()); 
# 3477
return std::make_pair(*(__p.first), *(__p.second)); 
# 3478
} 
# 3480
template< class _Tp, class _Compare> constexpr pair< _Tp, _Tp>  
# 3483
minmax(initializer_list< _Tp>  __l, _Compare __comp) 
# 3484
{ 
# 3485
pair< const _Tp *, const _Tp *>  __p = std::minmax_element(__l.begin(), __l.end(), __comp); 
# 3487
return std::make_pair(*(__p.first), *(__p.second)); 
# 3488
} 
# 3504 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _ForwardIterator1, class _ForwardIterator2, class 
# 3505
_BinaryPredicate> inline bool 
# 3508
is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 3509
__first2, _BinaryPredicate __pred) 
# 3510
{ 
# 3517
; 
# 3519
return std::__is_permutation(__first1, __last1, __first2, __gnu_cxx::__ops::__iter_comp_iter(__pred)); 
# 3521
} 
# 3524
template< class _ForwardIterator1, class _ForwardIterator2, class 
# 3525
_BinaryPredicate> bool 
# 3528
__is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 3529
__first2, _ForwardIterator2 __last2, _BinaryPredicate 
# 3530
__pred) 
# 3531
{ 
# 3532
using _Cat1 = typename iterator_traits< _ForwardIterator1> ::iterator_category; 
# 3534
using _Cat2 = typename iterator_traits< _ForwardIterator2> ::iterator_category; 
# 3536
using _It1_is_RA = is_same< typename iterator_traits< _ForwardIterator1> ::iterator_category, random_access_iterator_tag> ; 
# 3537
using _It2_is_RA = is_same< typename iterator_traits< _ForwardIterator2> ::iterator_category, random_access_iterator_tag> ; 
# 3538
constexpr bool __ra_iters = (_It1_is_RA() && _It2_is_RA()); 
# 3539
if (__ra_iters) 
# 3540
{ 
# 3541
auto __d1 = std::distance(__first1, __last1); 
# 3542
auto __d2 = std::distance(__first2, __last2); 
# 3543
if (__d1 != __d2) { 
# 3544
return false; }  
# 3545
}  
# 3549
for (; (__first1 != __last1) && (__first2 != __last2); (++__first1), ((void)(++__first2))) { 
# 3551
if (!__pred(__first1, __first2)) { 
# 3552
break; }  }  
# 3554
if (__ra_iters) 
# 3555
{ 
# 3556
if (__first1 == __last1) { 
# 3557
return true; }  
# 3558
} else 
# 3560
{ 
# 3561
auto __d1 = std::distance(__first1, __last1); 
# 3562
auto __d2 = std::distance(__first2, __last2); 
# 3563
if ((__d1 == 0) && (__d2 == 0)) { 
# 3564
return true; }  
# 3565
if (__d1 != __d2) { 
# 3566
return false; }  
# 3567
}  
# 3569
for (_ForwardIterator1 __scan = __first1; __scan != __last1; ++__scan) 
# 3570
{ 
# 3571
if (__scan != std::__find_if(__first1, __scan, __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan))) { 
# 3573
continue; }  
# 3575
auto __matches = std::__count_if(__first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)); 
# 3577
if ((0 == __matches) || (std::__count_if(__scan, __last1, __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)) != __matches)) { 
# 3581
return false; }  
# 3582
}   
# 3583
return true; 
# 3584
} 
# 3599 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _ForwardIterator1, class _ForwardIterator2> inline bool 
# 3602
is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 3603
__first2, _ForwardIterator2 __last2) 
# 3604
{ 
# 3605
; 
# 3606
; 
# 3608
return std::__is_permutation(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_equal_to_iter()); 
# 3611
} 
# 3627 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _ForwardIterator1, class _ForwardIterator2, class 
# 3628
_BinaryPredicate> inline bool 
# 3631
is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 3632
__first2, _ForwardIterator2 __last2, _BinaryPredicate 
# 3633
__pred) 
# 3634
{ 
# 3635
; 
# 3636
; 
# 3638
return std::__is_permutation(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__pred)); 
# 3640
} 
# 3654 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _Tp> constexpr const _Tp &
# 3656
clamp(const _Tp &__val, const _Tp &__lo, const _Tp &__hi) 
# 3657
{ 
# 3658
do { if (__builtin_is_constant_evaluated() && (!((bool)(!(__hi < __lo))))) { __builtin_unreachable(); }  } while (false); 
# 3659
return (__val < __lo) ? __lo : ((__hi < __val) ? __hi : __val); 
# 3660
} 
# 3672 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _Tp, class _Compare> constexpr const _Tp &
# 3674
clamp(const _Tp &__val, const _Tp &__lo, const _Tp &__hi, _Compare __comp) 
# 3675
{ 
# 3676
do { if (__builtin_is_constant_evaluated() && (!((bool)(!__comp(__hi, __lo))))) { __builtin_unreachable(); }  } while (false); 
# 3677
return (__comp(__val, __lo)) ? __lo : ((__comp(__hi, __val)) ? __hi : __val); 
# 3678
} 
# 3704 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _IntType, class _UniformRandomBitGenerator> pair< _IntType, _IntType>  
# 3706
__gen_two_uniform_ints(_IntType __b0, _IntType __b1, _UniformRandomBitGenerator &&
# 3707
__g) 
# 3708
{ 
# 3709
_IntType __x = uniform_int_distribution< _IntType> {0, (__b0 * __b1) - 1}(__g); 
# 3711
return std::make_pair(__x / __b1, __x % __b1); 
# 3712
} 
# 3726 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _RandomAccessIterator, class 
# 3727
_UniformRandomNumberGenerator> void 
# 3729
shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last, _UniformRandomNumberGenerator &&
# 3730
__g) 
# 3731
{ 
# 3735
; 
# 3737
if (__first == __last) { 
# 3738
return; }  
# 3741
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType; 
# 3743
typedef typename make_unsigned< typename iterator_traits< _RandomAccessIterator> ::difference_type> ::type __ud_type; 
# 3744
typedef uniform_int_distribution< typename make_unsigned< typename iterator_traits< _RandomAccessIterator> ::difference_type> ::type>  __distr_type; 
# 3745
typedef typename uniform_int_distribution< typename make_unsigned< typename iterator_traits< _RandomAccessIterator> ::difference_type> ::type> ::param_type __p_type; 
# 3748
typedef typename remove_reference< _UniformRandomNumberGenerator> ::type _Gen; 
# 3750
typedef typename common_type< typename remove_reference< _UniformRandomNumberGenerator> ::type::result_type, typename make_unsigned< typename iterator_traits< _RandomAccessIterator> ::difference_type> ::type> ::type __uc_type; 
# 3752
const __uc_type __urngrange = __g.max() - __g.min(); 
# 3753
const __uc_type __urange = (__uc_type)(__last - __first); 
# 3755
if ((__urngrange / __urange) >= __urange) 
# 3757
{ 
# 3758
_RandomAccessIterator __i = __first + 1; 
# 3764
if ((__urange % 2) == 0) 
# 3765
{ 
# 3766
__distr_type __d{0, 1}; 
# 3767
std::iter_swap(__i++, __first + __d(__g)); 
# 3768
}  
# 3774
while (__i != __last) 
# 3775
{ 
# 3776
const __uc_type __swap_range = ((__uc_type)(__i - __first)) + 1; 
# 3778
const pair< typename common_type< typename remove_reference< _UniformRandomNumberGenerator> ::type::result_type, typename make_unsigned< typename iterator_traits< _RandomAccessIterator> ::difference_type> ::type> ::type, typename common_type< typename remove_reference< _UniformRandomNumberGenerator> ::type::result_type, typename make_unsigned< typename iterator_traits< _RandomAccessIterator> ::difference_type> ::type> ::type>  __pospos = __gen_two_uniform_ints(__swap_range, __swap_range + 1, __g); 
# 3781
std::iter_swap(__i++, __first + (__pospos.first)); 
# 3782
std::iter_swap(__i++, __first + (__pospos.second)); 
# 3783
}  
# 3785
return; 
# 3786
}  
# 3788
__distr_type __d; 
# 3790
for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i) { 
# 3791
std::iter_swap(__i, __first + __d(__g, __p_type(0, __i - __first))); }  
# 3792
} 
# 3811 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _InputIterator, class _Function> _Function 
# 3814
for_each(_InputIterator __first, _InputIterator __last, _Function __f) 
# 3815
{ 
# 3818
; 
# 3819
for (; __first != __last; ++__first) { 
# 3820
__f(*__first); }  
# 3821
return __f; 
# 3822
} 
# 3837 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _InputIterator, class _Size, class _Function> _InputIterator 
# 3840
for_each_n(_InputIterator __first, _Size __n, _Function __f) 
# 3841
{ 
# 3842
auto __n2 = std::__size_to_integer(__n); 
# 3843
using _Cat = typename iterator_traits< _InputIterator> ::iterator_category; 
# 3844
if constexpr (is_base_of_v< random_access_iterator_tag, typename iterator_traits< _InputIterator> ::iterator_category> ) 
# 3845
{ 
# 3846
if (__n2 <= 0) { 
# 3847
return __first; }  
# 3848
auto __last = __first + __n2; 
# 3849
std::for_each(__first, __last, std::move(__f)); 
# 3850
return __last; 
# 3851
} else 
# 3853
{ 
# 3854
while ((__n2--) > 0) 
# 3855
{ 
# 3856
__f(*__first); 
# 3857
++__first; 
# 3858
}  
# 3859
return __first; 
# 3860
}  
# 3861
} 
# 3873 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _InputIterator, class _Tp> inline _InputIterator 
# 3876
find(_InputIterator __first, _InputIterator __last, const _Tp &
# 3877
__val) 
# 3878
{ 
# 3883
; 
# 3884
return std::__find_if(__first, __last, __gnu_cxx::__ops::__iter_equals_val(__val)); 
# 3886
} 
# 3898 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _InputIterator, class _Predicate> inline _InputIterator 
# 3901
find_if(_InputIterator __first, _InputIterator __last, _Predicate 
# 3902
__pred) 
# 3903
{ 
# 3908
; 
# 3910
return std::__find_if(__first, __last, __gnu_cxx::__ops::__pred_iter(__pred)); 
# 3912
} 
# 3930 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _InputIterator, class _ForwardIterator> _InputIterator 
# 3933
find_first_of(_InputIterator __first1, _InputIterator __last1, _ForwardIterator 
# 3934
__first2, _ForwardIterator __last2) 
# 3935
{ 
# 3942
; 
# 3943
; 
# 3945
for (; __first1 != __last1; ++__first1) { 
# 3946
for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter) { 
# 3947
if ((*__first1) == (*__iter)) { 
# 3948
return __first1; }  }  }  
# 3949
return __last1; 
# 3950
} 
# 3971 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _InputIterator, class _ForwardIterator, class 
# 3972
_BinaryPredicate> _InputIterator 
# 3975
find_first_of(_InputIterator __first1, _InputIterator __last1, _ForwardIterator 
# 3976
__first2, _ForwardIterator __last2, _BinaryPredicate 
# 3977
__comp) 
# 3978
{ 
# 3985
; 
# 3986
; 
# 3988
for (; __first1 != __last1; ++__first1) { 
# 3989
for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter) { 
# 3990
if (__comp(*__first1, *__iter)) { 
# 3991
return __first1; }  }  }  
# 3992
return __last1; 
# 3993
} 
# 4004 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _ForwardIterator> inline _ForwardIterator 
# 4007
adjacent_find(_ForwardIterator __first, _ForwardIterator __last) 
# 4008
{ 
# 4013
; 
# 4015
return std::__adjacent_find(__first, __last, __gnu_cxx::__ops::__iter_equal_to_iter()); 
# 4017
} 
# 4030 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _ForwardIterator, class _BinaryPredicate> inline _ForwardIterator 
# 4033
adjacent_find(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate 
# 4034
__binary_pred) 
# 4035
{ 
# 4041
; 
# 4043
return std::__adjacent_find(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__binary_pred)); 
# 4045
} 
# 4056 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _InputIterator, class _Tp> inline typename iterator_traits< _InputIterator> ::difference_type 
# 4059
count(_InputIterator __first, _InputIterator __last, const _Tp &__value) 
# 4060
{ 
# 4065
; 
# 4067
return std::__count_if(__first, __last, __gnu_cxx::__ops::__iter_equals_val(__value)); 
# 4069
} 
# 4080 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _InputIterator, class _Predicate> inline typename iterator_traits< _InputIterator> ::difference_type 
# 4083
count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred) 
# 4084
{ 
# 4089
; 
# 4091
return std::__count_if(__first, __last, __gnu_cxx::__ops::__pred_iter(__pred)); 
# 4093
} 
# 4121 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _ForwardIterator1, class _ForwardIterator2> inline _ForwardIterator1 
# 4124
search(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 4125
__first2, _ForwardIterator2 __last2) 
# 4126
{ 
# 4133
; 
# 4134
; 
# 4136
return std::__search(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_equal_to_iter()); 
# 4138
} 
# 4161 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _ForwardIterator1, class _ForwardIterator2, class 
# 4162
_BinaryPredicate> inline _ForwardIterator1 
# 4165
search(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 4166
__first2, _ForwardIterator2 __last2, _BinaryPredicate 
# 4167
__predicate) 
# 4168
{ 
# 4175
; 
# 4176
; 
# 4178
return std::__search(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__predicate)); 
# 4180
} 
# 4197 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Integer, class _Tp> inline _ForwardIterator 
# 4200
search_n(_ForwardIterator __first, _ForwardIterator __last, _Integer 
# 4201
__count, const _Tp &__val) 
# 4202
{ 
# 4207
; 
# 4209
return std::__search_n(__first, __last, __count, __gnu_cxx::__ops::__iter_equals_val(__val)); 
# 4211
} 
# 4231 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Integer, class _Tp, class 
# 4232
_BinaryPredicate> inline _ForwardIterator 
# 4235
search_n(_ForwardIterator __first, _ForwardIterator __last, _Integer 
# 4236
__count, const _Tp &__val, _BinaryPredicate 
# 4237
__binary_pred) 
# 4238
{ 
# 4243
; 
# 4245
return std::__search_n(__first, __last, __count, __gnu_cxx::__ops::__iter_comp_val(__binary_pred, __val)); 
# 4247
} 
# 4257 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Searcher> inline _ForwardIterator 
# 4260
search(_ForwardIterator __first, _ForwardIterator __last, const _Searcher &
# 4261
__searcher) 
# 4262
{ return __searcher(__first, __last).first; } 
# 4281 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _InputIterator, class _OutputIterator, class 
# 4282
_UnaryOperation> _OutputIterator 
# 4285
transform(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 4286
__result, _UnaryOperation __unary_op) 
# 4287
{ 
# 4293
; 
# 4295
for (; __first != __last; (++__first), ((void)(++__result))) { 
# 4296
(*__result) = __unary_op(*__first); }  
# 4297
return __result; 
# 4298
} 
# 4319 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 4320
_OutputIterator, class _BinaryOperation> _OutputIterator 
# 4323
transform(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 4324
__first2, _OutputIterator __result, _BinaryOperation 
# 4325
__binary_op) 
# 4326
{ 
# 4333
; 
# 4335
for (; __first1 != __last1; ((++__first1), ((void)(++__first2))), (++__result)) { 
# 4336
(*__result) = __binary_op(*__first1, *__first2); }  
# 4337
return __result; 
# 4338
} 
# 4353 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Tp> void 
# 4356
replace(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 4357
__old_value, const _Tp &__new_value) 
# 4358
{ 
# 4366
; 
# 4368
for (; __first != __last; ++__first) { 
# 4369
if ((*__first) == __old_value) { 
# 4370
(*__first) = __new_value; }  }  
# 4371
} 
# 4386 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Predicate, class _Tp> void 
# 4389
replace_if(_ForwardIterator __first, _ForwardIterator __last, _Predicate 
# 4390
__pred, const _Tp &__new_value) 
# 4391
{ 
# 4399
; 
# 4401
for (; __first != __last; ++__first) { 
# 4402
if (__pred(*__first)) { 
# 4403
(*__first) = __new_value; }  }  
# 4404
} 
# 4419 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Generator> void 
# 4422
generate(_ForwardIterator __first, _ForwardIterator __last, _Generator 
# 4423
__gen) 
# 4424
{ 
# 4429
; 
# 4431
for (; __first != __last; ++__first) { 
# 4432
(*__first) = __gen(); }  
# 4433
} 
# 4453 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _OutputIterator, class _Size, class _Generator> _OutputIterator 
# 4456
generate_n(_OutputIterator __first, _Size __n, _Generator __gen) 
# 4457
{ 
# 4463
typedef __decltype((std::__size_to_integer(__n))) _IntSize; 
# 4464
for (_IntSize __niter = std::__size_to_integer(__n); __niter > 0; (--__niter), ((void)(++__first))) { 
# 4466
(*__first) = __gen(); }  
# 4467
return __first; 
# 4468
} 
# 4491 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _InputIterator, class _OutputIterator> inline _OutputIterator 
# 4494
unique_copy(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 4495
__result) 
# 4496
{ 
# 4503
; 
# 4505
if (__first == __last) { 
# 4506
return __result; }  
# 4507
return std::__unique_copy(__first, __last, __result, __gnu_cxx::__ops::__iter_equal_to_iter(), std::__iterator_category(__first), std::__iterator_category(__result)); 
# 4511
} 
# 4532 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _InputIterator, class _OutputIterator, class 
# 4533
_BinaryPredicate> inline _OutputIterator 
# 4536
unique_copy(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 4537
__result, _BinaryPredicate 
# 4538
__binary_pred) 
# 4539
{ 
# 4544
; 
# 4546
if (__first == __last) { 
# 4547
return __result; }  
# 4548
return std::__unique_copy(__first, __last, __result, __gnu_cxx::__ops::__iter_comp_iter(__binary_pred), std::__iterator_category(__first), std::__iterator_category(__result)); 
# 4552
} 
# 4566 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _RandomAccessIterator> inline void 
# 4568
random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last) 
# 4569
{ 
# 4573
; 
# 4575
if (__first != __last) { 
# 4576
for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i) 
# 4577
{ 
# 4579
_RandomAccessIterator __j = __first + (std::rand() % ((__i - __first) + 1)); 
# 4581
if (__i != __j) { 
# 4582
std::iter_swap(__i, __j); }  
# 4583
}  }  
# 4584
} 
# 4601 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _RandomAccessIterator, class _RandomNumberGenerator> void 
# 4603
random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last, _RandomNumberGenerator &&
# 4605
__rand) 
# 4609
{ 
# 4613
; 
# 4615
if (__first == __last) { 
# 4616
return; }  
# 4617
for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i) 
# 4618
{ 
# 4619
_RandomAccessIterator __j = __first + __rand((__i - __first) + 1); 
# 4620
if (__i != __j) { 
# 4621
std::iter_swap(__i, __j); }  
# 4622
}  
# 4623
} 
# 4641 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Predicate> inline _ForwardIterator 
# 4644
partition(_ForwardIterator __first, _ForwardIterator __last, _Predicate 
# 4645
__pred) 
# 4646
{ 
# 4652
; 
# 4654
return std::__partition(__first, __last, __pred, std::__iterator_category(__first)); 
# 4656
} 
# 4675 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _RandomAccessIterator> inline void 
# 4678
partial_sort(_RandomAccessIterator __first, _RandomAccessIterator 
# 4679
__middle, _RandomAccessIterator 
# 4680
__last) 
# 4681
{ 
# 4687
; 
# 4688
; 
# 4689
; 
# 4691
std::__partial_sort(__first, __middle, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 4693
} 
# 4714 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _RandomAccessIterator, class _Compare> inline void 
# 4717
partial_sort(_RandomAccessIterator __first, _RandomAccessIterator 
# 4718
__middle, _RandomAccessIterator 
# 4719
__last, _Compare 
# 4720
__comp) 
# 4721
{ 
# 4728
; 
# 4729
; 
# 4730
; 
# 4732
std::__partial_sort(__first, __middle, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 4734
} 
# 4751 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _RandomAccessIterator> inline void 
# 4754
nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator 
# 4755
__last) 
# 4756
{ 
# 4762
; 
# 4763
; 
# 4764
; 
# 4766
if ((__first == __last) || (__nth == __last)) { 
# 4767
return; }  
# 4769
std::__introselect(__first, __nth, __last, std::__lg(__last - __first) * 2, __gnu_cxx::__ops::__iter_less_iter()); 
# 4772
} 
# 4791 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _RandomAccessIterator, class _Compare> inline void 
# 4794
nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator 
# 4795
__last, _Compare __comp) 
# 4796
{ 
# 4803
; 
# 4804
; 
# 4805
; 
# 4807
if ((__first == __last) || (__nth == __last)) { 
# 4808
return; }  
# 4810
std::__introselect(__first, __nth, __last, std::__lg(__last - __first) * 2, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 4813
} 
# 4829 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _RandomAccessIterator> inline void 
# 4832
sort(_RandomAccessIterator __first, _RandomAccessIterator __last) 
# 4833
{ 
# 4839
; 
# 4840
; 
# 4842
std::__sort(__first, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 4843
} 
# 4860 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _RandomAccessIterator, class _Compare> inline void 
# 4863
sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 4864
__comp) 
# 4865
{ 
# 4872
; 
# 4873
; 
# 4875
std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 4876
} 
# 4878
template< class _InputIterator1, class _InputIterator2, class 
# 4879
_OutputIterator, class _Compare> _OutputIterator 
# 4882
__merge(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 4883
__first2, _InputIterator2 __last2, _OutputIterator 
# 4884
__result, _Compare __comp) 
# 4885
{ 
# 4886
while ((__first1 != __last1) && (__first2 != __last2)) 
# 4887
{ 
# 4888
if (__comp(__first2, __first1)) 
# 4889
{ 
# 4890
(*__result) = (*__first2); 
# 4891
++__first2; 
# 4892
} else 
# 4894
{ 
# 4895
(*__result) = (*__first1); 
# 4896
++__first1; 
# 4897
}  
# 4898
++__result; 
# 4899
}  
# 4900
return std::copy(__first2, __last2, std::copy(__first1, __last1, __result)); 
# 4902
} 
# 4923 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 4924
_OutputIterator> inline _OutputIterator 
# 4927
merge(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 4928
__first2, _InputIterator2 __last2, _OutputIterator 
# 4929
__result) 
# 4930
{ 
# 4941
; 
# 4942
; 
# 4943
; 
# 4944
; 
# 4946
return std::__merge(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_less_iter()); 
# 4949
} 
# 4974 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 4975
_OutputIterator, class _Compare> inline _OutputIterator 
# 4978
merge(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 4979
__first2, _InputIterator2 __last2, _OutputIterator 
# 4980
__result, _Compare __comp) 
# 4981
{ 
# 4992
; 
# 4993
; 
# 4994
; 
# 4995
; 
# 4997
return std::__merge(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 5000
} 
# 5002
template< class _RandomAccessIterator, class _Compare> inline void 
# 5004
__stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 5005
__comp) 
# 5006
{ 
# 5008
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType; 
# 5010
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType; 
# 5011
typedef _Temporary_buffer< _RandomAccessIterator, typename iterator_traits< _RandomAccessIterator> ::value_type>  _TmpBuf; 
# 5013
if (__first == __last) { 
# 5014
return; }  
# 5018
_TmpBuf __buf(__first, ((__last - __first) + 1) / 2); 
# 5020
if (__buf.begin() == 0) { 
# 5021
std::__inplace_stable_sort(__first, __last, __comp); } else { 
# 5023
std::__stable_sort_adaptive(__first, __last, __buf.begin(), (_DistanceType)__buf.size(), __comp); }  
# 5025
} 
# 5044 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _RandomAccessIterator> inline void 
# 5046
stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last) 
# 5047
{ 
# 5053
; 
# 5054
; 
# 5056
std::__stable_sort(__first, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 5058
} 
# 5078 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _RandomAccessIterator, class _Compare> inline void 
# 5080
stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 5081
__comp) 
# 5082
{ 
# 5089
; 
# 5090
; 
# 5092
std::__stable_sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 5094
} 
# 5096
template< class _InputIterator1, class _InputIterator2, class 
# 5097
_OutputIterator, class 
# 5098
_Compare> _OutputIterator 
# 5101
__set_union(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5102
__first2, _InputIterator2 __last2, _OutputIterator 
# 5103
__result, _Compare __comp) 
# 5104
{ 
# 5105
while ((__first1 != __last1) && (__first2 != __last2)) 
# 5106
{ 
# 5107
if (__comp(__first1, __first2)) 
# 5108
{ 
# 5109
(*__result) = (*__first1); 
# 5110
++__first1; 
# 5111
} else { 
# 5112
if (__comp(__first2, __first1)) 
# 5113
{ 
# 5114
(*__result) = (*__first2); 
# 5115
++__first2; 
# 5116
} else 
# 5118
{ 
# 5119
(*__result) = (*__first1); 
# 5120
++__first1; 
# 5121
++__first2; 
# 5122
}  }  
# 5123
++__result; 
# 5124
}  
# 5125
return std::copy(__first2, __last2, std::copy(__first1, __last1, __result)); 
# 5127
} 
# 5148 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 5149
_OutputIterator> inline _OutputIterator 
# 5152
set_union(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5153
__first2, _InputIterator2 __last2, _OutputIterator 
# 5154
__result) 
# 5155
{ 
# 5169
; 
# 5170
; 
# 5171
; 
# 5172
; 
# 5174
return std::__set_union(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_less_iter()); 
# 5177
} 
# 5199 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 5200
_OutputIterator, class _Compare> inline _OutputIterator 
# 5203
set_union(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5204
__first2, _InputIterator2 __last2, _OutputIterator 
# 5205
__result, _Compare __comp) 
# 5206
{ 
# 5220
; 
# 5221
; 
# 5222
; 
# 5223
; 
# 5225
return std::__set_union(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 5228
} 
# 5230
template< class _InputIterator1, class _InputIterator2, class 
# 5231
_OutputIterator, class 
# 5232
_Compare> _OutputIterator 
# 5235
__set_intersection(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5236
__first2, _InputIterator2 __last2, _OutputIterator 
# 5237
__result, _Compare __comp) 
# 5238
{ 
# 5239
while ((__first1 != __last1) && (__first2 != __last2)) { 
# 5240
if (__comp(__first1, __first2)) { 
# 5241
++__first1; } else { 
# 5242
if (__comp(__first2, __first1)) { 
# 5243
++__first2; } else 
# 5245
{ 
# 5246
(*__result) = (*__first1); 
# 5247
++__first1; 
# 5248
++__first2; 
# 5249
++__result; 
# 5250
}  }  }  
# 5251
return __result; 
# 5252
} 
# 5272 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 5273
_OutputIterator> inline _OutputIterator 
# 5276
set_intersection(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5277
__first2, _InputIterator2 __last2, _OutputIterator 
# 5278
__result) 
# 5279
{ 
# 5291
; 
# 5292
; 
# 5293
; 
# 5294
; 
# 5296
return std::__set_intersection(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_less_iter()); 
# 5299
} 
# 5322 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 5323
_OutputIterator, class _Compare> inline _OutputIterator 
# 5326
set_intersection(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5327
__first2, _InputIterator2 __last2, _OutputIterator 
# 5328
__result, _Compare __comp) 
# 5329
{ 
# 5341
; 
# 5342
; 
# 5343
; 
# 5344
; 
# 5346
return std::__set_intersection(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 5349
} 
# 5351
template< class _InputIterator1, class _InputIterator2, class 
# 5352
_OutputIterator, class 
# 5353
_Compare> _OutputIterator 
# 5356
__set_difference(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5357
__first2, _InputIterator2 __last2, _OutputIterator 
# 5358
__result, _Compare __comp) 
# 5359
{ 
# 5360
while ((__first1 != __last1) && (__first2 != __last2)) { 
# 5361
if (__comp(__first1, __first2)) 
# 5362
{ 
# 5363
(*__result) = (*__first1); 
# 5364
++__first1; 
# 5365
++__result; 
# 5366
} else { 
# 5367
if (__comp(__first2, __first1)) { 
# 5368
++__first2; } else 
# 5370
{ 
# 5371
++__first1; 
# 5372
++__first2; 
# 5373
}  }  }  
# 5374
return std::copy(__first1, __last1, __result); 
# 5375
} 
# 5397 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 5398
_OutputIterator> inline _OutputIterator 
# 5401
set_difference(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5402
__first2, _InputIterator2 __last2, _OutputIterator 
# 5403
__result) 
# 5404
{ 
# 5416
; 
# 5417
; 
# 5418
; 
# 5419
; 
# 5421
return std::__set_difference(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_less_iter()); 
# 5424
} 
# 5449 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 5450
_OutputIterator, class _Compare> inline _OutputIterator 
# 5453
set_difference(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5454
__first2, _InputIterator2 __last2, _OutputIterator 
# 5455
__result, _Compare __comp) 
# 5456
{ 
# 5468
; 
# 5469
; 
# 5470
; 
# 5471
; 
# 5473
return std::__set_difference(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 5476
} 
# 5478
template< class _InputIterator1, class _InputIterator2, class 
# 5479
_OutputIterator, class 
# 5480
_Compare> _OutputIterator 
# 5483
__set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 
# 5484
__last1, _InputIterator2 
# 5485
__first2, _InputIterator2 
# 5486
__last2, _OutputIterator 
# 5487
__result, _Compare 
# 5488
__comp) 
# 5489
{ 
# 5490
while ((__first1 != __last1) && (__first2 != __last2)) { 
# 5491
if (__comp(__first1, __first2)) 
# 5492
{ 
# 5493
(*__result) = (*__first1); 
# 5494
++__first1; 
# 5495
++__result; 
# 5496
} else { 
# 5497
if (__comp(__first2, __first1)) 
# 5498
{ 
# 5499
(*__result) = (*__first2); 
# 5500
++__first2; 
# 5501
++__result; 
# 5502
} else 
# 5504
{ 
# 5505
++__first1; 
# 5506
++__first2; 
# 5507
}  }  }  
# 5508
return std::copy(__first2, __last2, std::copy(__first1, __last1, __result)); 
# 5510
} 
# 5530 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 5531
_OutputIterator> inline _OutputIterator 
# 5534
set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5535
__first2, _InputIterator2 __last2, _OutputIterator 
# 5536
__result) 
# 5537
{ 
# 5551
; 
# 5552
; 
# 5553
; 
# 5554
; 
# 5556
return std::__set_symmetric_difference(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_less_iter()); 
# 5559
} 
# 5582 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 5583
_OutputIterator, class _Compare> inline _OutputIterator 
# 5586
set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5587
__first2, _InputIterator2 __last2, _OutputIterator 
# 5588
__result, _Compare 
# 5589
__comp) 
# 5590
{ 
# 5604
; 
# 5605
; 
# 5606
; 
# 5607
; 
# 5609
return std::__set_symmetric_difference(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 5612
} 
# 5614
template< class _ForwardIterator, class _Compare> constexpr _ForwardIterator 
# 5617
__min_element(_ForwardIterator __first, _ForwardIterator __last, _Compare 
# 5618
__comp) 
# 5619
{ 
# 5620
if (__first == __last) { 
# 5621
return __first; }  
# 5622
_ForwardIterator __result = __first; 
# 5623
while ((++__first) != __last) { 
# 5624
if (__comp(__first, __result)) { 
# 5625
__result = __first; }  }  
# 5626
return __result; 
# 5627
} 
# 5636 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _ForwardIterator> constexpr _ForwardIterator 
# 5639
min_element(_ForwardIterator __first, _ForwardIterator __last) 
# 5640
{ 
# 5645
; 
# 5646
; 
# 5648
return std::__min_element(__first, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 5650
} 
# 5661 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Compare> constexpr _ForwardIterator 
# 5664
min_element(_ForwardIterator __first, _ForwardIterator __last, _Compare 
# 5665
__comp) 
# 5666
{ 
# 5672
; 
# 5673
; 
# 5675
return std::__min_element(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 5677
} 
# 5679
template< class _ForwardIterator, class _Compare> constexpr _ForwardIterator 
# 5682
__max_element(_ForwardIterator __first, _ForwardIterator __last, _Compare 
# 5683
__comp) 
# 5684
{ 
# 5685
if (__first == __last) { return __first; }  
# 5686
_ForwardIterator __result = __first; 
# 5687
while ((++__first) != __last) { 
# 5688
if (__comp(__result, __first)) { 
# 5689
__result = __first; }  }  
# 5690
return __result; 
# 5691
} 
# 5700 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _ForwardIterator> constexpr _ForwardIterator 
# 5703
max_element(_ForwardIterator __first, _ForwardIterator __last) 
# 5704
{ 
# 5709
; 
# 5710
; 
# 5712
return std::__max_element(__first, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 5714
} 
# 5725 "/usr/include/c++/11/bits/stl_algo.h" 3
template< class _ForwardIterator, class _Compare> constexpr _ForwardIterator 
# 5728
max_element(_ForwardIterator __first, _ForwardIterator __last, _Compare 
# 5729
__comp) 
# 5730
{ 
# 5736
; 
# 5737
; 
# 5739
return std::__max_element(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 5741
} 
# 5745
template< class _InputIterator, class _RandomAccessIterator, class 
# 5746
_Size, class _UniformRandomBitGenerator> _RandomAccessIterator 
# 5748
__sample(_InputIterator __first, _InputIterator __last, input_iterator_tag, _RandomAccessIterator 
# 5749
__out, random_access_iterator_tag, _Size 
# 5750
__n, _UniformRandomBitGenerator &&__g) 
# 5751
{ 
# 5752
using __distrib_type = uniform_int_distribution< _Size> ; 
# 5753
using __param_type = typename uniform_int_distribution< _Size> ::param_type; 
# 5754
__distrib_type __d{}; 
# 5755
_Size __sample_sz = (0); 
# 5756
while ((__first != __last) && (__sample_sz != __n)) 
# 5757
{ 
# 5758
(__out[__sample_sz++]) = (*__first); 
# 5759
++__first; 
# 5760
}  
# 5761
for (auto __pop_sz = __sample_sz; __first != __last; (++__first), ((void)(++__pop_sz))) 
# 5763
{ 
# 5764
const auto __k = __d(__g, __param_type{0, __pop_sz}); 
# 5765
if (__k < __n) { 
# 5766
(__out[__k]) = (*__first); }  
# 5767
}  
# 5768
return __out + __sample_sz; 
# 5769
} 
# 5772
template< class _ForwardIterator, class _OutputIterator, class _Cat, class 
# 5773
_Size, class _UniformRandomBitGenerator> _OutputIterator 
# 5775
__sample(_ForwardIterator __first, _ForwardIterator __last, forward_iterator_tag, _OutputIterator 
# 5777
__out, _Cat, _Size 
# 5778
__n, _UniformRandomBitGenerator &&__g) 
# 5779
{ 
# 5780
using __distrib_type = uniform_int_distribution< _Size> ; 
# 5781
using __param_type = typename uniform_int_distribution< _Size> ::param_type; 
# 5782
using _USize = make_unsigned_t< _Size> ; 
# 5783
using _Gen = remove_reference_t< _UniformRandomBitGenerator> ; 
# 5784
using __uc_type = common_type_t< typename remove_reference_t< _UniformRandomBitGenerator> ::result_type, make_unsigned_t< _Size> > ; 
# 5786
if (__first == __last) { 
# 5787
return __out; }  
# 5789
__distrib_type __d{}; 
# 5790
_Size __unsampled_sz = std::distance(__first, __last); 
# 5791
__n = std::min(__n, __unsampled_sz); 
# 5796
const __uc_type __urngrange = __g.max() - __g.min(); 
# 5797
if ((__urngrange / ((__uc_type)__unsampled_sz)) >= ((__uc_type)__unsampled_sz)) 
# 5800
{ 
# 5801
while ((__n != 0) && (__unsampled_sz >= 2)) 
# 5802
{ 
# 5803
const pair< _Size, _Size>  __p = __gen_two_uniform_ints(__unsampled_sz, __unsampled_sz - 1, __g); 
# 5806
--__unsampled_sz; 
# 5807
if ((__p.first) < __n) 
# 5808
{ 
# 5809
(*(__out++)) = (*__first); 
# 5810
--__n; 
# 5811
}  
# 5813
++__first; 
# 5815
if (__n == 0) { break; }  
# 5817
--__unsampled_sz; 
# 5818
if ((__p.second) < __n) 
# 5819
{ 
# 5820
(*(__out++)) = (*__first); 
# 5821
--__n; 
# 5822
}  
# 5824
++__first; 
# 5825
}  
# 5826
}  
# 5830
for (; __n != 0; ++__first) { 
# 5831
if (__d(__g, __param_type{0, --__unsampled_sz}) < __n) 
# 5832
{ 
# 5833
(*(__out++)) = (*__first); 
# 5834
--__n; 
# 5835
}  }  
# 5836
return __out; 
# 5837
} 
# 5842
template< class _PopulationIterator, class _SampleIterator, class 
# 5843
_Distance, class _UniformRandomBitGenerator> _SampleIterator 
# 5845
sample(_PopulationIterator __first, _PopulationIterator __last, _SampleIterator 
# 5846
__out, _Distance __n, _UniformRandomBitGenerator &&
# 5847
__g) 
# 5848
{ 
# 5849
using __pop_cat = typename iterator_traits< _PopulationIterator> ::iterator_category; 
# 5851
using __samp_cat = typename iterator_traits< _SampleIterator> ::iterator_category; 
# 5854
static_assert((__or_< is_convertible< typename iterator_traits< _PopulationIterator> ::iterator_category, forward_iterator_tag> , is_convertible< typename iterator_traits< _SampleIterator> ::iterator_category, random_access_iterator_tag> > ::value), "output range must use a RandomAccessIterator when input range does not meet the ForwardIterator requirements");
# 5860
static_assert((is_integral< _Distance> ::value), "sample size must be an integer type");
# 5863
typename iterator_traits< _PopulationIterator> ::difference_type __d = __n; 
# 5864
return std::__sample(__first, __last, __pop_cat{}, __out, __samp_cat{}, __d, std::forward< _UniformRandomBitGenerator> (__g)); 
# 5867
} 
# 5873
}
# 74 "/usr/include/c++/11/functional" 3
namespace std __attribute((__visibility__("default"))) { 
# 81
template< int _Num> struct _Placeholder { }; 
# 92 "/usr/include/c++/11/functional" 3
template< class _Callable, class ..._Args> inline invoke_result_t< _Callable, _Args...>  
# 94
invoke(_Callable &&__fn, _Args &&...__args) noexcept(is_nothrow_invocable_v< _Callable, _Args...> ) 
# 96
{ 
# 97
return std::__invoke(std::forward< _Callable> (__fn), std::forward< _Args> (__args)...); 
# 99
} 
# 102
template< class _MemFunPtr, bool 
# 103
__is_mem_fn = is_member_function_pointer< _MemFunPtr> ::value> 
# 104
class _Mem_fn_base : public _Mem_fn_traits< _MemFunPtr> ::__maybe_type { 
# 107
using _Traits = _Mem_fn_traits< _MemFunPtr> ; 
# 109
using _Arity = typename _Mem_fn_traits< _MemFunPtr> ::__arity; 
# 110
using _Varargs = typename _Mem_fn_traits< _MemFunPtr> ::__vararg; 
# 112
template< class _Func, class ..._BoundArgs> friend struct _Bind_check_arity; 
# 115
_MemFunPtr _M_pmf; 
# 119
public: using result_type = typename _Mem_fn_traits< _MemFunPtr> ::__result_type; 
# 122
constexpr explicit _Mem_fn_base(_MemFunPtr __pmf) noexcept : _M_pmf(__pmf) { } 
# 124
template< class ..._Args> auto 
# 127
operator()(_Args &&...__args) const noexcept(noexcept(std::__invoke(_M_pmf, std::forward< _Args> (__args)...)))->__decltype((std::__invoke(_M_pmf, std::forward< _Args> (__args)...))) 
# 131
{ return std::__invoke(_M_pmf, std::forward< _Args> (__args)...); } 
# 132
}; 
# 135
template< class _MemObjPtr> 
# 136
class _Mem_fn_base< _MemObjPtr, false>  { 
# 138
using _Arity = integral_constant< size_t, 0UL> ; 
# 139
using _Varargs = false_type; 
# 141
template< class _Func, class ..._BoundArgs> friend struct _Bind_check_arity; 
# 144
_MemObjPtr _M_pm; 
# 148
public: constexpr explicit _Mem_fn_base(_MemObjPtr __pm) noexcept : _M_pm(__pm) { } 
# 150
template< class _Tp> auto 
# 153
operator()(_Tp &&__obj) const noexcept(noexcept(std::__invoke(_M_pm, std::forward< _Tp> (__obj))))->__decltype((std::__invoke(_M_pm, std::forward< _Tp> (__obj)))) 
# 156
{ return std::__invoke(_M_pm, std::forward< _Tp> (__obj)); } 
# 157
}; 
# 159
template< class _MemberPointer> struct _Mem_fn; 
# 162
template< class _Res, class _Class> 
# 163
struct _Mem_fn< _Res (_Class::*)>  : public _Mem_fn_base< _Res (_Class::*)>  { 
# 166
using _Mem_fn_base< _Res (_Class::*)> ::_Mem_fn_base;
# 167
}; 
# 176 "/usr/include/c++/11/functional" 3
template< class _Tp, class _Class> inline _Mem_fn< _Tp (_Class::*)>  
# 179
mem_fn(_Tp (_Class::*__pm)) noexcept 
# 180
{ 
# 181
return ((_Mem_fn< _Tp (_Class::*)> )(__pm)); 
# 182
} 
# 192 "/usr/include/c++/11/functional" 3
template< class _Tp> 
# 193
struct is_bind_expression : public false_type { 
# 194
}; 
# 203 "/usr/include/c++/11/functional" 3
template< class _Tp> 
# 204
struct is_placeholder : public integral_constant< int, 0>  { 
# 206
}; 
# 209
template< class _Tp> constexpr inline bool is_bind_expression_v = (is_bind_expression< _Tp> ::value); 
# 211
template< class _Tp> constexpr inline int is_placeholder_v = (is_placeholder< _Tp> ::value); 
# 219
namespace placeholders { 
# 225
extern const _Placeholder< 1>  _1; 
# 226
extern const _Placeholder< 2>  _2; 
# 227
extern const _Placeholder< 3>  _3; 
# 228
extern const _Placeholder< 4>  _4; 
# 229
extern const _Placeholder< 5>  _5; 
# 230
extern const _Placeholder< 6>  _6; 
# 231
extern const _Placeholder< 7>  _7; 
# 232
extern const _Placeholder< 8>  _8; 
# 233
extern const _Placeholder< 9>  _9; 
# 234
extern const _Placeholder< 10>  _10; 
# 235
extern const _Placeholder< 11>  _11; 
# 236
extern const _Placeholder< 12>  _12; 
# 237
extern const _Placeholder< 13>  _13; 
# 238
extern const _Placeholder< 14>  _14; 
# 239
extern const _Placeholder< 15>  _15; 
# 240
extern const _Placeholder< 16>  _16; 
# 241
extern const _Placeholder< 17>  _17; 
# 242
extern const _Placeholder< 18>  _18; 
# 243
extern const _Placeholder< 19>  _19; 
# 244
extern const _Placeholder< 20>  _20; 
# 245
extern const _Placeholder< 21>  _21; 
# 246
extern const _Placeholder< 22>  _22; 
# 247
extern const _Placeholder< 23>  _23; 
# 248
extern const _Placeholder< 24>  _24; 
# 249
extern const _Placeholder< 25>  _25; 
# 250
extern const _Placeholder< 26>  _26; 
# 251
extern const _Placeholder< 27>  _27; 
# 252
extern const _Placeholder< 28>  _28; 
# 253
extern const _Placeholder< 29>  _29; 
# 254
}
# 261
template< int _Num> 
# 262
struct is_placeholder< _Placeholder< _Num> >  : public integral_constant< int, _Num>  { 
# 264
}; 
# 266
template< int _Num> 
# 267
struct is_placeholder< const _Placeholder< _Num> >  : public integral_constant< int, _Num>  { 
# 269
}; 
# 273
template< size_t __i, class _Tuple> using _Safe_tuple_element_t = typename enable_if< __i < tuple_size< _Tuple> ::value, tuple_element< __i, _Tuple> > ::type::type; 
# 289 "/usr/include/c++/11/functional" 3
template< class _Arg, bool 
# 290
_IsBindExp = is_bind_expression< _Arg> ::value, bool 
# 291
_IsPlaceholder = (is_placeholder< _Arg> ::value > 0)> class _Mu; 
# 299
template< class _Tp> 
# 300
class _Mu< reference_wrapper< _Tp> , false, false>  { 
# 310
public: 
# 307
template< class _CVRef, class _Tuple> _Tp &
# 310
operator()(_CVRef &__arg, _Tuple &) const volatile 
# 311
{ return __arg.get(); } 
# 312
}; 
# 320
template< class _Arg> 
# 321
class _Mu< _Arg, true, false>  { 
# 327
public: 
# 324
template< class _CVArg, class ..._Args> auto 
# 327
operator()(_CVArg &__arg, tuple< _Args...>  &
# 328
__tuple) const volatile->__decltype((__arg(declval< _Args> ()...))) 
# 330
{ 
# 333
typedef typename _Build_index_tuple< sizeof...(_Args)> ::__type _Indexes; 
# 334
return this->__call(__arg, __tuple, _Indexes()); 
# 335
} 
# 343
private: 
# 340
template< class _CVArg, class ..._Args, size_t ..._Indexes> auto 
# 343
__call(_CVArg &__arg, tuple< _Args...>  &__tuple, const _Index_tuple< _Indexes...>  &) const volatile->__decltype((__arg(declval< _Args> ()...))) 
# 346
{ 
# 347
return __arg(std::get< _Indexes> (std::move(__tuple))...); 
# 348
} 
# 349
}; 
# 356
template< class _Arg> 
# 357
class _Mu< _Arg, false, true>  { 
# 363
public: 
# 360
template< class _Tuple> _Safe_tuple_element_t< is_placeholder< _Arg> ::value - 1, _Tuple>  &&
# 363
operator()(const volatile _Arg &, _Tuple &__tuple) const volatile 
# 364
{ 
# 365
return std::get< is_placeholder< _Arg> ::value - 1> (std::move(__tuple)); 
# 367
} 
# 368
}; 
# 375
template< class _Arg> 
# 376
class _Mu< _Arg, false, false>  { 
# 382
public: 
# 379
template< class _CVArg, class _Tuple> _CVArg &&
# 382
operator()(_CVArg &&__arg, _Tuple &) const volatile 
# 383
{ return std::forward< _CVArg> (__arg); } 
# 384
}; 
# 387
template< size_t _Ind, class ..._Tp> inline auto 
# 389
__volget(volatile tuple< _Tp...>  &__tuple)->volatile __tuple_element_t< _Ind, tuple< _Tp...> >  & 
# 391
{ return std::get< _Ind> (const_cast< tuple< _Tp...>  &>(__tuple)); } 
# 394
template< size_t _Ind, class ..._Tp> inline auto 
# 396
__volget(const volatile tuple< _Tp...>  &__tuple)->const volatile __tuple_element_t< _Ind, tuple< _Tp...> >  & 
# 398
{ return std::get< _Ind> (const_cast< const tuple< _Tp...>  &>(__tuple)); } 
# 401
template< class _Signature> class _Bind; 
# 404
template< class _Functor, class ..._Bound_args> 
# 405
class _Bind< _Functor (_Bound_args ...)>  : public _Weak_result_type< _Functor>  { 
# 409
typedef typename _Build_index_tuple< sizeof...(_Bound_args)> ::__type _Bound_indexes; 
# 411
_Functor _M_f; 
# 412
tuple< _Bound_args...>  _M_bound_args; 
# 415
template< class _Result, class ..._Args, std::size_t ..._Indexes> _Result 
# 418
__call(tuple< _Args...>  &&__args, _Index_tuple< _Indexes...> ) 
# 419
{ 
# 420
return std::__invoke(_M_f, _Mu< _Bound_args> ()(std::get< _Indexes> (_M_bound_args), __args)...); 
# 423
} 
# 426
template< class _Result, class ..._Args, std::size_t ..._Indexes> _Result 
# 429
__call_c(tuple< _Args...>  &&__args, _Index_tuple< _Indexes...> ) const 
# 430
{ 
# 431
return std::__invoke(_M_f, _Mu< _Bound_args> ()(std::get< _Indexes> (_M_bound_args), __args)...); 
# 434
} 
# 437
template< class _Result, class ..._Args, std::size_t ..._Indexes> _Result 
# 439
__call_v(tuple< _Args...>  &&__args, _Index_tuple< _Indexes...> ) volatile 
# 441
{ 
# 442
return std::__invoke(_M_f, _Mu< _Bound_args> ()(__volget< _Indexes> (_M_bound_args), __args)...); 
# 445
} 
# 448
template< class _Result, class ..._Args, std::size_t ..._Indexes> _Result 
# 450
__call_c_v(tuple< _Args...>  &&__args, _Index_tuple< _Indexes...> ) const volatile 
# 452
{ 
# 453
return std::__invoke(_M_f, _Mu< _Bound_args> ()(__volget< _Indexes> (_M_bound_args), __args)...); 
# 456
} 
# 458
template< class _BoundArg, class _CallArgs> using _Mu_type = __decltype((_Mu< typename remove_cv< _BoundArg> ::type> ()(std::declval< _BoundArg &> (), std::declval< _CallArgs &> ()))); 
# 463
template< class _Fn, class _CallArgs, class ..._BArgs> using _Res_type_impl = typename result_of< _Fn &(_Mu_type< _BArgs, _CallArgs>  && ...)> ::type; 
# 467
template< class _CallArgs> using _Res_type = _Res_type_impl< _Functor, _CallArgs, _Bound_args...> ; 
# 470
template< class _CallArgs> using __dependent = typename enable_if< (bool)(tuple_size< _CallArgs> ::value + 1), _Functor> ::type; 
# 474
template< class _CallArgs, template< class >  class __cv_quals> using _Res_type_cv = _Res_type_impl< typename __cv_quals< __dependent< _CallArgs> > ::type, _CallArgs, typename __cv_quals< _Bound_args> ::type...> ; 
# 483
public: 
# 481
template< class ..._Args> explicit 
# 483
_Bind(const _Functor &__f, _Args &&...__args) : _M_f(__f), _M_bound_args(std::forward< _Args> (__args)...) 
# 485
{ } 
# 487
template< class ..._Args> explicit 
# 489
_Bind(_Functor &&__f, _Args &&...__args) : _M_f(std::move(__f)), _M_bound_args(std::forward< _Args> (__args)...) 
# 491
{ } 
# 493
_Bind(const _Bind &) = default;
# 494
_Bind(_Bind &&) = default;
# 497
template< class ..._Args, class 
# 498
_Result = _Res_type< tuple< _Args...> > > _Result 
# 501
operator()(_Args &&...__args) 
# 502
{ 
# 503
return this->template __call< _Result> (std::forward_as_tuple(std::forward< _Args> (__args)...), _Bound_indexes()); 
# 506
} 
# 509
template< class ..._Args, class 
# 510
_Result = _Res_type_cv< tuple< _Args...> , std::add_const> > _Result 
# 513
operator()(_Args &&...__args) const 
# 514
{ 
# 515
return this->template __call_c< _Result> (std::forward_as_tuple(std::forward< _Args> (__args)...), _Bound_indexes()); 
# 518
} 
# 527 "/usr/include/c++/11/functional" 3
template< class ..._Args, class 
# 528
_Result = _Res_type_cv< tuple< _Args...> , std::add_volatile> > 
# 529
[[deprecated("std::bind does not support volatile in C++17")]] _Result 
# 531
operator()(_Args &&...__args) volatile 
# 532
{ 
# 533
return this->template __call_v< _Result> (std::forward_as_tuple(std::forward< _Args> (__args)...), _Bound_indexes()); 
# 536
} 
# 539
template< class ..._Args, class 
# 540
_Result = _Res_type_cv< tuple< _Args...> , std::add_cv> > 
# 541
[[deprecated("std::bind does not support volatile in C++17")]] _Result 
# 543
operator()(_Args &&...__args) const volatile 
# 544
{ 
# 545
return this->template __call_c_v< _Result> (std::forward_as_tuple(std::forward< _Args> (__args)...), _Bound_indexes()); 
# 548
} 
# 549
}; 
# 552
template< class _Result, class _Signature> class _Bind_result; 
# 555
template< class _Result, class _Functor, class ..._Bound_args> 
# 556
class _Bind_result< _Result, _Functor (_Bound_args ...)>  { 
# 559
typedef typename _Build_index_tuple< sizeof...(_Bound_args)> ::__type _Bound_indexes; 
# 561
_Functor _M_f; 
# 562
tuple< _Bound_args...>  _M_bound_args; 
# 565
template< class _Res, class ..._Args, size_t ..._Indexes> _Res 
# 568
__call(tuple< _Args...>  &&__args, _Index_tuple< _Indexes...> ) 
# 569
{ 
# 570
return std::__invoke_r< _Res> (_M_f, _Mu< _Bound_args> ()(std::get< _Indexes> (_M_bound_args), __args)...); 
# 572
} 
# 575
template< class _Res, class ..._Args, size_t ..._Indexes> _Res 
# 578
__call(tuple< _Args...>  &&__args, _Index_tuple< _Indexes...> ) const 
# 579
{ 
# 580
return std::__invoke_r< _Res> (_M_f, _Mu< _Bound_args> ()(std::get< _Indexes> (_M_bound_args), __args)...); 
# 582
} 
# 585
template< class _Res, class ..._Args, size_t ..._Indexes> _Res 
# 588
__call(tuple< _Args...>  &&__args, _Index_tuple< _Indexes...> ) volatile 
# 589
{ 
# 590
return std::__invoke_r< _Res> (_M_f, _Mu< _Bound_args> ()(__volget< _Indexes> (_M_bound_args), __args)...); 
# 592
} 
# 595
template< class _Res, class ..._Args, size_t ..._Indexes> _Res 
# 598
__call(tuple< _Args...>  &&__args, _Index_tuple< _Indexes...> ) const volatile 
# 600
{ 
# 601
return std::__invoke_r< _Res> (_M_f, _Mu< _Bound_args> ()(__volget< _Indexes> (_M_bound_args), __args)...); 
# 603
} 
# 606
public: typedef _Result result_type; 
# 608
template< class ..._Args> explicit 
# 610
_Bind_result(const _Functor &__f, _Args &&...__args) : _M_f(__f), _M_bound_args(std::forward< _Args> (__args)...) 
# 612
{ } 
# 614
template< class ..._Args> explicit 
# 616
_Bind_result(_Functor &&__f, _Args &&...__args) : _M_f(std::move(__f)), _M_bound_args(std::forward< _Args> (__args)...) 
# 618
{ } 
# 620
_Bind_result(const _Bind_result &) = default;
# 621
_Bind_result(_Bind_result &&) = default;
# 624
template< class ..._Args> result_type 
# 627
operator()(_Args &&...__args) 
# 628
{ 
# 629
return this->template __call< _Result> (std::forward_as_tuple(std::forward< _Args> (__args)...), _Bound_indexes()); 
# 632
} 
# 635
template< class ..._Args> result_type 
# 638
operator()(_Args &&...__args) const 
# 639
{ 
# 640
return this->template __call< _Result> (std::forward_as_tuple(std::forward< _Args> (__args)...), _Bound_indexes()); 
# 643
} 
# 646
template< class ..._Args> 
# 647
[[deprecated("std::bind does not support volatile in C++17")]] result_type 
# 649
operator()(_Args &&...__args) volatile 
# 650
{ 
# 651
return this->template __call< _Result> (std::forward_as_tuple(std::forward< _Args> (__args)...), _Bound_indexes()); 
# 654
} 
# 657
template< class ..._Args> 
# 658
[[deprecated("std::bind does not support volatile in C++17")]] result_type 
# 660
operator()(_Args &&...__args) const volatile 
# 661
{ 
# 662
return this->template __call< _Result> (std::forward_as_tuple(std::forward< _Args> (__args)...), _Bound_indexes()); 
# 665
} 
# 666
}; 
# 673
template< class _Signature> 
# 674
struct is_bind_expression< _Bind< _Signature> >  : public true_type { 
# 675
}; 
# 681
template< class _Signature> 
# 682
struct is_bind_expression< const _Bind< _Signature> >  : public true_type { 
# 683
}; 
# 689
template< class _Signature> 
# 690
struct is_bind_expression< volatile _Bind< _Signature> >  : public true_type { 
# 691
}; 
# 697
template< class _Signature> 
# 698
struct is_bind_expression< const volatile _Bind< _Signature> >  : public true_type { 
# 699
}; 
# 705
template< class _Result, class _Signature> 
# 706
struct is_bind_expression< _Bind_result< _Result, _Signature> >  : public true_type { 
# 707
}; 
# 713
template< class _Result, class _Signature> 
# 714
struct is_bind_expression< const _Bind_result< _Result, _Signature> >  : public true_type { 
# 715
}; 
# 721
template< class _Result, class _Signature> 
# 722
struct is_bind_expression< volatile _Bind_result< _Result, _Signature> >  : public true_type { 
# 723
}; 
# 729
template< class _Result, class _Signature> 
# 730
struct is_bind_expression< const volatile _Bind_result< _Result, _Signature> >  : public true_type { 
# 731
}; 
# 733
template< class _Func, class ..._BoundArgs> 
# 734
struct _Bind_check_arity { }; 
# 736
template< class _Ret, class ..._Args, class ..._BoundArgs> 
# 737
struct _Bind_check_arity< _Ret (*)(_Args ...), _BoundArgs...>  { 
# 739
static_assert((sizeof...(_BoundArgs) == sizeof...(_Args)), "Wrong number of arguments for function");
# 741
}; 
# 743
template< class _Ret, class ..._Args, class ..._BoundArgs> 
# 744
struct _Bind_check_arity< _Ret (*)(_Args ..., ...), _BoundArgs...>  { 
# 746
static_assert((sizeof...(_BoundArgs) >= sizeof...(_Args)), "Wrong number of arguments for function");
# 748
}; 
# 750
template< class _Tp, class _Class, class ..._BoundArgs> 
# 751
struct _Bind_check_arity< _Tp (_Class::*), _BoundArgs...>  { 
# 753
using _Arity = typename _Mem_fn< _Tp (_Class::*)> ::_Arity; 
# 754
using _Varargs = typename _Mem_fn< _Tp (_Class::*)> ::_Varargs; 
# 755
static_assert(((_Varargs::value) ? sizeof...(_BoundArgs) >= (_Arity::value + 1) : (sizeof...(_BoundArgs) == (_Arity::value + 1))), "Wrong number of arguments for pointer-to-member");
# 759
}; 
# 764
template< class _Tp, class _Tp2 = typename decay< _Tp> ::type> using __is_socketlike = __or_< is_integral< _Tp2> , is_enum< _Tp2> > ; 
# 767
template< bool _SocketLike, class _Func, class ..._BoundArgs> 
# 768
struct _Bind_helper : public _Bind_check_arity< typename decay< _Func> ::type, _BoundArgs...>  { 
# 771
typedef typename decay< _Func> ::type __func_type; 
# 772
typedef _Bind< __func_type (typename decay< _BoundArgs> ::type ...)>  type; 
# 773
}; 
# 778
template< class _Func, class ..._BoundArgs> 
# 779
struct _Bind_helper< true, _Func, _BoundArgs...>  { 
# 780
}; 
# 786
template< class _Func, class ..._BoundArgs> inline typename _Bind_helper< __or_< is_integral< typename decay< _Func> ::type> , is_enum< typename decay< _Func> ::type> > ::value, _Func, _BoundArgs...> ::type 
# 789
bind(_Func &&__f, _BoundArgs &&...__args) 
# 790
{ 
# 791
typedef _Bind_helper< false, _Func, _BoundArgs...>  __helper_type; 
# 792
return typename _Bind_helper< false, _Func, _BoundArgs...> ::type(std::forward< _Func> (__f), std::forward< _BoundArgs> (__args)...); 
# 794
} 
# 796
template< class _Result, class _Func, class ..._BoundArgs> 
# 797
struct _Bindres_helper : public _Bind_check_arity< typename decay< _Func> ::type, _BoundArgs...>  { 
# 800
typedef typename decay< _Func> ::type __functor_type; 
# 803
typedef _Bind_result< _Result, __functor_type (typename decay< _BoundArgs> ::type ...)>  type; 
# 804
}; 
# 810
template< class _Result, class _Func, class ..._BoundArgs> inline typename _Bindres_helper< _Result, _Func, _BoundArgs...> ::type 
# 813
bind(_Func &&__f, _BoundArgs &&...__args) 
# 814
{ 
# 815
typedef _Bindres_helper< _Result, _Func, _BoundArgs...>  __helper_type; 
# 816
return typename _Bindres_helper< _Result, _Func, _BoundArgs...> ::type(std::forward< _Func> (__f), std::forward< _BoundArgs> (__args)...); 
# 818
} 
# 922 "/usr/include/c++/11/functional" 3
template< class _Fn> 
# 923
class _Not_fn { 
# 925
template< class _Fn2, class ..._Args> using __inv_res_t = typename __invoke_result< _Fn2, _Args...> ::type; 
# 928
template< class _Tp> static __decltype((!std::declval< _Tp> ())) _S_not() noexcept(noexcept((!std::declval< _Tp> ()))); 
# 935
public: 
# 933
template< class _Fn2> constexpr 
# 935
_Not_fn(_Fn2 &&__fn, int) : _M_fn(std::forward< _Fn2> (__fn)) 
# 936
{ } 
# 938
_Not_fn(const _Not_fn & __fn) = default;
# 939
_Not_fn(_Not_fn && __fn) = default;
# 940
~_Not_fn() = default;
# 956 "/usr/include/c++/11/functional" 3
template< class ..._Args> __decltype((_S_not< __inv_res_t< _Fn &, _Args...> > ())) operator()(_Args &&...__args) & noexcept(__is_nothrow_invocable< _Fn &, _Args...> ::value && noexcept(_S_not< __inv_res_t< _Fn &, _Args...> > ())) { return !std::__invoke(std::forward< _Fn &> (_M_fn), std::forward< _Args> (__args)...); } 
# 957
template< class ..._Args> __decltype((_S_not< __inv_res_t< const _Fn &, _Args...> > ())) operator()(_Args &&...__args) const & noexcept(__is_nothrow_invocable< const _Fn &, _Args...> ::value && noexcept(_S_not< __inv_res_t< const _Fn &, _Args...> > ())) { return !std::__invoke(std::forward< const _Fn &> (_M_fn), std::forward< _Args> (__args)...); } 
# 958
template< class ..._Args> __decltype((_S_not< __inv_res_t< _Fn &&, _Args...> > ())) operator()(_Args &&...__args) && noexcept(__is_nothrow_invocable< _Fn &&, _Args...> ::value && noexcept(_S_not< __inv_res_t< _Fn &&, _Args...> > ())) { return !std::__invoke(std::forward< _Fn &&> (_M_fn), std::forward< _Args> (__args)...); } 
# 959
template< class ..._Args> __decltype((_S_not< __inv_res_t< const _Fn &&, _Args...> > ())) operator()(_Args &&...__args) const && noexcept(__is_nothrow_invocable< const _Fn &&, _Args...> ::value && noexcept(_S_not< __inv_res_t< const _Fn &&, _Args...> > ())) { return !std::__invoke(std::forward< const _Fn &&> (_M_fn), std::forward< _Args> (__args)...); } 
# 963
private: _Fn _M_fn; 
# 964
}; 
# 966
template< class _Tp, class _Pred> 
# 967
struct __is_byte_like : public false_type { }; 
# 969
template< class _Tp> 
# 970
struct __is_byte_like< _Tp, equal_to< _Tp> >  : public __bool_constant< (sizeof(_Tp) == (1)) && is_integral< _Tp> ::value>  { 
# 971
}; 
# 973
template< class _Tp> 
# 974
struct __is_byte_like< _Tp, equal_to<> >  : public __bool_constant< (sizeof(_Tp) == (1)) && is_integral< _Tp> ::value>  { 
# 975
}; 
# 979
enum class byte: unsigned char; 
# 982
template<> struct __is_byte_like< byte, equal_to< byte> >  : public true_type { 
# 983
}; 
# 986
template<> struct __is_byte_like< byte, equal_to<> >  : public true_type { 
# 987
}; 
# 991
template< class _Fn> inline auto 
# 994
not_fn(_Fn &&__fn) noexcept(std::template is_nothrow_constructible< decay_t< _Fn> , _Fn &&> ::value) 
# 996
{ 
# 997
return _Not_fn< decay_t< _Fn> > {std::forward< _Fn> (__fn), 0}; 
# 998
} 
# 1003
template< class _ForwardIterator1, class _BinaryPredicate = equal_to<> > 
# 1004
class default_searcher { 
# 1008
public: default_searcher(_ForwardIterator1 __pat_first, _ForwardIterator1 
# 1009
__pat_last, _BinaryPredicate 
# 1010
__pred = _BinaryPredicate()) : _M_m(__pat_first, __pat_last, std::move(__pred)) 
# 1012
{ } 
# 1014
template< class _ForwardIterator2> pair< _ForwardIterator2, _ForwardIterator2>  
# 1017
operator()(_ForwardIterator2 __first, _ForwardIterator2 __last) const 
# 1018
{ 
# 1019
_ForwardIterator2 __first_ret = std::search(__first, __last, std::get< 0> (_M_m), std::get< 1> (_M_m), std::get< 2> (_M_m)); 
# 1022
auto __ret = std::make_pair(__first_ret, __first_ret); 
# 1023
if ((__ret.first) != __last) { 
# 1024
std::advance((__ret.second), std::distance(std::get< 0> (_M_m), std::get< 1> (_M_m))); }  
# 1026
return __ret; 
# 1027
} 
# 1030
private: tuple< _ForwardIterator1, _ForwardIterator1, _BinaryPredicate>  _M_m; 
# 1031
}; 
# 1033
template< class _Key, class _Tp, class _Hash, class _Pred> 
# 1034
struct __boyer_moore_map_base { 
# 1036
template< class _RAIter> 
# 1037
__boyer_moore_map_base(_RAIter __pat, size_t __patlen, _Hash &&
# 1038
__hf, _Pred &&__pred) : _M_bad_char{__patlen, std::move(__hf), std::move(__pred)} 
# 1040
{ 
# 1041
if (__patlen > (0)) { 
# 1042
for (__diff_type __i = (0); __i < (__patlen - (1)); ++__i) { 
# 1043
((_M_bad_char)[__pat[__i]]) = ((__patlen - (1)) - __i); }  }  
# 1044
} 
# 1046
using __diff_type = _Tp; 
# 1049
__diff_type _M_lookup(_Key __key, __diff_type __not_found) const 
# 1050
{ 
# 1051
auto __iter = (_M_bad_char).find(__key); 
# 1052
if (__iter == (_M_bad_char).end()) { 
# 1053
return __not_found; }  
# 1054
return __iter->second; 
# 1055
} 
# 1058
_Pred _M_pred() const { return (_M_bad_char).key_eq(); } 
# 1060
unordered_map< _Key, _Tp, _Hash, _Pred>  _M_bad_char; 
# 1061
}; 
# 1063
template< class _Tp, size_t _Len, class _Pred> 
# 1064
struct __boyer_moore_array_base { 
# 1066
template< class _RAIter, class _Unused> 
# 1067
__boyer_moore_array_base(_RAIter __pat, size_t __patlen, _Unused &&, _Pred &&
# 1068
__pred) : _M_bad_char{array< _Tp, _Len> {}, std::move(__pred)} 
# 1070
{ 
# 1071
std::get< 0> (_M_bad_char).fill(__patlen); 
# 1072
if (__patlen > (0)) { 
# 1073
for (__diff_type __i = (0); __i < (__patlen - (1)); ++__i) 
# 1074
{ 
# 1075
auto __ch = __pat[__i]; 
# 1076
using _UCh = make_unsigned_t< __decltype(__ch)> ; 
# 1077
auto __uch = static_cast< _UCh>(__ch); 
# 1078
(std::get< 0> (_M_bad_char)[__uch]) = ((__patlen - (1)) - __i); 
# 1079
}  }  
# 1080
} 
# 1082
using __diff_type = _Tp; 
# 1084
template< class _Key> __diff_type 
# 1086
_M_lookup(_Key __key, __diff_type __not_found) const 
# 1087
{ 
# 1088
auto __ukey = static_cast< make_unsigned_t< _Key> >(__key); 
# 1089
if (__ukey >= _Len) { 
# 1090
return __not_found; }  
# 1091
return std::get< 0> (_M_bad_char)[__ukey]; 
# 1092
} 
# 1095
const _Pred &_M_pred() const { return std::get< 1> (_M_bad_char); } 
# 1097
tuple< array< _Tp, _Len> , _Pred>  _M_bad_char; 
# 1098
}; 
# 1102
template< class _RAIter, class _Hash, class _Pred, class 
# 1103
_Val = typename iterator_traits< _RAIter> ::value_type, class 
# 1104
_Diff = typename iterator_traits< _RAIter> ::difference_type> using __boyer_moore_base_t = conditional_t< __is_byte_like< _Val, _Pred> ::value, __boyer_moore_array_base< _Diff, 256UL, _Pred> , __boyer_moore_map_base< _Val, _Diff, _Hash, _Pred> > ; 
# 1110
template< class _RAIter, class _Hash = hash< typename iterator_traits< _RAIter> ::value_type> , class 
# 1112
_BinaryPredicate = equal_to<> > 
# 1113
class boyer_moore_searcher : private __boyer_moore_base_t< _RAIter, _Hash, _BinaryPredicate>  { 
# 1116
using _Base = std::__boyer_moore_base_t< _RAIter, _Hash, _BinaryPredicate> ; 
# 1117
using typename conditional< __is_byte_like< typename iterator_traits< _RAIter> ::value_type, _BinaryPredicate> ::value, __boyer_moore_array_base< typename iterator_traits< _RAIter> ::difference_type, 256UL, _BinaryPredicate> , __boyer_moore_map_base< typename iterator_traits< _RAIter> ::value_type, typename iterator_traits< _RAIter> ::difference_type, _Hash, _BinaryPredicate> > ::type::__diff_type;
# 1120
public: boyer_moore_searcher(_RAIter __pat_first, _RAIter __pat_last, _Hash __hf = _Hash(), _BinaryPredicate __pred = _BinaryPredicate()); 
# 1124
template< class _RandomAccessIterator2> pair< _RandomAccessIterator2, _RandomAccessIterator2>  operator()(_RandomAccessIterator2 __first, _RandomAccessIterator2 __last) const; 
# 1131
private: bool _M_is_prefix(_RAIter __word, typename std::__boyer_moore_base_t< _RAIter, _Hash, _BinaryPredicate> ::__diff_type __len, typename std::__boyer_moore_base_t< _RAIter, _Hash, _BinaryPredicate> ::__diff_type 
# 1132
__pos) 
# 1133
{ 
# 1134
const auto &__pred = this->_M_pred(); 
# 1135
typename std::__boyer_moore_base_t< _RAIter, _Hash, _BinaryPredicate> ::__diff_type __suffixlen = __len - __pos; 
# 1136
for (typename std::__boyer_moore_base_t< _RAIter, _Hash, _BinaryPredicate> ::__diff_type __i = (0); __i < __suffixlen; ++__i) { 
# 1137
if (!__pred(__word[__i], __word[__pos + __i])) { 
# 1138
return false; }  }  
# 1139
return true; 
# 1140
} 
# 1143
typename std::__boyer_moore_base_t< _RAIter, _Hash, _BinaryPredicate> ::__diff_type _M_suffix_length(_RAIter __word, typename std::__boyer_moore_base_t< _RAIter, _Hash, _BinaryPredicate> ::__diff_type __len, typename std::__boyer_moore_base_t< _RAIter, _Hash, _BinaryPredicate> ::__diff_type 
# 1144
__pos) 
# 1145
{ 
# 1146
const auto &__pred = this->_M_pred(); 
# 1147
typename std::__boyer_moore_base_t< _RAIter, _Hash, _BinaryPredicate> ::__diff_type __i = (0); 
# 1148
while (__pred(__word[__pos - __i], __word[(__len - 1) - __i]) && (__i < __pos)) 
# 1150
{ 
# 1151
++__i; 
# 1152
}  
# 1153
return __i; 
# 1154
} 
# 1156
template< class _Tp> typename std::__boyer_moore_base_t< _RAIter, _Hash, _BinaryPredicate> ::__diff_type 
# 1158
_M_bad_char_shift(_Tp __c) const 
# 1159
{ return this->_M_lookup(__c, (_M_pat_end) - (_M_pat)); } 
# 1161
_RAIter _M_pat; 
# 1162
_RAIter _M_pat_end; 
# 1163
vector< typename std::__boyer_moore_base_t< _RAIter, _Hash, _BinaryPredicate> ::__diff_type>  _M_good_suffix; 
# 1164
}; 
# 1166
template< class _RAIter, class _Hash = hash< typename iterator_traits< _RAIter> ::value_type> , class 
# 1168
_BinaryPredicate = equal_to<> > 
# 1169
class boyer_moore_horspool_searcher : private __boyer_moore_base_t< _RAIter, _Hash, _BinaryPredicate>  { 
# 1172
using _Base = std::__boyer_moore_base_t< _RAIter, _Hash, _BinaryPredicate> ; 
# 1173
using typename conditional< __is_byte_like< typename iterator_traits< _RAIter> ::value_type, _BinaryPredicate> ::value, __boyer_moore_array_base< typename iterator_traits< _RAIter> ::difference_type, 256UL, _BinaryPredicate> , __boyer_moore_map_base< typename iterator_traits< _RAIter> ::value_type, typename iterator_traits< _RAIter> ::difference_type, _Hash, _BinaryPredicate> > ::type::__diff_type;
# 1176
public: boyer_moore_horspool_searcher(_RAIter __pat, _RAIter 
# 1177
__pat_end, _Hash 
# 1178
__hf = _Hash(), _BinaryPredicate 
# 1179
__pred = _BinaryPredicate()) : _Base(__pat, __pat_end - __pat, std::move(__hf), std::move(__pred)), _M_pat(__pat), _M_pat_end(__pat_end) 
# 1183
{ } 
# 1185
template< class _RandomAccessIterator2> pair< _RandomAccessIterator2, _RandomAccessIterator2>  
# 1187
operator()(_RandomAccessIterator2 __first, _RandomAccessIterator2 
# 1188
__last) const 
# 1189
{ 
# 1190
const auto &__pred = this->_M_pred(); 
# 1191
auto __patlen = (_M_pat_end) - (_M_pat); 
# 1192
if (__patlen == 0) { 
# 1193
return std::make_pair(__first, __first); }  
# 1194
auto __len = __last - __first; 
# 1195
while (__len >= __patlen) 
# 1196
{ 
# 1197
for (auto __scan = __patlen - 1; __pred(__first[__scan], (_M_pat)[__scan]); --__scan) { 
# 1199
if (__scan == 0) { 
# 1200
return std::make_pair(__first, __first + __patlen); }  }  
# 1201
auto __shift = _M_bad_char_shift(__first[__patlen - 1]); 
# 1202
__len -= __shift; 
# 1203
__first += __shift; 
# 1204
}  
# 1205
return std::make_pair(__last, __last); 
# 1206
} 
# 1211
private: 
# 1209
template< class _Tp> typename std::__boyer_moore_base_t< _RAIter, _Hash, _BinaryPredicate> ::__diff_type 
# 1211
_M_bad_char_shift(_Tp __c) const 
# 1212
{ return this->_M_lookup(__c, (_M_pat_end) - (_M_pat)); } 
# 1214
_RAIter _M_pat; 
# 1215
_RAIter _M_pat_end; 
# 1216
}; 
# 1218
template< class _RAIter, class _Hash, class _BinaryPredicate> 
# 1220
boyer_moore_searcher< _RAIter, _Hash, _BinaryPredicate> ::boyer_moore_searcher(_RAIter __pat, _RAIter __pat_end, _Hash 
# 1221
__hf, _BinaryPredicate __pred) : _Base(__pat, __pat_end - __pat, std::move(__hf), std::move(__pred)), _M_pat(__pat), _M_pat_end(__pat_end), _M_good_suffix(__pat_end - __pat) 
# 1224
{ 
# 1225
auto __patlen = __pat_end - __pat; 
# 1226
if (__patlen == 0) { 
# 1227
return; }  
# 1228
typename std::__boyer_moore_base_t< _RAIter, _Hash, _BinaryPredicate> ::__diff_type __last_prefix = __patlen - 1; 
# 1229
for (typename std::__boyer_moore_base_t< _RAIter, _Hash, _BinaryPredicate> ::__diff_type __p = __patlen - 1; __p >= 0; --__p) 
# 1230
{ 
# 1231
if (_M_is_prefix(__pat, __patlen, __p + 1)) { 
# 1232
__last_prefix = (__p + 1); }  
# 1233
((_M_good_suffix)[__p]) = (__last_prefix + ((__patlen - 1) - __p)); 
# 1234
}  
# 1235
for (typename std::__boyer_moore_base_t< _RAIter, _Hash, _BinaryPredicate> ::__diff_type __p = (0); __p < (__patlen - 1); ++__p) 
# 1236
{ 
# 1237
auto __slen = _M_suffix_length(__pat, __patlen, __p); 
# 1238
auto __pos = (__patlen - 1) - __slen; 
# 1239
if (!__pred(__pat[__p - __slen], __pat[__pos])) { 
# 1240
((_M_good_suffix)[__pos]) = (((__patlen - 1) - __p) + __slen); }  
# 1241
}  
# 1242
} 
# 1244
template< class _RAIter, class _Hash, class _BinaryPredicate> 
# 1245
template< class _RandomAccessIterator2> pair< _RandomAccessIterator2, _RandomAccessIterator2>  
# 1248
boyer_moore_searcher< _RAIter, _Hash, _BinaryPredicate> ::operator()(_RandomAccessIterator2 __first, _RandomAccessIterator2 
# 1249
__last) const 
# 1250
{ 
# 1251
auto __patlen = (_M_pat_end) - (_M_pat); 
# 1252
if (__patlen == 0) { 
# 1253
return std::make_pair(__first, __first); }  
# 1254
const auto &__pred = this->_M_pred(); 
# 1255
typename std::__boyer_moore_base_t< _RAIter, _Hash, _BinaryPredicate> ::__diff_type __i = __patlen - 1; 
# 1256
auto __stringlen = __last - __first; 
# 1257
while (__i < __stringlen) 
# 1258
{ 
# 1259
typename std::__boyer_moore_base_t< _RAIter, _Hash, _BinaryPredicate> ::__diff_type __j = __patlen - 1; 
# 1260
while ((__j >= 0) && __pred(__first[__i], (_M_pat)[__j])) 
# 1261
{ 
# 1262
--__i; 
# 1263
--__j; 
# 1264
}  
# 1265
if (__j < 0) 
# 1266
{ 
# 1267
const auto __match = (__first + __i) + 1; 
# 1268
return std::make_pair(__match, __match + __patlen); 
# 1269
}  
# 1270
__i += std::max(_M_bad_char_shift(__first[__i]), (_M_good_suffix)[__j]); 
# 1272
}  
# 1273
return std::make_pair(__last, __last); 
# 1274
} 
# 1281
}
# 124 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime.h" 3
# 1 "nvcc_internal_extended_lambda_implementation"
#define __NV_LAMBDA_WRAPPER_HELPER(X, Y) decltype(X), Y
template <typename T>
struct __nvdl_remove_ref { typedef T type; };

template<typename T>
struct __nvdl_remove_ref<T&> { typedef T type; };

template<typename T>
struct __nvdl_remove_ref<T&&> { typedef T type; };

template <typename T, typename... Args>
struct __nvdl_remove_ref<T(&)(Args...)> {
  typedef T(*type)(Args...); 
};

template <typename T>
struct __nvdl_remove_const { typedef T type; };

template <typename T>
struct __nvdl_remove_const<T const> { typedef T type; };


template <typename U, U func, unsigned>
struct __nv_dl_tag { };
template <typename T>
struct __nv_lambda_array_wrapper { 
static_assert(sizeof(T) == 0, "nvcc internal error: unexpected failure in capturing array variable");
};

template<typename T, size_t D1>
struct __nv_lambda_array_wrapper<T [D1]> {T arr[D1];
__nv_lambda_array_wrapper(const T in[D1]) {
for(size_t i1 = 0; i1  < D1; ++i1) arr[i1] = in[i1];
}
};

template<typename T, size_t D1, size_t D2>
struct __nv_lambda_array_wrapper<T [D1][D2]> {T arr[D1][D2];
__nv_lambda_array_wrapper(const T in[D1][D2]) {
for(size_t i1 = 0; i1  < D1; ++i1)
for(size_t i2 = 0; i2  < D2; ++i2) arr[i1][i2] = in[i1][i2];
}
};

template<typename T, size_t D1, size_t D2, size_t D3>
struct __nv_lambda_array_wrapper<T [D1][D2][D3]> {T arr[D1][D2][D3];
__nv_lambda_array_wrapper(const T in[D1][D2][D3]) {
for(size_t i1 = 0; i1  < D1; ++i1)
for(size_t i2 = 0; i2  < D2; ++i2)
for(size_t i3 = 0; i3  < D3; ++i3) arr[i1][i2][i3] = in[i1][i2][i3];
}
};

template<typename T, size_t D1, size_t D2, size_t D3, size_t D4>
struct __nv_lambda_array_wrapper<T [D1][D2][D3][D4]> {T arr[D1][D2][D3][D4];
__nv_lambda_array_wrapper(const T in[D1][D2][D3][D4]) {
for(size_t i1 = 0; i1  < D1; ++i1)
for(size_t i2 = 0; i2  < D2; ++i2)
for(size_t i3 = 0; i3  < D3; ++i3)
for(size_t i4 = 0; i4  < D4; ++i4) arr[i1][i2][i3][i4] = in[i1][i2][i3][i4];
}
};

template<typename T, size_t D1, size_t D2, size_t D3, size_t D4, size_t D5>
struct __nv_lambda_array_wrapper<T [D1][D2][D3][D4][D5]> {T arr[D1][D2][D3][D4][D5];
__nv_lambda_array_wrapper(const T in[D1][D2][D3][D4][D5]) {
for(size_t i1 = 0; i1  < D1; ++i1)
for(size_t i2 = 0; i2  < D2; ++i2)
for(size_t i3 = 0; i3  < D3; ++i3)
for(size_t i4 = 0; i4  < D4; ++i4)
for(size_t i5 = 0; i5  < D5; ++i5) arr[i1][i2][i3][i4][i5] = in[i1][i2][i3][i4][i5];
}
};

template<typename T, size_t D1, size_t D2, size_t D3, size_t D4, size_t D5, size_t D6>
struct __nv_lambda_array_wrapper<T [D1][D2][D3][D4][D5][D6]> {T arr[D1][D2][D3][D4][D5][D6];
__nv_lambda_array_wrapper(const T in[D1][D2][D3][D4][D5][D6]) {
for(size_t i1 = 0; i1  < D1; ++i1)
for(size_t i2 = 0; i2  < D2; ++i2)
for(size_t i3 = 0; i3  < D3; ++i3)
for(size_t i4 = 0; i4  < D4; ++i4)
for(size_t i5 = 0; i5  < D5; ++i5)
for(size_t i6 = 0; i6  < D6; ++i6) arr[i1][i2][i3][i4][i5][i6] = in[i1][i2][i3][i4][i5][i6];
}
};

template<typename T, size_t D1, size_t D2, size_t D3, size_t D4, size_t D5, size_t D6, size_t D7>
struct __nv_lambda_array_wrapper<T [D1][D2][D3][D4][D5][D6][D7]> {T arr[D1][D2][D3][D4][D5][D6][D7];
__nv_lambda_array_wrapper(const T in[D1][D2][D3][D4][D5][D6][D7]) {
for(size_t i1 = 0; i1  < D1; ++i1)
for(size_t i2 = 0; i2  < D2; ++i2)
for(size_t i3 = 0; i3  < D3; ++i3)
for(size_t i4 = 0; i4  < D4; ++i4)
for(size_t i5 = 0; i5  < D5; ++i5)
for(size_t i6 = 0; i6  < D6; ++i6)
for(size_t i7 = 0; i7  < D7; ++i7) arr[i1][i2][i3][i4][i5][i6][i7] = in[i1][i2][i3][i4][i5][i6][i7];
}
};

template <typename T>
struct __nv_lambda_field_type {
typedef T type;};
template<typename T, size_t D1>
struct __nv_lambda_field_type<T [D1]> {
typedef __nv_lambda_array_wrapper<T [D1]> type;
};

template<typename T, size_t D1>
struct __nv_lambda_field_type<const T [D1]> {
typedef const __nv_lambda_array_wrapper<T [D1]> type;
};

template<typename T, size_t D1, size_t D2>
struct __nv_lambda_field_type<T [D1][D2]> {
typedef __nv_lambda_array_wrapper<T [D1][D2]> type;
};

template<typename T, size_t D1, size_t D2>
struct __nv_lambda_field_type<const T [D1][D2]> {
typedef const __nv_lambda_array_wrapper<T [D1][D2]> type;
};

template<typename T, size_t D1, size_t D2, size_t D3>
struct __nv_lambda_field_type<T [D1][D2][D3]> {
typedef __nv_lambda_array_wrapper<T [D1][D2][D3]> type;
};

template<typename T, size_t D1, size_t D2, size_t D3>
struct __nv_lambda_field_type<const T [D1][D2][D3]> {
typedef const __nv_lambda_array_wrapper<T [D1][D2][D3]> type;
};

template<typename T, size_t D1, size_t D2, size_t D3, size_t D4>
struct __nv_lambda_field_type<T [D1][D2][D3][D4]> {
typedef __nv_lambda_array_wrapper<T [D1][D2][D3][D4]> type;
};

template<typename T, size_t D1, size_t D2, size_t D3, size_t D4>
struct __nv_lambda_field_type<const T [D1][D2][D3][D4]> {
typedef const __nv_lambda_array_wrapper<T [D1][D2][D3][D4]> type;
};

template<typename T, size_t D1, size_t D2, size_t D3, size_t D4, size_t D5>
struct __nv_lambda_field_type<T [D1][D2][D3][D4][D5]> {
typedef __nv_lambda_array_wrapper<T [D1][D2][D3][D4][D5]> type;
};

template<typename T, size_t D1, size_t D2, size_t D3, size_t D4, size_t D5>
struct __nv_lambda_field_type<const T [D1][D2][D3][D4][D5]> {
typedef const __nv_lambda_array_wrapper<T [D1][D2][D3][D4][D5]> type;
};

template<typename T, size_t D1, size_t D2, size_t D3, size_t D4, size_t D5, size_t D6>
struct __nv_lambda_field_type<T [D1][D2][D3][D4][D5][D6]> {
typedef __nv_lambda_array_wrapper<T [D1][D2][D3][D4][D5][D6]> type;
};

template<typename T, size_t D1, size_t D2, size_t D3, size_t D4, size_t D5, size_t D6>
struct __nv_lambda_field_type<const T [D1][D2][D3][D4][D5][D6]> {
typedef const __nv_lambda_array_wrapper<T [D1][D2][D3][D4][D5][D6]> type;
};

template<typename T, size_t D1, size_t D2, size_t D3, size_t D4, size_t D5, size_t D6, size_t D7>
struct __nv_lambda_field_type<T [D1][D2][D3][D4][D5][D6][D7]> {
typedef __nv_lambda_array_wrapper<T [D1][D2][D3][D4][D5][D6][D7]> type;
};

template<typename T, size_t D1, size_t D2, size_t D3, size_t D4, size_t D5, size_t D6, size_t D7>
struct __nv_lambda_field_type<const T [D1][D2][D3][D4][D5][D6][D7]> {
typedef const __nv_lambda_array_wrapper<T [D1][D2][D3][D4][D5][D6][D7]> type;
};
template <typename Tag,typename...CapturedVarTypePack>
struct __nv_dl_wrapper_t {
static_assert(sizeof...(CapturedVarTypePack) == 0,"nvcc internal error: unexpected number of captures!");
};
template <typename Tag>
struct __nv_dl_wrapper_t<Tag> {
__nv_dl_wrapper_t(Tag) { }
template <typename...U1>
int operator()(U1...) { return 0; }
};
template <typename U, U func, typename Return, unsigned>
struct __nv_dl_trailing_return_tag { };

template <typename U, U func, typename Return, unsigned Id>
struct __nv_dl_wrapper_t<__nv_dl_trailing_return_tag<U, func, Return, Id> > {
  __nv_dl_wrapper_t(__nv_dl_trailing_return_tag<U, func, Return, Id>) { }

  template <typename...U1> Return operator()(U1...) { __builtin_unreachable(); }
}; 


namespace {template <typename Tag, typename OpFuncR, typename ...OpFuncArgs>
struct __nv_hdl_helper {
  typedef void * (*fp_copier_t)(void *);
  typedef OpFuncR (*fp_caller_t)(void *, OpFuncArgs...);
  typedef void (*fp_deleter_t) (void *);
  typedef OpFuncR (*fp_noobject_caller_t)(OpFuncArgs...);
  static fp_copier_t fp_copier;
  static fp_deleter_t fp_deleter;
  static fp_caller_t fp_caller;
  static fp_noobject_caller_t fp_noobject_caller;
};

template <typename Tag, typename OpFuncR, typename ...OpFuncArgs>
typename __nv_hdl_helper<Tag, OpFuncR, OpFuncArgs...>::fp_copier_t __nv_hdl_helper<Tag, OpFuncR, OpFuncArgs...>::fp_copier;

template <typename Tag, typename OpFuncR, typename ...OpFuncArgs>
typename __nv_hdl_helper<Tag, OpFuncR, OpFuncArgs...>::fp_deleter_t __nv_hdl_helper<Tag, OpFuncR, OpFuncArgs...>::fp_deleter;

template <typename Tag, typename OpFuncR, typename ...OpFuncArgs>
typename __nv_hdl_helper<Tag, OpFuncR, OpFuncArgs...>::fp_caller_t __nv_hdl_helper<Tag, OpFuncR, OpFuncArgs...>::fp_caller;
template <typename Tag, typename OpFuncR, typename ...OpFuncArgs>
typename __nv_hdl_helper<Tag, OpFuncR, OpFuncArgs...>::fp_noobject_caller_t __nv_hdl_helper<Tag, OpFuncR, OpFuncArgs...>::fp_noobject_caller;
}
template <bool IsMutable, bool HasFuncPtrConv, bool NeverThrows, typename Tag, typename OpFunc,typename...CapturedVarTypePack>
struct __nv_hdl_wrapper_t {
static_assert(sizeof...(CapturedVarTypePack) == 0,"nvcc internal error: unexpected number of captures in __host__ __device__ lambda!");
};

template <bool IsMutable, bool HasFuncPtrConv,typename ...CaptureArgs>
struct __nv_hdl_helper_trait_outer {
template <typename Tag, typename Lambda>
struct __nv_hdl_helper_trait : public  __nv_hdl_helper_trait<Tag,  decltype(&Lambda::operator())> { };
template <typename Tag, typename C, typename R,  typename... OpFuncArgs>
struct __nv_hdl_helper_trait<Tag,  R(C::*)(OpFuncArgs...) const>
{
template <typename Lambda>
static auto get(Lambda lam, CaptureArgs... args) ->  __nv_hdl_wrapper_t<IsMutable, HasFuncPtrConv, false, Tag, R(OpFuncArgs...),  CaptureArgs...>;
};

template <typename Tag, typename C, typename R,  typename... OpFuncArgs>
struct __nv_hdl_helper_trait<Tag,  R(C::*)(OpFuncArgs...)>
{
template <typename Lambda>
 static auto get(Lambda lam, CaptureArgs... args) -> __nv_hdl_wrapper_t<IsMutable, HasFuncPtrConv,false, Tag, R(OpFuncArgs...), CaptureArgs...>;

};
template <typename Tag, typename C, typename R,  typename... OpFuncArgs>
struct __nv_hdl_helper_trait<Tag,  R(C::*)(OpFuncArgs...) const noexcept>
{
template <typename Lambda>
static auto get(Lambda lam, CaptureArgs... args) ->  __nv_hdl_wrapper_t<IsMutable, HasFuncPtrConv, true, Tag, R(OpFuncArgs...),  CaptureArgs...>;
};

template <typename Tag, typename C, typename R,  typename... OpFuncArgs>
struct __nv_hdl_helper_trait<Tag,  R(C::*)(OpFuncArgs...) noexcept>
{
template <typename Lambda>
 static auto get(Lambda lam, CaptureArgs... args) -> __nv_hdl_wrapper_t<IsMutable, HasFuncPtrConv, true, Tag, R(OpFuncArgs...), CaptureArgs...>;

};
};
template<bool IsMutable, bool HasFuncPtrConv, typename Tag, typename...CaptureArgs>
struct __nv_hdl_create_wrapper_t {
template <typename Lambda>
static auto __nv_hdl_create_wrapper(Lambda &&lam, CaptureArgs... args) -> decltype(__nv_hdl_helper_trait_outer<IsMutable, HasFuncPtrConv, CaptureArgs...>::template __nv_hdl_helper_trait<Tag, Lambda>::get(lam, args...)) {
typedef decltype(__nv_hdl_helper_trait_outer<IsMutable, HasFuncPtrConv, CaptureArgs...>::template __nv_hdl_helper_trait<Tag, Lambda>::get(lam, args...)) container_type;
return container_type(Tag{}, std::move(lam), args...);
}
};

template<typename T> struct __nv_lambda_trait_remove_const { typedef T type; };
template<typename T> struct __nv_lambda_trait_remove_const<T  const> { typedef T type; };
template<typename T> struct __nv_lambda_trait_remove_volatile { typedef T type; };
template<typename T> struct __nv_lambda_trait_remove_volatile <T  volatile> {  typedef T type; };
template<typename T> struct __nv_lambda_trait_remove_cv {
typedef typename  __nv_lambda_trait_remove_const< typename  __nv_lambda_trait_remove_volatile<T>::type >::type type;
};

template <typename T>
struct __nv_extended_device_lambda_trait_helper {
  static const bool value = false;
};
template <typename T1, typename...Pack>
struct __nv_extended_device_lambda_trait_helper<__nv_dl_wrapper_t<T1, Pack...> > {
  static const bool value = true;
};
#define __nv_is_extended_device_lambda_closure_type(X) __nv_extended_device_lambda_trait_helper< typename __nv_lambda_trait_remove_cv<X>::type>::value

template<typename T> struct __nv_lambda_trait_remove_dl_wrapper { typedef T type; };
template<typename T> struct __nv_lambda_trait_remove_dl_wrapper< __nv_dl_wrapper_t<T> > { typedef T type; };

template <typename T>
struct __nv_extended_device_lambda_with_trailing_return_trait_helper {
  static const bool value = false;
};
template <typename U, U func, typename Return, unsigned Id, typename...Pack>
struct __nv_extended_device_lambda_with_trailing_return_trait_helper<__nv_dl_wrapper_t<__nv_dl_trailing_return_tag<U, func, Return, Id>, Pack...> > {
  static const bool value = true;
};
#define __nv_is_extended_device_lambda_with_preserved_return_type(X) __nv_extended_device_lambda_with_trailing_return_trait_helper< typename __nv_lambda_trait_remove_cv<X>::type >::value

template <typename>
struct __nv_extended_host_device_lambda_trait_helper {
  static const bool value = false;
};
template <bool B1, bool B2, bool B3, typename T1, typename T2, typename...Pack>
struct __nv_extended_host_device_lambda_trait_helper<__nv_hdl_wrapper_t<B1, B2, B3, T1, T2, Pack...> > {
  static const bool value = true;
};
#define __nv_is_extended_host_device_lambda_closure_type(X)  __nv_extended_host_device_lambda_trait_helper< typename __nv_lambda_trait_remove_cv<X>::type>::value

#if 0
# 124 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime.h" 3
struct __nv_lambda_preheader_injection { }; 
#endif
# 206 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime.h" 3
template< class T> static inline cudaError_t 
# 207
cudaLaunchKernel(T *
# 208
func, dim3 
# 209
gridDim, dim3 
# 210
blockDim, void **
# 211
args, size_t 
# 212
sharedMem = 0, cudaStream_t 
# 213
stream = 0) 
# 215
{ 
# 216
return ::cudaLaunchKernel((const void *)func, gridDim, blockDim, args, sharedMem, stream); 
# 217
} 
# 277 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime.h" 3
template< class ...ExpTypes, class ...ActTypes> static inline cudaError_t 
# 278
cudaLaunchKernelEx(const cudaLaunchConfig_t *
# 279
config, void (*
# 280
kernel)(ExpTypes ...), ActTypes &&...
# 281
args) 
# 283
{ 
# 284
return [&](ExpTypes ...coercedArgs) { 
# 285
void *pArgs[] = {(&coercedArgs)...}; 
# 286
return ::cudaLaunchKernelExC(config, (const void *)(kernel), pArgs); 
# 287
} (std::forward< ActTypes> (args)...); 
# 288
} 
# 341 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime.h" 3
template< class T> static inline cudaError_t 
# 342
cudaLaunchCooperativeKernel(T *
# 343
func, dim3 
# 344
gridDim, dim3 
# 345
blockDim, void **
# 346
args, size_t 
# 347
sharedMem = 0, cudaStream_t 
# 348
stream = 0) 
# 350
{ 
# 351
return ::cudaLaunchCooperativeKernel((const void *)func, gridDim, blockDim, args, sharedMem, stream); 
# 352
} 
# 385 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime.h" 3
static inline cudaError_t cudaEventCreate(cudaEvent_t *
# 386
event, unsigned 
# 387
flags) 
# 389
{ 
# 390
return ::cudaEventCreateWithFlags(event, flags); 
# 391
} 
# 429 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime.h" 3
static inline cudaError_t cudaGraphInstantiate(cudaGraphExec_t *
# 430
pGraphExec, cudaGraph_t 
# 431
graph, cudaGraphNode_t *
# 432
pErrorNode, char *
# 433
pLogBuffer, size_t 
# 434
bufferSize) 
# 436
{ 
# 437
(void)pErrorNode; 
# 438
(void)pLogBuffer; 
# 439
(void)bufferSize; 
# 440
return ::cudaGraphInstantiate(pGraphExec, graph, 0); 
# 441
} 
# 500 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime.h" 3
static inline cudaError_t cudaMallocHost(void **
# 501
ptr, size_t 
# 502
size, unsigned 
# 503
flags) 
# 505
{ 
# 506
return ::cudaHostAlloc(ptr, size, flags); 
# 507
} 
# 509
template< class T> static inline cudaError_t 
# 510
cudaHostAlloc(T **
# 511
ptr, size_t 
# 512
size, unsigned 
# 513
flags) 
# 515
{ 
# 516
return ::cudaHostAlloc((void **)((void *)ptr), size, flags); 
# 517
} 
# 519
template< class T> static inline cudaError_t 
# 520
cudaHostGetDevicePointer(T **
# 521
pDevice, void *
# 522
pHost, unsigned 
# 523
flags) 
# 525
{ 
# 526
return ::cudaHostGetDevicePointer((void **)((void *)pDevice), pHost, flags); 
# 527
} 
# 629 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime.h" 3
template< class T> static inline cudaError_t 
# 630
cudaMallocManaged(T **
# 631
devPtr, size_t 
# 632
size, unsigned 
# 633
flags = 1) 
# 635
{ 
# 636
return ::cudaMallocManaged((void **)((void *)devPtr), size, flags); 
# 637
} 
# 647 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime.h" 3
template< class T> cudaError_t 
# 648
cudaMemAdvise(T *
# 649
devPtr, size_t 
# 650
count, cudaMemoryAdvise 
# 651
advice, cudaMemLocation 
# 652
location) 
# 654
{ 
# 655
return ::cudaMemAdvise_v2((const void *)devPtr, count, advice, location); 
# 656
} 
# 658
template< class T> static inline cudaError_t 
# 659
cudaMemPrefetchAsync(T *
# 660
devPtr, size_t 
# 661
count, cudaMemLocation 
# 662
location, unsigned 
# 663
flags, cudaStream_t 
# 664
stream = 0) 
# 666
{ 
# 667
return ::cudaMemPrefetchAsync_v2((const void *)devPtr, count, location, flags, stream); 
# 668
} 
# 750 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime.h" 3
template< class T> static inline cudaError_t 
# 751
cudaStreamAttachMemAsync(cudaStream_t 
# 752
stream, T *
# 753
devPtr, size_t 
# 754
length = 0, unsigned 
# 755
flags = 4) 
# 757
{ 
# 758
return ::cudaStreamAttachMemAsync(stream, (void *)devPtr, length, flags); 
# 759
} 
# 761
template< class T> inline cudaError_t 
# 762
cudaMalloc(T **
# 763
devPtr, size_t 
# 764
size) 
# 766
{ 
# 767
return ::cudaMalloc((void **)((void *)devPtr), size); 
# 768
} 
# 770
template< class T> static inline cudaError_t 
# 771
cudaMallocHost(T **
# 772
ptr, size_t 
# 773
size, unsigned 
# 774
flags = 0) 
# 776
{ 
# 777
return cudaMallocHost((void **)((void *)ptr), size, flags); 
# 778
} 
# 780
template< class T> static inline cudaError_t 
# 781
cudaMallocPitch(T **
# 782
devPtr, size_t *
# 783
pitch, size_t 
# 784
width, size_t 
# 785
height) 
# 787
{ 
# 788
return ::cudaMallocPitch((void **)((void *)devPtr), pitch, width, height); 
# 789
} 
# 800 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime.h" 3
static inline cudaError_t cudaMallocAsync(void **
# 801
ptr, size_t 
# 802
size, cudaMemPool_t 
# 803
memPool, cudaStream_t 
# 804
stream) 
# 806
{ 
# 807
return ::cudaMallocFromPoolAsync(ptr, size, memPool, stream); 
# 808
} 
# 810
template< class T> static inline cudaError_t 
# 811
cudaMallocAsync(T **
# 812
ptr, size_t 
# 813
size, cudaMemPool_t 
# 814
memPool, cudaStream_t 
# 815
stream) 
# 817
{ 
# 818
return ::cudaMallocFromPoolAsync((void **)((void *)ptr), size, memPool, stream); 
# 819
} 
# 821
template< class T> static inline cudaError_t 
# 822
cudaMallocAsync(T **
# 823
ptr, size_t 
# 824
size, cudaStream_t 
# 825
stream) 
# 827
{ 
# 828
return ::cudaMallocAsync((void **)((void *)ptr), size, stream); 
# 829
} 
# 831
template< class T> static inline cudaError_t 
# 832
cudaMallocFromPoolAsync(T **
# 833
ptr, size_t 
# 834
size, cudaMemPool_t 
# 835
memPool, cudaStream_t 
# 836
stream) 
# 838
{ 
# 839
return ::cudaMallocFromPoolAsync((void **)((void *)ptr), size, memPool, stream); 
# 840
} 
# 879 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime.h" 3
template< class T> static inline cudaError_t 
# 880
cudaMemcpyToSymbol(const T &
# 881
symbol, const void *
# 882
src, size_t 
# 883
count, size_t 
# 884
offset = 0, cudaMemcpyKind 
# 885
kind = cudaMemcpyHostToDevice) 
# 887
{ 
# 888
return ::cudaMemcpyToSymbol((const void *)(&symbol), src, count, offset, kind); 
# 889
} 
# 933 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime.h" 3
template< class T> static inline cudaError_t 
# 934
cudaMemcpyToSymbolAsync(const T &
# 935
symbol, const void *
# 936
src, size_t 
# 937
count, size_t 
# 938
offset = 0, cudaMemcpyKind 
# 939
kind = cudaMemcpyHostToDevice, cudaStream_t 
# 940
stream = 0) 
# 942
{ 
# 943
return ::cudaMemcpyToSymbolAsync((const void *)(&symbol), src, count, offset, kind, stream); 
# 944
} 
# 981 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime.h" 3
template< class T> static inline cudaError_t 
# 982
cudaMemcpyFromSymbol(void *
# 983
dst, const T &
# 984
symbol, size_t 
# 985
count, size_t 
# 986
offset = 0, cudaMemcpyKind 
# 987
kind = cudaMemcpyDeviceToHost) 
# 989
{ 
# 990
return ::cudaMemcpyFromSymbol(dst, (const void *)(&symbol), count, offset, kind); 
# 991
} 
# 1035 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime.h" 3
template< class T> static inline cudaError_t 
# 1036
cudaMemcpyFromSymbolAsync(void *
# 1037
dst, const T &
# 1038
symbol, size_t 
# 1039
count, size_t 
# 1040
offset = 0, cudaMemcpyKind 
# 1041
kind = cudaMemcpyDeviceToHost, cudaStream_t 
# 1042
stream = 0) 
# 1044
{ 
# 1045
return ::cudaMemcpyFromSymbolAsync(dst, (const void *)(&symbol), count, offset, kind, stream); 
# 1046
} 
# 1104 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime.h" 3
template< class T> static inline cudaError_t 
# 1105
cudaGraphAddMemcpyNodeToSymbol(cudaGraphNode_t *
# 1106
pGraphNode, cudaGraph_t 
# 1107
graph, const cudaGraphNode_t *
# 1108
pDependencies, size_t 
# 1109
numDependencies, const T &
# 1110
symbol, const void *
# 1111
src, size_t 
# 1112
count, size_t 
# 1113
offset, cudaMemcpyKind 
# 1114
kind) 
# 1115
{ 
# 1116
return ::cudaGraphAddMemcpyNodeToSymbol(pGraphNode, graph, pDependencies, numDependencies, (const void *)(&symbol), src, count, offset, kind); 
# 1117
} 
# 1175 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime.h" 3
template< class T> static inline cudaError_t 
# 1176
cudaGraphAddMemcpyNodeFromSymbol(cudaGraphNode_t *
# 1177
pGraphNode, cudaGraph_t 
# 1178
graph, const cudaGraphNode_t *
# 1179
pDependencies, size_t 
# 1180
numDependencies, void *
# 1181
dst, const T &
# 1182
symbol, size_t 
# 1183
count, size_t 
# 1184
offset, cudaMemcpyKind 
# 1185
kind) 
# 1186
{ 
# 1187
return ::cudaGraphAddMemcpyNodeFromSymbol(pGraphNode, graph, pDependencies, numDependencies, dst, (const void *)(&symbol), count, offset, kind); 
# 1188
} 
# 1226 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime.h" 3
template< class T> static inline cudaError_t 
# 1227
cudaGraphMemcpyNodeSetParamsToSymbol(cudaGraphNode_t 
# 1228
node, const T &
# 1229
symbol, const void *
# 1230
src, size_t 
# 1231
count, size_t 
# 1232
offset, cudaMemcpyKind 
# 1233
kind) 
# 1234
{ 
# 1235
return ::cudaGraphMemcpyNodeSetParamsToSymbol(node, (const void *)(&symbol), src, count, offset, kind); 
# 1236
} 
# 1274 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime.h" 3
template< class T> static inline cudaError_t 
# 1275
cudaGraphMemcpyNodeSetParamsFromSymbol(cudaGraphNode_t 
# 1276
node, void *
# 1277
dst, const T &
# 1278
symbol, size_t 
# 1279
count, size_t 
# 1280
offset, cudaMemcpyKind 
# 1281
kind) 
# 1282
{ 
# 1283
return ::cudaGraphMemcpyNodeSetParamsFromSymbol(node, dst, (const void *)(&symbol), count, offset, kind); 
# 1284
} 
# 1332 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime.h" 3
template< class T> static inline cudaError_t 
# 1333
cudaGraphExecMemcpyNodeSetParamsToSymbol(cudaGraphExec_t 
# 1334
hGraphExec, cudaGraphNode_t 
# 1335
node, const T &
# 1336
symbol, const void *
# 1337
src, size_t 
# 1338
count, size_t 
# 1339
offset, cudaMemcpyKind 
# 1340
kind) 
# 1341
{ 
# 1342
return ::cudaGraphExecMemcpyNodeSetParamsToSymbol(hGraphExec, node, (const void *)(&symbol), src, count, offset, kind); 
# 1343
} 
# 1391 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime.h" 3
template< class T> static inline cudaError_t 
# 1392
cudaGraphExecMemcpyNodeSetParamsFromSymbol(cudaGraphExec_t 
# 1393
hGraphExec, cudaGraphNode_t 
# 1394
node, void *
# 1395
dst, const T &
# 1396
symbol, size_t 
# 1397
count, size_t 
# 1398
offset, cudaMemcpyKind 
# 1399
kind) 
# 1400
{ 
# 1401
return ::cudaGraphExecMemcpyNodeSetParamsFromSymbol(hGraphExec, node, dst, (const void *)(&symbol), count, offset, kind); 
# 1402
} 
# 1405
static inline cudaError_t cudaGraphExecUpdate(cudaGraphExec_t hGraphExec, cudaGraph_t hGraph, cudaGraphNode_t *hErrorNode_out, cudaGraphExecUpdateResult *updateResult_out) 
# 1406
{ 
# 1407
cudaGraphExecUpdateResultInfo resultInfo; 
# 1408
cudaError_t status = cudaGraphExecUpdate(hGraphExec, hGraph, &resultInfo); 
# 1409
if (hErrorNode_out) { 
# 1410
(*hErrorNode_out) = (resultInfo.errorNode); 
# 1411
}  
# 1412
if (updateResult_out) { 
# 1413
(*updateResult_out) = (resultInfo.result); 
# 1414
}  
# 1415
return status; 
# 1416
} 
# 1444 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime.h" 3
template< class T> static inline cudaError_t 
# 1445
cudaUserObjectCreate(cudaUserObject_t *
# 1446
object_out, T *
# 1447
objectToWrap, unsigned 
# 1448
initialRefcount, unsigned 
# 1449
flags) 
# 1450
{ 
# 1451
return ::cudaUserObjectCreate(object_out, objectToWrap, [](void *
# 1454
vpObj) { delete (reinterpret_cast< T *>(vpObj)); } , initialRefcount, flags); 
# 1457
} 
# 1459
template< class T> static inline cudaError_t 
# 1460
cudaUserObjectCreate(cudaUserObject_t *
# 1461
object_out, T *
# 1462
objectToWrap, unsigned 
# 1463
initialRefcount, cudaUserObjectFlags 
# 1464
flags) 
# 1465
{ 
# 1466
return cudaUserObjectCreate(object_out, objectToWrap, initialRefcount, (unsigned)flags); 
# 1467
} 
# 1494 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime.h" 3
template< class T> static inline cudaError_t 
# 1495
cudaGetSymbolAddress(void **
# 1496
devPtr, const T &
# 1497
symbol) 
# 1499
{ 
# 1500
return ::cudaGetSymbolAddress(devPtr, (const void *)(&symbol)); 
# 1501
} 
# 1526 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime.h" 3
template< class T> static inline cudaError_t 
# 1527
cudaGetSymbolSize(size_t *
# 1528
size, const T &
# 1529
symbol) 
# 1531
{ 
# 1532
return ::cudaGetSymbolSize(size, (const void *)(&symbol)); 
# 1533
} 
# 1578 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime.h" 3
template< class T> static inline cudaError_t 
# 1579
cudaFuncSetCacheConfig(T *
# 1580
func, cudaFuncCache 
# 1581
cacheConfig) 
# 1583
{ 
# 1584
return ::cudaFuncSetCacheConfig((const void *)func, cacheConfig); 
# 1585
} 
# 1587
template< class T> 
# 1589
__attribute((deprecated)) static inline cudaError_t 
# 1590
cudaFuncSetSharedMemConfig(T *
# 1591
func, cudaSharedMemConfig 
# 1592
config) 
# 1594
{ 
# 1596
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 1601
return ::cudaFuncSetSharedMemConfig((const void *)func, config); 
# 1603
#pragma GCC diagnostic pop
# 1605
} 
# 1637 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime.h" 3
template< class T> inline cudaError_t 
# 1638
cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *
# 1639
numBlocks, T 
# 1640
func, int 
# 1641
blockSize, size_t 
# 1642
dynamicSMemSize) 
# 1643
{ 
# 1644
return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void *)func, blockSize, dynamicSMemSize, 0); 
# 1645
} 
# 1689 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime.h" 3
template< class T> inline cudaError_t 
# 1690
cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *
# 1691
numBlocks, T 
# 1692
func, int 
# 1693
blockSize, size_t 
# 1694
dynamicSMemSize, unsigned 
# 1695
flags) 
# 1696
{ 
# 1697
return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void *)func, blockSize, dynamicSMemSize, flags); 
# 1698
} 
# 1703
class __cudaOccupancyB2DHelper { 
# 1704
size_t n; 
# 1706
public: __cudaOccupancyB2DHelper(size_t n_) : n(n_) { } 
# 1707
size_t operator()(int) 
# 1708
{ 
# 1709
return n; 
# 1710
} 
# 1711
}; 
# 1759 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime.h" 3
template< class UnaryFunction, class T> static inline cudaError_t 
# 1760
cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(int *
# 1761
minGridSize, int *
# 1762
blockSize, T 
# 1763
func, UnaryFunction 
# 1764
blockSizeToDynamicSMemSize, int 
# 1765
blockSizeLimit = 0, unsigned 
# 1766
flags = 0) 
# 1767
{ 
# 1768
cudaError_t status; 
# 1771
int device; 
# 1772
cudaFuncAttributes attr; 
# 1775
int maxThreadsPerMultiProcessor; 
# 1776
int warpSize; 
# 1777
int devMaxThreadsPerBlock; 
# 1778
int multiProcessorCount; 
# 1779
int funcMaxThreadsPerBlock; 
# 1780
int occupancyLimit; 
# 1781
int granularity; 
# 1784
int maxBlockSize = 0; 
# 1785
int numBlocks = 0; 
# 1786
int maxOccupancy = 0; 
# 1789
int blockSizeToTryAligned; 
# 1790
int blockSizeToTry; 
# 1791
int blockSizeLimitAligned; 
# 1792
int occupancyInBlocks; 
# 1793
int occupancyInThreads; 
# 1794
size_t dynamicSMemSize; 
# 1800
if (((!minGridSize) || (!blockSize)) || (!func)) { 
# 1801
return cudaErrorInvalidValue; 
# 1802
}  
# 1808
status = ::cudaGetDevice(&device); 
# 1809
if (status != (cudaSuccess)) { 
# 1810
return status; 
# 1811
}  
# 1813
status = cudaDeviceGetAttribute(&maxThreadsPerMultiProcessor, cudaDevAttrMaxThreadsPerMultiProcessor, device); 
# 1817
if (status != (cudaSuccess)) { 
# 1818
return status; 
# 1819
}  
# 1821
status = cudaDeviceGetAttribute(&warpSize, cudaDevAttrWarpSize, device); 
# 1825
if (status != (cudaSuccess)) { 
# 1826
return status; 
# 1827
}  
# 1829
status = cudaDeviceGetAttribute(&devMaxThreadsPerBlock, cudaDevAttrMaxThreadsPerBlock, device); 
# 1833
if (status != (cudaSuccess)) { 
# 1834
return status; 
# 1835
}  
# 1837
status = cudaDeviceGetAttribute(&multiProcessorCount, cudaDevAttrMultiProcessorCount, device); 
# 1841
if (status != (cudaSuccess)) { 
# 1842
return status; 
# 1843
}  
# 1845
status = cudaFuncGetAttributes(&attr, func); 
# 1846
if (status != (cudaSuccess)) { 
# 1847
return status; 
# 1848
}  
# 1850
funcMaxThreadsPerBlock = (attr.maxThreadsPerBlock); 
# 1856
occupancyLimit = maxThreadsPerMultiProcessor; 
# 1857
granularity = warpSize; 
# 1859
if (blockSizeLimit == 0) { 
# 1860
blockSizeLimit = devMaxThreadsPerBlock; 
# 1861
}  
# 1863
if (devMaxThreadsPerBlock < blockSizeLimit) { 
# 1864
blockSizeLimit = devMaxThreadsPerBlock; 
# 1865
}  
# 1867
if (funcMaxThreadsPerBlock < blockSizeLimit) { 
# 1868
blockSizeLimit = funcMaxThreadsPerBlock; 
# 1869
}  
# 1871
blockSizeLimitAligned = (((blockSizeLimit + (granularity - 1)) / granularity) * granularity); 
# 1873
for (blockSizeToTryAligned = blockSizeLimitAligned; blockSizeToTryAligned > 0; blockSizeToTryAligned -= granularity) { 
# 1877
if (blockSizeLimit < blockSizeToTryAligned) { 
# 1878
blockSizeToTry = blockSizeLimit; 
# 1879
} else { 
# 1880
blockSizeToTry = blockSizeToTryAligned; 
# 1881
}  
# 1883
dynamicSMemSize = blockSizeToDynamicSMemSize(blockSizeToTry); 
# 1885
status = cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(&occupancyInBlocks, func, blockSizeToTry, dynamicSMemSize, flags); 
# 1892
if (status != (cudaSuccess)) { 
# 1893
return status; 
# 1894
}  
# 1896
occupancyInThreads = (blockSizeToTry * occupancyInBlocks); 
# 1898
if (occupancyInThreads > maxOccupancy) { 
# 1899
maxBlockSize = blockSizeToTry; 
# 1900
numBlocks = occupancyInBlocks; 
# 1901
maxOccupancy = occupancyInThreads; 
# 1902
}  
# 1906
if (occupancyLimit == maxOccupancy) { 
# 1907
break; 
# 1908
}  
# 1909
}  
# 1917
(*minGridSize) = (numBlocks * multiProcessorCount); 
# 1918
(*blockSize) = maxBlockSize; 
# 1920
return status; 
# 1921
} 
# 1955 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime.h" 3
template< class UnaryFunction, class T> static inline cudaError_t 
# 1956
cudaOccupancyMaxPotentialBlockSizeVariableSMem(int *
# 1957
minGridSize, int *
# 1958
blockSize, T 
# 1959
func, UnaryFunction 
# 1960
blockSizeToDynamicSMemSize, int 
# 1961
blockSizeLimit = 0) 
# 1962
{ 
# 1963
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, blockSizeToDynamicSMemSize, blockSizeLimit, 0); 
# 1964
} 
# 2001 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime.h" 3
template< class T> static inline cudaError_t 
# 2002
cudaOccupancyMaxPotentialBlockSize(int *
# 2003
minGridSize, int *
# 2004
blockSize, T 
# 2005
func, size_t 
# 2006
dynamicSMemSize = 0, int 
# 2007
blockSizeLimit = 0) 
# 2008
{ 
# 2009
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, ((__cudaOccupancyB2DHelper)(dynamicSMemSize)), blockSizeLimit, 0); 
# 2010
} 
# 2039 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime.h" 3
template< class T> static inline cudaError_t 
# 2040
cudaOccupancyAvailableDynamicSMemPerBlock(size_t *
# 2041
dynamicSmemSize, T *
# 2042
func, int 
# 2043
numBlocks, int 
# 2044
blockSize) 
# 2045
{ 
# 2046
return ::cudaOccupancyAvailableDynamicSMemPerBlock(dynamicSmemSize, (const void *)func, numBlocks, blockSize); 
# 2047
} 
# 2098 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime.h" 3
template< class T> static inline cudaError_t 
# 2099
cudaOccupancyMaxPotentialBlockSizeWithFlags(int *
# 2100
minGridSize, int *
# 2101
blockSize, T 
# 2102
func, size_t 
# 2103
dynamicSMemSize = 0, int 
# 2104
blockSizeLimit = 0, unsigned 
# 2105
flags = 0) 
# 2106
{ 
# 2107
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, ((__cudaOccupancyB2DHelper)(dynamicSMemSize)), blockSizeLimit, flags); 
# 2108
} 
# 2142 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime.h" 3
template< class T> static inline cudaError_t 
# 2143
cudaOccupancyMaxPotentialClusterSize(int *
# 2144
clusterSize, T *
# 2145
func, const cudaLaunchConfig_t *
# 2146
config) 
# 2147
{ 
# 2148
return ::cudaOccupancyMaxPotentialClusterSize(clusterSize, (const void *)func, config); 
# 2149
} 
# 2185 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime.h" 3
template< class T> static inline cudaError_t 
# 2186
cudaOccupancyMaxActiveClusters(int *
# 2187
numClusters, T *
# 2188
func, const cudaLaunchConfig_t *
# 2189
config) 
# 2190
{ 
# 2191
return ::cudaOccupancyMaxActiveClusters(numClusters, (const void *)func, config); 
# 2192
} 
# 2225 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime.h" 3
template< class T> inline cudaError_t 
# 2226
cudaFuncGetAttributes(cudaFuncAttributes *
# 2227
attr, T *
# 2228
entry) 
# 2230
{ 
# 2231
return ::cudaFuncGetAttributes(attr, (const void *)entry); 
# 2232
} 
# 2290 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime.h" 3
template< class T> static inline cudaError_t 
# 2291
cudaFuncSetAttribute(T *
# 2292
func, cudaFuncAttribute 
# 2293
attr, int 
# 2294
value) 
# 2296
{ 
# 2297
return ::cudaFuncSetAttribute((const void *)func, attr, value); 
# 2298
} 
# 2322 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime.h" 3
template< class T> static inline cudaError_t 
# 2323
cudaFuncGetName(const char **
# 2324
name, T *
# 2325
func) 
# 2327
{ 
# 2328
return ::cudaFuncGetName(name, (const void *)func); 
# 2329
} 
# 2345 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime.h" 3
template< class T> static inline cudaError_t 
# 2346
cudaGetKernel(cudaKernel_t *
# 2347
kernelPtr, T *
# 2348
func) 
# 2350
{ 
# 2351
return ::cudaGetKernel(kernelPtr, (const void *)func); 
# 2352
} 
# 2364 "/opt/nvidia/hpc_sdk/Linux_x86_64/24.9/cuda/12.6/include/cuda_runtime.h" 3
#pragma GCC diagnostic pop
# 64 "CMakeCUDACompilerId.cu"
const char *info_compiler = ("INFO:compiler[NVIDIA]"); 
# 66
const char *info_simulate = ("INFO:simulate[GNU]"); 
# 336 "CMakeCUDACompilerId.cu"
const char info_version[] = {'I', 'N', 'F', 'O', ':', 'c', 'o', 'm', 'p', 'i', 'l', 'e', 'r', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', '[', (('0') + ((12 / 10000000) % 10)), (('0') + ((12 / 1000000) % 10)), (('0') + ((12 / 100000) % 10)), (('0') + ((12 / 10000) % 10)), (('0') + ((12 / 1000) % 10)), (('0') + ((12 / 100) % 10)), (('0') + ((12 / 10) % 10)), (('0') + (12 % 10)), '.', (('0') + ((6 / 10000000) % 10)), (('0') + ((6 / 1000000) % 10)), (('0') + ((6 / 100000) % 10)), (('0') + ((6 / 10000) % 10)), (('0') + ((6 / 1000) % 10)), (('0') + ((6 / 100) % 10)), (('0') + ((6 / 10) % 10)), (('0') + (6 % 10)), '.', (('0') + ((20 / 10000000) % 10)), (('0') + ((20 / 1000000) % 10)), (('0') + ((20 / 100000) % 10)), (('0') + ((20 / 10000) % 10)), (('0') + ((20 / 1000) % 10)), (('0') + ((20 / 100) % 10)), (('0') + ((20 / 10) % 10)), (('0') + (20 % 10)), ']', '\000'}; 
# 365 "CMakeCUDACompilerId.cu"
const char info_simulate_version[] = {'I', 'N', 'F', 'O', ':', 's', 'i', 'm', 'u', 'l', 'a', 't', 'e', '_', 'v', 'e', 'r', 's', 'i', 'o', 'n', '[', (('0') + ((11 / 10000000) % 10)), (('0') + ((11 / 1000000) % 10)), (('0') + ((11 / 100000) % 10)), (('0') + ((11 / 10000) % 10)), (('0') + ((11 / 1000) % 10)), (('0') + ((11 / 100) % 10)), (('0') + ((11 / 10) % 10)), (('0') + (11 % 10)), '.', (('0') + ((4 / 10000000) % 10)), (('0') + ((4 / 1000000) % 10)), (('0') + ((4 / 100000) % 10)), (('0') + ((4 / 10000) % 10)), (('0') + ((4 / 1000) % 10)), (('0') + ((4 / 100) % 10)), (('0') + ((4 / 10) % 10)), (('0') + (4 % 10)), ']', '\000'}; 
# 385
const char *info_platform = ("INFO:platform[Linux]"); 
# 386
const char *info_arch = ("INFO:arch[]"); 
# 390
const char *info_language_standard_default = ("INFO:standard_default[17]"); 
# 406
const char *info_language_extensions_default = ("INFO:extensions_default[OFF]"); 
# 418
int main(int argc, char *argv[]) 
# 419
{ 
# 420
int require = 0; 
# 421
require += (info_compiler[argc]); 
# 422
require += (info_platform[argc]); 
# 424
require += (info_version[argc]); 
# 427
require += (info_simulate[argc]); 
# 430
require += (info_simulate_version[argc]); 
# 432
require += (info_language_standard_default[argc]); 
# 433
require += (info_language_extensions_default[argc]); 
# 434
(void)argv; 
# 435
return require; 
# 436
} 

# 1 "CMakeCUDACompilerId.cudafe1.stub.c"
#define _NV_ANON_NAMESPACE _GLOBAL__N__44ecaec3_22_CMakeCUDACompilerId_cu_bd57c623
#ifdef _NV_ANON_NAMESPACE
#endif
# 1 "CMakeCUDACompilerId.cudafe1.stub.c"
#include "CMakeCUDACompilerId.cudafe1.stub.c"
# 1 "CMakeCUDACompilerId.cudafe1.stub.c"
#undef _NV_ANON_NAMESPACE
